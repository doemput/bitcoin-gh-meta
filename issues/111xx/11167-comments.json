[
   {
      "body" : "Would prefer to have simply sending-to (maybe validating/analyzing too?) as a separate PR, before wallet upgrades.\r\n\r\nI'm not sure when it would make sense to convert between P2SH and BIP173...",
      "created_at" : "2017-08-26T22:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165695",
      "id" : 325165695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325165695",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr I agree, but I consider `addwitnessaddress` an RPC to aid with testing, not full support.\r\n\r\n> I'm not sure when it would make sense to convert between P2SH and BIP173...\r\n\r\nI think you're right. I'll remove that.\r\n",
      "created_at" : "2017-08-26T22:38:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165746",
      "id" : 325165746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325165746",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "addwitnessaddress is very much not actual support, it's a test shim.",
      "created_at" : "2017-08-26T22:45:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165977",
      "id" : 325165977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:45:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325165977",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "But it modifies the wallet, no? Seems useful to review independently from the rest. Especially since it has the additional considerations of what happens if you try to use it and then downgrade to an older version...",
      "created_at" : "2017-08-26T22:58:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325166449",
      "id" : 325166449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T22:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325166449",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr Consider that we've since 0.13.1 had support for receiving and spending native witness outputs in the wallet (without that, testing the consensus logic for it would have been much harder), just no way to encode such outputs as strings. So I think the encoding is somewhat orthogonal.\r\n\r\nIt does modify the wallet, but I'm not sure it's worth trying to separate the logic. We only have one data type (`CTxDestination`) to encode things we can receive on or send to. Having the ability to send to something but not being able to encode it ourselves would require separating the two, and I expect would be more work then just implementing it all.\r\n\r\nWallet backward compatibility is only affected when you use an import or `addwitnessaddress` with `p2sh=false` (the default is `true).",
      "created_at" : "2017-08-26T23:00:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325166537",
      "id" : 325166537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-26T23:06:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325166537",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Added support in Python framework, and some integrated some functional tests into the `segwit.py` test.",
      "created_at" : "2017-08-27T07:49:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325182863",
      "id" : 325182863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-08-27T07:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325182863",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411503"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO `bool Decode(const std::string& str, const std::string& hrp, data& d)` feels better, and this way below it can early return.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T13:12:49Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411503",
      "id" : 135411503,
      "original_commit_id" : "6177ca1446f3d274098bebc5df6dda5017cfb928",
      "original_position" : 125,
      "path" : "src/bech32.cpp",
      "position" : 159,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411503",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411584"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Return in new line?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T13:16:30Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {\n+        // Bech32 decoding\n+        int version = bech.second[0];\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                if (data.size() == 20) {\n+                    WitnessV0KeyHash id;\n+                    memcpy(id.begin(), data.data(), 20);\n+                    return id;\n+                }\n+                if (data.size() == 32) {\n+                    WitnessV0ScriptHash id;\n+                    memcpy(id.begin(), data.data(), 32);\n+                    return id;\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) return CNoDestination();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411584",
      "id" : 135411584,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 65,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sort.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T13:17:36Z",
      "diff_hunk" : "@@ -3,15 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"bech32.h\"\n \n #include \"hash.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n #include <assert.h>\n #include <stdint.h>\n #include <string.h>\n #include <vector>\n #include <string>\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411597",
      "id" : 135411597,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411597",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sort.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T13:19:25Z",
      "diff_hunk" : "@@ -0,0 +1,35 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include <stdint.h>\n+#include <vector>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411639",
      "id" : 135411639,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 23,
      "path" : "src/bech32.h",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411639",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Must come first? If not which is the cheapest?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T13:22:52Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411706",
      "id" : 135411706,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 47,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411706",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411722"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Must come first? If not which is the cheapest?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T13:23:35Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411722",
      "id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58822270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135411722",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416365"
         }
      },
      "author_association" : "OWNER",
      "body" : "It's not often used in the Bitcoin Core codebase, but using pairs for multiple returned values is very typical in C++ (see the return type of [std::map::insert](http://en.cppreference.com/w/cpp/container/map/insert) for example). In C++03 it was a bit verbose to use, but with C++11's `auto` types and `std::tie` for assigning to multiple variables, it's pretty convenient. I'd rather stick with the current approach.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T17:07:43Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416365",
      "id" : 135416365,
      "in_reply_to_id" : 135411503,
      "original_commit_id" : "6177ca1446f3d274098bebc5df6dda5017cfb928",
      "original_position" : 125,
      "path" : "src/bech32.cpp",
      "position" : 159,
      "pull_request_review_id" : 58827231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416365",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416491"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T17:12:30Z",
      "diff_hunk" : "@@ -3,15 +3,18 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"bech32.h\"\n \n #include \"hash.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n #include <assert.h>\n #include <stdint.h>\n #include <string.h>\n #include <vector>\n #include <string>\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416491",
      "id" : 135416491,
      "in_reply_to_id" : 135411597,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416491",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416501"
         }
      },
      "author_association" : "OWNER",
      "body" : "bech32 is far cheaper (no basis conversion, no SHA256).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T17:12:51Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416501",
      "id" : 135416501,
      "in_reply_to_id" : 135411706,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 47,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416501",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416505"
         }
      },
      "author_association" : "OWNER",
      "body" : "done",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T17:12:56Z",
      "diff_hunk" : "@@ -235,13 +237,64 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const CNoDestination& no) const { return \"\"; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {\n+        // Bech32 decoding\n+        int version = bech.second[0];\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                if (data.size() == 20) {\n+                    WitnessV0KeyHash id;\n+                    memcpy(id.begin(), data.data(), 20);\n+                    return id;\n+                }\n+                if (data.size() == 32) {\n+                    WitnessV0ScriptHash id;\n+                    memcpy(id.begin(), data.data(), 32);\n+                    return id;\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) return CNoDestination();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416505",
      "id" : 135416505,
      "in_reply_to_id" : 135411584,
      "original_commit_id" : "ee10c3985e11716b27f1eb0a0bec1e0fcef2e9d9",
      "original_position" : 65,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416505",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416509"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T17:13:06Z",
      "diff_hunk" : "@@ -0,0 +1,35 @@\n+/* Copyright (c) 2017 Pieter Wuille\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+#include <stdint.h>\n+#include <vector>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416509",
      "id" : 135416509,
      "in_reply_to_id" : 135411639,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 23,
      "path" : "src/bech32.h",
      "position" : null,
      "pull_request_review_id" : 58827331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416509",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416546"
         }
      },
      "author_association" : "OWNER",
      "body" : "I haven't benchmarked, but Bech32 should be far cheaper (no SHA256, no basis conversion). There should never be overlap between the addresses, so the order shouldn't matter.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T17:14:41Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416546",
      "id" : 135416546,
      "in_reply_to_id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58827359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135416546",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135420123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135420123"
         }
      },
      "author_association" : "OWNER",
      "body" : "I arbitrarily chose a bech32 prefix for regtest. Feel free to bikeshed (it doesn't even need to be just 2 characters).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-27T20:11:53Z",
      "diff_hunk" : "@@ -330,6 +334,8 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"rt\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135420123",
      "id" : 135420123,
      "original_commit_id" : "128c21705204610e15c59a07a0138b3c82a0aac7",
      "original_position" : 23,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : 58830661,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135420123",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491563"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, in terms of functionality the order doesn't matter. But at the moment most addresses  (don't know numbers) are base58 so for now move `bech32::Decode()` after `DecodeBase58Check()`?\r\n\r\nIt would be cool to move this out of `base58.cpp`, follow up maybe?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-28T10:29:46Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491563",
      "id" : 135491563,
      "in_reply_to_id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 58906945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491563",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491736"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-28T10:30:56Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491736",
      "id" : 135491736,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 113,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 58907127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491736",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491824"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-28T10:31:29Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491824",
      "id" : 135491824,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 117,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 58907212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491824",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-28T10:32:14Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;\n+    size_t pos = str.rfind('1');\n+    if (ok && str.size() <= 90 && pos != str.npos && pos >= 1 && pos + 7 <= str.size()) {\n+        data values;\n+        values.resize(str.size() - 1 - pos);\n+        for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+            unsigned char c = str[i + pos + 1];\n+            if (CHARSET_REV[c] == -1) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491958",
      "id" : 135491958,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 124,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 58907350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135491958",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135591494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135591494"
         }
      },
      "author_association" : "OWNER",
      "body" : "> Right, in terms of functionality the order doesn't matter. But at the moment most addresses (don't know numbers) are base58 so for now move bech32::Decode() after DecodeBase58Check()?\r\n\r\nI was using a fail-fast approach, making the thing that most quickly fails first. You're right that as long as there are hardly any bech32 addresses, putting Base58 would be overall faster. But none of this is performance critical anyway...",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-28T18:03:21Z",
      "diff_hunk" : "@@ -212,79 +215,102 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    auto bech = bech32::Decode(str);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135591494",
      "id" : 135591494,
      "in_reply_to_id" : 135411722,
      "original_commit_id" : "ab8d5093fefb0fd13f1b5e79fa1255ea67f2e58d",
      "original_position" : 120,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 59019602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135591494",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671584"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-29T00:57:35Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;\n+    size_t pos = str.rfind('1');\n+    if (ok && str.size() <= 90 && pos != str.npos && pos >= 1 && pos + 7 <= str.size()) {\n+        data values;\n+        values.resize(str.size() - 1 - pos);\n+        for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+            unsigned char c = str[i + pos + 1];\n+            if (CHARSET_REV[c] == -1) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671584",
      "id" : 135671584,
      "in_reply_to_id" : 135491958,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 124,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 59107782,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671593"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-29T00:57:42Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671593",
      "id" : 135671593,
      "in_reply_to_id" : 135491824,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 117,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 59107793,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671593",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671602"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-08-29T00:57:47Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    bool ok = true;\n+    for (size_t i = 0; ok && i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) ok = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671602",
      "id" : 135671602,
      "in_reply_to_id" : 135491736,
      "original_commit_id" : "bfada9e998eefeab2dbe329af0abfbaf1f632df4",
      "original_position" : 113,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 59107801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135671602",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136680925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136680925"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you leave a comment referring the reader to more complete documentation on bech32 (either the BIP or reference repo)? Also would be nice to document somewhere in the codebase what `hrp` stands for.\r\n\r\nI'm thinking something as simple as: \"Bech32 is a data encoding used for some newer address formats. Output consists of a human-readable part (HRP) followed by a separator, then the data itself with a checksum. For more details, see documentation of BIP 173.\"",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-01T23:28:55Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136680925",
      "id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 60259721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136680925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136723550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136723550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Maybe use [toupper](http://en.cppreference.com/w/cpp/string/byte/toupper) here to be more descriptive and succinct.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-03T18:55:24Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136723550",
      "id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60259721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136723550",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725195"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-03T20:09:11Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725195",
      "id" : 136725195,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 60303902,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725208"
         }
      },
      "author_association" : "OWNER",
      "body" : "Unfortunately, toupper is locale-dependent, so it can't be used for consistent behaviour.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-03T20:09:51Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725208",
      "id" : 136725208,
      "in_reply_to_id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60303915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725208",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725506"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`std::toupper(c, std::locale::classic())`?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-03T20:25:08Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725506",
      "id" : 136725506,
      "in_reply_to_id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60304184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725506",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725581"
         }
      },
      "author_association" : "OWNER",
      "body" : "Seems overkill.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-03T20:29:34Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';\n+                dest = unk;\n+            } else {\n                 BOOST_ERROR(\"Bad addrtype: \" << strTest);\n                 continue;\n             }\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(address == exp_base58string, strprintf(\"mismatch: %s: \\\"%s\\\" != \\\"%s\\\"\", strTest, address, exp_base58string));\n+\n+            CTxDestination dest2 = DecodeDestination(address);\n+            BOOST_CHECK_MESSAGE(dest == dest2, strprintf(\"mismatch in encoding: %s\", strTest));\n+\n+            for (char& c : address) {\n+                if (c >= 'a' && c <= 'z') {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725581",
      "id" : 136725581,
      "in_reply_to_id" : 136723550,
      "original_commit_id" : "fe4e51c27417c8ef98ef83679092a0813babdc1a",
      "original_position" : 83,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 60304254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136725581",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Include a test with v1+ address?",
      "created_at" : "2017-09-05T23:22:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327330449",
      "id" : 327330449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-05T23:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327330449",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@instagibbs Done",
      "created_at" : "2017-09-06T00:36:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327341082",
      "id" : 327341082,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T00:36:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327341082",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "super surprising to me that regtest has a different human readable part: `bcrt1`.\r\n\r\nLegacy addresses shared prefix between testnet and regtest. Perhaps note this somewhere in the code and/or in this PR description.",
      "created_at" : "2017-09-06T21:05:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327612679",
      "id" : 327612679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T21:06:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327612679",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> super surprising to me that regtest has a different human readable part: bcrt1.\r\n\r\nThat was surprising to me too, but I found it a pleasant surprise. It's not like prefixes are a very rare resource, this decreases ambiguity, and fits in with regtest getting its own RPC port in #10825.",
      "created_at" : "2017-09-06T21:57:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327623706",
      "id" : 327623706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T21:57:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327623706",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Definitely not arguing against it!\n\nOn Wed, Sep 6, 2017 at 5:58 PM, Wladimir J. van der Laan <\nnotifications@github.com> wrote:\n\n> super surprising to me that regtest has a different human readable part:\n> bcrt1.\n>\n> That was surprising to me too, but I found it a pleasant surprise. It's\n> not like prefixes are a very rare resource, this decreases ambiguity, and\n> fits in with regtest getting its own RPC port in #10825\n> <https://github.com/bitcoin/bitcoin/pull/10825>.\n>\n> Ã¢ÂÂ\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327623706>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AFgC0yE1TXYCzEvLBbEeCPST4eRCXuW4ks5sfxWYgaJpZM4PDot9>\n> .\n>\n",
      "created_at" : "2017-09-06T22:06:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327625447",
      "id" : 327625447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-06T22:06:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327625447",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "move this inside of the else statement below",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-06T23:29:58Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);\n+    if (!w.already_witness) pwallet->AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415679",
      "id" : 137415679,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 102,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61079274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415679",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is more aptly described as a witness program script, since `w.result`  will always be a witness program.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-06T23:31:28Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415870",
      "id" : 137415870,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 101,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61079274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137415870",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424201"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-07T00:43:48Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424201",
      "id" : 137424201,
      "in_reply_to_id" : 137415870,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 101,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61088883,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424201",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424207"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-07T00:43:53Z",
      "diff_hunk" : "@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript redeemscript = GetScriptForDestination(w.result);\n+    if (!w.already_witness) pwallet->AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424207",
      "id" : 137424207,
      "in_reply_to_id" : 137415679,
      "original_commit_id" : "ccc6a163b9e22919c76b0bbe061ed5a6081c2965",
      "original_position" : 102,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61088888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137424207",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "quick nit reminder, TX_WITNESS_UNKNOWN isn't explicitly handled in CombineSignatures/SignStep",
      "created_at" : "2017-09-07T18:30:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327885311",
      "id" : 327885311,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-07T18:30:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327885311",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137915138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137915138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this not ```&data[pubkey_prefix.size()]```  (or ```data.data() +  pubkey_prefix.size()```) ?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T01:26:42Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[1], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137915138",
      "id" : 137915138,
      "original_commit_id" : "2719a42b3b5947f7728530499866eefd4fd5e05a",
      "original_position" : 115,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 61651564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137915138",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK other than those two nits, and excluding the bech32 implementation itself. It looks sane, but I'd like to audit more thoroughly before ACKing.",
      "created_at" : "2017-09-09T01:42:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328246605",
      "id" : 328246605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-09T01:42:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328246605",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137922308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137922308"
         }
      },
      "author_association" : "OWNER",
      "body" : "Nice catch, fixed!",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T09:10:08Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[1], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137922308",
      "id" : 137922308,
      "in_reply_to_id" : 137915138,
      "original_commit_id" : "2719a42b3b5947f7728530499866eefd4fd5e05a",
      "original_position" : 115,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 61658901,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137922308",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923351"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`{ }` just to be consistent with the previous one-line if statements in this function?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T10:23:20Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) return std::make_pair(std::string(), data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923351",
      "id" : 137923351,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 134,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923351",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Tiny nit, end-of-namespace comment? Same for other namespaces in this file and in bech32.h",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T10:23:41Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923359",
      "id" : 137923359,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 105,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923359",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Move `default=true` into the brackets after `optional` to be consistent with other RPCs",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T10:42:12Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923611",
      "id" : 137923611,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 77,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923611",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why BIP173 not Bech32?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T10:49:11Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923711",
      "id" : 137923711,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 81,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923711",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`vSolutions[0].data()`? Same for `TX_WITNESS_V0_SCRIPTHASH` case below",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T10:56:16Z",
      "diff_hunk" : "@@ -198,6 +203,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), &vSolutions[0][0], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923807",
      "id" : 137923807,
      "original_commit_id" : "0e04862cac417ff021c2268fe1ccef178f7dc0ef",
      "original_position" : 34,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 61659932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137923807",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934415"
         }
      },
      "author_association" : "OWNER",
      "body" : "Bech32 is the generic encoding format (and should be contrasted with Base58Check), BIP173 specifies a specific way of encoding SegWit addresses using Bech32 (like P2SH/BIP13 specifies a specific way of encoding BIP16 addresses using Base58Check).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T20:17:52Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934415",
      "id" : 137934415,
      "in_reply_to_id" : 137923711,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 81,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61670221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934415",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934921"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done again - I somehow lost this change.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T20:42:56Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934921",
      "id" : 137934921,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 61670646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934921",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934936"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T20:43:32Z",
      "diff_hunk" : "@@ -198,6 +203,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), &vSolutions[0][0], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934936",
      "id" : 137934936,
      "in_reply_to_id" : 137923807,
      "original_commit_id" : "0e04862cac417ff021c2268fe1ccef178f7dc0ef",
      "original_position" : 34,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 61670666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934936",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934939"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T20:43:38Z",
      "diff_hunk" : "@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional) Embed inside P2SH (default: true)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934939",
      "id" : 137934939,
      "in_reply_to_id" : 137923611,
      "original_commit_id" : "d46216bc25e5126017a2291740f8ce956f19425b",
      "original_position" : 77,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 61670668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934940"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T20:43:43Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) return std::make_pair(std::string(), data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934940",
      "id" : 137934940,
      "in_reply_to_id" : 137923351,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 134,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 61670670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934940",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934943"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-09T20:43:51Z",
      "diff_hunk" : "@@ -0,0 +1,138 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934943",
      "id" : 137934943,
      "in_reply_to_id" : 137923359,
      "original_commit_id" : "25b31c16cacec5936d81b2f7e6dcbb4556c3e581",
      "original_position" : 105,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 61670674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137934943",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I think I've addressed all comments. I've also added a few extra comments in some places.\r\n\r\n> quick nit reminder, TX_WITNESS_UNKNOWN isn't explicitly handled in CombineSignatures/SignStep\r\n\r\nFixed.",
      "created_at" : "2017-09-09T20:44:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328302369",
      "id" : 328302369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-09T20:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328302369",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Rebased on top of #11297 to hopefully address the Travis issue.",
      "created_at" : "2017-09-10T06:50:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328323834",
      "id" : 328323834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-10T06:50:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328323834",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "should fix https://github.com/bitcoin/bitcoin/issues/10924 I made tests on https://github.com/NicolasDorier/bitcoin/commits/importaddresssegwit can you include them @sipa  ? (this one https://github.com/NicolasDorier/bitcoin/commit/a17a74708ddfc8628d5943e0835ff45eb54e06b5)",
      "created_at" : "2017-09-10T07:52:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328326104",
      "id" : 328326104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-10T07:56:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328326104",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@NicolasDorier Cherry-picked with some refactoring and merging into segwit.py.",
      "created_at" : "2017-09-10T19:39:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328366344",
      "id" : 328366344,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-10T19:39:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328366344",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "seems good for me.\r\n\r\nWill try later this PR against NTumbleBit. I am using P2SH-P2WSH right now because core was not supporting otherwise. I should be able to move to pure P2WSH thanks to this PR.",
      "created_at" : "2017-09-11T04:10:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328410572",
      "id" : 328410572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-11T04:10:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328410572",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "FYI, this BIP is now supported in Electrum, and will be part of the next release",
      "created_at" : "2017-09-12T09:08:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328791629",
      "id" : 328791629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-12T09:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/328791629",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2343238?v=4",
         "events_url" : "https://api.github.com/users/ecdsa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ecdsa/followers",
         "following_url" : "https://api.github.com/users/ecdsa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ecdsa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ecdsa",
         "id" : 2343238,
         "login" : "ecdsa",
         "organizations_url" : "https://api.github.com/users/ecdsa/orgs",
         "received_events_url" : "https://api.github.com/users/ecdsa/received_events",
         "repos_url" : "https://api.github.com/users/ecdsa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ecdsa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ecdsa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ecdsa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138758464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138758464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and in other places where an empty string is returned prefer:\r\n```cpp\r\nreturn {};\r\n```\r\nSee https://stackoverflow.com/a/26588207.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-13T22:41:59Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138758464",
      "id" : 138758464,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 113,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62598245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138758464",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760424"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Swap conditions?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-13T22:54:22Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[pubkey_prefix.size()], 20);\n+            return CKeyID(hash);\n+        }\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == 20 + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[script_prefix.size()], 20);\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760424",
      "id" : 138760424,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 159,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62600302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760424",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760859"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\n} // namespace\r\n```",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-13T22:57:01Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760859",
      "id" : 138760859,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 90,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 62600747,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138760859",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138794570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138794570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ohh heh I must have misclicked and put my comment on the wrong line, I thought I pointed this one out already but it seems I just commented on the end of a function",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-14T04:25:20Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138794570",
      "id" : 138794570,
      "in_reply_to_id" : 138760859,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 90,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 62637165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138794570",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807493"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-14T06:36:09Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807493",
      "id" : 138807493,
      "in_reply_to_id" : 138758464,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 113,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62651301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807493",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807508"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-14T06:36:16Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58 decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[pubkey_prefix.size()], 20);\n+            return CKeyID(hash);\n+        }\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == 20 + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[script_prefix.size()], 20);\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.first == params.Bech32HRP() && bech.second.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807508",
      "id" : 138807508,
      "in_reply_to_id" : 138760424,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 159,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 62651314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807524"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-14T06:36:23Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807524",
      "id" : 138807524,
      "in_reply_to_id" : 138760859,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 90,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 62651332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138807524",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138843438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138843438"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```py\r\ntxid = self.nodes[1].sendrawtransaction(rawtxfund)\r\n```\r\nAnd remove above?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-14T09:35:55Z",
      "diff_hunk" : "@@ -570,6 +584,30 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].decoderawtransaction(rawtxfund)[\"txid\"]\n+\n+            self.nodes[1].sendrawtransaction(rawtxfund)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138843438",
      "id" : 138843438,
      "original_commit_id" : "003698729402b9015e101cac3d71d57b7805c0ce",
      "original_position" : 93,
      "path" : "test/functional/segwit.py",
      "position" : null,
      "pull_request_review_id" : 62691977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/138843438",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tACK https://github.com/bitcoin/bitcoin/pull/11167/commits/0571b9271b27ce2767e9c7034c23facb495fab65\r\n\r\nDid a couple commits on top to get hdkey info returned with native segwit keyhashes. Something like this can be done as a quick followup, perhaps a modified version of #11089: https://github.com/instagibbs/bitcoin/commits/fullseg",
      "created_at" : "2017-09-14T21:24:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-329613268",
      "id" : 329613268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-14T21:24:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/329613268",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183195"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this the right copyright header (here and in `bech32.h` and elsewhere)?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T15:43:00Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183195",
      "id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 63083455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183195",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183428"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't see the comment... I think you lost it again.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T15:43:58Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183428",
      "id" : 139183428,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 63083455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183428",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this should be above with the `TX_NULL_DATA` and `TX_NONSTANDARD` cases.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T15:46:07Z",
      "diff_hunk" : "@@ -142,6 +142,9 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n             return ISMINE_SPENDABLE;\n         break;\n     }\n+\n+    case TX_WITNESS_UNKNOWN:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183925",
      "id" : 139183925,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 5,
      "path" : "src/script/ismine.cpp",
      "position" : null,
      "pull_request_review_id" : 63083455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139183925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139186921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139186921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It took me a while to figure out how this function implements Bech32.  Not sure if this is out of scope since you're bringing this reference implementation in from another repo, and maybe these idioms here are common for math code, but as a newcomer to this I would have found it helpful to explain:\r\n\r\na) initializing chk = 1 is how we implement the prepending of a {1} to the values being encoded (which is done to prevent zero-prefixing a valid string from being valid); \r\n\r\nb) chk is a 30-bit integer, and each 5 bits is a coefficient of a degree 5 polynomial over GF(32) (perhaps also give the particular construction of GF(32) used here);\r\n\r\nc) the hardcoded values (0x3b6a57b2UL etc) are similar 30-bit integers, each 5 bits of which represents a coefficient of a degree 5 polynomial; the first of which represents the generator function g(x) for the BCH code, and subsequent values represent alpha * g(x), alpha^2 * g(x), etc. (where alpha is in GF(32) and is a generator of the multiplicative group).  (It might be helpful to others to explicitly write out these polynomials; I did that myself to verify them.)\r\n\r\nd) each step through the loop, we're multiplying the existing polynomial stored in chk by x (which corresponds to right shift of 5 bits) and adding in the new value as the constant term, and using the generator polynomial (and its multiples) to replace the x^6 term that is removed by adding in polynomials of degree less than 6.  (Perhaps this can be phrased better than I just did.)",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T15:58:10Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139186921",
      "id" : 139186921,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 35,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139186921",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps document the fancy bit arithmetic and negation being done here to avoid the conditional?  I find the type conversions here a bit confusing -- we start with a uint8_t and calculate either a 0 or 1.  Then we negate it -- still as a uint8_t? -- and then cast to an unsigned long to do the final bit operation?  It's not clear to me that the negation and then promotion must result in 0xffffffff versus 0xff.  \r\n\r\nOh -- maybe what's happening is that the promotion from uint8_t to uint happens with the initial bitshift or the first bitwise and, so the negation is already on a 32-bit type?  That would seem more logical I guess...",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T15:58:57Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187109",
      "id" : 139187109,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 45,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187109",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187633"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps parens around the << operator?  Order of operations between << and ^ was not obvious to me without looking this up.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T16:01:16Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187633",
      "id" : 139187633,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 40,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139187633",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139192440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139192440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Might be helpful to document the `^ 1` here comes from the requirement that the reminder mod g(x) be 1 (rather than 0).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T16:23:23Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139192440",
      "id" : 139192440,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 81,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63087732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139192440",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232521"
         }
      },
      "author_association" : "OWNER",
      "body" : "I think so.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:32:49Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232521",
      "id" : 139232521,
      "in_reply_to_id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 63141983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232521",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232558"
         }
      },
      "author_association" : "OWNER",
      "body" : "Nice catch, done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:33:02Z",
      "diff_hunk" : "@@ -142,6 +142,9 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n             return ISMINE_SPENDABLE;\n         break;\n     }\n+\n+    case TX_WITNESS_UNKNOWN:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232558",
      "id" : 139232558,
      "in_reply_to_id" : 139183925,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 5,
      "path" : "src/script/ismine.cpp",
      "position" : null,
      "pull_request_review_id" : 63142029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232558",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232621"
         }
      },
      "author_association" : "OWNER",
      "body" : "I've added a long explanation.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:33:21Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232621",
      "id" : 139232621,
      "in_reply_to_id" : 139186921,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 35,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232621",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232646"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:33:29Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232646",
      "id" : 139232646,
      "in_reply_to_id" : 139187633,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 40,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232646",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232787"
         }
      },
      "author_association" : "OWNER",
      "body" : "I've replaced it with much more readable conditions. I've verified that at least GCC 6.3 compiles it to efficient code (without any jumps).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:34:15Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232787",
      "id" : 139232787,
      "in_reply_to_id" : 139187109,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 45,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232808"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:34:23Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** Find the polynomial with value coefficients mod the generator as 30-bit. */\n+uint32_t PolyMod(const data& values)\n+{\n+    uint32_t chk = 1;\n+    for (size_t i = 0; i < values.size(); ++i) {\n+        uint8_t top = chk >> 25;\n+        chk = (chk & 0x1ffffff) << 5 ^ values[i] ^\n+            (-((top >> 0) & 1) & 0x3b6a57b2UL) ^\n+            (-((top >> 1) & 1) & 0x26508e6dUL) ^\n+            (-((top >> 2) & 1) & 0x1ea119faUL) ^\n+            (-((top >> 3) & 1) & 0x3d4233ddUL) ^\n+            (-((top >> 4) & 1) & 0x2a1462b3UL);\n+    }\n+    return chk;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6);\n+    uint32_t mod = PolyMod(enc) ^ 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232808",
      "id" : 139232808,
      "in_reply_to_id" : 139192440,
      "original_commit_id" : "bcd3f74b649da1482c242371ddebeaf78d8b7813",
      "original_position" : 81,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 63142329,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139232808",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139233636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139233636"
         }
      },
      "author_association" : "OWNER",
      "body" : "It's there, just a bit higher up in the file.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-15T19:39:22Z",
      "diff_hunk" : "@@ -0,0 +1,18 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139233636",
      "id" : 139233636,
      "in_reply_to_id" : 136680925,
      "original_commit_id" : "ab8942c4056e1d55446715f1dff0b7187bbfd596",
      "original_position" : 9,
      "path" : "src/bech32.h",
      "position" : 16,
      "pull_request_review_id" : 63143410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139233636",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139290141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139290141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, just checking since most files in this repo have `Copyright (c) The Bitcoin Core developers`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-16T16:28:43Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139290141",
      "id" : 139290141,
      "in_reply_to_id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 63206984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139290141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139556463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139556463"
         }
      },
      "author_association" : "MEMBER",
      "body" : "gross.  Can these tests be changed to work with whole script pubkeys rather than tweaking the addrType?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-18T22:26:46Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139556463",
      "id" : 139556463,
      "original_commit_id" : "d270d5eee537fe3a769eb9c9fc12b2de59f16047",
      "original_position" : 69,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 63505995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139556463",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139838199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139838199"
         }
      },
      "author_association" : "OWNER",
      "body" : "> gross\r\n\r\nI agree. \r\n\r\n> Can these tests be changed to work with whole script pubkeys rather than tweaking the addrType?\r\n\r\nDone. I've added an extra commit to first refactor the tests into testing scriptPubKeys.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-19T22:51:40Z",
      "diff_hunk" : "@@ -218,14 +247,39 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             else if(exp_addrType == \"none\")\n             {\n                 dest = CNoDestination();\n-            }\n-            else\n-            {\n+            } else if (exp_addrType == \"p2wpkh\") {\n+                WitnessV0KeyHash id;\n+                memcpy(id.begin(), exp_payload.data(), 20);\n+                dest = id;\n+            } else if (exp_addrType == \"p2wsh\") {\n+                WitnessV0ScriptHash id;\n+                memcpy(id.begin(), exp_payload.data(), 32);\n+                dest = id;\n+            } else if (exp_addrType.size() == 5 && exp_addrType.substr(0, 4) == \"p2w?\") {\n+                WitnessUnknown unk;\n+                memcpy(unk.program, exp_payload.data(), exp_payload.size());\n+                unk.length = exp_payload.size();\n+                unk.version = exp_addrType[4] - 'a';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139838199",
      "id" : 139838199,
      "in_reply_to_id" : 139556463,
      "original_commit_id" : "d270d5eee537fe3a769eb9c9fc12b2de59f16047",
      "original_position" : 69,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 63826385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139838199",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139884736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139884736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no bcrt tests?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-20T06:32:30Z",
      "diff_hunk" : "@@ -422,5 +422,59 @@\n             \"isPrivkey\": false,\n             \"isTestnet\": false\n         }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n     ]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139884736",
      "id" : 139884736,
      "original_commit_id" : "ed22f8e0f98dfa41e8814744d1b905e2bf5c3d23",
      "original_position" : 58,
      "path" : "src/test/data/base58_keys_valid.json",
      "position" : null,
      "pull_request_review_id" : 63877474,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139884736",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139893394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139893394"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-20T07:27:53Z",
      "diff_hunk" : "@@ -422,5 +422,59 @@\n             \"isPrivkey\": false,\n             \"isTestnet\": false\n         }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": false,\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"isTestnet\": true,\n+            \"tryCaseFlip\": true\n+        }\n     ]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139893394",
      "id" : 139893394,
      "in_reply_to_id" : 139884736,
      "original_commit_id" : "ed22f8e0f98dfa41e8814744d1b905e2bf5c3d23",
      "original_position" : 58,
      "path" : "src/test/data/base58_keys_valid.json",
      "position" : null,
      "pull_request_review_id" : 63887124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139893394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Addressed @gmaxwell's comment about `bcrt` tests, by adding an extra commit that introduces regtest examples to base58_tests, and then extending those in the BIP173 tests commit.",
      "created_at" : "2017-09-20T19:35:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-330957618",
      "id" : 330957618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-20T19:35:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330957618",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Related to these changes: https://github.com/bitcoin/bips/pull/587\r\nI think this is a bug in violation of the BIP, but I'd like feedback on my BIP change proposals, in-case I mis-interpreted something:\r\n```\r\nsegwit_addr.bech32_encode('A', [])\r\n'A1g7sgd8'  # violates \"The lowercase form is used when determining a character's value for checksum purposes.\"\r\n```",
      "created_at" : "2017-09-22T14:54:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331470140",
      "id" : 331470140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-22T14:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/331470140",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6440430?v=4",
         "events_url" : "https://api.github.com/users/mruddy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mruddy/followers",
         "following_url" : "https://api.github.com/users/mruddy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mruddy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mruddy",
         "id" : 6440430,
         "login" : "mruddy",
         "organizations_url" : "https://api.github.com/users/mruddy/orgs",
         "received_events_url" : "https://api.github.com/users/mruddy/received_events",
         "repos_url" : "https://api.github.com/users/mruddy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mruddy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mruddy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140595269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140595269"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: it seems you changed the description text to match the old test and then also changed the test out from under it?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-22T20:58:17Z",
      "diff_hunk" : "@@ -184,10 +190,13 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        destination = DecodeDestination(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey:\" + strTest);\n-        secret.SetString(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey:\" + strTest);\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140595269",
      "id" : 140595269,
      "original_commit_id" : "4172ea94d775109a3aba2a007162cd9204b6cb09",
      "original_position" : 35,
      "path" : "src/test/base58_tests.cpp",
      "position" : 200,
      "pull_request_review_id" : 64697601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T17:59:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140595269",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Maybe cherry-pick  https://github.com/jonasschnelli/bitcoin/commit/f86c0585dccd29dca63cef3e6a0d434f49abac49 to enable sending to BIP173 addresses through the GUI",
      "created_at" : "2017-09-23T02:52:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331605815",
      "id" : 331605815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-23T02:52:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/331605815",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa (More of a BIP 173 question) - what's the reasoning for xoring 1 to the checksum both when creating and validating it?\r\n\r\nMore specifically: `polymod` in `bech32_create_checksum()` is xored with 1 and `bech32_verify_checksum()` checks for `bench32_polymod(...) == 1`. Instead, one could avoid the xor, and check  `bench32_polymod(...) == 0`.",
      "created_at" : "2017-09-23T11:20:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331627596",
      "id" : 331627596,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-23T11:20:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/331627596",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMHO boost headers should come before standard library headers",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T15:39:43Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636125",
      "id" : 140636125,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64742303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636125",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`<algorithm>` should be in the same group as `<assert.h>`, `<string.h>`, all three are standard headers, with the difference being just that the latter two expose functionality into the global namespace.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T15:40:33Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636138",
      "id" : 140636138,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 13,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64742303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636138",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636193"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't it a shame to completely drop the contents of this comment? Could be nice to have it as-is or split near the Base58 encoding parts.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T15:43:44Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636193",
      "id" : 140636193,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 30,
      "path" : "src/base58.cpp",
      "position" : 35,
      "pull_request_review_id" : 64742303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636193",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636403"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Reuse previous overload of `IsValidDestinationString()`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T15:56:15Z",
      "diff_hunk" : "@@ -328,22 +294,20 @@ bool CBitcoinSecret::SetString(const std::string& strSecret)\n \n std::string EncodeDestination(const CTxDestination& dest)\n {\n-    CBitcoinAddress addr(dest);\n-    if (!addr.IsValid()) return \"\";\n-    return addr.ToString();\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n }\n \n CTxDestination DecodeDestination(const std::string& str)\n {\n-    return CBitcoinAddress(str).Get();\n+    return DecodeDestination(str, Params());\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n-    return CBitcoinAddress(str).IsValid(params);\n+    return IsValidDestination(DecodeDestination(str, params));\n }\n \n bool IsValidDestinationString(const std::string& str)\n {\n-    return CBitcoinAddress(str).IsValid();\n+    return IsValidDestination(DecodeDestination(str, Params()));\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636403",
      "id" : 140636403,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 169,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64742303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140636403",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140637180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140637180"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "- Use `std::copy[_n]` instead of `memcpy`\r\n- Suggest DRYing constant lengths 20, 32. Either defining them here or using existing definition from another header.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T16:36:17Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58Check decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[pubkey_prefix.size()], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140637180",
      "id" : 140637180,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 128,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64742303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140637180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639002"
         }
      },
      "author_association" : "OWNER",
      "body" : "We don't have strict rules about header include order, and I'm not convinced they would be a good trade-off (more work for reviewers, only marginally more readable code).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:24:59Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639002",
      "id" : 140639002,
      "in_reply_to_id" : 140636138,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 13,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639002",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639009"
         }
      },
      "author_association" : "OWNER",
      "body" : "I've merged it into the implementation.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:25:20Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639009",
      "id" : 140639009,
      "in_reply_to_id" : 140636193,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 30,
      "path" : "src/base58.cpp",
      "position" : 35,
      "pull_request_review_id" : 64745262,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639009",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639019"
         }
      },
      "author_association" : "OWNER",
      "body" : "Both done, in multiple places.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:25:32Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // Base58Check decoding\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == 20 + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            memcpy(hash.begin(), &data[pubkey_prefix.size()], 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639019",
      "id" : 140639019,
      "in_reply_to_id" : 140637180,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 128,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639019",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639042"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:27:26Z",
      "diff_hunk" : "@@ -328,22 +294,20 @@ bool CBitcoinSecret::SetString(const std::string& strSecret)\n \n std::string EncodeDestination(const CTxDestination& dest)\n {\n-    CBitcoinAddress addr(dest);\n-    if (!addr.IsValid()) return \"\";\n-    return addr.ToString();\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n }\n \n CTxDestination DecodeDestination(const std::string& str)\n {\n-    return CBitcoinAddress(str).Get();\n+    return DecodeDestination(str, Params());\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n-    return CBitcoinAddress(str).IsValid(params);\n+    return IsValidDestination(DecodeDestination(str, params));\n }\n \n bool IsValidDestinationString(const std::string& str)\n {\n-    return CBitcoinAddress(str).IsValid();\n+    return IsValidDestination(DecodeDestination(str, Params()));\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639042",
      "id" : 140639042,
      "in_reply_to_id" : 140636403,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 169,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639042",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@jonasschnelli Cool, cherry-picked your commit.\r\n\r\n@danra The xor 1 to verify the checksum is actually explained in this PR:\r\n\r\n```c++\r\n    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\r\n    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\r\n    // list of values would result in a new valid list. For that reason, Bech32 requires the\r\n    // resulting checksum to be 1 instead.\r\n```\r\n\r\nI'll update the BIP to explain it there as well.",
      "created_at" : "2017-09-23T18:31:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331661290",
      "id" : 331661290,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-23T18:31:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/331661290",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639345"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639345"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMHO Having the headers not arranged is just a more overhead to the reader. When it's a few headers, it's just a bit of overhead. When it's plenty, the overhead grows.\r\n\r\nIn any case, this specific comment is just about grouping standard header together, sorting them alphabetically, a guideline which I got the impression is mostly observed in the code.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:44:19Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639345",
      "id" : 140639345,
      "in_reply_to_id" : 140636138,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 13,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639345",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639374"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639374"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The reasoning for this is the same as why user includes should come before system includes - avoid hidden dependencies.\r\n\r\nWhile boost is canonical and well-tested, it's probably still better practice to have non-standard system headers be included before standard system headers, if only for consistency.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:45:51Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639374",
      "id" : 140639374,
      "in_reply_to_id" : 140636125,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639374",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639388"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I thought I searched for the contents and didn't find it, I guess I missed it. Thanks!",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:46:32Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639388",
      "id" : 140639388,
      "in_reply_to_id" : 140636193,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 30,
      "path" : "src/base58.cpp",
      "position" : 35,
      "pull_request_review_id" : 64745661,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639388",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639400"
         }
      },
      "author_association" : "OWNER",
      "body" : "They're already sorted alphabetically and grouped together (but with C headers separate for C++ headers), which seems perfectly reasonable to me.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:47:38Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639400",
      "id" : 140639400,
      "in_reply_to_id" : 140636138,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 13,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639400",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639422"
         }
      },
      "author_association" : "OWNER",
      "body" : "Interesting, I hadn't heard about this reason. I'll take it into account in the future.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:48:59Z",
      "diff_hunk" : "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n-#include <stdint.h>\n #include <string.h>\n-#include <vector>\n-#include <string>\n+\n+#include <algorithm>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639422",
      "id" : 140639422,
      "in_reply_to_id" : 140636125,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 15,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 64745708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639422",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639427"
         }
      },
      "author_association" : "OWNER",
      "body" : "I only did it after you commented. Thanks for pointing it out.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T18:49:17Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639427",
      "id" : 140639427,
      "in_reply_to_id" : 140636193,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 30,
      "path" : "src/base58.cpp",
      "position" : 35,
      "pull_request_review_id" : 64745716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639427",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639910"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, I misunderstood. Thanks!",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-23T19:17:02Z",
      "diff_hunk" : "@@ -212,86 +213,51 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639910",
      "id" : 140639910,
      "in_reply_to_id" : 140636193,
      "original_commit_id" : "e7ae19456d7eabdb9627f74a4753b45c1c252844",
      "original_position" : 30,
      "path" : "src/base58.cpp",
      "position" : 35,
      "pull_request_review_id" : 64746270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/140639910",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Rebased on top of #11116, and fixed a bug that it exposed (`Solver` would treat non-length 20/32 v0 witness outputs as WitnessUnknown rather than failing). Thanks, @jimpo!",
      "created_at" : "2017-09-23T22:10:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331673062",
      "id" : 331673062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-24T04:12:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/331673062",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141070635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141070635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think this deserves an in-line comment.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-26T14:19:24Z",
      "diff_hunk" : "@@ -67,7 +67,7 @@ QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &po\n         if (((ch >= '0' && ch<='9') ||\n             (ch >= 'a' && ch<='z') ||\n             (ch >= 'A' && ch<='Z')) &&\n-            ch != 'l' && ch != 'I' && ch != '0' && ch != 'O')\n+            ch != 'I' && ch != 'O')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141070635",
      "id" : 141070635,
      "original_commit_id" : "7e6a930c5d71eb8e5ba59c67e1895a158b44fe71",
      "original_position" : 5,
      "path" : "src/qt/bitcoinaddressvalidator.cpp",
      "position" : null,
      "pull_request_review_id" : 65231725,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141070635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141079340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141079340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not obvious to me here why it's `bech.second.begin() + 1`.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-26T14:46:20Z",
      "diff_hunk" : "@@ -259,6 +285,34 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             return CScriptID(hash);\n         }\n     }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0];\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141079340",
      "id" : 141079340,
      "original_commit_id" : "615a972aade69e47c5c3a20643763b583bb3c9dc",
      "original_position" : 53,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 65231725,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141079340",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141082070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141082070"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unused?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-26T14:54:38Z",
      "diff_hunk" : "@@ -175,6 +182,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n+    valtype witness_program;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141082070",
      "id" : 141082070,
      "original_commit_id" : "615a972aade69e47c5c3a20643763b583bb3c9dc",
      "original_position" : 25,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 65231725,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141082070",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141135623"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-26T18:00:56Z",
      "diff_hunk" : "@@ -67,7 +67,7 @@ QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &po\n         if (((ch >= '0' && ch<='9') ||\n             (ch >= 'a' && ch<='z') ||\n             (ch >= 'A' && ch<='Z')) &&\n-            ch != 'l' && ch != 'I' && ch != '0' && ch != 'O')\n+            ch != 'I' && ch != 'O')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135623",
      "id" : 141135623,
      "in_reply_to_id" : 141070635,
      "original_commit_id" : "7e6a930c5d71eb8e5ba59c67e1895a158b44fe71",
      "original_position" : 5,
      "path" : "src/qt/bitcoinaddressvalidator.cpp",
      "position" : null,
      "pull_request_review_id" : 65306641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141135623",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141135676"
         }
      },
      "author_association" : "OWNER",
      "body" : "Added a comment.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-26T18:01:07Z",
      "diff_hunk" : "@@ -259,6 +285,34 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             return CScriptID(hash);\n         }\n     }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0];\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135676",
      "id" : 141135676,
      "in_reply_to_id" : 141079340,
      "original_commit_id" : "615a972aade69e47c5c3a20643763b583bb3c9dc",
      "original_position" : 53,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 65306699,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141135676",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141135719"
         }
      },
      "author_association" : "OWNER",
      "body" : "Removed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-26T18:01:17Z",
      "diff_hunk" : "@@ -175,6 +182,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n+    valtype witness_program;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135719",
      "id" : 141135719,
      "in_reply_to_id" : 141082070,
      "original_commit_id" : "615a972aade69e47c5c3a20643763b583bb3c9dc",
      "original_position" : 25,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 65306755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141135719",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141345745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141345745"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Call `data.reserve(prefix.size() + id.size())` before filling data to avoid reallocation?\r\n\r\nOtherwise use copy constructor? Same below.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-27T13:41:34Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141345745",
      "id" : 141345745,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 71,
      "path" : "src/base58.cpp",
      "position" : 71,
      "pull_request_review_id" : 65544955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141345745",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141352548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141352548"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Avoid copy?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-27T14:03:34Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141352548",
      "id" : 141352548,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 129,
      "path" : "src/bech32.cpp",
      "position" : 130,
      "pull_request_review_id" : 65552996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141352548",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141352566"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141352566"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe this is the 3rd possible reallocation on the same vector:\r\n - 1st L106: `ret.resize()`\r\n - 2nd L30: `x.insert(...)`\r\n - 3rd L130: `enc.resize(enc.size() + 6)`\r\n\r\nSuggestion, add 2nd argument `capacity = 0` to `ExpandHRP`?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-27T14:03:37Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141352566",
      "id" : 141352566,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 130,
      "path" : "src/bech32.cpp",
      "position" : 131,
      "pull_request_review_id" : 65552996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141352566",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141417745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141417745"
         }
      },
      "author_association" : "OWNER",
      "body" : "No copy occurs here. \r\n\r\nNote that `Cat`'s first argument takes a vector by value, not by const reference. This means that the value returned by `ExpandHRP` (which is a temporary) will use a move constructor to become `Cat`'s first argument (instead of just passing a reference). However, no copy occurs, and `Cat` is then free to modify that variable.\r\n\r\n`Cat` then extends that vector, and returns it (probably using copy elision, but even when not, using moving) to the `enc` variable here.\r\n",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-27T17:46:16Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141417745",
      "id" : 141417745,
      "in_reply_to_id" : 141352548,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 129,
      "path" : "src/bech32.cpp",
      "position" : 130,
      "pull_request_review_id" : 65628847,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141417745",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141428618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141428618"
         }
      },
      "author_association" : "OWNER",
      "body" : "The copy constructor is used here when initializing the `data` variable.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-27T18:26:24Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141428618",
      "id" : 141428618,
      "in_reply_to_id" : 141345745,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 71,
      "path" : "src/base58.cpp",
      "position" : 71,
      "pull_request_review_id" : 65641164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141428618",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141588328"
         }
      },
      "author_association" : "OWNER",
      "body" : "I wonder why we don't use the SelectParams by string here.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T11:05:29Z",
      "diff_hunk" : "@@ -127,22 +84,25 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        if (regtest) {\n+            SelectParams(CBaseChainParams::REGTEST);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588328",
      "id" : 141588328,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 89,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 65823623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141588328",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141588515"
         }
      },
      "author_association" : "OWNER",
      "body" : "Same here, `SelectParams(find_value(metadata, \"chain\").get_str())` would do?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T11:06:27Z",
      "diff_hunk" : "@@ -188,50 +160,37 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588515",
      "id" : 141588515,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 143,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 65823840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141588515",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141592625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141592625"
         }
      },
      "author_association" : "OWNER",
      "body" : "As this is indexed using a `uint8_t` I'd feel slightly more at ease if we extend this array to size 256, or add an explicit check against 128 in the loop where it is referenced. I know the check at the beginning of `Decode()` makes it impossible to hit this, but it seems something that is easily forgotten with a future code change.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T11:31:46Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141592625",
      "id" : 141592625,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 16,
      "path" : "src/bech32.cpp",
      "position" : 16,
      "pull_request_review_id" : 65828965,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141592625",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "utACK +/- nits",
      "created_at" : "2017-09-28T11:46:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332811970",
      "id" : 332811970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-28T11:46:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332811970",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141699694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141699694"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa The change in `operator()` for `CNoDestination` should be rebased onto 1e46ebdf8618e585568ffc1b093c79cc9be07b57",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T18:28:34Z",
      "diff_hunk" : "@@ -212,86 +216,103 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141699694",
      "id" : 141699694,
      "in_reply_to_id" : 138758464,
      "original_commit_id" : "770d0ff3c5e263e9c59c687fac1176911cf30ca7",
      "original_position" : 113,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 65956101,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141699694",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141701098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141701098"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would be nice to extract the common functionality here (validating some prefix+size+extracting hash) into a function",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T18:34:40Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141701098",
      "id" : 141701098,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 166,
      "path" : "src/base58.cpp",
      "position" : 166,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141701098",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141702040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps add that copyright as well?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T18:38:18Z",
      "diff_hunk" : "@@ -0,0 +1,140 @@\n+// Copyright (c) 2017 Pieter Wuille",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702040",
      "id" : 141702040,
      "in_reply_to_id" : 139183195,
      "original_commit_id" : "0571b9271b27ce2767e9c7034c23facb495fab65",
      "original_position" : 1,
      "path" : "src/bech32.cpp",
      "position" : 1,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141702040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141702241"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Suggest adding a comment here explaining reasoning for the CHARSET (similar to how it's explained in BIP 173).\r\nAlso, is there an implementation available showing how the visual similarity was minimized, or was this minimization just done manually? In case of the former, suggest adding a link to that here or in the BIP (or in both)",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T18:39:13Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702241",
      "id" : 141702241,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 13,
      "path" : "src/bech32.cpp",
      "position" : 13,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141702241",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141702391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This can probably be directly derived from `CHARSET` at compilation time using `constexpr` functions and making `CHARSET` and this `constexpr` as well, making it more robust.\r\nI can try implementing it, if you agree it's of interest.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T18:39:49Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702391",
      "id" : 141702391,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 25,
      "path" : "src/bech32.cpp",
      "position" : 25,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141702391",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141705025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141705025"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I suggest rephrasing, IIRC multiplication requires some irreducible polynomial, a^5 + a^3 + 1 is just one possibility which was specifically chosen here. Current phrasing implies multiplication \"requires\" this specific polynomial.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T18:50:16Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141705025",
      "id" : 141705025,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 55,
      "path" : "src/bech32.cpp",
      "position" : 55,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141705025",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141709639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141709639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Use a range-for loop, `i` isn't used except for accessing element (and in comments)",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:09:19Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141709639",
      "id" : 141709639,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 65,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141709639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141710179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141710179"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and later, `'A' <= c && c <= 'Z'` is better style (`c` is 'between' the values. Easier to read, harder to get wrong when used consistently)",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:11:44Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141710179",
      "id" : 141710179,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 99,
      "path" : "src/bech32.cpp",
      "position" : 99,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141710179",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141711422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141711422"
         }
      },
      "author_association" : "MEMBER",
      "body" : "data.clear()",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:17:37Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141711422",
      "id" : 141711422,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 166,
      "path" : "src/base58.cpp",
      "position" : 166,
      "pull_request_review_id" : 65970068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141711422",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141712157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141712157"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I might be wrong, but isn't the problem with prepending a 0, rather than appending one?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:21:03Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141712157",
      "id" : 141712157,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 122,
      "path" : "src/bech32.cpp",
      "position" : 123,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141712157",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141713104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141713104"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just `data ret(6);`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:25:39Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141713104",
      "id" : 141713104,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 133,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141713104",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141714069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141714069"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Use range-for loop",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:29:37Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141714069",
      "id" : 141714069,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 152,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141714069",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141717000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141717000"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just `data values(str.size() - 1 - pos);`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:43:07Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141717000",
      "id" : 141717000,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 173,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141717000",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141717549"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141717549"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and later, just `return {}`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:45:34Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141717549",
      "id" : 141717549,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 163,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141717549",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141718442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141718442"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Access `CHARSET_REV` just once, store `const int8_t& val = CHARSET_REV[c]`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:49:39Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141718442",
      "id" : 141718442,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 179,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141718442",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141720047"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141720047"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here too `std::make_pair` can be removed in favor of `{}`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T19:56:11Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    return std::make_pair(hrp, data(values.begin(), values.end() - 6));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141720047",
      "id" : 141720047,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 188,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 65957794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141720047",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141733308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733308"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Suggest using `std::tolower()` and standard algorithms to simplify the implementation",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T20:53:32Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141733308",
      "id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 65996273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141733308",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141734853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141734853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`isRegtest` for consistency",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T20:59:53Z",
      "diff_hunk" : "@@ -127,22 +84,25 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141734853",
      "id" : 141734853,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 86,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 65998144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141734853",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141737103"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141737103"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`WitnessV0KeyHash` and `WitnessV0ScriptHash` overloads have identical implementation, refactor it to a private template (templated on `id` type) function and call it from these two?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:09:25Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141737103",
      "id" : 141737103,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 109,
      "path" : "src/base58.cpp",
      "position" : 98,
      "pull_request_review_id" : 66000656,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141737103",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141737906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141737906"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Braces around each of `keyid` and `scriptid` segments would reduce their visibility to just the scope where they're needed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:13:13Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                WitnessV0KeyHash keyid;\n+                if (data.size() == keyid.size()) {\n+                    std::copy(data.begin(), data.end(), keyid.begin());\n+                    return keyid;\n+                }\n+                WitnessV0ScriptHash scriptid;\n+                if (data.size() == scriptid.size()) {\n+                    std::copy(data.begin(), data.end(), scriptid.begin());\n+                    return scriptid;\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141737906",
      "id" : 141737906,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 183,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 66001553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141737906",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141738221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141738221"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`std::copy`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:14:44Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                WitnessV0KeyHash keyid;\n+                if (data.size() == keyid.size()) {\n+                    std::copy(data.begin(), data.end(), keyid.begin());\n+                    return keyid;\n+                }\n+                WitnessV0ScriptHash scriptid;\n+                if (data.size() == scriptid.size()) {\n+                    std::copy(data.begin(), data.end(), scriptid.begin());\n+                    return scriptid;\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            memcpy(unk.program, data.data(), data.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141738221",
      "id" : 141738221,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 191,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 66001908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141738221",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141738523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141738523"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Early return if the condition fails would reduce indentation",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:16:18Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141738523",
      "id" : 141738523,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 172,
      "path" : "src/base58.cpp",
      "position" : 173,
      "pull_request_review_id" : 66002270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141738523",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141741040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141741040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`std::copy`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:28:30Z",
      "diff_hunk" : "@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), vSolutions[0].data(), 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141741040",
      "id" : 141741040,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 27,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 66005227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141741040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141742087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141742087"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The header comment for `ExtractDestination` is out of date now that P2WPKH and P2WSH are supported, it says\r\n\r\n> Currently only works for P2PK, P2PKH, and P2SH scripts.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:33:41Z",
      "diff_hunk" : "@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), vSolutions[0].data(), 20);\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_V0_SCRIPTHASH) {\n+        WitnessV0ScriptHash hash;\n+        memcpy(hash.begin(), vSolutions[0].data(), 32);\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_UNKNOWN) {\n+        WitnessUnknown unk;\n+        unk.version = vSolutions[0][0];\n+        memcpy(unk.program, vSolutions[1].data(), vSolutions[1].size());\n+        unk.length = vSolutions[1].size();\n+        addressRet = unk;\n+        return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141742087",
      "id" : 141742087,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 41,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 66006472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141742087",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141742666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141742666"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`return std::equal(...);`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:36:36Z",
      "diff_hunk" : "@@ -72,14 +73,44 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        if (memcmp(w1.program, w2.program, w1.length)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141742666",
      "id" : 141742666,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 25,
      "path" : "src/script/standard.h",
      "position" : null,
      "pull_request_review_id" : 66007114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141742666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141743481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141743481"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`return std::lexicographical_compare(...);`",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T21:40:34Z",
      "diff_hunk" : "@@ -72,14 +73,44 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        if (memcmp(w1.program, w2.program, w1.length)) return false;\n+        return true;\n+    }\n+\n+    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version < w2.version) return true;\n+        if (w1.version > w2.version) return false;\n+        if (w1.length < w2.length) return true;\n+        if (w1.length > w2.length) return false;\n+        if (memcmp(w1.program, w2.program, w1.length) < 0) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141743481",
      "id" : 141743481,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 34,
      "path" : "src/script/standard.h",
      "position" : null,
      "pull_request_review_id" : 66008043,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141743481",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751499"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed. I've added a `reserve` call in `ExpandHRP` (which reserves 90 + hrp.size(), the maximum valid expanded size the checksum is computed over).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:27:51Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751499",
      "id" : 141751499,
      "in_reply_to_id" : 141352566,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 130,
      "path" : "src/bech32.cpp",
      "position" : 131,
      "pull_request_review_id" : 66017149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751499",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751543"
         }
      },
      "author_association" : "OWNER",
      "body" : "Good idea, fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:28:08Z",
      "diff_hunk" : "@@ -127,22 +84,25 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        if (regtest) {\n+            SelectParams(CBaseChainParams::REGTEST);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751543",
      "id" : 141751543,
      "in_reply_to_id" : 141588328,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 89,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 66017199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751543",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751573"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751573"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:28:19Z",
      "diff_hunk" : "@@ -188,50 +160,37 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751573",
      "id" : 141751573,
      "in_reply_to_id" : 141588515,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 143,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 66017230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751573",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751606"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:28:30Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751606",
      "id" : 141751606,
      "in_reply_to_id" : 141592625,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 16,
      "path" : "src/bech32.cpp",
      "position" : 16,
      "pull_request_review_id" : 66017275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141751606",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Resolved?\n\nOn Thu, Sep 28, 2017 at 12:07 PM, Wladimir J. van der Laan <\nnotifications@github.com> wrote:\n\n> *@laanwj* commented on this pull request.\n> ------------------------------\n>\n> In src/test/base58_tests.cpp\n> <https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588515>:\n>\n> > @@ -188,50 +160,37 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n>          std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n>          const UniValue &metadata = test[2].get_obj();\n>          bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n> -        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n> -        if (isTestnet)\n> +        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n> +        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";\n>\n> Same here, SelectParams(find_value(metadata, \"chain\").get_str()) would do?\n>\n> Ã¢ÂÂ\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/11167#pullrequestreview-65823840>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AdBhRyBBC4C-vDSFk4z6vB1n8MupJTWLks5sm33xgaJpZM4PDot9>\n> .\n>\n",
      "created_at" : "2017-09-28T22:30:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332981656",
      "id" : 332981656,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-28T22:30:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332981656",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/30433607?v=4",
         "events_url" : "https://api.github.com/users/musabi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/musabi/followers",
         "following_url" : "https://api.github.com/users/musabi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/musabi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/musabi",
         "id" : 30433607,
         "login" : "musabi",
         "organizations_url" : "https://api.github.com/users/musabi/orgs",
         "received_events_url" : "https://api.github.com/users/musabi/received_events",
         "repos_url" : "https://api.github.com/users/musabi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/musabi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/musabi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/musabi"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141752920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141752920"
         }
      },
      "author_association" : "OWNER",
      "body" : "I think the implementation should focus on explaining why it is a correct implementation of the BIP. It doesn't need to include things the BIP already explains well - that's just gratuitously splitting the knowledge over multiple places.\r\n\r\nYes, the code for that optimization is in my repository, but it's very ad-hoc and not really intended for publishing.\r\n",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:37:50Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141752920",
      "id" : 141752920,
      "in_reply_to_id" : 141702241,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 13,
      "path" : "src/bech32.cpp",
      "position" : 13,
      "pull_request_review_id" : 66018781,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141752920",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141753222"
         }
      },
      "author_association" : "OWNER",
      "body" : "Sounds good, but seems out of scope for this PR.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:39:52Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753222",
      "id" : 141753222,
      "in_reply_to_id" : 141702391,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 25,
      "path" : "src/bech32.cpp",
      "position" : 25,
      "pull_request_review_id" : 66019139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141753222",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141753671"
         }
      },
      "author_association" : "OWNER",
      "body" : "Yes and no.\r\n\r\nThere is only one field of size 32 _up to isomorphism_. However, the multiplication of GF(32) elements _when represented as bits_ absolutely depends on the choice of the polynomial - and this is the one used in Bech32. It just so happens that you could do a mapping of the input values to the respective elements in an isomorphic representation (which uses another polynomial), do the multiplication, and map things back.\r\n\r\nI think the current explanation is sufficiently accurate.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:43:09Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753671",
      "id" : 141753671,
      "in_reply_to_id" : 141705025,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 55,
      "path" : "src/bech32.cpp",
      "position" : 55,
      "pull_request_review_id" : 66019666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141753671",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141753985"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Make sense regarding the information location. Where in your repo can one find the optimization code you used?",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:44:56Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753985",
      "id" : 141753985,
      "in_reply_to_id" : 141702241,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 13,
      "path" : "src/bech32.cpp",
      "position" : 13,
      "pull_request_review_id" : 66019999,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141753985",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141754712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141754712"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> However, the multiplication of GF(32) elements when represented as bits absolutely depends on the choice of the polynomial - and this is the one used in Bech32\r\n\r\nYes, that's what I meant - emphasizing the fact that this polynomial was chosen, not that it is *the* one required for multiplication. I think this point could be better made. Though, I agree that even without this nit, the documentation is great :)",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:49:35Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141754712",
      "id" : 141754712,
      "in_reply_to_id" : 141705025,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 55,
      "path" : "src/bech32.cpp",
      "position" : 55,
      "pull_request_review_id" : 66020802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141754712",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141755153"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141755153"
         }
      },
      "author_association" : "OWNER",
      "body" : "I prefer variables up front.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:52:42Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141755153",
      "id" : 141755153,
      "in_reply_to_id" : 141710179,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 99,
      "path" : "src/bech32.cpp",
      "position" : 99,
      "pull_request_review_id" : 66021296,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141755153",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141755794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141755794"
         }
      },
      "author_association" : "OWNER",
      "body" : "Thanks for taking the time to think through it, but no, this is about appending.\r\n\r\nIf the requirement was that the checksum was zero, it would mean that c(x) (the codeword polynomial) mod g(x) = 0, or in other words, c(x) is a multiple of g(x) (the generator). If c(x) is a multiple of g(x), then x*c(x) is a multiple of g(x) as well. The corresponding codeword for c(x)*x is the characters of the original with a 0 appended.\r\n\r\nThere is also a measure taken to avoid being able to prepend zeroes, namely the fact that for the codeword [a,b,c,d] we use `x^4 + a*x^3 + b*x^2 + c*x + d`, rather than `a*x^3 + b*x^2 + c*x + d` (see the comment above, about initializing the `c` variable to 1).",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T22:56:08Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141755794",
      "id" : 141755794,
      "in_reply_to_id" : 141712157,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 122,
      "path" : "src/bech32.cpp",
      "position" : 123,
      "pull_request_review_id" : 66021838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141755794",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141756594"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:01:06Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756594",
      "id" : 141756594,
      "in_reply_to_id" : 141718442,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 179,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66022715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141756594",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141756888"
         }
      },
      "author_association" : "OWNER",
      "body" : "Unfortunately, `tolower` is locale-dependent. I don't feel that the complexity of avoiding that is worth it for such a trivial algorithm.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:03:17Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756888",
      "id" : 141756888,
      "in_reply_to_id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 66023070,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141756888",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756938"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141756938"
         }
      },
      "author_association" : "OWNER",
      "body" : "Already removed in response to @laanwj's comment above.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:03:39Z",
      "diff_hunk" : "@@ -127,22 +84,25 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        bool regtest = find_value(metadata, \"chain\").get_str() == \"regtest\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756938",
      "id" : 141756938,
      "in_reply_to_id" : 141734853,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 86,
      "path" : "src/test/base58_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 66023130,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141756938",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141757173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141757173"
         }
      },
      "author_association" : "OWNER",
      "body" : "I think being explicit here is clearer. I also don't expect that this correspondence will be maintained in future witness versions.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:05:33Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141757173",
      "id" : 141757173,
      "in_reply_to_id" : 141737103,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 109,
      "path" : "src/base58.cpp",
      "position" : 98,
      "pull_request_review_id" : 66023401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141757173",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thereÃ¢ÂÂs a version of tolower where you can specify the locale yourself, so there is no concern about the wrong one being set in the system\n\n> On 29 Sep 2017, at 2:04, Pieter Wuille <notifications@github.com> wrote:\n> \n> @sipa commented on this pull request.\n> \n> In src/test/bech32_tests.cpp:\n> \n> > +#include <boost/test/unit_test.hpp>\n> +\n> +BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n> +\n> +bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n> +{\n> +    if (s1.size() != s2.size()) return false;\n> +    for (size_t i = 0; i < s1.size(); ++i) {\n> +        char c1 = s1[i];\n> +        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n> +        char c2 = s2[i];\n> +        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n> +        if (c1 != c2) return false;\n> +    }\n> +    return true;\n> +}\n> Unfortunately, tolower is locale-dependent. I don't feel that the complexity of avoiding that is worth it for such a trivial algorithm.\n> \n> Ã¢ÂÂ\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
      "created_at" : "2017-09-28T23:07:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332987781",
      "id" : 332987781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-28T23:07:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332987781",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141757780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141757780"
         }
      },
      "author_association" : "OWNER",
      "body" : "It would, but I believe it would reduce readability: there are a number of alternatives being tried, and each has its branch to process it. If it were unindented, it would need to be reindented anyway if more cases were added.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:10:42Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141757780",
      "id" : 141757780,
      "in_reply_to_id" : 141738523,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 172,
      "path" : "src/base58.cpp",
      "position" : 173,
      "pull_request_review_id" : 66024093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141757780",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141760870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141760870"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:34:52Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141760870",
      "id" : 141760870,
      "in_reply_to_id" : 141711422,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 166,
      "path" : "src/base58.cpp",
      "position" : 166,
      "pull_request_review_id" : 66027433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141760870",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141760909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141760909"
         }
      },
      "author_association" : "OWNER",
      "body" : "I prefer to do that later.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:35:09Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141760909",
      "id" : 141760909,
      "in_reply_to_id" : 141701098,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 166,
      "path" : "src/base58.cpp",
      "position" : 166,
      "pull_request_review_id" : 66027473,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141760909",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761009"
         }
      },
      "author_association" : "OWNER",
      "body" : "https://github.com/sipa/ezbase32/blob/master/dist32.cpp",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:35:41Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761009",
      "id" : 141761009,
      "in_reply_to_id" : 141702241,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 13,
      "path" : "src/bech32.cpp",
      "position" : 13,
      "pull_request_review_id" : 66027539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761009",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761191"
         }
      },
      "author_association" : "OWNER",
      "body" : "This wasn't done originally, as the reference code is C++03, but by now it's diverged enough that I'll just bite the bullet and make it C++11 inside Core.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:36:32Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761191",
      "id" : 141761191,
      "in_reply_to_id" : 141709639,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 65,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66027651,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761191",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761216"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:36:43Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761216",
      "id" : 141761216,
      "in_reply_to_id" : 141713104,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 133,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66027674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761216",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761234"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:36:52Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761234",
      "id" : 141761234,
      "in_reply_to_id" : 141714069,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 152,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66027696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761234",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761245"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:37:00Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761245",
      "id" : 141761245,
      "in_reply_to_id" : 141717549,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 163,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66027711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761245",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761256"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:37:06Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761256",
      "id" : 141761256,
      "in_reply_to_id" : 141717000,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 173,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66027730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761256",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761284"
         }
      },
      "author_association" : "OWNER",
      "body" : "Cool, done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:37:19Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (size_t i = 0; i < v.size(); ++i) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v[i]) mod g(x), where v[i] is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v[i]) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v[i]) mod g(x)\n+        //         (c(x) * x + v[i]) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v[i] mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i] mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v[i]:\n+        c = ((c & 0x1ffffff) << 5) ^ v[i];\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret;\n+    ret.resize(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (size_t i = 0; i < combined.size(); ++i) {\n+        ret += CHARSET[combined[i]];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return std::make_pair(std::string(), data());\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return std::make_pair(std::string(), data());\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    data values;\n+    values.resize(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        if (CHARSET_REV[c] == -1) {\n+            return std::make_pair(std::string(), data());\n+        }\n+        values[i] = CHARSET_REV[c];\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) {\n+        return std::make_pair(std::string(), data());\n+    }\n+    return std::make_pair(hrp, data(values.begin(), values.end() - 6));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761284",
      "id" : 141761284,
      "in_reply_to_id" : 141720047,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 188,
      "path" : "src/bech32.cpp",
      "position" : null,
      "pull_request_review_id" : 66027755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761284",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761413"
         }
      },
      "author_association" : "OWNER",
      "body" : "> thereÃ¢ÂÂs a version of tolower where you can specify the locale yourself, so there is no concern about the wrong one being set in the system\r\n\r\nLocales scare me. As a reviewer, I would be far less confident that such code is correct due to it as opposed to an absolutely trivial algorithm that obvious does what it should.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:38:17Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761413",
      "id" : 141761413,
      "in_reply_to_id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 66027898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761413",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761440"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:38:32Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                WitnessV0KeyHash keyid;\n+                if (data.size() == keyid.size()) {\n+                    std::copy(data.begin(), data.end(), keyid.begin());\n+                    return keyid;\n+                }\n+                WitnessV0ScriptHash scriptid;\n+                if (data.size() == scriptid.size()) {\n+                    std::copy(data.begin(), data.end(), scriptid.begin());\n+                    return scriptid;\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761440",
      "id" : 141761440,
      "in_reply_to_id" : 141737906,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 183,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 66027933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761440",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761453"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:38:41Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                WitnessV0KeyHash keyid;\n+                if (data.size() == keyid.size()) {\n+                    std::copy(data.begin(), data.end(), keyid.begin());\n+                    return keyid;\n+                }\n+                WitnessV0ScriptHash scriptid;\n+                if (data.size() == scriptid.size()) {\n+                    std::copy(data.begin(), data.end(), scriptid.begin());\n+                    return scriptid;\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            memcpy(unk.program, data.data(), data.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761453",
      "id" : 141761453,
      "in_reply_to_id" : 141738221,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 191,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 66027950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761453",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761478"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:38:50Z",
      "diff_hunk" : "@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), vSolutions[0].data(), 20);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761478",
      "id" : 141761478,
      "in_reply_to_id" : 141741040,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 27,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 66027973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761478",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761495"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:38:58Z",
      "diff_hunk" : "@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        memcpy(hash.begin(), vSolutions[0].data(), 20);\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_V0_SCRIPTHASH) {\n+        WitnessV0ScriptHash hash;\n+        memcpy(hash.begin(), vSolutions[0].data(), 32);\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_UNKNOWN) {\n+        WitnessUnknown unk;\n+        unk.version = vSolutions[0][0];\n+        memcpy(unk.program, vSolutions[1].data(), vSolutions[1].size());\n+        unk.length = vSolutions[1].size();\n+        addressRet = unk;\n+        return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761495",
      "id" : 141761495,
      "in_reply_to_id" : 141742087,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 41,
      "path" : "src/script/standard.cpp",
      "position" : null,
      "pull_request_review_id" : 66027991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761495",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761507"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:39:06Z",
      "diff_hunk" : "@@ -72,14 +73,44 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        if (memcmp(w1.program, w2.program, w1.length)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761507",
      "id" : 141761507,
      "in_reply_to_id" : 141742666,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 25,
      "path" : "src/script/standard.h",
      "position" : null,
      "pull_request_review_id" : 66028010,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761507",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761520"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:39:13Z",
      "diff_hunk" : "@@ -72,14 +73,44 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        if (memcmp(w1.program, w2.program, w1.length)) return false;\n+        return true;\n+    }\n+\n+    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version < w2.version) return true;\n+        if (w1.version > w2.version) return false;\n+        if (w1.length < w2.length) return true;\n+        if (w1.length > w2.length) return false;\n+        if (memcmp(w1.program, w2.program, w1.length) < 0) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761520",
      "id" : 141761520,
      "in_reply_to_id" : 141743481,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 34,
      "path" : "src/script/standard.h",
      "position" : null,
      "pull_request_review_id" : 66028024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141761520",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I believe I've addressed or at least responded to all comments by @promag, @laanwj, @theuni, and @danra.\r\n\r\nI've also updated the Bech32 tests with some new additions to the BIP.",
      "created_at" : "2017-09-28T23:43:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332992930",
      "id" : 332992930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-28T23:43:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332992930",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762203"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```python\r\nassert 0 <= version <= 16\r\n```",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:44:46Z",
      "diff_hunk" : "@@ -44,6 +46,32 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def program_to_witness(version, program, main = False):\n+    if (type(program) is str):\n+        program = hex_str_to_bytes(program)\n+    assert(version >= 0 and version <= 16)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762203",
      "id" : 141762203,
      "original_commit_id" : "574688141d3a215e166fd9e0c0e7ec2e49d3ebfa",
      "original_position" : 21,
      "path" : "test/functional/test_framework/address.py",
      "position" : null,
      "pull_request_review_id" : 66028746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762203",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```python\r\nassert 2 <= len(program) <= 40\r\n```",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:45:16Z",
      "diff_hunk" : "@@ -44,6 +46,32 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def program_to_witness(version, program, main = False):\n+    if (type(program) is str):\n+        program = hex_str_to_bytes(program)\n+    assert(version >= 0 and version <= 16)\n+    assert(len(program) >= 2 and len(program) <= 40)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762252",
      "id" : 141762252,
      "original_commit_id" : "574688141d3a215e166fd9e0c0e7ec2e49d3ebfa",
      "original_position" : 22,
      "path" : "test/functional/test_framework/address.py",
      "position" : null,
      "pull_request_review_id" : 66028746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762252",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree. Seeing \"locale\" always means a non-trivial amount of googling is in store.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:46:16Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762354",
      "id" : 141762354,
      "in_reply_to_id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 66028919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762354",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762455"
         }
      },
      "author_association" : "OWNER",
      "body" : "Well I think it is _the_ one required for multiplication.\r\n\r\nThe specific representation of GF(32) we use, is defined as bits representing polynomials over GF(2) modulo exactly the polynomial `a^5 + a^3 + 1` and no other.\r\n\r\nYes, other representations using other polynomials exist, and given that all size 32 fields are isomorphic, it's guaranteed that a mapping exists between them which is consistent with addition and multiplication. But we're not using any of those :)\r\n\r\nEDIT: Or do you mean that I should point out that Bech32 _could have_ used any of the other irreducible polynomials? That would be correct, but again, that'd be material for the BIP, not here.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:47:13Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762455",
      "id" : 141762455,
      "in_reply_to_id" : 141705025,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 55,
      "path" : "src/bech32.cpp",
      "position" : 55,
      "pull_request_review_id" : 66029037,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762455",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762923"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```python\r\nassert version > 0 or len(program) in [20, 32]\r\n```",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:51:04Z",
      "diff_hunk" : "@@ -44,6 +46,32 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def program_to_witness(version, program, main = False):\n+    if (type(program) is str):\n+        program = hex_str_to_bytes(program)\n+    assert(version >= 0 and version <= 16)\n+    assert(len(program) >= 2 and len(program) <= 40)\n+    assert(version > 0 or len(program) == 20 or len(program) == 32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762923",
      "id" : 141762923,
      "original_commit_id" : "574688141d3a215e166fd9e0c0e7ec2e49d3ebfa",
      "original_position" : 23,
      "path" : "test/functional/test_framework/address.py",
      "position" : null,
      "pull_request_review_id" : 66028746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141762923",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141763078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141763078"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```python\r\nrestart_node(1)\r\n```",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-28T23:52:35Z",
      "diff_hunk" : "@@ -570,6 +584,29 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].sendrawtransaction(rawtxfund)\n+\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n+            # Assert it is properly saved\n+            self.stop_node(1)\n+            self.start_node(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141763078",
      "id" : 141763078,
      "original_commit_id" : "574688141d3a215e166fd9e0c0e7ec2e49d3ebfa",
      "original_position" : 98,
      "path" : "test/functional/segwit.py",
      "position" : 98,
      "pull_request_review_id" : 66028746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141763078",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141767139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141767139"
         }
      },
      "author_association" : "OWNER",
      "body" : "```python\r\n  File \"./segwit.py\", line 606, in run_test\r\n    self.restart_node(1)\r\nAttributeError: 'SegWitTest' object has no attribute 'restart_node'\r\n```\r\n",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T00:30:42Z",
      "diff_hunk" : "@@ -570,6 +584,29 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].sendrawtransaction(rawtxfund)\n+\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n+            # Assert it is properly saved\n+            self.stop_node(1)\n+            self.start_node(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141767139",
      "id" : 141767139,
      "in_reply_to_id" : 141763078,
      "original_commit_id" : "574688141d3a215e166fd9e0c0e7ec2e49d3ebfa",
      "original_position" : 98,
      "path" : "test/functional/segwit.py",
      "position" : 98,
      "pull_request_review_id" : 66034159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T00:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141767139",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141809973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141809973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with the principle. But, the only block I suggest dedenting is the one under the condition\r\n`if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end()))`\r\nwhich is *after* a case has been decided (Bech32 decoding), and if this condition fails, the decoding fails, so early return makes sense. It's unlikely any additional cases would be added in case of failure here.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T08:00:16Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141809973",
      "id" : 141809973,
      "in_reply_to_id" : 141738523,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 172,
      "path" : "src/base58.cpp",
      "position" : 173,
      "pull_request_review_id" : 66081874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T08:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141809973",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141810564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141810564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, makes sense. In that case I adding a utility function for 'english' [is|to][lower|upper], there's too much repetition of the same (simple) functionality.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T08:04:00Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141810564",
      "id" : 141810564,
      "in_reply_to_id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 66082564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T08:04:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141810564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141811145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141811145"
         }
      },
      "author_association" : "OWNER",
      "body" : "Yes, that really doesn't help. Please don't introduce dependence on locale. We prefer deterministic, well-defined, nation-independent string processing, even if that means writing some extra code at least we **know** what it's doing then. Also this is specific to bechs32 (part of the standard) so it's better to keep it self-contained.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T08:07:56Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141811145",
      "id" : 141811145,
      "in_reply_to_id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 66083256,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T08:07:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141811145",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "The commentary seems to have reached the level of nano-nits, which is likely an indication this is ready for merge.",
      "created_at" : "2017-09-29T08:10:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-333061036",
      "id" : 333061036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11167",
      "updated_at" : "2017-09-29T08:10:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333061036",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141811940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141811940"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Or do you mean that I should point out that Bech32 could have used any of the other irreducible polynomials?\r\n\r\nYes. I just suggest a more precise phrasing. e.g., instead of\r\n> Multiplication is more complicated, and requires [...] multiplying those polynomials mod a^5 + a^3 + 1\r\n\r\nwrite \r\n\r\n> Multiplication is more complicated, and requires [...] multiplying those polynomials mod an irreducible polynomial, chosen as a^5 + a^3 + 1 in Bech32.\"",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T08:12:45Z",
      "diff_hunk" : "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141811940",
      "id" : 141811940,
      "in_reply_to_id" : 141705025,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 55,
      "path" : "src/bech32.cpp",
      "position" : 55,
      "pull_request_review_id" : 66084177,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T08:12:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141811940",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141812552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141812552"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj Just to repeat an earlier comment, `<locale>` has overloads of these functions where you can specify the locale, so there are no hidden dependencies on the default system locale. I do agree it might require more googling, and is perhaps a bit less obvious.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T08:16:00Z",
      "diff_hunk" : "@@ -0,0 +1,61 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141812552",
      "id" : 141812552,
      "in_reply_to_id" : 141733308,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 23,
      "path" : "src/test/bech32_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 66084858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T08:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141812552",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141813836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141813836"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@theuni Good catch!\r\n@sipa Suggest splitting `DecodeDestination` to two functions, one for decoding Base58 and one for Bech32. This would have trivially eliminated the bug above. Another example of something which would be fixed is `hash` being used only for Base58 decoding but being visible for the entirety of the Bech32 decoding as well.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T08:22:39Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141813836",
      "id" : 141813836,
      "in_reply_to_id" : 141711422,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 166,
      "path" : "src/base58.cpp",
      "position" : 166,
      "pull_request_review_id" : 66086349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T08:22:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141813836",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
         "events_url" : "https://api.github.com/users/danra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danra/followers",
         "following_url" : "https://api.github.com/users/danra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danra",
         "id" : 84245,
         "login" : "danra",
         "organizations_url" : "https://api.github.com/users/danra/orgs",
         "received_events_url" : "https://api.github.com/users/danra/received_events",
         "repos_url" : "https://api.github.com/users/danra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141983470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141983470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "+1 to this in some future follow-up.",
      "commit_id" : "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "created_at" : "2017-09-29T22:52:40Z",
      "diff_hunk" : "@@ -212,86 +215,108 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141983470",
      "id" : 141983470,
      "in_reply_to_id" : 141711422,
      "original_commit_id" : "86d42998b8534201848da207a6545390e1189ae1",
      "original_position" : 166,
      "path" : "src/base58.cpp",
      "position" : 166,
      "pull_request_review_id" : 66289172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11167",
      "updated_at" : "2017-09-29T22:52:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141983470",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
