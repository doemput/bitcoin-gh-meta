{
   "assignee" : null,
   "assignees" : [],
   "body" : "### Describe the issue\r\nAn attacker may corrupt memory if he is able to trigger an allocation of a big `prevector` while memory is low. When either a new `prevector` is created or an existing one is resized, `change_capacity` is called:\r\n\r\n```\r\nvoid change_capacity(size_type new_capacity) {\r\n        if (new_capacity <= N) {\r\n               ... // code omitted\r\n            }\r\n        } else {\r\n            if (!is_direct()) {\r\n                /* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert\r\n                    success. These should instead use an allocator or new/delete so that handlers\r\n                    are called as necessary, but performance would be slightly degraded by doing so. */\r\n                _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\r\n                assert(_union.indirect);\r\n                _union.capacity = new_capacity;\r\n            } else {\r\n                char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\r\n                assert(new_indirect);\r\n                T* src = direct_ptr(0);\r\n                T* dst = reinterpret_cast<T*>(new_indirect);\r\n                memcpy(dst, src, size() * sizeof(T));\r\n                _union.indirect = new_indirect;\r\n                _union.capacity = new_capacity;\r\n                _size += N + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\nIf either `realloc` or `malloc` above fail for some reason, e.g., due to out of memory, in Release builds the `capacity` would still be increased even though no memory was allocated, so any arbitrary data written to the `prevector` would overwrite unrelated memory.\r\n\r\n### Can you reliably reproduce the issue?\r\nI haven't exploited this yet. Since the `serialize` module uses `prevector`, it looks like a good attack vector: get the victim to serialize or deserialize a big piece of data, when memory is very low (either just because that's the system's state or because the attacker drained the memory somehow).\r\n\r\nEven if this isn't currently exploitable, since this is an infrastructure which might become exploitable through future uses, it should be fixed quickly.\r\n\r\n### Expected behaviour\r\nAn exception should be thrown if memory fails to allocate, as already mentioned in the inline FIXME comment in the code.\r\n\r\n### What version of bitcoin-core are you using?\r\ncommit 7fd49d01dc2ea444ba4d81d0cfa17486b03c8515\r\n",
   "closed_at" : "2017-08-26T20:25:20Z",
   "closed_by" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
      "events_url" : "https://api.github.com/users/danra/events{/privacy}",
      "followers_url" : "https://api.github.com/users/danra/followers",
      "following_url" : "https://api.github.com/users/danra/following{/other_user}",
      "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/danra",
      "id" : 84245,
      "login" : "danra",
      "organizations_url" : "https://api.github.com/users/danra/orgs",
      "received_events_url" : "https://api.github.com/users/danra/received_events",
      "repos_url" : "https://api.github.com/users/danra/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/danra"
   },
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11162/comments",
   "created_at" : "2017-08-26T14:42:33Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11162/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/11162",
   "id" : 253097854,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11162/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 11162,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Security: Attacker may get access to arbitrary memory through prevector's change_capacity",
   "updated_at" : "2017-08-26T20:25:20Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11162",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/84245?v=4",
      "events_url" : "https://api.github.com/users/danra/events{/privacy}",
      "followers_url" : "https://api.github.com/users/danra/followers",
      "following_url" : "https://api.github.com/users/danra/following{/other_user}",
      "gists_url" : "https://api.github.com/users/danra/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/danra",
      "id" : 84245,
      "login" : "danra",
      "organizations_url" : "https://api.github.com/users/danra/orgs",
      "received_events_url" : "https://api.github.com/users/danra/received_events",
      "repos_url" : "https://api.github.com/users/danra/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/danra/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/danra"
   }
}
