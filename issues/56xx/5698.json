{
   "assignee" : null,
   "body" : "Hello,\r\n\r\nI'm Evan Duffield, the lead developer of Darkcoin. We recently re-forked from Bitcoin 0.9.3 away from litecoin and after which we had a minor network fork, with 2 valid chains for a period of time. This lead many clients getting segfaults, after hitting this line of code:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0.10/src/main.cpp#L1274\r\n\r\nI've looked through updates done to Bitcoin since 0.9.3 and this looks like an unknown issue in the Bitcoin codebase. This is important and must get fixed, because a good portion of the network is on vulnerable versions and my understanding is they'll all segfault when a fork condition is met. \r\n\r\nHere's the stack trace from Darkcoin.\r\n\r\ndarkcoind 0.11.0.11\r\n \r\n(gdb) bt\r\n#0  0x000000000046a83e in ToString (this=<error reading variable: Cannot access memory at address 0x0>) at uint256.h:343\r\n#1  CheckForkWarningConditions () at main.cpp:1749\r\n#2  0x000000000047e3d5 in AddToBlockIndex (block=..., state=..., pos=...) at main.cpp:2734\r\n#3  0x000000000047e9d0 in AcceptBlock (block=..., state=..., dbp=dbp@entry=0x0) at main.cpp:3065\r\n#4  0x000000000047f991 in ProcessBlock (state=..., pfrom=pfrom@entry=0xb6ed40, pblock=pblock@entry=0x7fffdeffc460, dbp=dbp@entry=0x0) at main.cpp:3184\r\n#5  0x000000000048475f in ProcessMessage (pfrom=pfrom@entry=0xb6ed40, strCommand=..., vRecv=...) at main.cpp:4468\r\n#6  0x0000000000486b53 in ProcessMessages (pfrom=0xb6ed40) at main.cpp:4780\r\n#7  0x000000000050a71f in operator() (a0=<optimized out>, this=<optimized out>) at /usr/include/boost/function/function_template.hpp:760\r\n#8  m_invoke (connectionBody=..., this=0x7fffdeffca60) at /usr/include/boost/signals2/detail/signal_template.hpp:368\r\n#9  operator() (connectionBody=..., this=0x7fffdeffca60) at /usr/include/boost/signals2/detail/signal_template.hpp:345\r\n#10 dereference (this=<synthetic pointer>) at /usr/include/boost/signals2/detail/slot_call_iterator.hpp:82\r\n#11 dereference<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::signal1_impl<bool, CNode*, boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::slot_invoker, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot1<bool, CNode*, boost::function<bool(CNode*)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot1<bool, CNode*, boost::function<bool(CNode*)> >, boost::signals2::mutex> > > (f=<synthetic pointer>) at /usr/include/boost/iterator/iterator_facade.hpp:517\r\n#12 operator* (this=<synthetic pointer>) at /usr/include/boost/iterator/iterator_facade.hpp:643\r\n#13 operator()<boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::signal1_impl<bool, CNode*, boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::slot_invoker, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot1<bool, CNode*, boost::function<bool(CNode*)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot1<bool, CNode*, boost::function<bool(CNode*)> >, boost::signals2::mutex> > > (first=..., this=<optimized out>, last=...) at /usr/include/boost/signals2/optional_last_value.hpp:34\r\n#14 operator()<boost::signals2::optional_last_value<bool>, boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::signal1_impl<bool, CNode*, boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::slot_invoker, std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot1<bool, CNode*, boost::function<bool(CNode*)> >, boost::signals2::mutex> > >, boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot1<bool, CNode*, boost::function<bool(CNode*)> >, boost::signals2::mutex> > > (first=..., this=<optimized out>, combiner=..., last=...) at /usr/include/boost/signals2/detail/result_type_wrapper.hpp:53\r\n#15 boost::signals2::detail::signal1_impl<bool, CNode*, boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool (CNode*)>, boost::function<bool (boost::signals2::connection const&, CNode*)>, boost::signals2::mutex>::operator()(CNode*) (this=<optimized out>, arg1=arg1@entry=0xb6ed40) at /usr/include/boost/signals2/detail/signal_template.hpp:246\r\n#16 0x00000000004f0155 in operator() (arg1=0xb6ed40, this=0xb240d8) at /usr/include/boost/signals2/detail/signal_template.hpp:695\r\n#17 ThreadMessageHandler () at net.cpp:1529\r\n#18 0x00000000004f7bee in TraceThread<void (*)()> (name=0x74f2d1 \"msghand\", func=0x4effa0 <ThreadMessageHandler()>) at util.h:575\r\n#19 0x00007ffff7f55629 in ?? () from /usr/lib/libboost_thread.so.1.49.0\r\n#20 0x00007ffff6839b50 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\r\n#21 0x00007ffff65837bd in clone () from /lib/x86_64-linux-gnu/libc.so.6\r\n#22 0x0000000000000000 in ?? ()",
   "closed_at" : "2015-01-24T12:03:12Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/3793664?v=3",
      "events_url" : "https://api.github.com/users/evan82/events{/privacy}",
      "followers_url" : "https://api.github.com/users/evan82/followers",
      "following_url" : "https://api.github.com/users/evan82/following{/other_user}",
      "gists_url" : "https://api.github.com/users/evan82/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/evan82",
      "id" : 3793664,
      "login" : "evan82",
      "organizations_url" : "https://api.github.com/users/evan82/orgs",
      "received_events_url" : "https://api.github.com/users/evan82/received_events",
      "repos_url" : "https://api.github.com/users/evan82/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/evan82/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/evan82/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/evan82"
   },
   "comments" : 4,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5698/comments",
   "created_at" : "2015-01-23T13:25:50Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5698/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/5698",
   "id" : 55280897,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5698/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 5698,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Code vulnerable to segfault after a network fork",
   "updated_at" : "2015-01-24T15:50:43Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5698",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/3793664?v=3",
      "events_url" : "https://api.github.com/users/evan82/events{/privacy}",
      "followers_url" : "https://api.github.com/users/evan82/followers",
      "following_url" : "https://api.github.com/users/evan82/following{/other_user}",
      "gists_url" : "https://api.github.com/users/evan82/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/evan82",
      "id" : 3793664,
      "login" : "evan82",
      "organizations_url" : "https://api.github.com/users/evan82/orgs",
      "received_events_url" : "https://api.github.com/users/evan82/received_events",
      "repos_url" : "https://api.github.com/users/evan82/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/evan82/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/evan82/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/evan82"
   }
}
