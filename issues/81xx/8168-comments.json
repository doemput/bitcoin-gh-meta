[
   {
      "body" : "utACK e012f3c. I think we also need them in init.cpp",
      "created_at" : "2016-06-08T09:31:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224537735",
      "id" : 224537735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
      "updated_at" : "2016-06-08T09:31:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224537735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "utACK e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T10:57:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224556239",
      "id" : 224556239,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
      "updated_at" : "2016-06-08T10:57:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224556239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241738"
         }
      },
      "body" : "Instead of checking whether `*endp == 0`, shouldn't you check whether `endp == str.c_str() + str.size()` (otherwise you'd accept strings that have a 0 inside)",
      "commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T11:58:22Z",
      "diff_hunk" : "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241738",
      "id" : 66241738,
      "original_commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "original_position" : 17,
      "path" : "src/utilstrencodings.cpp",
      "position" : 17,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
      "updated_at" : "2016-06-08T11:58:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241928"
         }
      },
      "body" : "Ah, ParsePrechecks catches this.",
      "commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T12:00:12Z",
      "diff_hunk" : "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66241928",
      "id" : 66241928,
      "original_commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "original_position" : 17,
      "path" : "src/utilstrencodings.cpp",
      "position" : 17,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
      "updated_at" : "2016-06-08T12:00:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66241928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T12:27:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224573806",
      "id" : 224573806,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
      "updated_at" : "2016-06-08T12:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224573806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66245583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66245583"
         }
      },
      "body" : "Yes, that solution would be somewhat more elegant. Indeed, `ParsePrechecks` checks some number-parsing preconditions such as that one.\r\n\r\nI'm thinking about (at some point) implementing these functions from scratch instead of calling out to the C API. It wouldn't even be much longer, as there are just too many exceptions. This still doesn't exclude strto*l accepting locale-specific separators, for example. Not a big deal for current uses, but I hate such surprises.\r\n\r\nIn any case introducing them here (with tests) allows swapping out the implementation later.",
      "commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T12:30:36Z",
      "diff_hunk" : "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66245583",
      "id" : 66245583,
      "original_commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "original_position" : 17,
      "path" : "src/utilstrencodings.cpp",
      "position" : 17,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
      "updated_at" : "2016-06-08T12:30:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66245583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66246009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66246009"
         }
      },
      "body" : "Yes, I was about to suggest that a from scratch implementation might be\neasier than trying to put a harness around existing libc calls. But let's\nnot do that now. It works and seems sufficiently tested.\n",
      "commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T12:33:31Z",
      "diff_hunk" : "@@ -461,6 +461,40 @@ bool ParseInt64(const std::string& str, int64_t *out)\n         n <= std::numeric_limits<int64_t>::max();\n }\n \n+bool ParseUInt32(const std::string& str, uint32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoul will not set errno if valid\n+    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n+    if(out) *out = (uint32_t)n;\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#discussion_r66246009",
      "id" : 66246009,
      "original_commit_id" : "e012f3cea0ca4096dd4dd59a356a973c43651912",
      "original_position" : 17,
      "path" : "src/utilstrencodings.cpp",
      "position" : 17,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8168",
      "updated_at" : "2016-06-08T12:33:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/66246009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@laanwj Thanks for grabbing this so quickly! A generic utility function is the way to go for sure.\r\n\r\nutACK e012f3cea0ca4096dd4dd59a356a973c43651912",
      "created_at" : "2016-06-08T14:20:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8168#issuecomment-224604182",
      "id" : 224604182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8168",
      "updated_at" : "2016-06-08T14:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224604182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
