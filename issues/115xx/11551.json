{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Fix likely unintentional unsigned integer wrap-around in `GetBlockProofEquivalentTime(...)` when `to.nChainWork <= from.nChainWork`.\r\n\r\n**Description:**\r\n\r\n`int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, Ã¢ÂÂ¦)`\r\ncontains the following code:\r\n\r\n```\r\nint sign = 1;\r\nif (to.nChainWork > from.nChainWork) {\r\nÃ¢ÂÂ¦\r\n} else {\r\n    Ã¢ÂÂ¦\r\n    sign = -1;\r\n}\r\nÃ¢ÂÂ¦\r\nreturn sign * r.GetLow64();\r\n```\r\n\r\n`r.GetLow64()` is of type `uint64_t`.\r\n\r\nNote that the types of the two operands in `sign * r.GetLow64()` differ in signedness.\r\n\r\nSince `uint64_t` is wider than `int` the signed operand (`sign`) is converted to the unsigned type.\r\n\r\nIn the case of `sign == -1` (`to.nChainWork <= from.nChainWork`) we wrap around and end up with `18446744073709551615 * r.GetLow64()` (`std::numeric_limits<uint64_t>::max() * r.GetLow64()`) instead of the intended `-1 * r.GetLow64()`.\r\n\r\nNote however that another conversion takes place when the result is converted into the return type \r\n(`int64_t`), so the resulting value should be the expected one (equivalent to `-1 * r.GetLow64()`).\r\n\r\nIn the case that this behaviour (wrap-around + relying on return type to fix) is intentional a comment should probably be added to indicate so :-)\r\n\r\n`GetBlockProofEquivalentTime(Ã¢ÂÂ¦)` was introduced in f7303f97933be33e34d482cf8348d180c8da2a26. Friendly ping @sipa - intentional or not? :-)\r\n\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11551/comments",
   "created_at" : "2017-10-23T21:33:08Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11551/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/11551",
   "id" : 267824735,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11551/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 11551,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/11551.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11551",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/11551.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11551"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Fix unintentional unsigned integer wrap-around in GetBlockProofEquivalentTime(...) when to.nChainWork <= from.nChainWork",
   "updated_at" : "2017-10-24T00:34:43Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11551",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
