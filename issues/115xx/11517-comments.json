[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Cool! The benchmark suite is really not at all very good, sadly. If you feel up to it, I think we'd do better by just hardcoding the number of runs in each benchmark - it is often very easy to see very significant differences in the average runtime based on number of runs (even for things which take 1+ms per run!). Unless you have some better intuition than I about why this is the case, that is.",
      "created_at" : "2017-10-17T17:20:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337303617",
      "id" : 337303617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-17T17:20:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337303617",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "A while ago I wrote a microbenchmarking library similar to google benchmark. There I've used the geometric mean I think is a much better statistic than average here, and its better when you have outliers. I also think having the mean and confidence interval is much more reasonable than just min, max,avg values. Would you be interested in updates like this?",
      "created_at" : "2017-10-17T19:10:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337338021",
      "id" : 337338021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-17T19:10:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337338021",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd be happy with anything that gives more reliable values, really. Right now, to compre benchmark runs, I often have to pin to a CPU, then run multiple times, and only consider differences if both runs had the same iteration count, which is a huge pain.",
      "created_at" : "2017-10-17T22:25:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337393092",
      "id" : 337393092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-17T22:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337393092",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> Cool! The benchmark suite is really not at all very good, sadly. If you feel up to it, I think we'd do better by just hardcoding the number of runs in each benchmark \r\n\r\nThe idea of doing it this way is that the benchmarks can be run in roughly the same time on slower hardware, whereas on faster hardware they are more precise. The secp256k1 benchmarks have the problem that they take basically forever on lower-end CPUs. I agree it's probably broken though, and the range of CPUs that bitcoind can realistically run on is much smaller than secp256k1's.\r\n(if this is an issue, maybe a fixed scaling factor could be passed on the command line for this purpose, that scales all the benchmark iterations equally and is at least deterministic?)",
      "created_at" : "2017-10-18T13:59:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337600615",
      "id" : 337600615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-18T15:00:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337600615",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yea, a scaling factor seems fine, even an auto-calculated one would probably also be fine, as long as it is very stable/deterministic on the same hardware between runs, which the current version is not.",
      "created_at" : "2017-10-18T15:28:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337629929",
      "id" : 337629929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-18T15:28:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337629929",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I don't think using the exact same number of iterations is a huge benefit for stability. The problem is there will always be some random events in the system that cause some delays (unwanted fluctuations). The other problem are fluctuations that are inherent to what's benchmarked: e.g. if the code does any allocations, the runtime will always fluctuate. This fluctuation won't go away with fixed number of runs and I think the best way to deal with it is with better statistics. In my old library I am doing this:\r\n\r\n1. Perform 5 runs, each approximately 0.5 seconds.\r\n2. Calculate geometric mean of the runs.\r\n3. calculate the standard deviation of the runtime's logarithm, and print the 95% confidence interval of the runtime.\r\n\r\nUsing the logarithm is much more appropriate for benchmark results, because runtime simply can't be negative. With that data we can use a student's t test to compare the mean of two different algorithms to show if the difference is actually statistically significant or might be just random fluctuation.\r\n\r\nThat's a bit more complicated, but not by much; boost has all the features for calculating these statistics in a few lines of code. I can work on that but unfortunately I'm quite busy so that will take some time",
      "created_at" : "2017-10-19T06:43:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337814350",
      "id" : 337814350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-19T06:43:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337814350",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "For my largest use of bench (FIBRE stuff, which has pretty wide-ranging bench's which run through FEC encode/decode + mempool scan + block decode) number of runs makes a huge difference. I'd be happy to be wrong, but my guess has always been cache-related/branch-prediction effects (the issues still appear when you give bench_bitcoin a dedicated core, minimizing any system disruption). Fluctuation is fine, but I often see fluctuations which are 2-4% when iteration count changes (on roughly-1ms-runtime!) when trying to tease out 5% changes. For something running that long, it seems strange to me that you'd see such huge fluctuations.",
      "created_at" : "2017-10-19T15:04:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337937114",
      "id" : 337937114,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-19T15:04:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337937114",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "That's strange. Using a fixed number of iterations should be a simple change. How about adding a command line option to specify a fixed number of iterations? Also a filter would be useful so only a specified test runs.",
      "created_at" : "2017-10-20T07:11:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-338124929",
      "id" : 338124929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-20T07:11:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338124929",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "The premise is a bit flawed, (though this version might still be better, I like the idea of visualizing the data),\r\n> used to make a function call for each call\r\n\r\nisn't true because the value of countMask changes in two different ways inside of this logic, increasing to prevent time and cycles from being collected on every other iteration (how it starts at first). That countMask jumps up pretty quickly to powers of 2 - 1 (so the loop condition exits unless the count is a pretty high power of 2 - 1).\r\n\r\nThere's a comment that says as much, but it's non-obvious since it's tucked pretty far inside that logic.\r\n    `// If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.`\r\n   `// The restart avoids including the overhead of this code in the measurement.`\r\n\r\nI added another counter inside of KeepRunning to track those function invocations. It looks like when the benchmark has scaled up for the final timing loop for each, there are no more than 20 of these timing calls in the final output of the benchmark for the fastest benches ([example of this](https://pastebin.com/UjJAwRVw), new column overheadCount, and new row TimeLookup). The timing calls themselves take 25ns avg each according to the same benchmark code (heh).\r\n\r\nSo I guess the complexity / readability to achieve resource-independent 1s bench runs is the main thing that could be improve with this current version, I thought the same thing too until really digging into it and playing with countMask some.",
      "created_at" : "2017-10-21T22:14:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-338436056",
      "id" : 338436056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-21T22:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338436056",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/715986?v=4",
         "events_url" : "https://api.github.com/users/thebostik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/thebostik/followers",
         "following_url" : "https://api.github.com/users/thebostik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/thebostik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/thebostik",
         "id" : 715986,
         "login" : "thebostik",
         "organizations_url" : "https://api.github.com/users/thebostik/orgs",
         "received_events_url" : "https://api.github.com/users/thebostik/received_events",
         "repos_url" : "https://api.github.com/users/thebostik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/thebostik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/thebostik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/thebostik"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> isn't true because the value of countMask changes in two different ways inside of this logic, increasing to prevent time and cycles from being collected on every other iteration (how it starts at first). \r\n\r\nThat's right, but KeepRunning() itself used to introduce a function call overhead. With my change the fast path is inlined, and the slow measuring path is in the non-inlined method.\r\n\r\nI've benchmarked an extreme example (with cout so compiler doesn't optimize it away):\r\n\r\n    double d = 0.01;\r\n    while (state.KeepRunning()) {\r\n        d += 0.000001;\r\n    }\r\n    std::cout << d << std::endl;\r\n\r\nBefore my change that the measurement is 3.19 ns, with the inlined change I measure 0.83 ns.\r\n\r\nI also find the plot extremely useful, and the command line options. I can now do this:\r\n\r\n`./bench/bench_bitcoin -filter=Deser.* -evals=20 -printer=plot |tee out.html`\r\n\r\nThe output is a nice plot, I've uploaded it here: http://lawyer-maggie-58725.bitballoon.com/\r\nThere you can clearly see that there is an outlier for DeserializeAndCheckBlockTest. Using the median of multiple runs it is nicely filtered out.",
      "created_at" : "2017-10-22T07:13:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-338457167",
      "id" : 338457167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11517",
      "updated_at" : "2017-10-22T07:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338457167",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   }
]
