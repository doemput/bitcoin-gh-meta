{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "edit 0: Updated to reflect updates mentioned in https://github.com/bitcoin/bitcoin/pull/10145#issuecomment-291632820\r\n\r\nThis PR separates ProcessMessage into two functions, ContextualProcessMessage and ~ProcessMessage~ _Process*Message_. This helps with readability, verifiability, and maintainability of the code.\r\n\r\nContextualProcessMessage generates a list of context dependent \"whitelists\", all of which must pass for the incoming message before a call to ProcessMessage may be made. If the whitelists fail, the code that follows should be identical to the previous behavior. The choice of whitelists over blacklists is because it is better to explicitly enable the behaviors desired, rather than to try to block the potential bad features (e.g., adding something unsafe and new won't be permitted in unstudied contexts). This design should be extensible for adding new features (~up to 64 netmsgs total~ unlimited network messages) as well as new contexts (easy to add new whitelists). There should be very little overhead to check these whitelists as it is all ~bitwise~ _bool array lookups_.\r\n\r\n~ProcessMessage now uses an enum to switch to~ _Dispatch is now done using a std::map lookup to get_ the appropriate handler, and is semi \"stateless\" _(the map is const)_. This makes it easier to verify the code and make dispatch more modular.\r\n\r\n\r\nI haven't benchmarked that the conversion from string->~enum~_std::pair<handler_t, whitelist_index>_ has any performance implication, negative or positive. In theory this code could be faster given fewer branch mispredictions due to the ~switch~_function pointer call_. Another PR could improve the lookup algorithm ~(trivially, inlining getAllNetMessageTypes might help the compiler a lot)~, but unless it is exotic it should be compatible with this design _by replacing the map with the desired scheme_. ~I didn't think there was something obviously faster than the linear lookup, because n is small.~ _A std::map lookup should be fairly fast, but perhaps a custom map could be faster._\r\n\r\n~The correctness of this code is dependent on NetMsgTypeEnum::tag and allNetMessageTypes having the same index order. It would be nice to verify this property at compile time, which should be possible with some recursive constexpr static_assert magic. The default return of ProcessNewMessage is now also false, because the last return is unreachable.~\r\n\r\nSee #9608 and https://github.com/theuni/bitcoin/commit/f1e4e281e3f1eb884f8010ac941c82752174bdbe for related work/alternatives.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 10,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145/comments",
   "created_at" : "2017-04-03T22:13:28Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145",
   "id" : 219077123,
   "labels" : [
      {
         "color" : "006b75",
         "default" : false,
         "id" : 98298007,
         "name" : "P2P",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 10145,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/10145.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10145",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/10145.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10145"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Separate Contextual checks and handling & switch on enum in net_processing.cpp ",
   "updated_at" : "2017-09-06T19:17:47Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10145",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
      "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
      "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/JeremyRubin",
      "id" : 886523,
      "login" : "JeremyRubin",
      "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
      "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
      "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/JeremyRubin"
   }
}
