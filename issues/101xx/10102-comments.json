[
   {
      "body" : "Oh. Nice.\r\nI expected much more code to achieve this.\r\n\r\nConceptually I think this goes into the right direction, though, I'm not sure if this could end up being only a temporary in-between step that may end up being replaced.\r\nBecause, it may be more effective to split the Qt/d part completely and let them communicate over the p2p protocol (SPV and eventually RPC). More effective because it would also allow to run Qt independent from a trusted full node (if not trusted, use mechanism like full block SPV, etc.).\r\n\r\nThough, I'm aware that capnp has an RPC layer. But this would introduce another API (RPC / ZMQ / REST and then capnp RPC).\r\n\r\nI'm not saying this is the wrong direction, but we should be careful about adding another API.\r\n\r\nThree questions:\r\n- Would the performance be impractical if we would try to use the existing RPC API?\r\n- Could the capnp approach (or lets say IPC approach) be designed as a (or the) new API (\"JSON RPC v2\" and replacement for ZMQ)?\r\n- Does capnp provide a basic form of authentication? Would that even be required?",
      "created_at" : "2017-03-28T07:38:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289688689",
      "id" : 289688689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T07:38:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289688689",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> Would the performance be impractical if we would try to use the existing RPC API?\r\n\r\nReason this is currently using capnp is not performance but convenience. Capnp provides a high level API that supports bidirectional, synchronous, and asynchronous calls out of the box and allows me to easily explore implementation choices in bitcoin-qt without having to worry about low level protocol details, write a lot of parameter packing/unpacking boilerplate, and implement things like long polling.\r\n\r\nCapnp could definitely be replaced by JSON-RPC, though, and I've gone out of my way to support this by not calling capnp functions or using capnp types or headers anywhere except the `ipc/server.cpp` and `ipc/client.cpp` files. No code outside of these two files has to change in order to move to a different protocol.\r\n\r\n> Could the capnp approach (or lets say IPC approach) be designed as a (or the) new API (\"JSON RPC v2\" and replacement for ZMQ)?\r\n\r\nIt could, but I'm going out of my way right now specifically NOT to add yet another bitcoind public API that could add to the JSON-RPC/REST/ZMQ/-blocknotify/-walletnotify confusion. The IPC here doesn't happen over a TCP port or even a unix socket path but over an anonymous [socketpair](http://man7.org/linux/man-pages/man2/socketpair.2.html) using an inherited file descriptor. (I haven't done a windows implementation yet but [similar things](https://msdn.microsoft.com/en-us/library/ms683463(v=VS.85).aspx) are possible there).\r\n\r\nI'm trying to make the change completely internal for now and transparent to users. Bitcoin-qt should still be invoked the same way and behave the same way as before, starting its own node and wallet. It just will happen to do this internally now by forking a bitcoind executable rather than calling in-process functions. \r\n\r\nThis change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. Adding these features and supporting new public APIs might be things we want to do in the future, but they would involve downsides and complications that I'm trying to avoid here.\r\n\r\n> Does capnp provide a basic form of authentication? Would that even be required?\r\n\r\nIt's not required here because this change doesn't expose any new socket or endpoint, but it could be supported. Capnp's security model is based on [capabilities](https://capnproto.org/rpc.html#security), so to add authentication, you would just define a factory function that takes credentials as parameters and returns a reference to an object exposing the appropriate functionality.\r\n\r\n",
      "created_at" : "2017-03-28T09:58:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289721777",
      "id" : 289721777,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T09:58:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289721777",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\r\n\r\nI'm a fan of this general approach (ignoring the use of capn proto) and I think we should have done something like it a long time ago.",
      "created_at" : "2017-03-28T17:23:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289842646",
      "id" : 289842646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T17:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289842646",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "strong concept ACK, but if is feasible, would prefer usage of the existing RPC instead of capn'proto",
      "created_at" : "2017-03-28T22:39:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289927205",
      "id" : 289927205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-28T22:39:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289927205",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "Concept ACK, nice.\r\n\r\n> I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\r\n\r\nPlease, let's not turn this into a discussion of serialization and RPC frameworks. To be honest that's been one of the things that's putting me off of doing work like this. If you want to suggest what framework to use, please make a thorough investigation of what method would be best to use for our specific use case, and propose that, but let's not start throwing random \"I'm not comfortable with X\" comments.\r\n\r\nWe already use google protocol buffers in the GUI for payment requests to in a way that would be the straightforward choice. I'm also happy you didn't choose some XML-based abomonation or ASN.1. But anyhow, not here. For this pull it's fine to use whatever RPC mechanism you're comfortable with. \r\n\r\n> This change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. \r\n\r\nI'm also perfectly fine with keeping the scope here to \"communication between GUI and bitcoind\". This is not the place for introducing another external interface. Might be an option at some point in the future, but for now process isolation is enough motivation.",
      "created_at" : "2017-03-29T06:53:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289999980",
      "id" : 289999980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-03-29T07:24:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289999980",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618386"
         }
      },
      "body" : "Yep I guess most of these calls should be turned into async calls and not wait on a response synchronously blocking the GUI. Not necessarily in the first iteration of this, of course.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T08:29:01Z",
      "diff_hunk" : "@@ -704,10 +704,10 @@ bool WalletModel::hdEnabled() const\n \n int WalletModel::getDefaultConfirmTarget() const\n {\n-    return nTxConfirmTarget;\n+    return FIXME_IMPLEMENT_IPC_VALUE(nTxConfirmTarget);\n }\n \n bool WalletModel::getDefaultWalletRbf() const\n {\n-    return fWalletRbf;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618386",
      "id" : 108618386,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 273,
      "path" : "src/qt/walletmodel.cpp",
      "position" : 529,
      "pull_request_review_id" : 29659509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618386",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618794"
         }
      },
      "body" : "Pretty nice. So the IPC endpoint exposes multiple \"objects\". It can also expose multiple instances of one class? (e.g. for multiwallet?).",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T08:31:06Z",
      "diff_hunk" : "@@ -0,0 +1,22 @@\n+@0xa4478fe5ad6d80f5;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::messages\");\n+\n+interface Node {\n+    helpMessage @0 (mode :Int32) -> (value :Text);\n+    handleInitMessage @1 (callback: InitMessageCallback) -> (handler :Handler);\n+    wallet @2 () -> (wallet :Wallet);\n+}\n+\n+interface Wallet {\n+    getBalance @0 () -> (value :Int64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618794",
      "id" : 108618794,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 13,
      "path" : "src/ipc/messages.capnp",
      "position" : null,
      "pull_request_review_id" : 29659918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108618794",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108620012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108620012"
         }
      },
      "body" : "Should it pass through parameters? Most of the parameters to `bitcoin-qt` will actually be for the daemon. Or will you provide parameters in a later stage through IPC?",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T08:37:27Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#include \"ipc/client.h\"\n+\n+#include \"bitcoin-config.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wshadow\"\n+#include \"ipc/messages.capnp.h\"\n+#pragma GCC diagnostic pop\n+\n+#include <capnp/rpc-twoparty.h>\n+#include <kj/debug.h>\n+\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace ipc\n+{\n+\n+namespace\n+{\n+\n+//! VatId for server side of IPC connection.\n+struct ServerVatId {\n+    capnp::word scratch[4]{};\n+    capnp::MallocMessageBuilder message{scratch};\n+    capnp::rpc::twoparty::VatId::Builder vatId{message.getRoot<capnp::rpc::twoparty::VatId>()};\n+    ServerVatId() { vatId.setSide(capnp::rpc::twoparty::Side::SERVER); }\n+};\n+\n+//! Return highest possible file descriptor.\n+size_t MaxFd()\n+{\n+    struct rlimit nofile;\n+    if (getrlimit(RLIMIT_NOFILE, &nofile) == 0) {\n+        return nofile.rlim_cur - 1;\n+    } else {\n+        return 1023;\n+    }\n+}\n+\n+//! Forwarder for handleInitMessage callback.\n+class InitMessageCallbackServer final : public messages::InitMessageCallback::Server\n+{\n+public:\n+    InitMessageCallbackServer(std::function<void(const std::string&)> callback_) : callback(std::move(callback_)) {}\n+\n+    kj::Promise<void> call(CallContext context) override\n+    {\n+        callback(context.getParams().getMessage());\n+        return kj::READY_NOW;\n+    }\n+\n+    std::function<void(const std::string&)> callback;\n+};\n+\n+} // namespace\n+\n+//! Friend factory class able to call private constructors of IPC objects.\n+class Factory\n+{\n+public:\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeUnique(Args&&... args)\n+    {\n+        return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+    }\n+\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeImpl(Args&&... args)\n+    {\n+        return MakeUnique<T>(MakeUnique<typename T::Impl>(std::forward<Args>(args)...));\n+    }\n+};\n+\n+//! Handler private member struct.\n+struct Handler::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Handler::Client handlerClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Handler::Client handlerClient_) : ioContext(ioContext_), handlerClient(std::move(handlerClient_)) {}\n+};\n+\n+Handler::Handler(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Handler::~Handler() {}\n+\n+void Handler::disconnect() const\n+{\n+    auto request = impl->handlerClient.disconnectRequest();\n+    auto promise = request.send();\n+    promise.wait(impl->ioContext.waitScope);\n+}\n+\n+//! Wallet private member struct.\n+struct Wallet::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Wallet::Client walletClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Wallet::Client walletClient_) : ioContext(ioContext_), walletClient(std::move(walletClient_)) {}\n+};\n+\n+Wallet::Wallet(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Wallet::~Wallet() {}\n+\n+CAmount Wallet::getBalance() const\n+{\n+    auto request = impl->walletClient.getBalanceRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+//! Node private member struct.\n+struct Node::Impl {\n+    kj::AsyncIoContext ioContext{kj::setupAsyncIo()};\n+    kj::Own<kj::AsyncIoStream> clientStream;\n+    capnp::TwoPartyVatNetwork clientNetwork{*clientStream, capnp::rpc::twoparty::Side::CLIENT, capnp::ReaderOptions()};\n+    capnp::RpcSystem<capnp::rpc::twoparty::VatId> rpcClient{capnp::makeRpcClient(clientNetwork)};\n+    messages::Node::Client nodeClient{rpcClient.bootstrap(ServerVatId().vatId).castAs<messages::Node>()};\n+\n+    Impl(int fd) : clientStream(ioContext.lowLevelProvider->wrapSocketFd(fd, kj::LowLevelAsyncIoProvider::TAKE_OWNERSHIP)) {}\n+};\n+\n+Node::Node(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Node::~Node() {}\n+\n+std::string Node::helpMessage(HelpMessageMode mode) const\n+{\n+    auto request = impl->nodeClient.helpMessageRequest();\n+    request.setMode(mode);\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+std::unique_ptr<Handler> Node::handleInitMessage(std::function<void(const std::string&)> callback) const\n+{\n+    auto request = impl->nodeClient.handleInitMessageRequest();\n+    request.setCallback(kj::heap<InitMessageCallbackServer>(std::move(callback)));\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Handler>(impl->ioContext, response.getHandler());\n+}\n+\n+std::unique_ptr<Wallet> Node::wallet() const\n+{\n+    auto request = impl->nodeClient.walletRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Wallet>(impl->ioContext, response.getWallet());\n+}\n+\n+std::unique_ptr<Node> StartClient()\n+{\n+    int fds[2];\n+    KJ_SYSCALL(socketpair(AF_UNIX, SOCK_STREAM, 0, fds));\n+\n+    if (fork() == 0) {\n+        int maxFd = MaxFd();\n+        for (int fd = 3; fd < maxFd; ++fd) {\n+            if (fd != fds[0]) {\n+                close(fd);\n+            }\n+        }\n+        if (execlp(BITCOIN_DAEMON_NAME, BITCOIN_DAEMON_NAME, \"-ipcfd\", std::to_string(fds[0]).c_str(), nullptr) != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108620012",
      "id" : 108620012,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 166,
      "path" : "src/ipc/client.cpp",
      "position" : null,
      "pull_request_review_id" : 29661133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108620012",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108623210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108623210"
         }
      },
      "body" : "The thread group is completely remote in the case of IPC, isn't it? I guess this entire function should be done differently when IPC is used. E.g. send a `shutdown` command to the core, then have the `shutdownResult` event come from remote as response when done.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T08:52:59Z",
      "diff_hunk" : "@@ -298,9 +303,9 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        Interrupt(threadGroup);\n+        FIXME_IMPLEMENT_IPC(Interrupt(threadGroup));\n         threadGroup.join_all();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108623210",
      "id" : 108623210,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 68,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 29664563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108623210",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108623907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108623907"
         }
      },
      "body" : "How would you handle `uiInterface` in this model, e.g. signals from the server to the client?",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T08:56:29Z",
      "diff_hunk" : "@@ -676,7 +682,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    FIXME_IMPLEMENT_IPC_VALUE(uiInterface).InitMessage.connect(InitMessage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108623907",
      "id" : 108623907,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 142,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 29665337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108623907",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108631852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108631852"
         }
      },
      "body" : "> Should it pass through parameters? Most of the parameters to bitcoin-qt will actually be for the daemon. Or will you provide parameters in a later stage through IPC?\r\n\r\nThe change I'm working on now (not yet pushed) provides the parameters over IPC. It adds an `ipc::Node::parseParameters` method in `client.h` which calls `ParseParameters()` in bitcoind.\r\n\r\n```diff\r\n+    //! Set command line arguments.\r\n+    void parseParameters(int argc, const char* const argv[]) const;\r\n+\r\n     //! Get help message string.\r\n     std::string helpMessage(HelpMessageMode mode) const;\r\n \r\n+    //! Start node.\r\n+    bool appInit() const;\r\n+\r\n+    //! Stop node.\r\n+    void appShutdown() const;\r\n+\r\n+    //! Return whether shutdown was requested.\r\n+    bool shutdownRequested() const;\r\n```\r\n\r\n`ParseParameters()` is also called on the `bitcoin-qt` side in current change. This gets the job done, but could be improved later, since really the `bitcoind` global variables set by `ParseParameters()` should not even be linked into `bitcoin-qt`.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T09:35:21Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#include \"ipc/client.h\"\n+\n+#include \"bitcoin-config.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wshadow\"\n+#include \"ipc/messages.capnp.h\"\n+#pragma GCC diagnostic pop\n+\n+#include <capnp/rpc-twoparty.h>\n+#include <kj/debug.h>\n+\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace ipc\n+{\n+\n+namespace\n+{\n+\n+//! VatId for server side of IPC connection.\n+struct ServerVatId {\n+    capnp::word scratch[4]{};\n+    capnp::MallocMessageBuilder message{scratch};\n+    capnp::rpc::twoparty::VatId::Builder vatId{message.getRoot<capnp::rpc::twoparty::VatId>()};\n+    ServerVatId() { vatId.setSide(capnp::rpc::twoparty::Side::SERVER); }\n+};\n+\n+//! Return highest possible file descriptor.\n+size_t MaxFd()\n+{\n+    struct rlimit nofile;\n+    if (getrlimit(RLIMIT_NOFILE, &nofile) == 0) {\n+        return nofile.rlim_cur - 1;\n+    } else {\n+        return 1023;\n+    }\n+}\n+\n+//! Forwarder for handleInitMessage callback.\n+class InitMessageCallbackServer final : public messages::InitMessageCallback::Server\n+{\n+public:\n+    InitMessageCallbackServer(std::function<void(const std::string&)> callback_) : callback(std::move(callback_)) {}\n+\n+    kj::Promise<void> call(CallContext context) override\n+    {\n+        callback(context.getParams().getMessage());\n+        return kj::READY_NOW;\n+    }\n+\n+    std::function<void(const std::string&)> callback;\n+};\n+\n+} // namespace\n+\n+//! Friend factory class able to call private constructors of IPC objects.\n+class Factory\n+{\n+public:\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeUnique(Args&&... args)\n+    {\n+        return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+    }\n+\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeImpl(Args&&... args)\n+    {\n+        return MakeUnique<T>(MakeUnique<typename T::Impl>(std::forward<Args>(args)...));\n+    }\n+};\n+\n+//! Handler private member struct.\n+struct Handler::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Handler::Client handlerClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Handler::Client handlerClient_) : ioContext(ioContext_), handlerClient(std::move(handlerClient_)) {}\n+};\n+\n+Handler::Handler(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Handler::~Handler() {}\n+\n+void Handler::disconnect() const\n+{\n+    auto request = impl->handlerClient.disconnectRequest();\n+    auto promise = request.send();\n+    promise.wait(impl->ioContext.waitScope);\n+}\n+\n+//! Wallet private member struct.\n+struct Wallet::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Wallet::Client walletClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Wallet::Client walletClient_) : ioContext(ioContext_), walletClient(std::move(walletClient_)) {}\n+};\n+\n+Wallet::Wallet(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Wallet::~Wallet() {}\n+\n+CAmount Wallet::getBalance() const\n+{\n+    auto request = impl->walletClient.getBalanceRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+//! Node private member struct.\n+struct Node::Impl {\n+    kj::AsyncIoContext ioContext{kj::setupAsyncIo()};\n+    kj::Own<kj::AsyncIoStream> clientStream;\n+    capnp::TwoPartyVatNetwork clientNetwork{*clientStream, capnp::rpc::twoparty::Side::CLIENT, capnp::ReaderOptions()};\n+    capnp::RpcSystem<capnp::rpc::twoparty::VatId> rpcClient{capnp::makeRpcClient(clientNetwork)};\n+    messages::Node::Client nodeClient{rpcClient.bootstrap(ServerVatId().vatId).castAs<messages::Node>()};\n+\n+    Impl(int fd) : clientStream(ioContext.lowLevelProvider->wrapSocketFd(fd, kj::LowLevelAsyncIoProvider::TAKE_OWNERSHIP)) {}\n+};\n+\n+Node::Node(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Node::~Node() {}\n+\n+std::string Node::helpMessage(HelpMessageMode mode) const\n+{\n+    auto request = impl->nodeClient.helpMessageRequest();\n+    request.setMode(mode);\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+std::unique_ptr<Handler> Node::handleInitMessage(std::function<void(const std::string&)> callback) const\n+{\n+    auto request = impl->nodeClient.handleInitMessageRequest();\n+    request.setCallback(kj::heap<InitMessageCallbackServer>(std::move(callback)));\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Handler>(impl->ioContext, response.getHandler());\n+}\n+\n+std::unique_ptr<Wallet> Node::wallet() const\n+{\n+    auto request = impl->nodeClient.walletRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Wallet>(impl->ioContext, response.getWallet());\n+}\n+\n+std::unique_ptr<Node> StartClient()\n+{\n+    int fds[2];\n+    KJ_SYSCALL(socketpair(AF_UNIX, SOCK_STREAM, 0, fds));\n+\n+    if (fork() == 0) {\n+        int maxFd = MaxFd();\n+        for (int fd = 3; fd < maxFd; ++fd) {\n+            if (fd != fds[0]) {\n+                close(fd);\n+            }\n+        }\n+        if (execlp(BITCOIN_DAEMON_NAME, BITCOIN_DAEMON_NAME, \"-ipcfd\", std::to_string(fds[0]).c_str(), nullptr) != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108631852",
      "id" : 108631852,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 166,
      "path" : "src/ipc/client.cpp",
      "position" : null,
      "pull_request_review_id" : 29673898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108631852",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108636959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108636959"
         }
      },
      "body" : "> It can also expose multiple instances of one class?\r\n\r\nYes, the `ipc::Node::wallet()` method right now returns an `ipc::Wallet` interface wrapping pwalletMain, but it could support multiwallet by just adding an argument that indicates a different wallet object to return.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T09:59:11Z",
      "diff_hunk" : "@@ -0,0 +1,22 @@\n+@0xa4478fe5ad6d80f5;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::messages\");\n+\n+interface Node {\n+    helpMessage @0 (mode :Int32) -> (value :Text);\n+    handleInitMessage @1 (callback: InitMessageCallback) -> (handler :Handler);\n+    wallet @2 () -> (wallet :Wallet);\n+}\n+\n+interface Wallet {\n+    getBalance @0 () -> (value :Int64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108636959",
      "id" : 108636959,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 13,
      "path" : "src/ipc/messages.capnp",
      "position" : null,
      "pull_request_review_id" : 29673898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108636959",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108637607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108637607"
         }
      },
      "body" : "> The thread group is completely remote in the case of IPC, isn't it?\r\n\r\nYes the change I'm working on now adds `threadGroup` and `scheduler` members to `NodeServer` in `ipc/server.cpp`, removing the current instances in `BitcoinCore`.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T10:02:14Z",
      "diff_hunk" : "@@ -298,9 +303,9 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        Interrupt(threadGroup);\n+        FIXME_IMPLEMENT_IPC(Interrupt(threadGroup));\n         threadGroup.join_all();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108637607",
      "id" : 108637607,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 68,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 29673898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108637607",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108640254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108640254"
         }
      },
      "body" : "> How would you handle uiInterface in this model, e.g. signals from the server to the client?\r\n\r\nThis line needs to change to `ipcNode.handleInitMessage(InitMessage)`. If you look at the `ipc::Node::handleInitMessage` implementation, it takes a std::function argument, creates a capnp `InitMessageCallback::Server` object that can invoke it, and sends a reference to that object over the IPC channel to `bitcoind`. `bitcoind` then calls `uiInterface.InitMessage.connect` with a handler that sends messages with the `InitMessageCallback` object.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T10:16:22Z",
      "diff_hunk" : "@@ -676,7 +682,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    FIXME_IMPLEMENT_IPC_VALUE(uiInterface).InitMessage.connect(InitMessage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108640254",
      "id" : 108640254,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 142,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 29673898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108640254",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108643836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108643836"
         }
      },
      "body" : "> Yep I guess most of these calls should be turned into async calls and not wait on a response synchronously blocking the GUI. Not necessarily in the first iteration of this, of course.\r\n\r\nAnother alternative in some of these cases is to consolidate many low level calls into fewer calls of a higher level interface.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T10:35:58Z",
      "diff_hunk" : "@@ -704,10 +704,10 @@ bool WalletModel::hdEnabled() const\n \n int WalletModel::getDefaultConfirmTarget() const\n {\n-    return nTxConfirmTarget;\n+    return FIXME_IMPLEMENT_IPC_VALUE(nTxConfirmTarget);\n }\n \n bool WalletModel::getDefaultWalletRbf() const\n {\n-    return fWalletRbf;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108643836",
      "id" : 108643836,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 273,
      "path" : "src/qt/walletmodel.cpp",
      "position" : 529,
      "pull_request_review_id" : 29673898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108643836",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108647650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108647650"
         }
      },
      "body" : "I think that's not optional but a required element of making this asynchronous, otherwise there'd be a lot of roundtrips.\r\n\r\nEdit: Though ofcourse one of the things cap'n'proto advertises with is that there is 'zero roundtrip overhead', because of the promise pipelining, but we don't want to depend too strongly on that.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T10:58:28Z",
      "diff_hunk" : "@@ -704,10 +704,10 @@ bool WalletModel::hdEnabled() const\n \n int WalletModel::getDefaultConfirmTarget() const\n {\n-    return nTxConfirmTarget;\n+    return FIXME_IMPLEMENT_IPC_VALUE(nTxConfirmTarget);\n }\n \n bool WalletModel::getDefaultWalletRbf() const\n {\n-    return fWalletRbf;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108647650",
      "id" : 108647650,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 273,
      "path" : "src/qt/walletmodel.cpp",
      "position" : 529,
      "pull_request_review_id" : 29690453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108647650",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108647949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108647949"
         }
      },
      "body" : "Cool. I like this auto-generated IPC stuff. Saves writing a lot of boilerplate.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T11:00:13Z",
      "diff_hunk" : "@@ -0,0 +1,22 @@\n+@0xa4478fe5ad6d80f5;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::messages\");\n+\n+interface Node {\n+    helpMessage @0 (mode :Int32) -> (value :Text);\n+    handleInitMessage @1 (callback: InitMessageCallback) -> (handler :Handler);\n+    wallet @2 () -> (wallet :Wallet);\n+}\n+\n+interface Wallet {\n+    getBalance @0 () -> (value :Int64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108647949",
      "id" : 108647949,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 13,
      "path" : "src/ipc/messages.capnp",
      "position" : null,
      "pull_request_review_id" : 29690788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108647949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108648613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108648613"
         }
      },
      "body" : "So the server then effectively calls an object on the client when the notification happens? No polling/waiting involved? That's great.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T11:04:37Z",
      "diff_hunk" : "@@ -676,7 +682,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    FIXME_IMPLEMENT_IPC_VALUE(uiInterface).InitMessage.connect(InitMessage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108648613",
      "id" : 108648613,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 142,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 29691510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108648613",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108649962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108649962"
         }
      },
      "body" : "This locking (either of cs_main or wallet->cs_wallet) makes no sense when a remote core is used.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T11:12:56Z",
      "diff_hunk" : "@@ -679,17 +679,17 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n \n bool WalletModel::transactionCanBeAbandoned(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    LOCK2(FIXME_IMPLEMENT_IPC_VALUE(cs_main), wallet->cs_wallet);\n     const CWalletTx *wtx = wallet->GetWalletTx(hash);\n-    if (!wtx || wtx->isAbandoned() || wtx->GetDepthInMainChain() > 0 || wtx->InMempool())\n+    if (!wtx || wtx->isAbandoned() || FIXME_IMPLEMENT_IPC_VALUE(wtx->GetDepthInMainChain()) > 0 || FIXME_IMPLEMENT_IPC_VALUE(wtx->InMempool()))\n         return false;\n     return true;\n }\n \n bool WalletModel::abandonTransaction(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    return wallet->AbandonTransaction(hash);\n+    LOCK2(FIXME_IMPLEMENT_IPC_VALUE(cs_main), wallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108649962",
      "id" : 108649962,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 258,
      "path" : "src/qt/walletmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 29692971,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108649962",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108670193"
         }
      },
      "body" : "> So the server then effectively calls an object on the client when the notification happens? No polling/waiting involved? That's great.\r\n\r\nYes, though to be clear, there is still polling/waiting happening under the hood. It just gets handled by the capnp event loop, which waits for incoming IPC messages and dispatches to `InitMessageCallback::Server::call` and other server methods. The change I'm working on now (not yet pushed) spawns a new thread in ipc/client.cpp to run the event loop.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T13:06:38Z",
      "diff_hunk" : "@@ -676,7 +682,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    FIXME_IMPLEMENT_IPC_VALUE(uiInterface).InitMessage.connect(InitMessage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670193",
      "id" : 108670193,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 142,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 29714989,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108670193",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670537"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108670537"
         }
      },
      "body" : "FYI this is quite similar to how fd handles are passed in for the P2P and RPC port in my cloudabi port: https://github.com/laanwj/bitcoin/blob/2017_03_cabi_fs/src/httpserver.cpp#L357 https://github.com/laanwj/bitcoin/blob/2017_03_cabi_fs/src/init.cpp#L1356\r\n\r\nIt's a bit of a shame that argument parsing doesn't work here yet so this needs to use manual parsing using C functions :/",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T13:08:25Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#include \"ipc/server.h\"\n+\n+#include \"init.h\"\n+#include \"ui_interface.h\"\n+#include \"wallet/wallet.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wshadow\"\n+#include \"ipc/messages.capnp.h\"\n+#pragma GCC diagnostic pop\n+\n+#include <capnp/rpc-twoparty.h>\n+#include <kj/async-io.h>\n+\n+namespace ipc\n+{\n+\n+namespace\n+{\n+\n+class HandlerServer final : public messages::Handler::Server\n+{\n+public:\n+    HandlerServer(kj::AsyncIoContext& ioContext_, messages::InitMessageCallback::Client callback_)\n+        : ioContext(ioContext_),\n+          callback(std::move(callback_)),\n+          connection(uiInterface.InitMessage.connect(\n+              [this](const std::string& message) {\n+                  auto request = callback.callRequest();\n+                  request.setMessage(message);\n+                  auto promise = request.send();\n+                  promise.wait(ioContext.waitScope);\n+              })) {}\n+\n+    kj::Promise<void> disconnect(DisconnectContext context) override\n+    {\n+        connection.disconnect();\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::AsyncIoContext& ioContext;\n+\n+    messages::InitMessageCallback::Client callback;\n+    boost::signals2::scoped_connection connection;\n+};\n+\n+class WalletServer final : public messages::Wallet::Server\n+{\n+public:\n+    WalletServer(CWallet& wallet_) : wallet(wallet_) {}\n+\n+    kj::Promise<void> getBalance(GetBalanceContext context) override\n+    {\n+        context.getResults().setValue(wallet.GetBalance());\n+        return kj::READY_NOW;\n+    }\n+\n+    CWallet& wallet;\n+};\n+\n+class NodeServer final : public messages::Node::Server\n+{\n+public:\n+    NodeServer(kj::AsyncIoContext& ioContext_) : ioContext(ioContext_) {}\n+    kj::Promise<void> helpMessage(HelpMessageContext context) override\n+    {\n+        context.getResults().setValue(HelpMessage(HelpMessageMode(context.getParams().getMode())));\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::Promise<void> handleInitMessage(HandleInitMessageContext context) override\n+    {\n+        context.getResults().setHandler(ipc::messages::Handler::Client(kj::heap<HandlerServer>(ioContext, context.getParams().getCallback())));\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::Promise<void> wallet(WalletContext context) override\n+    {\n+        context.getResults().setWallet(ipc::messages::Wallet::Client(kj::heap<WalletServer>(*pwalletMain)));\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::AsyncIoContext& ioContext;\n+};\n+\n+} // namespace\n+\n+bool StartServer(int argc, char* argv[], int& exitStatus)\n+{\n+    if (argc != 3 || strcmp(argv[1], \"-ipcfd\") != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670537",
      "id" : 108670537,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 89,
      "path" : "src/ipc/server.cpp",
      "position" : null,
      "pull_request_review_id" : 29715391,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108670537",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108670851"
         }
      },
      "body" : "> This locking (either of cs_main or wallet->cs_wallet) makes no sense when a remote core is used.\r\n\r\nYeah, the point of the FIXME_IMPLEMENT_IPC macro is really just to segfault and indicate places in the code which need to be updated to support IPC. Many of them are pretty nonsensical.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T13:09:53Z",
      "diff_hunk" : "@@ -679,17 +679,17 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n \n bool WalletModel::transactionCanBeAbandoned(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    LOCK2(FIXME_IMPLEMENT_IPC_VALUE(cs_main), wallet->cs_wallet);\n     const CWalletTx *wtx = wallet->GetWalletTx(hash);\n-    if (!wtx || wtx->isAbandoned() || wtx->GetDepthInMainChain() > 0 || wtx->InMempool())\n+    if (!wtx || wtx->isAbandoned() || FIXME_IMPLEMENT_IPC_VALUE(wtx->GetDepthInMainChain()) > 0 || FIXME_IMPLEMENT_IPC_VALUE(wtx->InMempool()))\n         return false;\n     return true;\n }\n \n bool WalletModel::abandonTransaction(uint256 hash) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    return wallet->AbandonTransaction(hash);\n+    LOCK2(FIXME_IMPLEMENT_IPC_VALUE(cs_main), wallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670851",
      "id" : 108670851,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 258,
      "path" : "src/qt/walletmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 29714989,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108670851",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108671594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108671594"
         }
      },
      "body" : "> It's a bit of a shame that argument parsing doesn't work here yet so this needs to use manual parsing using C functions :/\r\n\r\nI think I could change this to at least use GetArg like you are doing in your cloudabi code.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-29T13:13:13Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#include \"ipc/server.h\"\n+\n+#include \"init.h\"\n+#include \"ui_interface.h\"\n+#include \"wallet/wallet.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wshadow\"\n+#include \"ipc/messages.capnp.h\"\n+#pragma GCC diagnostic pop\n+\n+#include <capnp/rpc-twoparty.h>\n+#include <kj/async-io.h>\n+\n+namespace ipc\n+{\n+\n+namespace\n+{\n+\n+class HandlerServer final : public messages::Handler::Server\n+{\n+public:\n+    HandlerServer(kj::AsyncIoContext& ioContext_, messages::InitMessageCallback::Client callback_)\n+        : ioContext(ioContext_),\n+          callback(std::move(callback_)),\n+          connection(uiInterface.InitMessage.connect(\n+              [this](const std::string& message) {\n+                  auto request = callback.callRequest();\n+                  request.setMessage(message);\n+                  auto promise = request.send();\n+                  promise.wait(ioContext.waitScope);\n+              })) {}\n+\n+    kj::Promise<void> disconnect(DisconnectContext context) override\n+    {\n+        connection.disconnect();\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::AsyncIoContext& ioContext;\n+\n+    messages::InitMessageCallback::Client callback;\n+    boost::signals2::scoped_connection connection;\n+};\n+\n+class WalletServer final : public messages::Wallet::Server\n+{\n+public:\n+    WalletServer(CWallet& wallet_) : wallet(wallet_) {}\n+\n+    kj::Promise<void> getBalance(GetBalanceContext context) override\n+    {\n+        context.getResults().setValue(wallet.GetBalance());\n+        return kj::READY_NOW;\n+    }\n+\n+    CWallet& wallet;\n+};\n+\n+class NodeServer final : public messages::Node::Server\n+{\n+public:\n+    NodeServer(kj::AsyncIoContext& ioContext_) : ioContext(ioContext_) {}\n+    kj::Promise<void> helpMessage(HelpMessageContext context) override\n+    {\n+        context.getResults().setValue(HelpMessage(HelpMessageMode(context.getParams().getMode())));\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::Promise<void> handleInitMessage(HandleInitMessageContext context) override\n+    {\n+        context.getResults().setHandler(ipc::messages::Handler::Client(kj::heap<HandlerServer>(ioContext, context.getParams().getCallback())));\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::Promise<void> wallet(WalletContext context) override\n+    {\n+        context.getResults().setWallet(ipc::messages::Wallet::Client(kj::heap<WalletServer>(*pwalletMain)));\n+        return kj::READY_NOW;\n+    }\n+\n+    kj::AsyncIoContext& ioContext;\n+};\n+\n+} // namespace\n+\n+bool StartServer(int argc, char* argv[], int& exitStatus)\n+{\n+    if (argc != 3 || strcmp(argv[1], \"-ipcfd\") != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108671594",
      "id" : 108671594,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 89,
      "path" : "src/ipc/server.cpp",
      "position" : null,
      "pull_request_review_id" : 29714989,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108671594",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r109085466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109085466"
         }
      },
      "body" : "Right, ideally bitcoin-qt would need only a very small subset of the bitcoind code.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-31T04:19:04Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#include \"ipc/client.h\"\n+\n+#include \"bitcoin-config.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wshadow\"\n+#include \"ipc/messages.capnp.h\"\n+#pragma GCC diagnostic pop\n+\n+#include <capnp/rpc-twoparty.h>\n+#include <kj/debug.h>\n+\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+\n+namespace ipc\n+{\n+\n+namespace\n+{\n+\n+//! VatId for server side of IPC connection.\n+struct ServerVatId {\n+    capnp::word scratch[4]{};\n+    capnp::MallocMessageBuilder message{scratch};\n+    capnp::rpc::twoparty::VatId::Builder vatId{message.getRoot<capnp::rpc::twoparty::VatId>()};\n+    ServerVatId() { vatId.setSide(capnp::rpc::twoparty::Side::SERVER); }\n+};\n+\n+//! Return highest possible file descriptor.\n+size_t MaxFd()\n+{\n+    struct rlimit nofile;\n+    if (getrlimit(RLIMIT_NOFILE, &nofile) == 0) {\n+        return nofile.rlim_cur - 1;\n+    } else {\n+        return 1023;\n+    }\n+}\n+\n+//! Forwarder for handleInitMessage callback.\n+class InitMessageCallbackServer final : public messages::InitMessageCallback::Server\n+{\n+public:\n+    InitMessageCallbackServer(std::function<void(const std::string&)> callback_) : callback(std::move(callback_)) {}\n+\n+    kj::Promise<void> call(CallContext context) override\n+    {\n+        callback(context.getParams().getMessage());\n+        return kj::READY_NOW;\n+    }\n+\n+    std::function<void(const std::string&)> callback;\n+};\n+\n+} // namespace\n+\n+//! Friend factory class able to call private constructors of IPC objects.\n+class Factory\n+{\n+public:\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeUnique(Args&&... args)\n+    {\n+        return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+    }\n+\n+    template <typename T, typename... Args>\n+    static std::unique_ptr<T> MakeImpl(Args&&... args)\n+    {\n+        return MakeUnique<T>(MakeUnique<typename T::Impl>(std::forward<Args>(args)...));\n+    }\n+};\n+\n+//! Handler private member struct.\n+struct Handler::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Handler::Client handlerClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Handler::Client handlerClient_) : ioContext(ioContext_), handlerClient(std::move(handlerClient_)) {}\n+};\n+\n+Handler::Handler(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Handler::~Handler() {}\n+\n+void Handler::disconnect() const\n+{\n+    auto request = impl->handlerClient.disconnectRequest();\n+    auto promise = request.send();\n+    promise.wait(impl->ioContext.waitScope);\n+}\n+\n+//! Wallet private member struct.\n+struct Wallet::Impl {\n+    kj::AsyncIoContext& ioContext;\n+    messages::Wallet::Client walletClient;\n+    Impl(kj::AsyncIoContext& ioContext_, messages::Wallet::Client walletClient_) : ioContext(ioContext_), walletClient(std::move(walletClient_)) {}\n+};\n+\n+Wallet::Wallet(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Wallet::~Wallet() {}\n+\n+CAmount Wallet::getBalance() const\n+{\n+    auto request = impl->walletClient.getBalanceRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+//! Node private member struct.\n+struct Node::Impl {\n+    kj::AsyncIoContext ioContext{kj::setupAsyncIo()};\n+    kj::Own<kj::AsyncIoStream> clientStream;\n+    capnp::TwoPartyVatNetwork clientNetwork{*clientStream, capnp::rpc::twoparty::Side::CLIENT, capnp::ReaderOptions()};\n+    capnp::RpcSystem<capnp::rpc::twoparty::VatId> rpcClient{capnp::makeRpcClient(clientNetwork)};\n+    messages::Node::Client nodeClient{rpcClient.bootstrap(ServerVatId().vatId).castAs<messages::Node>()};\n+\n+    Impl(int fd) : clientStream(ioContext.lowLevelProvider->wrapSocketFd(fd, kj::LowLevelAsyncIoProvider::TAKE_OWNERSHIP)) {}\n+};\n+\n+Node::Node(std::unique_ptr<Impl> impl_) : impl(std::move(impl_)) {}\n+\n+Node::~Node() {}\n+\n+std::string Node::helpMessage(HelpMessageMode mode) const\n+{\n+    auto request = impl->nodeClient.helpMessageRequest();\n+    request.setMode(mode);\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return response.getValue();\n+}\n+\n+std::unique_ptr<Handler> Node::handleInitMessage(std::function<void(const std::string&)> callback) const\n+{\n+    auto request = impl->nodeClient.handleInitMessageRequest();\n+    request.setCallback(kj::heap<InitMessageCallbackServer>(std::move(callback)));\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Handler>(impl->ioContext, response.getHandler());\n+}\n+\n+std::unique_ptr<Wallet> Node::wallet() const\n+{\n+    auto request = impl->nodeClient.walletRequest();\n+    auto promise = request.send();\n+    auto response = promise.wait(impl->ioContext.waitScope);\n+    return Factory::MakeImpl<Wallet>(impl->ioContext, response.getWallet());\n+}\n+\n+std::unique_ptr<Node> StartClient()\n+{\n+    int fds[2];\n+    KJ_SYSCALL(socketpair(AF_UNIX, SOCK_STREAM, 0, fds));\n+\n+    if (fork() == 0) {\n+        int maxFd = MaxFd();\n+        for (int fd = 3; fd < maxFd; ++fd) {\n+            if (fd != fds[0]) {\n+                close(fd);\n+            }\n+        }\n+        if (execlp(BITCOIN_DAEMON_NAME, BITCOIN_DAEMON_NAME, \"-ipcfd\", std::to_string(fds[0]).c_str(), nullptr) != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r109085466",
      "id" : 109085466,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 166,
      "path" : "src/ipc/client.cpp",
      "position" : null,
      "pull_request_review_id" : 30164009,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109085466",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r109085760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109085760"
         }
      },
      "body" : "Yes, I understand that, but one of the problems with existing proposals for using RPC to communicate to the server had no way to handle asynchonous notifications, so needed to e.g. poll for new transactions every few seconds. This protocol clearly does support true bidirectional communication.\r\n\r\nAs for the capnp event loop, as most of the responses and notifications from the server involve updating the UI, couldn't we integrate that into Qt's event loop? Conceptually that'd be easier. Qt only allows GUI updates from a single thread, so if the capnp event loop is separete, everything will have to be separately ferried through Qt's signal mechanism to get to the GUI thread.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-03-31T04:23:28Z",
      "diff_hunk" : "@@ -676,7 +682,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    FIXME_IMPLEMENT_IPC_VALUE(uiInterface).InitMessage.connect(InitMessage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r109085760",
      "id" : 109085760,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 142,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 30164306,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/109085760",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r110290288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110290288"
         }
      },
      "body" : "> As for the capnp event loop, as most of the responses and notifications from the server involve updating the UI, couldn't we integrate that into Qt's event loop? \r\n\r\nIt should be possible to integrate the qt and capnp event loops (http://stackoverflow.com/questions/33131595/what-is-a-good-way-to-integrate-3rd-party-asynchronous-apis-with-capn-proto-rpc), but for now `StartClient` is just spawning an event loop thread, since this seems like the path of least resistance.",
      "commit_id" : "8d92ff563485d5691e3c737aca36c92e056fe4cf",
      "created_at" : "2017-04-06T23:34:25Z",
      "diff_hunk" : "@@ -676,7 +682,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    FIXME_IMPLEMENT_IPC_VALUE(uiInterface).InitMessage.connect(InitMessage);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#discussion_r110290288",
      "id" : 110290288,
      "original_commit_id" : "bf5f8ed6f0124d65af0198b473cb25513fe84325",
      "original_position" : 142,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 31454791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10102",
      "updated_at" : "2017-04-20T21:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/110290288",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Updated and rebased 0ca73bc13c3457cd5c3244abfa9fa586d9137117 -> 5e28c2fcc2757479d29ca83cd3256584ab908e48 ([pr/ipc.1](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.1) -> [pr/ipc.3](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.3)) to avoid a conflict. Main addition is an expanded [src/ipc/README.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/README.md) file.\r\n\r\nAgain it would be very helpful to have some code review for the main commit (5e28c2fcc2757479d29ca83cd3256584ab908e48 \"Add barebones IPC framework to bitcoin-qt and bitcoind\"). Giving feedback on the README file would be an easy place to start.",
      "created_at" : "2017-04-07T20:51:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-292648484",
      "id" : 292648484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-10T22:06:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292648484",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Updated 5e28c2fcc2757479d29ca83cd3256584ab908e48 -> dda375662d060ce42b5113247301e0289584e14d ([pr/ipc.3](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.3) -> [pr/ipc.4](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.4))\r\n\r\nThis implements two suggestions from @JeremyRubin:\r\n\r\n* It includes a small commit demonstrating what it looks like to add a single new method to the API:\r\n[`dda3756 Add ipc::Node::getNodeCount method`](https://github.com/bitcoin/bitcoin/commit/dda375662d060ce42b5113247301e0289584e14d). This should help give a clearer picture of the layers involved in implementing an IPC call.\r\n\r\n* Instead of adding Cap'n Proto code and modifying Qt code in a single commit, it includes a new early commit ([`1407a2b Add ipc::Node and ipc::Wallet interfaces`](https://github.com/bitcoin/bitcoin/commit/1407a2bb0b0a3ab21ae374b58980bb0dc53b12c5) that introduces new [`src/ipc/interfaces.h`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/interfaces.h)  and [`src/ipc/interfaces.cpp`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/interfaces.cpp) files and ports Qt code to use them without any Cap'n Proto stuff. This shows the separation between Qt updates and IPC implementation details better and makes it easier to see how a different IPC system could be substituted in for Cap'n Proto. This commit could even be made into a separate PR.\r\n",
      "created_at" : "2017-04-10T22:25:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-293096821",
      "id" : 293096821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-10T22:25:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293096821",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@laanwj pointed out in IRC (https://botbot.me/freenode/bitcoin-core-dev/msg/83983170/) that this change could help make the GUI more responsive by preventing Qt event processing from getting blocked, which currently happens in the monolithic `bitcoin-qt` when the main GUI thread makes a call to a slow libbitcoin function, or waits a long time for a `cs_main` or `cs_wallet` lock.\r\n\r\nAt the time in IRC, I didn't think this change could directly help gui responsiveness, because although it does move libbitcoin and LOCK calls out of the `bitcoin-qt` process and into the `bitcoind` process, it just replaces these calls with blocking IPCs that make the GUI equally unresponsive when they tie up the main GUI thread.\r\n\r\nHowever, this doesn't have to be the case. The place where IPC calls currently block waiting for responses is the `return promise.get_future().get();` line in `ipc::util::Call::send` method here: https://github.com/ryanofsky/bitcoin/blob/pr/ipc.4/src/ipc/util.h#L166\r\n\r\nBut the `std::promise` object used in that line could easily be replaced with a Qt-aware promise object that processes GUI events while the promise is blocked. (The Qt-aware promise implementation would check if it is being used on the main GUI thread, and if so use a [local Qt event loop](https://doc.qt.io/archives/qq/qq27-responsive-guis.html#waitinginalocaleventloop) substituting\r\n`loop.exec()` for `std::future::get()` and `loop.quit()` for `std::promise::set_value()`.)\r\n\r\nThis would add more overhead and make the average IPC call a little slower. But it would avoid situations where an unexpectedly slow IPC call ties up the whole gui, so it might be worth doing anyway.",
      "created_at" : "2017-04-14T05:44:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610",
      "id" : 294094610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-14T05:45:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294094610",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@ryanofsky Yes, integrating the IPC event loop and Qt event loop would help responsiveness.\r\nThough I remember there were some issues in some cases with recursively calling into the Qt event loop (e.g. things need to be reentrant, deleteLater stuff runs earlier than expected, to keep in mind).",
      "created_at" : "2017-04-14T08:00:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294111566",
      "id" : 294111566,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-14T08:00:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294111566",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@ryanofsky I'm not familiar with Qt or capnproto, but I don't understand what the move to a different process has to do with making things less blocking. Any changes in architecture that would result in less blocks should equally be possible within the same process.\r\n\r\n",
      "created_at" : "2017-04-17T12:23:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294474620",
      "id" : 294474620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-17T12:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294474620",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "> This change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. Adding these features and supporting new public APIs might be things we want to do in the future, but they would involve downsides and complications that I'm trying to avoid here.\r\n\r\nI don't understand the goal here. On itself, there seems little benefit in separating the GUI and the rest into separate processes if those two processes still depend on each other (this is different from separating the wallet from the node, for example, as there as security considerations there... but for that use case the easiest approach seems to just have a lightweight mode and running two instances).\r\n\r\nI think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background, but if that's not the intent, what is the purpose?",
      "created_at" : "2017-04-17T12:29:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294475317",
      "id" : 294475317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-17T12:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294475317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "> Any changes in architecture that would result in less blocks should equally be possible within the same process.\r\n\r\nLet's say there are 50 places where bitcoin-qt calls a libbitcoin function. That means there are 50 places to update if you want bitcoin-qt handle to events while the function calls are executing. WIth the IPC framework, there is only one place you have to update instead of 50 places (if you want to do this).\r\n\r\n> On itself, there seems little benefit in separating the GUI and the rest into separate processes if those two processes still depend on each other.\r\n\r\nOk, so you think the benefits are small, and I think they are more significant.\r\n\r\n> I think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background,\r\n\r\nThis is trivial once bitcoin-qt is controlling bitcoind across a socket. I'm just implementing the socket part first, without introducing new UI features for now.",
      "created_at" : "2017-04-17T14:15:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294493467",
      "id" : 294493467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-17T14:15:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294493467",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> > I think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background,\r\n>\r\n> This is trivial once bitcoin-qt is controlling bitcoind across a socket. I'm just implementing the socket part first, without introducing new UI features for now.\r\n\r\nOk, that's what I was missing. It wasn't clear to me that this was a just first step towards a more useful separation.",
      "created_at" : "2017-04-17T18:48:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294557349",
      "id" : 294557349,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-17T18:48:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294557349",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "As of 8f78f085976bcb0f9093f0b1b4c3c65110ec44aa ([pr/ipc.7](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.7)), this change is much more complete & functional. You can also now monitor the IPC traffic going back and forth between `bitcoin-qt` and `bitcoind` by setting the `IPC_DEBUG` environment variable (`export IPC_DEBUG=1`)\r\n",
      "created_at" : "2017-04-27T18:01:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-297792312",
      "id" : 297792312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10102",
      "updated_at" : "2017-04-27T18:01:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297792312",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
