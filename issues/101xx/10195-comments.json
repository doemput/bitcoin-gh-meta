[
   {
      "body" : "This is awesome.",
      "created_at" : "2017-04-12T18:03:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-293660229",
      "id" : 293660229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-12T18:03:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293660229",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Rebased on top of new #10148.",
      "created_at" : "2017-04-16T17:43:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-294364323",
      "id" : 294364323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-16T17:43:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294364323",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Rebased without #10148 at popular request.",
      "created_at" : "2017-04-19T15:35:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-295313204",
      "id" : 295313204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-19T15:35:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295313204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Few overrides needed probably:\r\n```\r\n+./coins.h:200:10: warning: 'BatchWrite' overrides a member function but is not marked 'override' [-Winconsistent-missing-override]\r\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\r\n+         ^\r\n+./coins.h:178:18: note: overridden virtual function is here\r\n+    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\r\n+                 ^\r\n+./coins.h:201:23: warning: 'Cursor' overrides a member function but is not marked 'override' [-Winconsistent-missing-override]\r\n+    CCoinsViewCursor *Cursor() const;\r\n+                      ^\r\n+./coins.h:181:31: note: overridden virtual function is here\r\n+    virtual CCoinsViewCursor *Cursor() const;\r\n+                              ^\r\n+2 warnings generated.\r\n```\r\n\r\nAnd few initializations:\r\n\r\n```\r\n+./undo.h:70:23: note: initialize the variable 'count' to silence this warning\r\n+        uint64_t count;\r\n+                      ^\r\n+                       = 0\r\n...\r\n+./coins.h:81:22: note: initialize the variable 'code' to silence this warning\r\n+        uint32_t code;\r\n+                     ^\r\n+                      = 0\r\n```",
      "created_at" : "2017-04-19T16:01:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-295323193",
      "id" : 295323193,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-19T16:08:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295323193",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r112495450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112495450"
         }
      },
      "body" : "Why not just switch to hash_serialized_2?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-20T16:12:02Z",
      "diff_hunk" : "@@ -52,7 +52,6 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['txouts'], 200)\n         assert_equal(res['bytes_serialized'], 13924),\n         assert_equal(len(res['bestblock']), 64)\n-        assert_equal(len(res['hash_serialized']), 64)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r112495450",
      "id" : 112495450,
      "original_commit_id" : "1aa8b8b8ba8e55ea493cb81ea892dde38c97d33b",
      "original_position" : 4,
      "path" : "test/functional/blockchain.py",
      "position" : null,
      "pull_request_review_id" : 33815611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112495450",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r112499717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112499717"
         }
      },
      "body" : "Shouldnt the first two be an error and not a \"done upgrading\" result?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-20T16:31:24Z",
      "diff_hunk" : "@@ -242,3 +243,120 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n \n     return true;\n }\n+\n+namespace {\n+\n+class COldCoins\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n+    std::vector<CTxOut> vout;\n+\n+    //! at which height this transaction was included in the active block chain\n+    int nHeight;\n+\n+    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n+    //! as new tx version will probably only be introduced at certain heights\n+    int nVersion;\n+\n+    //! empty constructor\n+    COldCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n+\n+    /**\n+     * calculate number of bytes for the bitmask, and its number of non-zero bytes\n+     * each bit in the bitmask represents the availability of one output, but the\n+     * availabilities of the first two outputs are encoded separately\n+     */\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n+        unsigned int nLastUsedByte = 0;\n+        for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n+            bool fZero = true;\n+            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n+                if (!vout[2+b*8+i].IsNull()) {\n+                    fZero = false;\n+                    continue;\n+                }\n+            }\n+            if (!fZero) {\n+                nLastUsedByte = b + 1;\n+                nNonzeroBytes++;\n+            }\n+        }\n+        nBytes += nLastUsedByte;\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s) {\n+        unsigned int nCode = 0;\n+        // version\n+        ::Unserialize(s, VARINT(this->nVersion));\n+        // header code\n+        ::Unserialize(s, VARINT(nCode));\n+        fCoinBase = nCode & 1;\n+        std::vector<bool> vAvail(2, false);\n+        vAvail[0] = (nCode & 2) != 0;\n+        vAvail[1] = (nCode & 4) != 0;\n+        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n+        // spentness bitmask\n+        while (nMaskCode > 0) {\n+            unsigned char chAvail = 0;\n+            ::Unserialize(s, chAvail);\n+            for (unsigned int p = 0; p < 8; p++) {\n+                bool f = (chAvail & (1 << p)) != 0;\n+                vAvail.push_back(f);\n+            }\n+            if (chAvail != 0)\n+                nMaskCode--;\n+        }\n+        // txouts themself\n+        vout.assign(vAvail.size(), CTxOut());\n+        for (unsigned int i = 0; i < vAvail.size(); i++) {\n+            if (vAvail[i])\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n+        }\n+        // coinbase height\n+        ::Unserialize(s, VARINT(nHeight));\n+    }\n+};\n+\n+}\n+\n+void CCoinsViewDB::Upgrade() {\n+    std::unique_ptr<CDBIterator> pcursor(db.NewIterator());\n+    pcursor->Seek(std::make_pair(DB_COINS_OLD, uint256()));\n+    if (!pcursor->Valid()) {\n+        return;\n+    }\n+\n+    LogPrintf(\"Upgrading database...\\n\");\n+    size_t batch_size = 1 << 24;\n+    CDBBatch batch(db);\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        COldCoins oldcoins;\n+        std::pair<unsigned char, uint256> key;\n+        if (pcursor->GetValue(oldcoins) && pcursor->GetKey(key) && key.first == DB_COINS_OLD) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r112499717",
      "id" : 112499717,
      "original_commit_id" : "2f28c1c1ecf737870101473f1eb422e1d4219305",
      "original_position" : 107,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 33815611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112499717",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "I'm splitting the commits up more. I've pushed one update already, but I'm working splitting the big commit further.",
      "created_at" : "2017-04-22T11:43:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-296367685",
      "id" : 296367685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-22T11:43:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296367685",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Done. There is still one commit that does many things at once (\"Switch CCoinsView and chainstate db to per-txout\"), but splitting it is nontrivial. If requested, I can try splitting the database format change into a second commit, but that would require adding a bunch of conversion logic in the first commit that just gets removed in the second one. Thoughts?",
      "created_at" : "2017-04-24T21:25:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-296826822",
      "id" : 296826822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-24T21:25:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296826822",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r113130070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113130070"
         }
      },
      "body" : "init to 0 here please.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-25T08:08:07Z",
      "diff_hunk" : "@@ -12,53 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r113130070",
      "id" : 113130070,
      "original_commit_id" : "8da478ebd71caf0acd307ce0b160f0a93cae68c2",
      "original_position" : 86,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 34492929,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113130070",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "Rebased and reset the author timestamps (so that GitHub shows them in logical order, $@#!*).",
      "created_at" : "2017-04-25T18:31:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-297123617",
      "id" : 297123617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-04-25T18:31:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297123617",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114007556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114007556"
         }
      },
      "body" : "nit: would be nice to at least use MAX_BLOCK_BASE_SIZE/9, as you indicated in your TODO",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T19:53:31Z",
      "diff_hunk" : "@@ -12,53 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114007556",
      "id" : 114007556,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 88,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114007556",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114007983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114007983"
         }
      },
      "body" : "ugh, would be nice to not add more const_casts. Its an extra ~10 LOC to split CTxInUndoSerializer into CTxInUndoDeserializer and CTxInUndoSerializer. Not 100% sure I love that either, but maybe better than more const_casts...thoughts?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T19:55:55Z",
      "diff_hunk" : "@@ -12,53 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114007983",
      "id" : 114007983,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 57,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114007983",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114009440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114009440"
         }
      },
      "body" : "As russ pointed out: I think this just maybe happens to work. If I were to add a CTxOut(CTxOut&&) constructor which SetNull() afterwards the CCoins::Spend call on the next line wouldn't get to Cleanup(). While even that shouldnt be a bug, I could envision CCoinsModifyer being tweaked to track whether there was actually a modification, which it would think there was not.\r\n\r\nIn any case, looks like the std::move here doesn't make it to the end of the PR, so might as well just drop it.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T20:05:13Z",
      "diff_hunk" : "@@ -1276,11 +1276,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             if (nPos >= coins->vout.size() || coins->vout[nPos].IsNull())\n                 assert(false);\n             // mark an outpoint spent, and construct undo information\n-            txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n+            txundo.vprevout.push_back(CCoin(std::move(coins->vout[nPos]), coins->nHeight, coins->fCoinBase));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114009440",
      "id" : 114009440,
      "original_commit_id" : "45425d1227e3feff587880aa5fed3dce55e7647a",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114009440",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114010162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114010162"
         }
      },
      "body" : "super nit: would be nice to add a comment to the end of the loop or so that notes that blockUndo should, by that point, be considered to have been tirely std::move'd, since pretty much all of its internal state has been std::moved during the loop.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T20:09:51Z",
      "diff_hunk" : "@@ -1564,13 +1564,12 @@ static bool DisconnectBlock(const CBlock& block, CValidationState& state, const\n \n         // restore inputs\n         if (i > 0) { // not coinbases\n-            const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n+            CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n                 return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n-                const CCoin &undo = txundo.vprevout[j];\n-                if (!ApplyTxInUndo(undo, view, out))\n+                if (!ApplyTxInUndo(std::move(txundo.vprevout[j]), view, out))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114010162",
      "id" : 114010162,
      "original_commit_id" : "6d6a5ffaa10d5ef26a6e8be287d48af64ed0ae25",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114010162",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114016248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114016248"
         }
      },
      "body" : "This is technically insufficient for FRESH (though is in context - that this is only called by AddCoins). I interpret the possible_overwrite to apply only to the given CCoin, not all CCoins for that tx, which thus means you also need to know that the full CCoins (not just this CCoin) is fully-pruned in the parent cache. Of course this bug doesn't stick around to the end of the PR, so maybe just always set fresh to false in the intermediary commits and leave it at that?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T20:45:57Z",
      "diff_hunk" : "@@ -152,6 +152,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (ret.first->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114016248",
      "id" : 114016248,
      "original_commit_id" : "778f00e920f70a5c599637f18f0031b3d344ce68",
      "original_position" : 24,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114016248",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114024300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114024300"
         }
      },
      "body" : "You should document that this function assumes the only coin possible_overwrites in are coinbase transactions, ie that it is equivalent to ModifyNewCoins (and maybe note in a TODO to pass in a boolean as to whether even that is possible - ie if we are or are not yet past BIP 34, because then we can avoid writes to coinbases spent in the same cache, though admittedly the 100-height limit makes that much less useful).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T21:36:23Z",
      "diff_hunk" : "@@ -460,17 +280,16 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n-    friend class CCoinsModifier;\n-\n private:\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoins(const COutPoint &outpoint) const;\n \n     /**\n      * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n      */\n     CCoinsViewCache(const CCoinsViewCache &);\n };\n \n+//! Utility function to add all of a transaction's outputs to a cache.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114024300",
      "id" : 114024300,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 488,
      "path" : "src/coins.h",
      "position" : 500,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114024300",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114024992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114024992"
         }
      },
      "body" : "Same comment as before, the std::move here is only barely right, but because its gone by the end of the PR its mostly ok, probably worth just not having since it doesnt change anything at the end.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T21:41:12Z",
      "diff_hunk" : "@@ -152,6 +152,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (ret.first->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    if (ret.first->second.coins.vout.size() <= outpoint.n) {\n+        ret.first->second.coins.vout.resize(outpoint.n + 1);\n+    }\n+    ret.first->second.coins.vout[outpoint.n] = std::move(coin.out);\n+    ret.first->second.coins.nHeight = coin.nHeight;\n+    ret.first->second.coins.fCoinBase = coin.fCoinBase;\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += ret.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), CCoin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n+        }\n+    }\n+}\n+\n+void CCoinsViewCache::SpendCoin(const COutPoint &outpoint, CCoin* moveout) {\n+    CCoinsMap::iterator it = FetchCoins(outpoint.hash);\n+    if (it == cacheCoins.end()) return;\n+    cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+    if (moveout && it->second.coins.IsAvailable(outpoint.n)) {\n+        *moveout = CCoin(std::move(it->second.coins.vout[outpoint.n]), it->second.coins.nHeight, it->second.coins.fCoinBase);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114024992",
      "id" : 114024992,
      "original_commit_id" : "778f00e920f70a5c599637f18f0031b3d344ce68",
      "original_position" : 51,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114024992",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114035986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114035986"
         }
      },
      "body" : "Would be nice to return a bool here to keep the previous assert semantics in UpdateCoins, though not a huge deal.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-04-28T23:22:39Z",
      "diff_hunk" : "@@ -9,169 +9,116 @@\n \n #include <assert.h>\n \n-/**\n- * calculate number of bytes for the bitmask, and its number of non-zero bytes\n- * each bit in the bitmask represents the availability of one output, but the\n- * availabilities of the first two outputs are encoded separately\n- */\n-void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-    unsigned int nLastUsedByte = 0;\n-    for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-        bool fZero = true;\n-        for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-            if (!vout[2+b*8+i].IsNull()) {\n-                fZero = false;\n-                continue;\n-            }\n-        }\n-        if (!fZero) {\n-            nLastUsedByte = b + 1;\n-            nNonzeroBytes++;\n-        }\n-    }\n-    nBytes += nLastUsedByte;\n-}\n-\n-bool CCoins::Spend(uint32_t nPos) \n-{\n-    if (nPos >= vout.size() || vout[nPos].IsNull())\n-        return false;\n-    vout[nPos].SetNull();\n-    Cleanup();\n-    return true;\n-}\n-\n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n+bool CCoinsView::GetCoins(const COutPoint &txid, CCoin &coin) const { return false; }\n+bool CCoinsView::HaveCoins(const COutPoint &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n+bool CCoinsViewBacked::GetCoins(const COutPoint &outpoint, CCoin &coin) const { return base->GetCoins(outpoint, coin); }\n+bool CCoinsViewBacked::HaveCoins(const COutPoint &outpoint) const { return base->HaveCoins(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n \n-SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {\n     return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n+CCoinsMap::iterator CCoinsViewCache::FetchCoins(const COutPoint &outpoint) const {\n+    CCoinsMap::iterator it = cacheCoins.find(outpoint);\n     if (it != cacheCoins.end())\n         return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n+    CCoin tmp;\n+    if (!base->GetCoins(outpoint, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n+    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n     if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n+        // The parent only has an empty entry for this outpoint; we can consider our\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n     cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+bool CCoinsViewCache::GetCoins(const COutPoint &outpoint, CCoin &coin) const {\n+    CCoinsMap::const_iterator it = FetchCoins(outpoint);\n     if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n+        coin = it->second.coins;\n         return true;\n     }\n     return false;\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    size_t cachedCoinUsage = 0;\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (!ret.first->second.coins.IsPruned()) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n         }\n-    } else {\n-        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);\n     }\n-    // Assume that whenever ModifyCoins is called, the entry will be modified.\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n+    ret.first->second.coins = std::move(coin);\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += ret.first->second.coins.DynamicMemoryUsage();\n }\n \n-/* ModifyNewCoins allows for faster coin modification when creating the new\n- * outputs from a transaction.  It assumes that BIP 30 (no duplicate txids)\n- * applies and has already been tested for (or the test is not required due to\n- * BIP 34, height in coinbase).  If we can assume BIP 30 then we know that any\n- * non-coinbase transaction we are adding to the UTXO must not already exist in\n- * the utxo unless it is fully spent.  Thus we can check only if it exists DIRTY\n- * at the current level of the cache, in which case it is not safe to mark it\n- * FRESH (b/c then its spentness still needs to flushed).  If it's not dirty and\n- * doesn't exist or is pruned in the current cache, we know it either doesn't\n- * exist or is pruned in parent caches, which is the definition of FRESH.  The\n- * exception to this is the two historical violations of BIP 30 in the chain,\n- * both of which were coinbases.  We do not mark these fresh so we we can ensure\n- * that they will still be properly overwritten when spent.\n- */\n-CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    if (!coinbase) {\n-        // New coins must not already exist.\n-        if (!ret.first->second.coins.IsPruned())\n-            throw std::logic_error(\"ModifyNewCoins should not find pre-existing coins on a non-coinbase unless they are pruned!\");\n-\n-        if (!(ret.first->second.flags & CCoinsCacheEntry::DIRTY)) {\n-            // If the coin is known to be pruned (have no unspent outputs) in\n-            // the current view and the cache entry is not dirty, we know the\n-            // coin also must be pruned in the parent view as well, so it is safe\n-            // to mark this fresh.\n-            ret.first->second.flags |= CCoinsCacheEntry::FRESH;\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), CCoin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n         }\n     }\n-    ret.first->second.coins.Clear();\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first, 0);\n }\n \n-const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+void CCoinsViewCache::SpendCoin(const COutPoint &outpoint, CCoin* moveout) {\n+    CCoinsMap::iterator it = FetchCoins(outpoint);\n+    if (it == cacheCoins.end()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114035986",
      "id" : 114035986,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 186,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114035986",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Rebased.",
      "created_at" : "2017-05-03T03:34:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-298816331",
      "id" : 298816331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-03T03:34:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298816331",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114555652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114555652"
         }
      },
      "body" : "In commit \"error() in disconnect for disk corruption, not inconsistency\"\r\n\r\nGiven that you're already changing places where fClean is set, might be good also to change return type of `ApplyTxInUndo` from `bool` to `DisconnectResult`, which I think would make the code more consistent and easier to understand.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T14:16:44Z",
      "diff_hunk" : "@@ -1504,18 +1504,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114555652",
      "id" : 114555652,
      "original_commit_id" : "f42c47b59d1622ece33b8ca4d05833dd3693ac4b",
      "original_position" : 6,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114555652",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114556290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114556290"
         }
      },
      "body" : "In commit \"error() in disconnect for disk corruption, not inconsistency\"\r\n\r\nMaybe the old error strings should become code comments, since they seem useful for understanding the different cases.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T14:19:04Z",
      "diff_hunk" : "@@ -1504,18 +1504,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n         // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        if (!coins->IsPruned()) fClean = false;\n         coins->Clear();\n         coins->fCoinBase = undo.fCoinBase;\n         coins->nHeight = undo.nHeight;\n         coins->nVersion = undo.nVersion;\n     } else {\n-        if (coins->IsPruned())\n-            fClean = fClean && error(\"%s: undo data adding output to missing transaction\", __func__);\n+        if (coins->IsPruned()) fClean = false;\n     }\n-    if (coins->IsAvailable(out.n))\n-        fClean = fClean && error(\"%s: undo data overwriting existing output\", __func__);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114556290",
      "id" : 114556290,
      "original_commit_id" : "f42c47b59d1622ece33b8ca4d05833dd3693ac4b",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114556290",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114561307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114561307"
         }
      },
      "body" : "In commit \"Introduce CHashVerifier to hash read data\"\r\n\r\nCould replace these two lines with just `read(data, now);`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T14:37:07Z",
      "diff_hunk" : "@@ -160,6 +160,42 @@ class CHashWriter\n     }\n };\n \n+/** Reads data from an underlying stream, while hashing the read data. */\n+template<typename Source>\n+class CHashVerifier : public CHashWriter\n+{\n+private:\n+    Source* source;\n+\n+public:\n+    CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}\n+\n+    void read(char* pch, size_t nSize)\n+    {\n+        source->read(pch, nSize);\n+        this->write(pch, nSize);\n+    }\n+\n+    void ignore(size_t nSize)\n+    {\n+        char data[1024];\n+        while (nSize > 0) {\n+            size_t now = std::min<size_t>(nSize, 1024);\n+            source->read(data, now);\n+            this->write(data, now);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114561307",
      "id" : 114561307,
      "original_commit_id" : "2f0f26b34735d4249f3ec44799bdac499d7b8a1e",
      "original_position" : 26,
      "path" : "src/hash.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114561307",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114568040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114568040"
         }
      },
      "body" : "In commit \"Remove/ignore tx version in utxo and undo\"\r\n\r\nMaybe mention this change in the commit message. It seems like a good change (I guess it makes the hash more robust), but not really related to the version stuff?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T15:00:58Z",
      "diff_hunk" : "@@ -793,12 +793,14 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n         if (pcursor->GetKey(key) && pcursor->GetValue(coins)) {\n             stats.nTransactions++;\n             ss << key;\n+            ss << VARINT(coins.nHeight * 2 + coins.fCoinBase);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114568040",
      "id" : 114568040,
      "original_commit_id" : "43fa7b7b116b8b74a32346a39de146a7cca98278",
      "original_position" : 4,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114568040",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114569087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114569087"
         }
      },
      "body" : "In commit \"Remove/ignore tx version in utxo and undo\"\r\n\r\nMaybe update `doc/release-notes.md` noting the various changes in RPC output here.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T15:04:27Z",
      "diff_hunk" : "@@ -977,7 +979,6 @@ UniValue gettxout(const JSONRPCRequest& request)\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coins.vout[n].scriptPubKey, o, true);\n     ret.push_back(Pair(\"scriptPubKey\", o));\n-    ret.push_back(Pair(\"version\", coins.nVersion));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114569087",
      "id" : 114569087,
      "original_commit_id" : "43fa7b7b116b8b74a32346a39de146a7cca98278",
      "original_position" : 29,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114569087",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114578273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114578273"
         }
      },
      "body" : "In commit \"Store/allow tx metadata in all undo records\"\r\n\r\nMaybe expand this comment, I think new code would be confusing to read without knowing the history. Suggest maybe:\r\n\r\n```\r\n// Undo data does not contain height/coinbase. This should never happen\r\n// currently. Previously, this data was only saved for pruned transactions,\r\n// so check coins->IsPruned().\r\n```",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T15:38:09Z",
      "diff_hunk" : "@@ -1501,12 +1499,15 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n \n     CCoinsModifier coins = view.ModifyCoins(out.hash);\n     if (undo.nHeight != 0) {\n-        // undo data contains height: this is the last output of the prevout tx being spent\n-        if (!coins->IsPruned()) fClean = false;\n-        coins->Clear();\n+        if (!coins->IsPruned()) {\n+            // verify that the undo data matches the utxo tx metadata\n+            if (coins->fCoinBase != undo.fCoinBase || (uint32_t)coins->nHeight != undo.nHeight) fClean = false;\n+        }\n+        // restore height/coinbase tx metadata from undo data\n         coins->fCoinBase = undo.fCoinBase;\n         coins->nHeight = undo.nHeight;\n     } else {\n+        // undo data does not contain height/coinbase: it cannot be the last spent output of a tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114578273",
      "id" : 114578273,
      "original_commit_id" : "880868b0a76f8b64f8663387fbb6398347061a96",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114578273",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114583897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114583897"
         }
      },
      "body" : "In commit \"Introduce CCoin, a single unspent output\"\r\n\r\nThis equality operator doesn't seem like something you would want to encourage use of. Maybe just move to coins_test where it's needed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T15:59:15Z",
      "diff_hunk" : "@@ -20,6 +20,81 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n+/**\n+ * A UTXO entry.\n+ *\n+ * Serialized format:\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n+ */\n+class CCoin\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n+\n+    //! at which height this transaction was included in the active block chain\n+    uint32_t nHeight;\n+\n+    //! construct a CCoin from a CTransaction, at a given height\n+    CCoin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : fCoinBase(fCoinBaseIn), out(std::move(outIn)), nHeight(nHeightIn) {}\n+    CCoin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : fCoinBase(fCoinBaseIn), out(outIn), nHeight(nHeightIn) {}\n+\n+    void Clear() {\n+        out.SetNull();\n+        fCoinBase = false;\n+        nHeight = 0;\n+    }\n+\n+    //! empty constructor\n+    CCoin() : fCoinBase(false), nHeight(0) { }\n+\n+    //! equality test\n+    friend bool operator==(const CCoin &a, const CCoin &b) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114583897",
      "id" : 114583897,
      "original_commit_id" : "0810a11afb30e778c56e6518beeb246c0f289318",
      "original_position" : 37,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114583897",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114584597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114584597"
         }
      },
      "body" : "In commit \"Introduce CCoin, a single unspent output\"\r\n\r\nMaybe Clear() / Pruned() should be named consistently? Prune/Pruned or Clear/IsCleared",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T16:01:59Z",
      "diff_hunk" : "@@ -20,6 +20,81 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n+/**\n+ * A UTXO entry.\n+ *\n+ * Serialized format:\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n+ */\n+class CCoin\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n+\n+    //! at which height this transaction was included in the active block chain\n+    uint32_t nHeight;\n+\n+    //! construct a CCoin from a CTransaction, at a given height\n+    CCoin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : fCoinBase(fCoinBaseIn), out(std::move(outIn)), nHeight(nHeightIn) {}\n+    CCoin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : fCoinBase(fCoinBaseIn), out(outIn), nHeight(nHeightIn) {}\n+\n+    void Clear() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114584597",
      "id" : 114584597,
      "original_commit_id" : "0810a11afb30e778c56e6518beeb246c0f289318",
      "original_position" : 27,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114584597",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114604501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114604501"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nGuess this comment should have been updated in the earlier commits, but good to see it updated.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:28:16Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114604501",
      "id" : 114604501,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 9,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114604501",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114606471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114606471"
         }
      },
      "body" : "In commit \"Store/allow tx metadata in all undo records\"\r\n\r\nWhat does it mean in the commit message that \"undo dat written with this patch won't be readable by older versions anymore.\"? If this change is just writing actual data where there used to be 0's before, why would older versions have a problem reading it?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:36:29Z",
      "diff_hunk" : "@@ -1278,11 +1278,9 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             // mark an outpoint spent, and construct undo information\n             txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n             coins->Spend(nPos);\n-            if (coins->vout.size() == 0) {\n-                CTxInUndo& undo = txundo.vprevout.back();\n-                undo.nHeight = coins->nHeight;\n-                undo.fCoinBase = coins->fCoinBase;\n-            }\n+            CTxInUndo& undo = txundo.vprevout.back();\n+            undo.nHeight = coins->nHeight;\n+            undo.fCoinBase = coins->fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114606471",
      "id" : 114606471,
      "original_commit_id" : "389181ab57989e7276aa663d21d550ed4bd9da66",
      "original_position" : 11,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114606471",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114610132"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nThis isn't done in the current PR. What's the future plan?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:52:28Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610132",
      "id" : 114610132,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 84,
      "path" : "src/undo.h",
      "position" : 104,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114610132",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114610276"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nWhat's the alternative?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:53:00Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610276",
      "id" : 114610276,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 87,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114610276",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114610794"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nThis seems like it should be a for loop or range-for loop.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:55:09Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114610794",
      "id" : 114610794,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 74,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114610794",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114611236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114611236"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\n`for (auto& prevout : vprevout)`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:56:28Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx\n+            throw std::ios_base::failure(\"Too many input undo records\");\n+        }\n+        vprevout.resize(count);\n+        uint64_t n = 0;\n+        while (n < count) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114611236",
      "id" : 114611236,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 92,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114611236",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114611511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114611511"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nMaybe `emplace_back`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T17:57:29Z",
      "diff_hunk" : "@@ -1276,11 +1276,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             if (nPos >= coins->vout.size() || coins->vout[nPos].IsNull())\n                 assert(false);\n             // mark an outpoint spent, and construct undo information\n-            txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n+            txundo.vprevout.push_back(CCoin(std::move(coins->vout[nPos]), coins->nHeight, coins->fCoinBase));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114611511",
      "id" : 114611511,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114611511",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114613086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114613086"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nI'm not sure this std::move is ok. If `vout[nPos]` is cleared out then the `Spend` call below will fail early and never call `CCoins::Cleanup`.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T18:03:54Z",
      "diff_hunk" : "@@ -1276,11 +1276,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             if (nPos >= coins->vout.size() || coins->vout[nPos].IsNull())\n                 assert(false);\n             // mark an outpoint spent, and construct undo information\n-            txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n+            txundo.vprevout.push_back(CCoin(std::move(coins->vout[nPos]), coins->nHeight, coins->fCoinBase));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114613086",
      "id" : 114613086,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114613086",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114613254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114613254"
         }
      },
      "body" : "In commit \"Replace CTxInUndo with CCoin\"\r\n\r\nMight be good to check the return value from Spend. Or have Spend raise errors instead of returning bool.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T18:04:35Z",
      "diff_hunk" : "@@ -1276,11 +1276,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             if (nPos >= coins->vout.size() || coins->vout[nPos].IsNull())\n                 assert(false);\n             // mark an outpoint spent, and construct undo information\n-            txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n+            txundo.vprevout.push_back(CCoin(std::move(coins->vout[nPos]), coins->nHeight, coins->fCoinBase));\n             coins->Spend(nPos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114613254",
      "id" : 114613254,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 6,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114613254",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114625074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114625074"
         }
      },
      "body" : "In commit \"Introduce new per-txout CCoinsViewCache functions\"\r\n\r\nShould it be an error to spend a coin that can't be found? Can you add a comment here explaining when this case is expected to happen if it is not an error condition?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T18:53:10Z",
      "diff_hunk" : "@@ -152,6 +152,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (ret.first->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    if (ret.first->second.coins.vout.size() <= outpoint.n) {\n+        ret.first->second.coins.vout.resize(outpoint.n + 1);\n+    }\n+    ret.first->second.coins.vout[outpoint.n] = std::move(coin.out);\n+    ret.first->second.coins.nHeight = coin.nHeight;\n+    ret.first->second.coins.fCoinBase = coin.fCoinBase;\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += ret.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), CCoin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n+        }\n+    }\n+}\n+\n+void CCoinsViewCache::SpendCoin(const COutPoint &outpoint, CCoin* moveout) {\n+    CCoinsMap::iterator it = FetchCoins(outpoint.hash);\n+    if (it == cacheCoins.end()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114625074",
      "id" : 114625074,
      "original_commit_id" : "93733c0c974030be1efcc1ae3b28fb03ceb772ce",
      "original_position" : 48,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114625074",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114625361"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114625361"
         }
      },
      "body" : "In commit \"Introduce new per-txout CCoinsViewCache functions\"\r\n\r\nAgain should it be an error if IsAvailable is not true?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T18:54:08Z",
      "diff_hunk" : "@@ -152,6 +152,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (ret.first->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    if (ret.first->second.coins.vout.size() <= outpoint.n) {\n+        ret.first->second.coins.vout.resize(outpoint.n + 1);\n+    }\n+    ret.first->second.coins.vout[outpoint.n] = std::move(coin.out);\n+    ret.first->second.coins.nHeight = coin.nHeight;\n+    ret.first->second.coins.fCoinBase = coin.fCoinBase;\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += ret.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), CCoin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n+        }\n+    }\n+}\n+\n+void CCoinsViewCache::SpendCoin(const COutPoint &outpoint, CCoin* moveout) {\n+    CCoinsMap::iterator it = FetchCoins(outpoint.hash);\n+    if (it == cacheCoins.end()) return;\n+    cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+    if (moveout && it->second.coins.IsAvailable(outpoint.n)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114625361",
      "id" : 114625361,
      "original_commit_id" : "93733c0c974030be1efcc1ae3b28fb03ceb772ce",
      "original_position" : 50,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114625361",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114626538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114626538"
         }
      },
      "body" : "In commit \"Introduce new per-txout CCoinsViewCache functions\"\r\n\r\nJust noting at this point the comment is aspirational. It becomes true in a later commit.\r\n",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T18:59:27Z",
      "diff_hunk" : "@@ -480,6 +482,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const CCoins* AccessCoins(const uint256 &txid) const;\n \n     /**\n+     * Return a reference to CCoin in the cache, or a pruned one if not found. This is\n+     * more efficient than GetCoins. Modifications to other cache entries are\n+     * allowed while accessing the returned pointer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114626538",
      "id" : 114626538,
      "original_commit_id" : "93733c0c974030be1efcc1ae3b28fb03ceb772ce",
      "original_position" : 22,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114626538",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114631654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114631654"
         }
      },
      "body" : "In commit \"Switch from per-tx to per-txout CCoinsViewCache methods in some places\"\r\n\r\nCould you add a comment saying what this is for? This would only seem to affect the internal state of the view. Realize your change probably doesn't affect whatever it's supposed to be doing, ",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T19:23:42Z",
      "diff_hunk" : "@@ -632,9 +632,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n         BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n-            const uint256& prevHash = txin.prevout.hash;\n-            CCoins coins;\n-            view.AccessCoins(prevHash); // this is certainly allowed to fail\n+            view.AccessCoin(txin.prevout); // this is certainly allowed to fail",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114631654",
      "id" : 114631654,
      "original_commit_id" : "40982486bbf8575ed73ac7b2870b29cfee6d4e96",
      "original_position" : 7,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114631654",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114636226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114636226"
         }
      },
      "body" : "In commit \"Switch from per-tx to per-txout CCoinsViewCache methods in some places\"\r\n\r\nSeems like there should be a more direct way to do this using leveldb Iterator::Seek. Unfortunately the cache map is unordered so harder to search by txid.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T19:47:48Z",
      "diff_hunk" : "@@ -1016,11 +1016,14 @@ bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus\n \n     if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n         int nHeight = -1;\n-        {\n+        size_t out = 0;\n+        while (nHeight == -1 && out < 1024) { // Only try first 1024 outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114636226",
      "id" : 114636226,
      "original_commit_id" : "40982486bbf8575ed73ac7b2870b29cfee6d4e96",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114636226",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114636458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114636458"
         }
      },
      "body" : "In commit \"Switch from per-tx to per-txout CCoinsViewCache methods in some places\"\r\n\r\nSeems like should be a for loop, not while.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T19:48:49Z",
      "diff_hunk" : "@@ -1016,11 +1016,14 @@ bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus\n \n     if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n         int nHeight = -1;\n-        {\n+        size_t out = 0;\n+        while (nHeight == -1 && out < 1024) { // Only try first 1024 outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114636458",
      "id" : 114636458,
      "original_commit_id" : "40982486bbf8575ed73ac7b2870b29cfee6d4e96",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114636458",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114639256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639256"
         }
      },
      "body" : "In commit \"Switch from per-tx to per-txout CCoinsViewCache methods in some places\"\r\n\r\nThis commit is a lot to take in at once. It consists of a lot of straightforward replacements, plus 2 more gnarly workarounds (the \"try first 1024 outputs\" code above, and this undo height/coinbase reconstruction). Would recommend splitting the two workarounds out into separate commits so they don't get in the way of the easier parts of the review.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:01:52Z",
      "diff_hunk" : "@@ -1494,23 +1490,27 @@ bool ApplyTxInUndo(CCoin&& undo, CCoinsViewCache& view, const COutPoint& out)\n {\n     bool fClean = true;\n \n-    CCoinsModifier coins = view.ModifyCoins(out.hash);\n-    if (undo.nHeight != 0) {\n-        if (!coins->IsPruned()) {\n-            // verify that the undo data matches the utxo tx metadata\n-            if (coins->fCoinBase != undo.fCoinBase || (uint32_t)coins->nHeight != undo.nHeight) fClean = false;\n+    if (view.HaveCoins(out)) fClean = false;\n+\n+    if (undo.nHeight == 0) {\n+        // Missing undo metadata (height and coinbase). Older versions included this\n+        // information only in undo records for the last spend of a transactions'\n+        // outputs. This implies that it must be present for some other output of the same tx.\n+        COutPoint iter(out.hash, 0);\n+        bool found = false;\n+        while (iter.n * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION) < MAX_BLOCK_BASE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114639256",
      "id" : 114639256,
      "original_commit_id" : "40982486bbf8575ed73ac7b2870b29cfee6d4e96",
      "original_position" : 99,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639256",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114639530"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639530"
         }
      },
      "body" : "In commit \"Switch from per-tx to per-txout CCoinsViewCache methods in some places\"\r\n\r\nMeant to be `const auto&`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:03:13Z",
      "diff_hunk" : "@@ -1494,23 +1490,27 @@ bool ApplyTxInUndo(CCoin&& undo, CCoinsViewCache& view, const COutPoint& out)\n {\n     bool fClean = true;\n \n-    CCoinsModifier coins = view.ModifyCoins(out.hash);\n-    if (undo.nHeight != 0) {\n-        if (!coins->IsPruned()) {\n-            // verify that the undo data matches the utxo tx metadata\n-            if (coins->fCoinBase != undo.fCoinBase || (uint32_t)coins->nHeight != undo.nHeight) fClean = false;\n+    if (view.HaveCoins(out)) fClean = false;\n+\n+    if (undo.nHeight == 0) {\n+        // Missing undo metadata (height and coinbase). Older versions included this\n+        // information only in undo records for the last spend of a transactions'\n+        // outputs. This implies that it must be present for some other output of the same tx.\n+        COutPoint iter(out.hash, 0);\n+        bool found = false;\n+        while (iter.n * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION) < MAX_BLOCK_BASE_SIZE) {\n+            const auto alternate = view.AccessCoin(iter);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114639530",
      "id" : 114639530,
      "original_commit_id" : "40982486bbf8575ed73ac7b2870b29cfee6d4e96",
      "original_position" : 100,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114639530",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114643391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114643391"
         }
      },
      "body" : "In commit \"Switch tests from ModifyCoins to AddCoin/SpendCoin\"\r\n\r\nConsider replacing \"coinbase\" everywhere in this test with \"potential_overwrite\" to reflect the new name of the argument.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:21:45Z",
      "diff_hunk" : "@@ -724,64 +704,46 @@ void CheckModifyNewCoinsBase(CAmount base_value, CAmount cache_value, CAmount mo\n     BOOST_CHECK_EQUAL(result_flags, expected_flags);\n }\n \n-// Simple wrapper for CheckModifyNewCoinsBase function above that loops through\n+// Simple wrapper for CheckAddCoinBase function above that loops through\n // different possible base_values, making sure each one gives the same results.\n // This wrapper lets the modify_new test below be shorter and less repetitive,\n // while still verifying that the CoinsViewCache::ModifyNewCoins implementation\n // ignores base values.\n template <typename... Args>\n-void CheckModifyNewCoins(Args&&... args)\n+void CheckAddCoin(Args&&... args)\n {\n     for (CAmount base_value : {ABSENT, PRUNED, VALUE1})\n-        CheckModifyNewCoinsBase(base_value, std::forward<Args>(args)...);\n+        CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n-BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+BOOST_AUTO_TEST_CASE(ccoins_add)\n {\n-    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+    /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n      * with the ModifyNewCoin coinbase argument set to false, and to true.\n      *\n-     *                  Cache   Write   Result  Cache        Result     Coinbase\n-     *                  Value   Value   Value   Flags        Flags\n+     *           Cache   Write   Result  Cache        Result     Coinbase",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114643391",
      "id" : 114643391,
      "original_commit_id" : "b3c81cf91a819bfdac06dd80c095483e8e8b2364",
      "original_position" : 277,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114643391",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114644951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114644951"
         }
      },
      "body" : "In commit \"Refactor GetUTXOStats in preparation for per-COutPoint iteration\"\r\n\r\nShould check or assert outputs.size() is not 0.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:29:00Z",
      "diff_hunk" : "@@ -773,6 +773,21 @@ struct CCoinsStats\n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n+static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, CCoin>& outputs)\n+{\n+    ss << hash;\n+    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114644951",
      "id" : 114644951,
      "original_commit_id" : "19eb485cc4e59b0cadd3a13c12d338b7836d17d1",
      "original_position" : 7,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114644951",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114646373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646373"
         }
      },
      "body" : "In commit \"Switch CCoinsView and chainstate db from per-txid to per-txout\"\r\n\r\nShould this be called coin instead of coins? Also should `CCoinsCacheEntry` class be renamed? (maybe in a separate commit if it would make this diff bigger.)",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:34:26Z",
      "diff_hunk" : "@@ -312,28 +312,28 @@ class CCoins\n     }\n };\n \n-class SaltedTxidHasher\n+class SaltedOutpointHasher\n {\n private:\n     /** Salt */\n     const uint64_t k0, k1;\n \n public:\n-    SaltedTxidHasher();\n+    SaltedOutpointHasher();\n \n     /**\n      * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n      * unordered_map will behave unpredictably if the custom hasher returns a\n      * uint64_t, resulting in failures when syncing the chain (#4634).\n      */\n-    size_t operator()(const uint256& txid) const {\n-        return SipHashUint256(k0, k1, txid);\n+    size_t operator()(const COutPoint& id) const {\n+        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n     }\n };\n \n struct CCoinsCacheEntry\n {\n-    CCoins coins; // The actual cached data.\n+    CCoin coins; // The actual cached data.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114646373",
      "id" : 114646373,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 30,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646373",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114646810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646810"
         }
      },
      "body" : "In commit \"Switch CCoinsView and chainstate db from per-txid to per-txout\"\r\n\r\nThis seems identical to the default constructor. Maybe remove and call that instead, or remove the default constructor.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:36:22Z",
      "diff_hunk" : "@@ -346,21 +346,22 @@ struct CCoinsCacheEntry\n          */\n     };\n \n-    CCoinsCacheEntry() : coins(), flags(0) {}\n-    CCoinsCacheEntry(nullptr_t) : coins(), flags(0) {}\n+    CCoinsCacheEntry() : flags(0) {}\n+    explicit CCoinsCacheEntry(std::nullptr_t) : coins(), flags(0) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114646810",
      "id" : 114646810,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 41,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114646810",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114648278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114648278"
         }
      },
      "body" : "In commit \"Switch CCoinsView and chainstate db from per-txid to per-txout\"\r\n\r\nComment above on line 913 needs to be updated.\r\n\r\nAlso maybe worth noting this change of behavior in the commit message.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:42:36Z",
      "diff_hunk" : "@@ -914,8 +914,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n             // requesting or processing some txs which have already been included in a block\n             return recentRejects->contains(inv.hash) ||\n                    mempool.exists(inv.hash) ||\n-                   mapOrphanTransactions.count(inv.hash) ||\n-                   pcoinsTip->HaveCoinsInCache(inv.hash);\n+                   mapOrphanTransactions.count(inv.hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114648278",
      "id" : 114648278,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114648278",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114650081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114650081"
         }
      },
      "body" : "In commit \"Refactor GetUTXOStats in preparation for per-COutPoint iteration\":\r\n\r\nThis stats.ntotalamount value seems to get overwritten in line 815. Probably that line should be removed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:50:15Z",
      "diff_hunk" : "@@ -773,6 +773,21 @@ struct CCoinsStats\n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n+static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, CCoin>& outputs)\n+{\n+    ss << hash;\n+    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n+    stats.nTransactions++;\n+    for (const auto output : outputs) {\n+        ss << VARINT(output.first + 1);\n+        ss << *(const CScriptBase*)(&output.second.out.scriptPubKey);\n+        ss << VARINT(output.second.out.nValue);\n+        stats.nTransactionOutputs++;\n+        stats.nTotalAmount += output.second.out.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114650081",
      "id" : 114650081,
      "original_commit_id" : "19eb485cc4e59b0cadd3a13c12d338b7836d17d1",
      "original_position" : 14,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 24,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114650081",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114651793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114651793"
         }
      },
      "body" : "In commit \"Switch CCoinsView and chainstate db from per-txid to per-txout\"\r\n\r\nOh no... not another one of these 1024-output-while-loop-that-should-be-a-for-loop things!\r\n\r\nI'd suggest adding a  `GetTxHeight(CCoinsView&, const& uint256)` or similar helper function implementing the lookup 1024 times logic in a single place that could potentially be improved later.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T20:57:49Z",
      "diff_hunk" : "@@ -219,9 +219,13 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n     } else {\n-        CCoins coins;\n-        if (pcoinsTip->GetCoins(oneTxid, coins) && coins.nHeight > 0 && coins.nHeight <= chainActive.Height())\n-            pblockindex = chainActive[coins.nHeight];\n+        CCoin coins;\n+        size_t o = 0;\n+        while (pblockindex == nullptr && o < 1024) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114651793",
      "id" : 114651793,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 9,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114651793",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114653075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114653075"
         }
      },
      "body" : "In commit \"Switch CCoinsView and chainstate db from per-txid to per-txout\"\r\n\r\nMaybe rename txid to outpoint in various places.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-03T21:03:40Z",
      "diff_hunk" : "@@ -889,19 +888,23 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n \n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n-bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n+bool CCoinsViewMemPool::GetCoins(const COutPoint &txid, CCoin &coins) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114653075",
      "id" : 114653075,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 28,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 36031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114653075",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Updated and addressed many of @ryanofsky's review comments. I'll respond only individually to the ones I'm not addressing.",
      "created_at" : "2017-05-04T01:51:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-299080792",
      "id" : 299080792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-04T01:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299080792",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689234"
         }
      },
      "body" : "Older code requires that there are 0s for everything but the last spend of an output, in the disconnect code. That's what the \"allow\" refers to in the commit title: it allows nonzero metadata in any undo record.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T01:54:00Z",
      "diff_hunk" : "@@ -1278,11 +1278,9 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             // mark an outpoint spent, and construct undo information\n             txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n             coins->Spend(nPos);\n-            if (coins->vout.size() == 0) {\n-                CTxInUndo& undo = txundo.vprevout.back();\n-                undo.nHeight = coins->nHeight;\n-                undo.fCoinBase = coins->fCoinBase;\n-            }\n+            CTxInUndo& undo = txundo.vprevout.back();\n+            undo.nHeight = coins->nHeight;\n+            undo.fCoinBase = coins->fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689234",
      "id" : 114689234,
      "original_commit_id" : "389181ab57989e7276aa663d21d550ed4bd9da66",
      "original_position" : 11,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36176721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689234",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689261"
         }
      },
      "body" : "This is very hard, unfortunately.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T01:54:20Z",
      "diff_hunk" : "@@ -1016,11 +1016,14 @@ bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus\n \n     if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n         int nHeight = -1;\n-        {\n+        size_t out = 0;\n+        while (nHeight == -1 && out < 1024) { // Only try first 1024 outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689261",
      "id" : 114689261,
      "original_commit_id" : "40982486bbf8575ed73ac7b2870b29cfee6d4e96",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36176747,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689261",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689363"
         }
      },
      "body" : "Not going to rename things all over the place now. Maybe I can add a commit at the end that fixes it up later.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T01:55:55Z",
      "diff_hunk" : "@@ -20,6 +20,81 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n+/**\n+ * A UTXO entry.\n+ *\n+ * Serialized format:\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n+ */\n+class CCoin\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n+\n+    //! at which height this transaction was included in the active block chain\n+    uint32_t nHeight;\n+\n+    //! construct a CCoin from a CTransaction, at a given height\n+    CCoin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : fCoinBase(fCoinBaseIn), out(std::move(outIn)), nHeight(nHeightIn) {}\n+    CCoin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : fCoinBase(fCoinBaseIn), out(outIn), nHeight(nHeightIn) {}\n+\n+    void Clear() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689363",
      "id" : 114689363,
      "original_commit_id" : "0810a11afb30e778c56e6518beeb246c0f289318",
      "original_position" : 27,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36176846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689363",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689431"
         }
      },
      "body" : "It actually used to be called `coin` in an earlier version of the patch, but just s/coins/coin/ changes were such a substantial fraction of the commit that I backed out. Can be done later, I guess.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T01:56:42Z",
      "diff_hunk" : "@@ -312,28 +312,28 @@ class CCoins\n     }\n };\n \n-class SaltedTxidHasher\n+class SaltedOutpointHasher\n {\n private:\n     /** Salt */\n     const uint64_t k0, k1;\n \n public:\n-    SaltedTxidHasher();\n+    SaltedOutpointHasher();\n \n     /**\n      * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n      * unordered_map will behave unpredictably if the custom hasher returns a\n      * uint64_t, resulting in failures when syncing the chain (#4634).\n      */\n-    size_t operator()(const uint256& txid) const {\n-        return SipHashUint256(k0, k1, txid);\n+    size_t operator()(const COutPoint& id) const {\n+        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n     }\n };\n \n struct CCoinsCacheEntry\n {\n-    CCoins coins; // The actual cached data.\n+    CCoin coins; // The actual cached data.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689431",
      "id" : 114689431,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 30,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36176904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689431",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689486"
         }
      },
      "body" : "I have a plan for doing this cleanly, but it requires some refactoring in serialize.h which I'd like to avoid in this PR.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T01:57:26Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689486",
      "id" : 114689486,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 84,
      "path" : "src/undo.h",
      "position" : 104,
      "pull_request_review_id" : 36176952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689486",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689543"
         }
      },
      "body" : "Depending on consensus.h and deriving the constant directly. Alternatively, we may not need this protection if we'd use the std::vector deserialization code (see TODO above).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T01:58:21Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114689543",
      "id" : 114689543,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 87,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 36177016,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114689543",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114748619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114748619"
         }
      },
      "body" : "In commit \"Store/allow tx metadata in all undo records\"\r\n\r\n> Older code requires that there are 0s for everything but the last spend of an output, in the disconnect code. That's what the \"allow\" refers to in the commit title: it allows nonzero metadata in any undo record.\r\n\r\nCould you clarify in the commit message what \"won't be readable by older versions anymore\" means? Will older software just log errors and keep working, or require re-indexing, or will it not work at all?\r\n\r\nI understand that older code has a check for this condition here:\r\n https://github.com/bitcoin/bitcoin/blob/431a548faaf51c7a5fc89b6e479187a1c0e29805/src/validation.cpp#L1508. But I also thought this was one of the cases that DisconnectBlock would \"graciously deal with\" (according to earlier commit message).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T11:13:00Z",
      "diff_hunk" : "@@ -1278,11 +1278,9 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             // mark an outpoint spent, and construct undo information\n             txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n             coins->Spend(nPos);\n-            if (coins->vout.size() == 0) {\n-                CTxInUndo& undo = txundo.vprevout.back();\n-                undo.nHeight = coins->nHeight;\n-                undo.fCoinBase = coins->fCoinBase;\n-            }\n+            CTxInUndo& undo = txundo.vprevout.back();\n+            undo.nHeight = coins->nHeight;\n+            undo.fCoinBase = coins->fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114748619",
      "id" : 114748619,
      "original_commit_id" : "389181ab57989e7276aa663d21d550ed4bd9da66",
      "original_position" : 11,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36240198,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114748619",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114877706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114877706"
         }
      },
      "body" : "> Will older software just log errors and keep working, or require re-indexing, or will it not work at all?\r\n\r\nOlder code will fail during the start-up consistency check (the rollback test will notice entries with undo data present where it isn't expected), and fail to start.\r\n\r\n> But I also thought this was one of the cases that DisconnectBlock would \"graciously deal with\"\r\n\r\nWell, it does deal with it correctly (it's DISCONNECT_UNCLEAN case, not a DISCONNECT_FAILED one), but the code calling DisconnectBlock requires a DISCONNECT_OK.\r\n\r\nIn #10148, DisconnectBlock is called to rewind blocks for replay at startup, and there DISCONNECT_UNCLEAN is acceptable.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-04T20:20:21Z",
      "diff_hunk" : "@@ -1278,11 +1278,9 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             // mark an outpoint spent, and construct undo information\n             txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n             coins->Spend(nPos);\n-            if (coins->vout.size() == 0) {\n-                CTxInUndo& undo = txundo.vprevout.back();\n-                undo.nHeight = coins->nHeight;\n-                undo.fCoinBase = coins->fCoinBase;\n-            }\n+            CTxInUndo& undo = txundo.vprevout.back();\n+            undo.nHeight = coins->nHeight;\n+            undo.fCoinBase = coins->fCoinBase;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r114877706",
      "id" : 114877706,
      "original_commit_id" : "389181ab57989e7276aa663d21d550ed4bd9da66",
      "original_position" : 11,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 36376422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114877706",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Here is a graph of the speed and memory usage of a `-reindex-chainstate` until the default assumevalid point, with infinity -dbcache, on a 2.2GHz dual-cpu 28-core 56-threads machine with 256GiB RAM. Note that the x axis is progress (so proportional to the number of transactions).\r\n\r\n![reindex](https://cloud.githubusercontent.com/assets/548488/25756823/0e61e73e-317d-11e7-9470-9f09db5ae131.png)\r\n",
      "created_at" : "2017-05-05T17:26:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-299525746",
      "id" : 299525746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-05T17:26:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299525746",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079306"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079306"
         }
      },
      "body" : "I think this comment is now wrong. Should just say `unspent transaction output`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T20:15:36Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079306",
      "id" : 115079306,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 66,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079306",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079365"
         }
      },
      "body" : "`whether containing transaction was a coinbase`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T20:16:01Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether transaction is a coinbase",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079365",
      "id" : 115079365,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 71,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079365",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079425"
         }
      },
      "body" : "`at which height the containing transaction was included in the active block chain`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T20:16:22Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether transaction is a coinbase\n+    unsigned int fCoinBase : 1;\n \n     //! at which height this transaction was included in the active block chain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079425",
      "id" : 115079425,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 74,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079425",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079494"
         }
      },
      "body" : "`construct a CCoin from a CTxOut, at a given height`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T20:16:49Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether transaction is a coinbase\n+    unsigned int fCoinBase : 1;\n \n     //! at which height this transaction was included in the active block chain\n-    int nHeight;\n-\n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n-\n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n+    uint32_t nHeight : 31;\n \n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a CCoin from a CTransaction, at a given height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115079494",
      "id" : 115079494,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 94,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115079494",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115083218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115083218"
         }
      },
      "body" : "misleading name for this variable. Can you name it `coin` or `txout`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T20:39:10Z",
      "diff_hunk" : "@@ -12,53 +12,70 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115083218",
      "id" : 115083218,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 57,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115083218",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115088498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115088498"
         }
      },
      "body" : "I found this quite confusing until I worked out you were packing bits into a single VARINT (partly because I didn't understand that coinbase was supposed to be 1 or 0). I don't know if this would be clearer as: `VARINT(height|coinbase)` ie height bits concatenated with coinbase bit.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T21:11:59Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115088498",
      "id" : 115088498,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 57,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115088498",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115092604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115092604"
         }
      },
      "body" : "now that you've removed CCoinsModifier, I believe you can remove this forward declaration of CCoinsViewCache.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-05T21:39:30Z",
      "diff_hunk" : "@@ -336,97 +176,67 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView *viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoins(const COutPoint &outpoint, CCoin &coin) const override;\n+    bool HaveCoins(const COutPoint &outpoint) const override;\n+    uint256 GetBestBlock() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    CCoinsViewCursor *Cursor() const;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    CCoinsViewCursor *Cursor() const override;\n };\n \n \n class CCoinsViewCache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115092604",
      "id" : 115092604,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 352,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 36599797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115092604",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Same machine, but flushing at 1300 MiB:\r\n![reindex-1300](https://cloud.githubusercontent.com/assets/548488/25769030/c84fe65e-31c4-11e7-8819-264c44e50ddf.png)\r\n",
      "created_at" : "2017-05-06T01:58:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-299608732",
      "id" : 299608732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-06T01:58:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299608732",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115595178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115595178"
         }
      },
      "body" : "std::tie would make this a little easier to read:\r\n```c++\r\nCCoinsMap::iterator it;\r\nbool inserted;\r\nstd::tie(it, inserted) = cacheCoins.emplace(...\r\n```\r\n",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T20:33:42Z",
      "diff_hunk" : "@@ -152,6 +153,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::tuple<>());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115595178",
      "id" : 115595178,
      "original_commit_id" : "4f09ae53d8cc3b570b04ea72b8f9844f93543823",
      "original_position" : 23,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37147132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115595178",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627248"
         }
      },
      "body" : "Rewritten in a different way.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:05Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627248",
      "id" : 115627248,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 57,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37182288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627248",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627269"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:14Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627269",
      "id" : 115627269,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 66,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37182310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627269",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627285"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:22Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether transaction is a coinbase",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627285",
      "id" : 115627285,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 71,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37182327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627285",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627305"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:32Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether transaction is a coinbase\n+    unsigned int fCoinBase : 1;\n \n     //! at which height this transaction was included in the active block chain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627305",
      "id" : 115627305,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 74,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37182349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627305",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627322"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:40Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT(coinbase + height * 2)\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class CCoin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction outputs; spent outputs are .IsNull()\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether transaction is a coinbase\n+    unsigned int fCoinBase : 1;\n \n     //! at which height this transaction was included in the active block chain\n-    int nHeight;\n-\n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n-\n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n+    uint32_t nHeight : 31;\n \n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a CCoin from a CTransaction, at a given height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627322",
      "id" : 115627322,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 94,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37182363,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627322",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627341"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:50Z",
      "diff_hunk" : "@@ -336,97 +176,67 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView *viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoins(const COutPoint &outpoint, CCoin &coin) const override;\n+    bool HaveCoins(const COutPoint &outpoint) const override;\n+    uint256 GetBestBlock() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    CCoinsViewCursor *Cursor() const;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    CCoinsViewCursor *Cursor() const override;\n };\n \n \n class CCoinsViewCache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627341",
      "id" : 115627341,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 352,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37182386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627341",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627365"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:41:59Z",
      "diff_hunk" : "@@ -12,53 +12,70 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627365",
      "id" : 115627365,
      "original_commit_id" : "aaf39b924be5f4eafc1392ba010f90ae2ad6003d",
      "original_position" : 57,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 37182404,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627365",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627396"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:42:10Z",
      "diff_hunk" : "@@ -152,6 +153,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::tuple<>());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627396",
      "id" : 115627396,
      "original_commit_id" : "4f09ae53d8cc3b570b04ea72b8f9844f93543823",
      "original_position" : 23,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37182438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627396",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627431"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:42:31Z",
      "diff_hunk" : "@@ -914,8 +914,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n             // requesting or processing some txs which have already been included in a block\n             return recentRejects->contains(inv.hash) ||\n                    mempool.exists(inv.hash) ||\n-                   mapOrphanTransactions.count(inv.hash) ||\n-                   pcoinsTip->HaveCoinsInCache(inv.hash);\n+                   mapOrphanTransactions.count(inv.hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627431",
      "id" : 115627431,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 37182478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627431",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627487"
         }
      },
      "body" : "Fixed by introducing a helper function `AccessByTxid`.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-09T23:42:57Z",
      "diff_hunk" : "@@ -219,9 +219,13 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n     } else {\n-        CCoins coins;\n-        if (pcoinsTip->GetCoins(oneTxid, coins) && coins.nHeight > 0 && coins.nHeight <= chainActive.Height())\n-            pblockindex = chainActive[coins.nHeight];\n+        CCoin coins;\n+        size_t o = 0;\n+        while (pblockindex == nullptr && o < 1024) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115627487",
      "id" : 115627487,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 9,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 37182538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115627487",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115779856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115779856"
         }
      },
      "body" : "You need to update the second declaration in src/test/coins_tests.cpp as well, I believe.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-10T15:53:20Z",
      "diff_hunk" : "@@ -1490,46 +1490,42 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n \n } // anon namespace\n \n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n /**\n  * Apply the undo operation of a CTxInUndo to the given chain state.\n  * @param undo The undo object.\n  * @param view The coins view to which to apply the changes.\n  * @param out The out point that corresponds to the tx input.\n- * @return True on success.\n+ * @return True when the UTXO state was consistent with the undo data.\n  */\n-bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+DisconnectResult ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115779856",
      "id" : 115779856,
      "original_commit_id" : "ac6910b5f6fd7fcfc2b002afe4a69f9ebca499fe",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115779856",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "I've pushed a few more changes (rewriting the commits, but not a rebase), renaming some of the classes and variables to be more consistent.\r\n\r\nFor any further changes I'll create fixup commits in order to not hurt review.",
      "created_at" : "2017-05-10T19:44:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-300592062",
      "id" : 300592062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-10T19:44:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/300592062",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK 37b273524984eb034f68277a635fa7265ece638e. Thanks for implementing so many review suggestions. Removing coins->Clear() from ApplyTxInUndo in an earlier commit, renaming `CCoin` to `Coin`, changing stats.nSerializedSize were the only significant changes since my last review that I don't remember seeing suggested, and these all look good.",
      "created_at" : "2017-05-10T20:32:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-300603952",
      "id" : 300603952,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-10T20:32:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/300603952",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115873512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115873512"
         }
      },
      "body" : "Hmm, can the GetSerializeSize() be moved out of the loop?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-10T23:07:23Z",
      "diff_hunk" : "@@ -285,35 +227,21 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins* coins = AccessCoins(prevout.hash);\n-            if (!coins || !coins->IsAvailable(prevout.n)) {\n+            if (!HaveCoins(tx.vin[i].prevout)) {\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n \n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {\n-    assert(!cache.hasModifier);\n-    cache.hasModifier = true;\n-}\n-\n-CCoinsModifier::~CCoinsModifier()\n+const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n {\n-    assert(cache.hasModifier);\n-    cache.hasModifier = false;\n-    it->second.coins.Cleanup();\n-    cache.cachedCoinsUsage -= cachedCoinUsage; // Subtract the old usage\n-    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-        cache.cacheCoins.erase(it);\n-    } else {\n-        // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n+    COutPoint iter(txid, 0);\n+    while (iter.n * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION) < MAX_BLOCK_BASE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115873512",
      "id" : 115873512,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 362,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115873512",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115874844"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115874844"
         }
      },
      "body" : "Just a note for reviewers/benchmarkers - this is a behavior change as AddCoins is equivalent to ModifyNewCoins, not ModifyCoins.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-10T23:17:00Z",
      "diff_hunk" : "@@ -35,14 +35,14 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n     dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50 * CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n+    AddCoins(coinsRet, dummyTransactions[0], 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115874844",
      "id" : 115874844,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 5,
      "path" : "src/bench/ccoins_caching.cpp",
      "position" : 5,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115874844",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115876447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115876447"
         }
      },
      "body" : "Can we drop the nHeight check now? It looks like it used to be a shitty version of HaveCoins(), but we now do an availability check before returning and otherwise return null anyway, so it seems useless.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-10T23:30:29Z",
      "diff_hunk" : "@@ -839,9 +838,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;\n-    const CCoins* existingCoins = view.AccessCoins(hashTx);\n+    bool fHaveChain = false;\n+    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n+        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n+        fHaveChain = !existingCoin.IsPruned() && existingCoin.nHeight < 1000000000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115876447",
      "id" : 115876447,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 84,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115876447",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115879407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115879407"
         }
      },
      "body" : "Shameless ask: Can you swap \"Switch CScriptCheck to use CCoin instead of CCoins\" out for https://github.com/bitcoin/bitcoin/pull/10192/commits/a7ae7f9560720fe4245cdaa4eabc528d8b216f4d which should be nearly as good here but wont make things needlessly conflict?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-10T23:55:11Z",
      "diff_hunk" : "@@ -450,8 +450,8 @@ class CScriptCheck\n \n public:\n     CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n-        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n+    CScriptCheck(const Coin& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r115879407",
      "id" : 115879407,
      "original_commit_id" : "546681621bbe8086fd38b568d0fb95cab224087e",
      "original_position" : 6,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115879407",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116230644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116230644"
         }
      },
      "body" : "FYI, I get this warning when I compile:\r\n\r\n```\r\nIn file included from test/test_bitcoin_fuzzy.cpp:19:\r\n./undo.h:72:13: warning: variable 'count' is uninitialized when used here [-Wuninitialized]\r\n        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx\r\n            ^~~~~\r\n./serialize.h:544:7: note: in instantiation of function template specialization 'CTxUndo::Unserialize<CDataStream>' requested here\r\n    a.Unserialize(is);\r\n      ^\r\n./streams.h:407:11: note: in instantiation of function template specialization 'Unserialize<CDataStream, CTxUndo>' requested here\r\n        ::Unserialize(*this, obj);\r\n          ^\r\ntest/test_bitcoin_fuzzy.cpp:155:20: note: in instantiation of function template specialization 'CDataStream::operator>><CTxUndo>' requested here\r\n                ds >> tu;\r\n                   ^\r\n./undo.h:70:23: note: initialize the variable 'count' to silence this warning\r\n        uint64_t count;\r\n                      ^\r\n                       = 0\r\n1 warning generated.\r\n```",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T13:34:34Z",
      "diff_hunk" : "@@ -12,56 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0) {\n-            int nVersionDummy = 0;\n-            ::Serialize(s, VARINT(nVersionDummy));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0) {\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116230644",
      "id" : 116230644,
      "original_commit_id" : "f9d26448f339751916e967fb99dc8e020472600d",
      "original_position" : 87,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 37839293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116230644",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116280006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116280006"
         }
      },
      "body" : "nit: Add comment somewhere referencing BIP30 and the historical coinbase transactions which overwrote existing entries, as explanation for the last argument here.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T17:13:32Z",
      "diff_hunk" : "@@ -152,6 +153,57 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    CCoinsMap::iterator it;\n+    bool inserted;\n+    std::tie(it, inserted) = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::tuple<>());\n+    bool fresh = false;\n+    if (!inserted) {\n+        cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (it->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    if (it->second.coins.vout.size() <= outpoint.n) {\n+        it->second.coins.vout.resize(outpoint.n + 1);\n+    }\n+    it->second.coins.vout[outpoint.n] = std::move(coin.out);\n+    it->second.coins.nHeight = coin.nHeight;\n+    it->second.coins.fCoinBase = coin.fCoinBase;\n+    it->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), fCoinbase);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116280006",
      "id" : 116280006,
      "original_commit_id" : "777f4c6b63bbb4ce8e3afe51c02696893f4b165a",
      "original_position" : 51,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37839293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116280006",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116294899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116294899"
         }
      },
      "body" : "nit: should be \"list of transaction outputs\"",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T18:23:40Z",
      "diff_hunk" : "@@ -587,7 +601,7 @@ class CTxMemPool\n       *  pvNoSpendsRemaining, if set, will be populated with the list of transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116294899",
      "id" : 116294899,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 31,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 37839293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116294899",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116310044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116310044"
         }
      },
      "body" : "Could you explain this formula a bit more?  I would have thought `nSerializedSize` would refer to the size of the data that we hashed, and hence it'd just be exactly the size of what we're passing to CHashWriter, but instead it seems we're trying to estimate the on-disk size?\r\n\r\nI'm also not familiar with the leveldb internals, any chance you have a reference for understanding this duplication? ",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T19:43:38Z",
      "diff_hunk" : "@@ -778,12 +778,15 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     assert(!outputs.empty());\n     ss << hash;\n     ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n+    stats.nSerializedSize += 30 + 4 * outputs.size(); // Account for 1/16 chance of txid duplication in LevelDB.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116310044",
      "id" : 116310044,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 4,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 37839293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116310044",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116313759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116313759"
         }
      },
      "body" : "It looks like the old code had sanity checking on the height, to prevent out-of-bounds access into chainActive.  I assume we should put that protection back in?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T20:05:56Z",
      "diff_hunk" : "@@ -219,9 +219,8 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n     } else {\n-        CCoins coins;\n-        if (pcoinsTip->GetCoins(oneTxid, coins) && coins.nHeight > 0 && coins.nHeight <= chainActive.Height())\n-            pblockindex = chainActive[coins.nHeight];\n+        const Coin& coin = AccessByTxid(*pcoinsTip, oneTxid);\n+        if (!coin.IsPruned()) pblockindex = chainActive[coin.nHeight];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116313759",
      "id" : 116313759,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 37839293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116313759",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116316837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116316837"
         }
      },
      "body" : "Shouldn't this be including all outpoints that are no longer spent, rather than just outpoints from transactions where none of the outpoints are spent?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T20:22:23Z",
      "diff_hunk" : "@@ -1048,7 +1051,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n                         continue;\n                     auto iter = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n                     if (iter == mapNextTx.end() || iter->first->hash != txin.prevout.hash)\n-                        pvNoSpendsRemaining->push_back(txin.prevout.hash);\n+                        pvNoSpendsRemaining->push_back(txin.prevout);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116316837",
      "id" : 116316837,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 69,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 37839293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116316837",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116326062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116326062"
         }
      },
      "body" : "I'm super not a big fan of removing the old hasModifyer sanity checks here. Returning a reference to an object in our map without enforcing some semantics on the caller seems like a footgun. I'm curious if you have any numbers on performance degredation of not doing the Modfiyer approach? Also, the comment is somewhat ambiguous - you're allowed to modify (and even delete) other elements, but you are not allowed to insert new elements while holding the returned reference from AccessCoins (also, you cannot modify the returned value if it IsPruned()).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T21:17:30Z",
      "diff_hunk" : "@@ -412,41 +413,32 @@ class CCoinsViewCache : public CCoinsViewBacked\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n-    /* Cached dynamic memory usage for the inner CCoins objects. */\n+    /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const;\n     bool HaveCoins(const COutPoint &outpoint) const;\n     uint256 GetBestBlock() const;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     /**\n-     * Check if we have the given tx already loaded in this cache.\n+     * Check if we have the given utxo already loaded in this cache.\n      * The semantics are the same as HaveCoins(), but no calls to\n      * the backing CCoinsView are made.\n      */\n-    bool HaveCoinsInCache(const uint256 &txid) const;\n-\n-    /**\n-     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n-     * more efficient than GetCoins. Modifications to other cache entries are\n-     * allowed while accessing the returned pointer.\n-     */\n-    const CCoins* AccessCoins(const uint256 &txid) const;\n+    bool HaveCoinsInCache(const COutPoint &outpoint) const;\n \n     /**\n-     * Return a copy of a Coin in the cache, or a pruned one if not found. This is\n+     * Return a reference to Coin in the cache, or a pruned one if not found. This is\n      * more efficient than GetCoins. Modifications to other cache entries are\n      * allowed while accessing the returned pointer.\n-     * TODO: return a reference to a Coin after changing CCoinsViewCache storage.\n      */\n-    const Coin AccessCoin(const COutPoint &output) const;\n+    const Coin& AccessCoin(const COutPoint &output) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116326062",
      "id" : 116326062,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 147,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116326062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116327084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116327084"
         }
      },
      "body" : "That reminds me, should we add a similar wrapper here for HaveCoins?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T21:24:10Z",
      "diff_hunk" : "@@ -146,9 +146,9 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n {\n public:\n     CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116327084",
      "id" : 116327084,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116327084",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116327575"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116327575"
         }
      },
      "body" : "Also, nit: can you override here?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T21:27:36Z",
      "diff_hunk" : "@@ -146,9 +146,9 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n {\n public:\n     CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116327575",
      "id" : 116327575,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116327575",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116328088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116328088"
         }
      },
      "body" : "Can we not just leave it and use HaveCoinsInCache(COutPoint(hash, 0))? Something in the latest block is most likely to still have all its outputs available. Do we have any stats on how often this check gets used (especially for nodes which get blocks early compared to random p2p nodes?)",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T21:30:52Z",
      "diff_hunk" : "@@ -914,8 +914,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n             // requesting or processing some txs which have already been included in a block\n             return recentRejects->contains(inv.hash) ||\n                    mempool.exists(inv.hash) ||\n-                   mapOrphanTransactions.count(inv.hash) ||\n-                   pcoinsTip->HaveCoinsInCache(inv.hash);\n+                   mapOrphanTransactions.count(inv.hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116328088",
      "id" : 116328088,
      "original_commit_id" : "25b95d6b17d8ce2f97e6f42877c82e134ee93be1",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116328088",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116330635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116330635"
         }
      },
      "body" : "Can you elaborate a bit on the comment here?\r\nAlso, shouldnt this consider that the output indecies are VARINTs?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T21:48:39Z",
      "diff_hunk" : "@@ -773,6 +773,25 @@ struct CCoinsStats\n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n+static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+{\n+    assert(!outputs.empty());\n+    ss << hash;\n+    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n+    stats.nSerializedSize += 30 + 4 * outputs.size(); // Account for 1/16 chance of txid duplication in LevelDB.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116330635",
      "id" : 116330635,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 9,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116330635",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116332801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116332801"
         }
      },
      "body" : "nit: while you're changing these lines, it'd be nice to add overrides where appropriate.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T22:06:11Z",
      "diff_hunk" : "@@ -75,11 +73,13 @@ class CCoinsViewDB : public CCoinsView\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116332801",
      "id" : 116332801,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 17,
      "path" : "src/txdb.h",
      "position" : null,
      "pull_request_review_id" : 35448004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116332801",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116339994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116339994"
         }
      },
      "body" : "fixed",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:14:11Z",
      "diff_hunk" : "@@ -587,7 +601,7 @@ class CTxMemPool\n       *  pvNoSpendsRemaining, if set, will be populated with the list of transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116339994",
      "id" : 116339994,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 31,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 37961215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116339994",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340003"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340003"
         }
      },
      "body" : "fixed",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:14:18Z",
      "diff_hunk" : "@@ -152,6 +153,57 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    CCoinsMap::iterator it;\n+    bool inserted;\n+    std::tie(it, inserted) = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::tuple<>());\n+    bool fresh = false;\n+    if (!inserted) {\n+        cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (it->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    if (it->second.coins.vout.size() <= outpoint.n) {\n+        it->second.coins.vout.resize(outpoint.n + 1);\n+    }\n+    it->second.coins.vout[outpoint.n] = std::move(coin.out);\n+    it->second.coins.nHeight = coin.nHeight;\n+    it->second.coins.fCoinBase = coin.fCoinBase;\n+    it->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), fCoinbase);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340003",
      "id" : 116340003,
      "original_commit_id" : "777f4c6b63bbb4ce8e3afe51c02696893f4b165a",
      "original_position" : 51,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37961222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340003",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340164"
         }
      },
      "body" : "I tried to fix this by writing a big comment about the data format and the rationale for the formula, only to discover it was wrong. Then I went on to fix it, and take even more cases into account, but the result still was pretty far off from the actual disk size. Instead, I removed the field entirely and replaced it with a disk_size element that is computed by LevelDB directly (but is not guaranteed to be deterministic).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:16:08Z",
      "diff_hunk" : "@@ -778,12 +778,15 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     assert(!outputs.empty());\n     ss << hash;\n     ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n+    stats.nSerializedSize += 30 + 4 * outputs.size(); // Account for 1/16 chance of txid duplication in LevelDB.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340164",
      "id" : 116340164,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 4,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 37961403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340164",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340182"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:16:18Z",
      "diff_hunk" : "@@ -219,9 +219,8 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n     } else {\n-        CCoins coins;\n-        if (pcoinsTip->GetCoins(oneTxid, coins) && coins.nHeight > 0 && coins.nHeight <= chainActive.Height())\n-            pblockindex = chainActive[coins.nHeight];\n+        const Coin& coin = AccessByTxid(*pcoinsTip, oneTxid);\n+        if (!coin.IsPruned()) pblockindex = chainActive[coin.nHeight];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340182",
      "id" : 116340182,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 37961424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340182",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340193"
         }
      },
      "body" : "Nice catch, fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:16:30Z",
      "diff_hunk" : "@@ -1048,7 +1051,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n                         continue;\n                     auto iter = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n                     if (iter == mapNextTx.end() || iter->first->hash != txin.prevout.hash)\n-                        pvNoSpendsRemaining->push_back(txin.prevout.hash);\n+                        pvNoSpendsRemaining->push_back(txin.prevout);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340193",
      "id" : 116340193,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 69,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 37961436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340193",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340459"
         }
      },
      "body" : "Ugh, that means exposing DisconnectResult :(",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:19:15Z",
      "diff_hunk" : "@@ -1490,46 +1490,42 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n \n } // anon namespace\n \n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n /**\n  * Apply the undo operation of a CTxInUndo to the given chain state.\n  * @param undo The undo object.\n  * @param view The coins view to which to apply the changes.\n  * @param out The out point that corresponds to the tx input.\n- * @return True on success.\n+ * @return True when the UTXO state was consistent with the undo data.\n  */\n-bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+DisconnectResult ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340459",
      "id" : 116340459,
      "original_commit_id" : "ac6910b5f6fd7fcfc2b002afe4a69f9ebca499fe",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 37961730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340459",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340742"
         }
      },
      "body" : "As explained on IRC, references to std::unordered_map entries always remain valid, even under concurrent modification/insertion (including when a rehash is triggered), except when the entry itself is deleted. Iterators do get invalidated by rehashing, but CCoinsViewCache does not allow iterators to escape anymore (they used to be, inside CCoinsModifier).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:22:28Z",
      "diff_hunk" : "@@ -412,41 +413,32 @@ class CCoinsViewCache : public CCoinsViewBacked\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n-    /* Cached dynamic memory usage for the inner CCoins objects. */\n+    /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const;\n     bool HaveCoins(const COutPoint &outpoint) const;\n     uint256 GetBestBlock() const;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     /**\n-     * Check if we have the given tx already loaded in this cache.\n+     * Check if we have the given utxo already loaded in this cache.\n      * The semantics are the same as HaveCoins(), but no calls to\n      * the backing CCoinsView are made.\n      */\n-    bool HaveCoinsInCache(const uint256 &txid) const;\n-\n-    /**\n-     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n-     * more efficient than GetCoins. Modifications to other cache entries are\n-     * allowed while accessing the returned pointer.\n-     */\n-    const CCoins* AccessCoins(const uint256 &txid) const;\n+    bool HaveCoinsInCache(const COutPoint &outpoint) const;\n \n     /**\n-     * Return a copy of a Coin in the cache, or a pruned one if not found. This is\n+     * Return a reference to Coin in the cache, or a pruned one if not found. This is\n      * more efficient than GetCoins. Modifications to other cache entries are\n      * allowed while accessing the returned pointer.\n-     * TODO: return a reference to a Coin after changing CCoinsViewCache storage.\n      */\n-    const Coin AccessCoin(const COutPoint &output) const;\n+    const Coin& AccessCoin(const COutPoint &output) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340742",
      "id" : 116340742,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 147,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 37962021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340742",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340849"
         }
      },
      "body" : "Deleted this whole thing (see my response to @sdaftuar's comment on the same line).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:24:09Z",
      "diff_hunk" : "@@ -773,6 +773,25 @@ struct CCoinsStats\n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n };\n \n+static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+{\n+    assert(!outputs.empty());\n+    ss << hash;\n+    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n+    stats.nSerializedSize += 30 + 4 * outputs.size(); // Account for 1/16 chance of txid duplication in LevelDB.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116340849",
      "id" : 116340849,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 9,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 37962154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116340849",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116342644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116342644"
         }
      },
      "body" : "Agree, but I'm not going to rewrite history to fix that now. I can remember it when squashing.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-12T23:49:07Z",
      "diff_hunk" : "@@ -1276,11 +1276,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             if (nPos >= coins->vout.size() || coins->vout[nPos].IsNull())\n                 assert(false);\n             // mark an outpoint spent, and construct undo information\n-            txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n+            txundo.vprevout.push_back(CCoin(std::move(coins->vout[nPos]), coins->nHeight, coins->fCoinBase));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116342644",
      "id" : 116342644,
      "original_commit_id" : "45425d1227e3feff587880aa5fed3dce55e7647a",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 37964041,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116342644",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116343427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116343427"
         }
      },
      "body" : "Agree, but again I'd rather not rewrite history. I can fix it when squashing, but just always setting it to false would not work (it would break the tests, which are very useful in determining that the correct behaviour remains during the whole changeset).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:01:39Z",
      "diff_hunk" : "@@ -152,6 +152,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (ret.first->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116343427",
      "id" : 116343427,
      "original_commit_id" : "778f00e920f70a5c599637f18f0031b3d344ce68",
      "original_position" : 24,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37964841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116343427",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116343519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116343519"
         }
      },
      "body" : "Meh.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:03:26Z",
      "diff_hunk" : "@@ -9,169 +9,116 @@\n \n #include <assert.h>\n \n-/**\n- * calculate number of bytes for the bitmask, and its number of non-zero bytes\n- * each bit in the bitmask represents the availability of one output, but the\n- * availabilities of the first two outputs are encoded separately\n- */\n-void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-    unsigned int nLastUsedByte = 0;\n-    for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-        bool fZero = true;\n-        for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-            if (!vout[2+b*8+i].IsNull()) {\n-                fZero = false;\n-                continue;\n-            }\n-        }\n-        if (!fZero) {\n-            nLastUsedByte = b + 1;\n-            nNonzeroBytes++;\n-        }\n-    }\n-    nBytes += nLastUsedByte;\n-}\n-\n-bool CCoins::Spend(uint32_t nPos) \n-{\n-    if (nPos >= vout.size() || vout[nPos].IsNull())\n-        return false;\n-    vout[nPos].SetNull();\n-    Cleanup();\n-    return true;\n-}\n-\n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n+bool CCoinsView::GetCoins(const COutPoint &txid, CCoin &coin) const { return false; }\n+bool CCoinsView::HaveCoins(const COutPoint &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n+bool CCoinsViewBacked::GetCoins(const COutPoint &outpoint, CCoin &coin) const { return base->GetCoins(outpoint, coin); }\n+bool CCoinsViewBacked::HaveCoins(const COutPoint &outpoint) const { return base->HaveCoins(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n \n-SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {\n     return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n+CCoinsMap::iterator CCoinsViewCache::FetchCoins(const COutPoint &outpoint) const {\n+    CCoinsMap::iterator it = cacheCoins.find(outpoint);\n     if (it != cacheCoins.end())\n         return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n+    CCoin tmp;\n+    if (!base->GetCoins(outpoint, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n+    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n     if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n+        // The parent only has an empty entry for this outpoint; we can consider our\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n     cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+bool CCoinsViewCache::GetCoins(const COutPoint &outpoint, CCoin &coin) const {\n+    CCoinsMap::const_iterator it = FetchCoins(outpoint);\n     if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n+        coin = it->second.coins;\n         return true;\n     }\n     return false;\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    size_t cachedCoinUsage = 0;\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (!ret.first->second.coins.IsPruned()) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n         }\n-    } else {\n-        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);\n     }\n-    // Assume that whenever ModifyCoins is called, the entry will be modified.\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n+    ret.first->second.coins = std::move(coin);\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += ret.first->second.coins.DynamicMemoryUsage();\n }\n \n-/* ModifyNewCoins allows for faster coin modification when creating the new\n- * outputs from a transaction.  It assumes that BIP 30 (no duplicate txids)\n- * applies and has already been tested for (or the test is not required due to\n- * BIP 34, height in coinbase).  If we can assume BIP 30 then we know that any\n- * non-coinbase transaction we are adding to the UTXO must not already exist in\n- * the utxo unless it is fully spent.  Thus we can check only if it exists DIRTY\n- * at the current level of the cache, in which case it is not safe to mark it\n- * FRESH (b/c then its spentness still needs to flushed).  If it's not dirty and\n- * doesn't exist or is pruned in the current cache, we know it either doesn't\n- * exist or is pruned in parent caches, which is the definition of FRESH.  The\n- * exception to this is the two historical violations of BIP 30 in the chain,\n- * both of which were coinbases.  We do not mark these fresh so we we can ensure\n- * that they will still be properly overwritten when spent.\n- */\n-CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    if (!coinbase) {\n-        // New coins must not already exist.\n-        if (!ret.first->second.coins.IsPruned())\n-            throw std::logic_error(\"ModifyNewCoins should not find pre-existing coins on a non-coinbase unless they are pruned!\");\n-\n-        if (!(ret.first->second.flags & CCoinsCacheEntry::DIRTY)) {\n-            // If the coin is known to be pruned (have no unspent outputs) in\n-            // the current view and the cache entry is not dirty, we know the\n-            // coin also must be pruned in the parent view as well, so it is safe\n-            // to mark this fresh.\n-            ret.first->second.flags |= CCoinsCacheEntry::FRESH;\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), CCoin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n         }\n     }\n-    ret.first->second.coins.Clear();\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first, 0);\n }\n \n-const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+void CCoinsViewCache::SpendCoin(const COutPoint &outpoint, CCoin* moveout) {\n+    CCoinsMap::iterator it = FetchCoins(outpoint);\n+    if (it == cacheCoins.end()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116343519",
      "id" : 116343519,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 186,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37964937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116343519",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116344023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116344023"
         }
      },
      "body" : "Sounds good. Will do when squashing.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:13:03Z",
      "diff_hunk" : "@@ -450,8 +450,8 @@ class CScriptCheck\n \n public:\n     CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n-        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n+    CScriptCheck(const Coin& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116344023",
      "id" : 116344023,
      "original_commit_id" : "546681621bbe8086fd38b568d0fb95cab224087e",
      "original_position" : 6,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 37965485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116344023",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345486"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:40:58Z",
      "diff_hunk" : "@@ -12,53 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345486",
      "id" : 116345486,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 57,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 37966922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345486",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345499"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:41:12Z",
      "diff_hunk" : "@@ -12,53 +12,72 @@\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class CTxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    CCoin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    CTxInUndoSerializer(const CCoin* coins) : txout(const_cast<CCoin*>(coins)) {}\n };\n \n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<CCoin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        uint64_t n = 0;\n+        while (n < count) {\n+            ::Serialize(s, REF(CTxInUndoSerializer(&vprevout[n++])));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > 111111) { // TODO: avoid hardcoding max txouts per tx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345499",
      "id" : 116345499,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 88,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 37966934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345499",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345518"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345518"
         }
      },
      "body" : "Fixed by changing the type to int :(",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:41:34Z",
      "diff_hunk" : "@@ -1490,46 +1490,42 @@ bool AbortNode(CValidationState& state, const std::string& strMessage, const std\n \n } // anon namespace\n \n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n /**\n  * Apply the undo operation of a CTxInUndo to the given chain state.\n  * @param undo The undo object.\n  * @param view The coins view to which to apply the changes.\n  * @param out The out point that corresponds to the tx input.\n- * @return True on success.\n+ * @return True when the UTXO state was consistent with the undo data.\n  */\n-bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+DisconnectResult ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345518",
      "id" : 116345518,
      "original_commit_id" : "ac6910b5f6fd7fcfc2b002afe4a69f9ebca499fe",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 37966954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345518",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345553"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:41:54Z",
      "diff_hunk" : "@@ -1564,13 +1564,12 @@ static bool DisconnectBlock(const CBlock& block, CValidationState& state, const\n \n         // restore inputs\n         if (i > 0) { // not coinbases\n-            const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n+            CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n                 return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n-                const CCoin &undo = txundo.vprevout[j];\n-                if (!ApplyTxInUndo(undo, view, out))\n+                if (!ApplyTxInUndo(std::move(txundo.vprevout[j]), view, out))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345553",
      "id" : 116345553,
      "original_commit_id" : "6d6a5ffaa10d5ef26a6e8be287d48af64ed0ae25",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 37966983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345553",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345569"
         }
      },
      "body" : "Done.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:42:24Z",
      "diff_hunk" : "@@ -285,35 +227,21 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins* coins = AccessCoins(prevout.hash);\n-            if (!coins || !coins->IsAvailable(prevout.n)) {\n+            if (!HaveCoins(tx.vin[i].prevout)) {\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n \n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {\n-    assert(!cache.hasModifier);\n-    cache.hasModifier = true;\n-}\n-\n-CCoinsModifier::~CCoinsModifier()\n+const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n {\n-    assert(cache.hasModifier);\n-    cache.hasModifier = false;\n-    it->second.coins.Cleanup();\n-    cache.cachedCoinsUsage -= cachedCoinUsage; // Subtract the old usage\n-    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-        cache.cacheCoins.erase(it);\n-    } else {\n-        // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n+    COutPoint iter(txid, 0);\n+    while (iter.n * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION) < MAX_BLOCK_BASE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345569",
      "id" : 116345569,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 362,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37967006,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345569",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345584"
         }
      },
      "body" : "Done.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:42:42Z",
      "diff_hunk" : "@@ -460,17 +280,16 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n-    friend class CCoinsModifier;\n-\n private:\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoins(const COutPoint &outpoint) const;\n \n     /**\n      * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n      */\n     CCoinsViewCache(const CCoinsViewCache &);\n };\n \n+//! Utility function to add all of a transaction's outputs to a cache.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345584",
      "id" : 116345584,
      "original_commit_id" : "aad2cf520bfcb93a64b6e716d62123a4b4fd968d",
      "original_position" : 488,
      "path" : "src/coins.h",
      "position" : 500,
      "pull_request_review_id" : 37967019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345584",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345596"
         }
      },
      "body" : "Done.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:43:00Z",
      "diff_hunk" : "@@ -839,9 +838,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;\n-    const CCoins* existingCoins = view.AccessCoins(hashTx);\n+    bool fHaveChain = false;\n+    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n+        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n+        fHaveChain = !existingCoin.IsPruned() && existingCoin.nHeight < 1000000000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345596",
      "id" : 116345596,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 84,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 37967034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345596",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345612"
         }
      },
      "body" : "Right, there is no equivalent of ModifyCoins anymore.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:43:22Z",
      "diff_hunk" : "@@ -35,14 +35,14 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n     dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50 * CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n+    AddCoins(coinsRet, dummyTransactions[0], 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345612",
      "id" : 116345612,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 5,
      "path" : "src/bench/ccoins_caching.cpp",
      "position" : 5,
      "pull_request_review_id" : 37967050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345612",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345637"
         }
      },
      "body" : "Added a bunch of overrides.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:43:46Z",
      "diff_hunk" : "@@ -146,9 +146,9 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n {\n public:\n     CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const {\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345637",
      "id" : 116345637,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 37967074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345637",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345655"
         }
      },
      "body" : "Done.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T00:44:13Z",
      "diff_hunk" : "@@ -75,11 +73,13 @@ class CCoinsViewDB : public CCoinsView\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116345655",
      "id" : 116345655,
      "original_commit_id" : "37b273524984eb034f68277a635fa7265ece638e",
      "original_position" : 17,
      "path" : "src/txdb.h",
      "position" : null,
      "pull_request_review_id" : 37967086,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116345655",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116366162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116366162"
         }
      },
      "body" : "Actually, that std::move doesn't exist anywhere in the current PR. I think you were commenting on an old commit.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T19:52:44Z",
      "diff_hunk" : "@@ -1276,11 +1276,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n             if (nPos >= coins->vout.size() || coins->vout[nPos].IsNull())\n                 assert(false);\n             // mark an outpoint spent, and construct undo information\n-            txundo.vprevout.push_back(CTxInUndo(coins->vout[nPos]));\n+            txundo.vprevout.push_back(CCoin(std::move(coins->vout[nPos]), coins->nHeight, coins->fCoinBase));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116366162",
      "id" : 116366162,
      "original_commit_id" : "45425d1227e3feff587880aa5fed3dce55e7647a",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 37986666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116366162",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116366171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116366171"
         }
      },
      "body" : "Going to fix this in a squashed version.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-13T19:53:23Z",
      "diff_hunk" : "@@ -152,6 +152,55 @@ CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbas\n     return CCoinsModifier(*this, ret.first, 0);\n }\n \n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, CCoin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    auto ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint.hash), std::forward_as_tuple(nullptr));\n+    bool fresh = false;\n+    if (!ret.second) {\n+        cachedCoinsUsage -= ret.first->second.coins.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (ret.first->second.coins.IsAvailable(outpoint.n)) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(ret.first->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    if (ret.first->second.coins.vout.size() <= outpoint.n) {\n+        ret.first->second.coins.vout.resize(outpoint.n + 1);\n+    }\n+    ret.first->second.coins.vout[outpoint.n] = std::move(coin.out);\n+    ret.first->second.coins.nHeight = coin.nHeight;\n+    ret.first->second.coins.fCoinBase = coin.fCoinBase;\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += ret.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        if (!tx.vout[i].scriptPubKey.IsUnspendable()) {\n+            cache.AddCoin(COutPoint(txid, i), CCoin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n+        }\n+    }\n+}\n+\n+void CCoinsViewCache::SpendCoin(const COutPoint &outpoint, CCoin* moveout) {\n+    CCoinsMap::iterator it = FetchCoins(outpoint.hash);\n+    if (it == cacheCoins.end()) return;\n+    cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+    if (moveout && it->second.coins.IsAvailable(outpoint.n)) {\n+        *moveout = CCoin(std::move(it->second.coins.vout[outpoint.n]), it->second.coins.nHeight, it->second.coins.fCoinBase);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116366171",
      "id" : 116366171,
      "original_commit_id" : "778f00e920f70a5c599637f18f0031b3d344ce68",
      "original_position" : 51,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 37986674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116366171",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Squashed history with fixups. Original history:\r\n* 83367a95f922f6a5aec8b755e55c748e2edcbbc6 Add SizeEstimate to CDBBatch\r\n* ac6910b5f6fd7fcfc2b002afe4a69f9ebca499fe error() in disconnect for disk corruption, not inconsistency\r\n* f7beab2b69b4e239e6c6d92062dd7a5533f7fd9c Introduce CHashVerifier to hash read data\r\n* e3d9ac37e1f7b74df263f9fbff2a482169284afe Add specialization of SipHash for 256 + 32 bit data\r\n* 5be8c484780f1e66ee6d2e089d40a4d702e8a2f1 Remove/ignore tx version in utxo and undo\r\n* ec8c2615d00cefbdec4f9af6c68545f4a0814fe2 Store/allow tx metadata in all undo records\r\n* ac70d1fc96737eb49d6ca6ba8adf8e24d30a7f7d Introduce Coin, a single unspent output\r\n* 50a8df05a1849cf7fe85e14226725a3e91390b0b Replace CTxInUndo with Coin\r\n* c3ce6c92f7502d075118ed013f482fbd55ec102a Optimization: Coin&& to ApplyTxInUndo\r\n* 777f4c6b63bbb4ce8e3afe51c02696893f4b165a Introduce new per-txout CCoinsViewCache functions\r\n* 8df47a3ae67f1ce270b7612a61c5a136bf75297e Switch from per-tx to per-txout CCoinsViewCache methods in some places\r\n* 546681621bbe8086fd38b568d0fb95cab224087e Switch CScriptCheck to use Coin instead of CCoins\r\n* ce86045f34eb87cf32d50cd2e73a267cf2073d73 Switch tests from ModifyCoins to AddCoin/SpendCoin\r\n* b5144262ebdacee7fe0cb77bf19186a7a1bde497 Remove ModifyCoins/ModifyNewCoins\r\n* 593a6324fbaf6bf1188c15ad23d670213e9cb41c Replace CCoins-based CTxMemPool::pruneSpent with isSpent\r\n* deb42bb6c84e93d3f5e53c9007d58a7abdc45001 Refactor GetUTXOStats in preparation for per-COutPoint iteration\r\n* 21791e4fbc0bf385283ed82ff736961d45b0d6d6 Switch CCoinsView and chainstate db from per-txid to per-txout\r\n* 6fd519e2d1fad48fbe5bf5b335c6fb0606d906e5 Remove unused CCoins methods\r\n* 575ffb39d6563c73b057690ab3171aa96097c27e Pack Coin more tightly\r\n* f2cd835a18d3f784fe45fa0421120d8fb96a6dce Reduce reserved memory space for flushing\r\n* b951db2885c97c3bc71b58aa00a3a897b75a8340 Upgrade from per-tx database to per-txout\r\n* 229b89c36f104a7f26a2d40b604e631cc1c56814 [MOVEONLY] Move old CCoins class to txdb.cpp\r\n* fdab87c96cbd4e92aec40fc10ba83dd2ef2ddbe8 Merge CCoinsViewCache's GetOutputFor and AccessCoin\r\n* 37b273524984eb034f68277a635fa7265ece638e Rename CCoinsCacheEntry::coins to coin\r\n* e581f28c0f7c7bba36f28b1c2a69c7a584e54edb f Replace CTxInUndo with Coin: initialize count variale\r\n* 69f14c4c7be6fd233a420953255a21119e11096f f Introduce new per-txout CCoinsViewCache functions: add comment explaining fCoinbase\r\n* 71ccd9d1bd50a523087ef74140af2032907f7656 f Switch CCoinsView and chainstate db from per-txid to per-txout: fix txmempool comment\r\n* fdfafc54503aca8645c9bd8816f590833debf363 f Remove/ignore tx version in utxo and undo: remove ill-defined bytes_serialized\r\n* 9da167ec95b3bbf44ca545adcc0855d8d0c25642 Report on-disk size in gettxoutsetinfo\r\n* 3e04e32a10df48965981e86c559cf4b8691e7699 f Switch CCoinsView and chainstate db from per-txid to per-txout: re-add sanity check in gettxoutproof\r\n* c8985414f376e73ae301d282b6e38e8accf493f9 f Switch CCoinsView and chainstate db from per-txid to per-txout: CTxMempool::TrimToSize should not use per-txid logic for pvNoRemainingSpends\r\n* b69f3bc3400e6693aa04b00c054f5018b6ffa954 f Replace CTxInUndo with Coin: split TxInUndoSerializer off from deserializer\r\n* 544c34b202725c932cb9edbd8be655bc7764fa85 f Replace CTxInUndo with Coin: don't hardcode max outputs per block\r\n* bf4dadbd98d07a07b87fea577ef9d38328d8607d f error() in disconnect for disk corruption, not inconsistency: correct type in extern ApplyTxInUndo in coins_tests.cpp\r\n* 6ac7ea345d18d13bac4bc00e513eb3065a36c713 f Optimization: Coin&& to ApplyTxInUndo: Comment that all of txundo.prevout was moved\r\n* 369afe4208ede1741cbde553364a1fcca7d44781 f Introduce new per-txout CCoinsViewCache functions: do not compute CTxOut() size in loop\r\n* dc2bb20a396317e47e17bb0533ca0e42d3f81fb1 f Introduce new per-txout CCoinsViewCache functions: Add comment explaining AddCoins potential_overwrite assumptions\r\n* 5611b76c963d02bd267127122222db85a5e3761a f Switch from per-tx to per-txout CCoinsViewCache methods in some places: remove redundant nHeight < 1000000000 logic\r\n* 51c7c4235f12de8271ff2ed0447571b6a3e71a23 f Switch CCoinsView and chainstate db from per-txid to per-txout: add overrides\r\n* b5621d6dbd41dfde331afd45ab6e0c4f8c8c2b82 f Switch CCoinsView and chainstate db from per-txid to per-txout: still try COutPoint(hash, 0) in AlreadyHave\r\n* ea2a5b937a625f738c97314de48e117be9e76abb Only pass things committed to by tx's witness hash to CScriptCheck\r\n",
      "created_at" : "2017-05-13T22:18:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-301278276",
      "id" : 301278276,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-13T22:18:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301278276",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116413229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116413229"
         }
      },
      "body" : "doc: `hash_serialized_2`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-15T05:36:20Z",
      "diff_hunk" : "@@ -878,8 +891,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n-            \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n             \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116413229",
      "id" : 116413229,
      "original_commit_id" : "a86f1c959c4beaf2b2667b000983f22de6acadf2",
      "original_position" : 84,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 84,
      "pull_request_review_id" : 38031717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116413229",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I've been testing this on a slow system: on an ARM (i.MX6), USB2 external harddisk, the database upgrade took about 50 minutes:\r\n```\r\n2017-05-15 10:27:45 Upgrading database...\r\n2017-05-15 11:20:25 LoadBlockIndexDB: last block file = 869\r\n```\r\nNot necessarily in this pull, but some kind of progress feedback like for rescans / reindexes would be indispensable. Users might assume that the client has crashed after no log messages for such a long time.",
      "created_at" : "2017-05-15T12:52:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-301465629",
      "id" : 301465629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-15T12:52:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301465629",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116585127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116585127"
         }
      },
      "body" : "The `if (!mapNextTx.count(txin.prevout))` guard isn't necessary here, right?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-15T19:53:02Z",
      "diff_hunk" : "@@ -1048,7 +1051,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n                         continue;\n                     auto iter = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n                     if (iter == mapNextTx.end() || iter->first->hash != txin.prevout.hash)\n-                        pvNoSpendsRemaining->push_back(txin.prevout.hash);\n+                        pvNoSpendsRemaining->push_back(txin.prevout);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r116585127",
      "id" : 116585127,
      "original_commit_id" : "21791e4fbc0bf385283ed82ff736961d45b0d6d6",
      "original_position" : 69,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 38216904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116585127",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "> Not necessarily in this pull, but some kind of progress feedback like for rescans / reindexes would be indispensable. Users might assume that the client has crashed after no log messages for such a long time.\r\n\r\nYes, fully agree. There would need to be some UI interaction in the GUI, and at least some progress reported in debug.log during the process. I'd prefer to do that after merging, though.\r\n\r\nWe also need some calls to leveldb's CompactRange during the conversion, as the old entries don't seem to be cleaned up quickly automatically.",
      "created_at" : "2017-05-15T22:19:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-301621318",
      "id" : 301621318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-15T22:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301621318",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117011975"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117011975"
         }
      },
      "body" : "In commit \"Report on-disk size in gettxoutsetinfo\"\r\n\r\nCould assert `6400 < size < 64000`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-17T14:11:58Z",
      "diff_hunk" : "@@ -49,6 +49,9 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n+        size = res['disk_size']\n+        assert size > 6400",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117011975",
      "id" : 117011975,
      "original_commit_id" : "1b4202cca1127ea6c43b0c410dde9baf95e96260",
      "original_position" : 5,
      "path" : "test/functional/blockchain.py",
      "position" : null,
      "pull_request_review_id" : 38679387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117011975",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117092057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117092057"
         }
      },
      "body" : "I was wondering what happens in this function if an input doesn't exist -- in the old code, it appears we'd `assert()` in `GetOutputFor()`, whereas in the new code we'll just silently return an incorrect value (because nValue is -1 in that case).  Do you think it's worth asserting here that AccessCoin is returning something valid?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-17T19:40:52Z",
      "diff_hunk" : "@@ -262,21 +214,14 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n-{\n-    const CCoins* coins = AccessCoins(input.prevout.hash);\n-    assert(coins && coins->IsAvailable(input.prevout.n));\n-    return coins->vout[input.prevout.n];\n-}\n-\n CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n     CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        nResult += GetOutputFor(tx.vin[i]).nValue;\n+        nResult += AccessCoin(tx.vin[i].prevout).out.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117092057",
      "id" : 117092057,
      "original_commit_id" : "a86f1c959c4beaf2b2667b000983f22de6acadf2",
      "original_position" : 329,
      "path" : "src/coins.cpp",
      "position" : 328,
      "pull_request_review_id" : 38768413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117092057",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117098717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117098717"
         }
      },
      "body" : "I can add an assert if you're concerned, but given that this code hasn't asserted probably ever, it should be fine. I really want to get rid of this method, and instead make the validation code build a vector of CCoin& references for all its inputs, and use that everywhere, as opposed to looking things up several times inline.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-17T20:12:56Z",
      "diff_hunk" : "@@ -262,21 +214,14 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n-{\n-    const CCoins* coins = AccessCoins(input.prevout.hash);\n-    assert(coins && coins->IsAvailable(input.prevout.n));\n-    return coins->vout[input.prevout.n];\n-}\n-\n CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n     CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        nResult += GetOutputFor(tx.vin[i]).nValue;\n+        nResult += AccessCoin(tx.vin[i].prevout).out.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117098717",
      "id" : 117098717,
      "original_commit_id" : "a86f1c959c4beaf2b2667b000983f22de6acadf2",
      "original_position" : 329,
      "path" : "src/coins.cpp",
      "position" : 328,
      "pull_request_review_id" : 38775833,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117098717",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117360591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117360591"
         }
      },
      "body" : "Your plan sounds good!",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-18T21:39:06Z",
      "diff_hunk" : "@@ -262,21 +214,14 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n-{\n-    const CCoins* coins = AccessCoins(input.prevout.hash);\n-    assert(coins && coins->IsAvailable(input.prevout.n));\n-    return coins->vout[input.prevout.n];\n-}\n-\n CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n     CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        nResult += GetOutputFor(tx.vin[i]).nValue;\n+        nResult += AccessCoin(tx.vin[i].prevout).out.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117360591",
      "id" : 117360591,
      "original_commit_id" : "a86f1c959c4beaf2b2667b000983f22de6acadf2",
      "original_position" : 329,
      "path" : "src/coins.cpp",
      "position" : 328,
      "pull_request_review_id" : 39063588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117360591",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "ACK a86f1c959c4beaf2b2667b000983f22de6acadf2, this is awesome.\r\n\r\nThough it looks like this needs rebase now.  (Also @sipa I'm confused about why you included the merge commit in this PR?)\r\n\r\nI did some benchmarking of validation speed in my simulation environment, comparing master to this PR.  This makes better use of pcoinsTip, which means we flush less often and thus expect a big performance win from that effect alone (which I did observe).  Moreover, even if I compare master against this PR using a -dbcache big enough that neither one flushes to disk during the simulation period, this PR still performs substantially better -- 33% improvement in the \"Connect transactions\" time in ConnectBlock, and roughly 8% reduction overall in \"Connect block\" time.",
      "created_at" : "2017-05-18T22:26:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302558618",
      "id" : 302558618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-18T22:26:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302558618",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar Thanks, rebased. The merge commit at the end was to avoid a CI error that was fixed in master, but existed at the time the code branched off.",
      "created_at" : "2017-05-18T23:15:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302566571",
      "id" : 302566571,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-18T23:15:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302566571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "re-ACK 71837d800cdacd92ddb5bf8536c0e16338a6a889 ",
      "created_at" : "2017-05-19T16:57:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302756570",
      "id" : 302756570,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-19T16:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302756570",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117584690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117584690"
         }
      },
      "body" : "Having trouble with the logic around !inserted here. If an entry already existed, we remove its size. (potentially making cachedCoinsUsage underflow). Then if we were not willing to overwrite, we throw leaving the accounting in an odd state.\r\n\r\nWhy is the logic here not just having an if(inserted) on the last line and elimiating the !inserted block?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-19T22:07:44Z",
      "diff_hunk" : "@@ -4,174 +4,127 @@\n \n #include \"coins.h\"\n \n+#include \"consensus/consensus.h\"\n #include \"memusage.h\"\n #include \"random.h\"\n \n #include <assert.h>\n \n-/**\n- * calculate number of bytes for the bitmask, and its number of non-zero bytes\n- * each bit in the bitmask represents the availability of one output, but the\n- * availabilities of the first two outputs are encoded separately\n- */\n-void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-    unsigned int nLastUsedByte = 0;\n-    for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-        bool fZero = true;\n-        for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-            if (!vout[2+b*8+i].IsNull()) {\n-                fZero = false;\n-                continue;\n-            }\n-        }\n-        if (!fZero) {\n-            nLastUsedByte = b + 1;\n-            nNonzeroBytes++;\n-        }\n-    }\n-    nBytes += nLastUsedByte;\n-}\n-\n-bool CCoins::Spend(uint32_t nPos) \n-{\n-    if (nPos >= vout.size() || vout[nPos].IsNull())\n-        return false;\n-    vout[nPos].SetNull();\n-    Cleanup();\n-    return true;\n-}\n-\n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n+bool CCoinsView::GetCoins(const COutPoint &outpoint, Coin &coin) const { return false; }\n+bool CCoinsView::HaveCoins(const COutPoint &outpoint) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n+bool CCoinsViewBacked::GetCoins(const COutPoint &outpoint, Coin &coin) const { return base->GetCoins(outpoint, coin); }\n+bool CCoinsViewBacked::HaveCoins(const COutPoint &outpoint) const { return base->HaveCoins(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n+size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n-SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {\n     return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n+CCoinsMap::iterator CCoinsViewCache::FetchCoins(const COutPoint &outpoint) const {\n+    CCoinsMap::iterator it = cacheCoins.find(outpoint);\n     if (it != cacheCoins.end())\n         return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n+    Coin tmp;\n+    if (!base->GetCoins(outpoint, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n-    if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n+    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n+    if (ret->second.coin.IsPruned()) {\n+        // The parent only has an empty entry for this outpoint; we can consider our\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n+    cachedCoinsUsage += ret->second.coin.DynamicMemoryUsage();\n     return ret;\n }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+bool CCoinsViewCache::GetCoins(const COutPoint &outpoint, Coin &coin) const {\n+    CCoinsMap::const_iterator it = FetchCoins(outpoint);\n     if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n+        coin = it->second.coin;\n         return true;\n     }\n     return false;\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    size_t cachedCoinUsage = 0;\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    CCoinsMap::iterator it;\n+    bool inserted;\n+    std::tie(it, inserted) = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::tuple<>());\n+    bool fresh = false;\n+    if (!inserted) {\n+        cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (!it->second.coin.IsPruned()) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    it->second.coin = std::move(coin);\n+    it->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117584690",
      "id" : 117584690,
      "original_commit_id" : "71837d800cdacd92ddb5bf8536c0e16338a6a889",
      "original_position" : 145,
      "path" : "src/coins.cpp",
      "position" : 148,
      "pull_request_review_id" : 39310073,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117584690",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117585684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117585684"
         }
      },
      "body" : "preferably it should limit it to just the two overwrites that re actually needed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-19T22:16:34Z",
      "diff_hunk" : "@@ -460,17 +272,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n-    friend class CCoinsModifier;\n-\n private:\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoins(const COutPoint &outpoint) const;\n \n     /**\n      * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n      */\n     CCoinsViewCache(const CCoinsViewCache &);\n };\n \n+//! Utility function to add all of a transaction's outputs to a cache.\n+// It assumes that overwrites are only possible for coinbase transactions,\n+// TODO: pass in a boolean to limit these possible overwrites to pre-BIP34\n+// coinbases.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117585684",
      "id" : 117585684,
      "original_commit_id" : "71837d800cdacd92ddb5bf8536c0e16338a6a889",
      "original_position" : 500,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 39311129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117585684",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117586093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117586093"
         }
      },
      "body" : "> If an entry already existed, we remove its size. (potentially making cachedCoinsUsage underflow).\r\n\r\nUnderflow is not possible if the cachedCoinsUsage value was consistent with the database.\r\n\r\n> Then if we were not willing to overwrite, we throw leaving the accounting in an odd state.\r\n\r\nThat throw should be regarded as an assertion failure, except for the fact that tests can catch it.\r\n\r\n> Why is the logic here not just having an if(inserted) on the last line and elimiating the !inserted block?\r\n\r\nIt's possible the entry was overwritten with a different value, needing correction.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-19T22:19:53Z",
      "diff_hunk" : "@@ -4,174 +4,127 @@\n \n #include \"coins.h\"\n \n+#include \"consensus/consensus.h\"\n #include \"memusage.h\"\n #include \"random.h\"\n \n #include <assert.h>\n \n-/**\n- * calculate number of bytes for the bitmask, and its number of non-zero bytes\n- * each bit in the bitmask represents the availability of one output, but the\n- * availabilities of the first two outputs are encoded separately\n- */\n-void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-    unsigned int nLastUsedByte = 0;\n-    for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-        bool fZero = true;\n-        for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-            if (!vout[2+b*8+i].IsNull()) {\n-                fZero = false;\n-                continue;\n-            }\n-        }\n-        if (!fZero) {\n-            nLastUsedByte = b + 1;\n-            nNonzeroBytes++;\n-        }\n-    }\n-    nBytes += nLastUsedByte;\n-}\n-\n-bool CCoins::Spend(uint32_t nPos) \n-{\n-    if (nPos >= vout.size() || vout[nPos].IsNull())\n-        return false;\n-    vout[nPos].SetNull();\n-    Cleanup();\n-    return true;\n-}\n-\n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n+bool CCoinsView::GetCoins(const COutPoint &outpoint, Coin &coin) const { return false; }\n+bool CCoinsView::HaveCoins(const COutPoint &outpoint) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n+bool CCoinsViewBacked::GetCoins(const COutPoint &outpoint, Coin &coin) const { return base->GetCoins(outpoint, coin); }\n+bool CCoinsViewBacked::HaveCoins(const COutPoint &outpoint) const { return base->HaveCoins(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n+size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n-SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {\n     return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n+CCoinsMap::iterator CCoinsViewCache::FetchCoins(const COutPoint &outpoint) const {\n+    CCoinsMap::iterator it = cacheCoins.find(outpoint);\n     if (it != cacheCoins.end())\n         return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n+    Coin tmp;\n+    if (!base->GetCoins(outpoint, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n-    if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n+    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n+    if (ret->second.coin.IsPruned()) {\n+        // The parent only has an empty entry for this outpoint; we can consider our\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n+    cachedCoinsUsage += ret->second.coin.DynamicMemoryUsage();\n     return ret;\n }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+bool CCoinsViewCache::GetCoins(const COutPoint &outpoint, Coin &coin) const {\n+    CCoinsMap::const_iterator it = FetchCoins(outpoint);\n     if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n+        coin = it->second.coin;\n         return true;\n     }\n     return false;\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    size_t cachedCoinUsage = 0;\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsPruned());\n+    CCoinsMap::iterator it;\n+    bool inserted;\n+    std::tie(it, inserted) = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::tuple<>());\n+    bool fresh = false;\n+    if (!inserted) {\n+        cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (!it->second.coin.IsPruned()) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+        }\n+        fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    it->second.coin = std::move(coin);\n+    it->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117586093",
      "id" : 117586093,
      "original_commit_id" : "71837d800cdacd92ddb5bf8536c0e16338a6a889",
      "original_position" : 145,
      "path" : "src/coins.cpp",
      "position" : 148,
      "pull_request_review_id" : 39311526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117586093",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117586306"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117586306"
         }
      },
      "body" : "It may be advisable to also check 1.  The reason is that recently confirmed transactions will get requested again, and we're currently protected by this check. But if the transaction chained off output 0 it won't be in the cache anymore. Also testing 1 would be a lot less often that we would erroneously double request a transaction we just confirmed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-19T22:21:32Z",
      "diff_hunk" : "@@ -911,12 +911,10 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n                 recentRejects->reset();\n             }\n \n-            // Use pcoinsTip->HaveCoinsInCache as a quick approximation to exclude\n-            // requesting or processing some txs which have already been included in a block\n             return recentRejects->contains(inv.hash) ||\n                    mempool.exists(inv.hash) ||\n                    mapOrphanTransactions.count(inv.hash) ||\n-                   pcoinsTip->HaveCoinsInCache(inv.hash);\n+                   pcoinsTip->HaveCoinsInCache(COutPoint(inv.hash, 0)); // Best effort: only try output 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117586306",
      "id" : 117586306,
      "original_commit_id" : "71837d800cdacd92ddb5bf8536c0e16338a6a889",
      "original_position" : 10,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 39311771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117586306",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117587018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117587018"
         }
      },
      "body" : "changed txouts?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-19T22:28:11Z",
      "diff_hunk" : "@@ -63,8 +88,14 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     if (!hashBlock.IsNull())\n         batch.Write(DB_BEST_BLOCK, hashBlock);\n \n-    LogPrint(BCLog::COINDB, \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n-    return db.WriteBatch(batch);\n+    bool ret = db.WriteBatch(batch);\n+    LogPrint(BCLog::COINDB, \"Committed %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117587018",
      "id" : 117587018,
      "original_commit_id" : "71837d800cdacd92ddb5bf8536c0e16338a6a889",
      "original_position" : 75,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 39312591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117587018",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "I tested the tests by manually injecting faults (e.g. stepping through the code line by line and inserting a bug at each opportunity then rerunning the tests to make sure they fail) in coins.cpp, here are my findings:\r\n\r\nCCoinsViewCache::FetchCoins\r\ncommenting out cachedCoinsUsage += ret->second.coin.DynamicMemoryUsage(); still passes coins_tests.\r\n\r\nCCoinsViewCache::AddCoin\r\ninverting condition in if (!inserted) passes coins_tests.\r\n\r\nCCoinsViewCache::AddCoin\r\ncommenting out cachedCoinsUsage += it->  passes coins_tests.\r\n\r\nAddCoins\r\nAdding 1 || to the !tx.[...].IsUnspendtable() condition passes coins_tests.\r\n\r\nCCoinsViewCache::SpendCoin\r\ncommenting out cachedCoinsUsage -= it->seco  passes coins_tests\r\n\r\nCCoinsViewCache::HaveCoins\r\nremoving && !it->second.coin.IsPruned() passes coins_tests\r\n\r\nCCoinsViewCache::BatchWrite\r\ncommenting out  cachedCoinsUsage += entry.coin.DynamicMemoryUsag passes coins_tests\r\n(anywhere in the function)\r\n\r\nCCoinsViewCache::BatchWrite\r\ncommenting out hashBlock = hashBlockIn passes coins_tests\r\n\r\nCCoinsViewCache::Flush\r\ncommenting out cachedCoinsUsage = 0; passes coins_tests\r\n\r\nCCoinsViewCache::Uncache\r\ncommenting out  cachedCoinsUsage += entry.coin.DynamicMemoryUsag passes coins_tests\r\n\r\nCCoinsViewCache::Uncache\r\nadding return to top of function passes coins_test\r\n\r\nCCoinsViewCache::GetCacheSize\r\nchanging function to return 0 passes coins_test\r\n\r\nCCoinsViewCache::GetValueIn\r\nchanging function to return 0 passes coins_test\r\n\r\nCCoinsViewCache::HaveInputs\r\nchanging function to return true; passes coins test\r\n\r\nAccessByTxid\r\nchanging function to return coinEmpty; passes coins test\r\n",
      "created_at" : "2017-05-20T00:38:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302839091",
      "id" : 302839091,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T16:35:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302839091",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell I've added a commit that extends the coins_test to (hopefully) address all the cases you found, except for HaveInputs and GetValueIn (which I plan to remove in a follow-up PR).\r\n\r\n> CCoinsViewCache::BatchWrite\r\n> commenting out hashBlock = hashBlockIn passes coins_tests\r\n\r\nThat will be caught outside of coins_tests already.",
      "created_at" : "2017-05-20T19:35:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302894077",
      "id" : 302894077,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-20T19:43:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302894077",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "AddCoins\r\nAdding 1 || to the !tx.[...].IsUnspendable() condition passes coins_tests.\r\n\r\n^ that isn't fixed yet.",
      "created_at" : "2017-05-20T22:31:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302902788",
      "id" : 302902788,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-20T23:50:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302902788",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell Fixed.",
      "created_at" : "2017-05-20T23:39:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302905519",
      "id" : 302905519,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-20T23:39:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302905519",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117626013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117626013"
         }
      },
      "body" : "Isn't this the maximum here the number of _INPUTS_ consumed by a block?  (e.g. base size divided by 40?)  I suppose the output number is higher so this at least won't cause failures, but I think it's wrong.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-21T08:02:32Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class TxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    const Coin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n+    TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n+};\n+\n+class TxInUndoDeserializer\n+{\n+    Coin* txout;\n+\n+public:\n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n+static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE / ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<Coin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        for (const auto& prevout : vprevout) {\n+            ::Serialize(s, REF(TxInUndoSerializer(&prevout)));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count = 0;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > MAX_OUTPUTS_PER_BLOCK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117626013",
      "id" : 117626013,
      "original_commit_id" : "dde1fcbdf3af0a9c203a8eb8eb40426924da1761",
      "original_position" : 103,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 39350420,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117626013",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117638202"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117638202"
         }
      },
      "body" : "Indeed! Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-21T17:44:04Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class TxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    const Coin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.\n+            ::Serialize(s, (unsigned char)0);\n+        }\n+        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n+    TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n+};\n+\n+class TxInUndoDeserializer\n+{\n+    Coin* txout;\n+\n+public:\n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion));\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n+        txout->nHeight = nCode / 2;\n+        txout->fCoinBase = nCode & 1;\n+        if (txout->nHeight > 0) {\n+            int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n+        }\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n+\n+    TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n+static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE / ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n+    std::vector<Coin> vprevout;\n \n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n+        // TODO: avoid reimplementing vector serializer\n+        uint64_t count = vprevout.size();\n+        ::Serialize(s, COMPACTSIZE(REF(count)));\n+        for (const auto& prevout : vprevout) {\n+            ::Serialize(s, REF(TxInUndoSerializer(&prevout)));\n+        }\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vprevout);\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        // TODO: avoid reimplementing vector deserializer\n+        uint64_t count = 0;\n+        ::Unserialize(s, COMPACTSIZE(count));\n+        if (count > MAX_OUTPUTS_PER_BLOCK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r117638202",
      "id" : 117638202,
      "original_commit_id" : "dde1fcbdf3af0a9c203a8eb8eb40426924da1761",
      "original_position" : 103,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 39361468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117638202",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "$ ./src/bitcoin-cli -testnet=1 gettxoutsetinfo\r\n{\r\n  \"height\": 1125236,\r\n  \"bestblock\":\r\n\"00000000000002019cb4550f3046934d4355a56451eefc66b2023d5152b1d1ee\",\r\n  \"transactions\": 4174348,\r\n  \"txouts\": 15243146,\r\n  \"hash_serialized_2\":\r\n  \"f091cba43924f4c0561740f85448cb7b3a5b383174a65087793a5fd2a2835bd3\",\r\n  \"disk_size\": 0,   <<<< interaction with leveldb is slightly surprising\r\n  \"total_amount\": 20460499.61149857\r\n}\r\n",
      "created_at" : "2017-05-21T22:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-302968708",
      "id" : 302968708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-21T22:49:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302968708",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "sync testnet. restart.\r\n\r\ninvalidate block 5. \r\n\r\n{\r\n  \"height\": 4,\r\n  \"bestblock\":\r\n\"000000008b5d0af9ffb1741e38b17b193bd12d7683401cecd2fd94f548b6e5dd\",\r\n  \"transactions\": 4,\r\n  \"txouts\": 4,\r\n  \"hash_serialized_2\":\r\n  \"9ea56b9590b2ce5582a0013e2bfd08222334247ec2bdbe4c71dabd7210040b71\",\r\n  \"disk_size\": 808430596,\r\n  \"total_amount\": 200.00000000\r\n}\r\n\r\nrestart\r\n\r\n{\r\n  \"height\": 4,\r\n  \"bestblock\": \"000000008b5d0af9ffb1741e38b17b193bd12d7683401cecd2fd94f548b6e5dd\",\r\n  \"transactions\": 4,\r\n  \"txouts\": 4,\r\n  \"hash_serialized_2\": \"9ea56b9590b2ce5582a0013e2bfd08222334247ec2bdbe4c71dabd7210040b71\",\r\n  \"disk_size\": 1199640169,\r\n  \"total_amount\": 200.00000000\r\n}\r\n\r\nafter another restart\r\n  \"disk_size\": 561,\r\n\r\nleveldb be crazy, yo. I doubt think it's wrong, but we should perhaps expect confused questions from users.\r\n\r\nAnd gettxoutsetinfo crashes with an assert on slice validity in leveldb if called when the tip is height 0 (either having never synced any blocks, or after invalidating block 1) -- pretty sure this is not desired. :)\r\n\r\n#4  0x00005555558e0eb3 in leveldb::(anonymous namespace)::DBIter::key (this=<optimized out>) at leveldb/db/db_iter.cc:67\r\n#5  0x00005555556dd0f0 in CDBIterator::GetKey<(anonymous namespace)::CoinsEntry> (this=<optimized out>, key=<synthetic pointer>)\r\n    at dbwrapper.h:148\r\n#6  CCoinsViewDB::Cursor (this=<optimized out>) at txdb.cpp:133\r\n#7  0x00005555556722da in GetUTXOStats (stats=..., view=0x555556aa6890) at rpc/blockchain.cpp:810\r\n#8  gettxoutsetinfo (request=...) at rpc/blockchain.cpp:920\r\n#9  0x00005555556b6fcb in CRPCTable::execute (this=<optimized out>, request=...) at rpc/server.cpp:491\r\n#10 0x000055555577cfd1 in HTTPReq_JSONRPC (req=0x7fff88001630) at httprpc.cpp:193\r\n",
      "created_at" : "2017-05-22T09:37:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303050325",
      "id" : 303050325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-22T23:06:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/303050325",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@sipa  it isn't a new bug introduced by this PR, but my ACK is waiting on a fix for the gettxoutsetinfo crash on an empty chainstate. ",
      "created_at" : "2017-05-22T23:05:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303243712",
      "id" : 303243712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-22T23:05:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/303243712",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> @sipa it isn't a new bug introduced by this PR, but my ACK is waiting on a fix for the gettxoutsetinfo crash on an empty chainstate.\r\n\r\nThis seems to fix the crash @gmaxwell discovered (which is easy to reproduce in regtest), though I'm not sure if this is exactly the right fix:\r\n\r\n```\r\ndiff --git a/src/txdb.cpp b/src/txdb.cpp\r\nindex 01108beae..d8d754617 100644\r\n--- a/src/txdb.cpp\r\n+++ b/src/txdb.cpp\r\n@@ -128,10 +128,12 @@ CCoinsViewCursor *CCoinsViewDB::Cursor() const\r\n        only need read operations on it, use a const-cast to get around\r\n        that restriction.  */\r\n     i->pcursor->Seek(DB_COIN);\r\n-    // Cache key of first record\r\n-    CoinsEntry entry(&i->keyTmp.second);\r\n-    i->pcursor->GetKey(entry);\r\n-    i->keyTmp.first = entry.key;\r\n+    if (i->pcursor->Valid()) {\r\n+        // Cache key of first record\r\n+        CoinsEntry entry(&i->keyTmp.second);\r\n+        i->pcursor->GetKey(entry);\r\n+        i->keyTmp.first = entry.key;\r\n+    }\r\n     return i;\r\n }\r\n```",
      "created_at" : "2017-05-23T14:36:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303418441",
      "id" : 303418441,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-23T14:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/303418441",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r118030591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/118030591"
         }
      },
      "body" : "In commit \"Extend coins_tests\"\r\n\r\nI think it would be clearer to combine this if/else block with the previous one, so the different cases perform steps in a uniform order, and there are fewer conditions that need to be checked. The following seems to do the same work and drops around 10 lines of code:\r\n\r\n```\r\nif (insecure_rand() % 5 == 0 || coin.IsPruned()) {\r\n    newcoin.out.nValue = insecure_rand();\r\n    newcoin.nHeight = 1;\r\n    if (insecure_rand() % 16 == 0 && coin.IsPruned()) {\r\n        newcoin.out.scriptPubKey.assign(1 + (insecure_rand() & 0x3F), OP_RETURN);\r\n        BOOST_CHECK(newcoin.out.scriptPubKey.IsUnspendable());\r\n        added_an_unspendable_entry = true;\r\n    } else {\r\n        newcoin.out.scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\r\n        (coin.IsPruned() ? added_an_entry : updated_an_entry) = true;\r\n        coin = newcoin;\r\n    }\r\n    stack.back()->AddCoin(COutPoint(txid, 0), std::move(newcoin), !coin.IsPruned() || insecure_rand() & 1);\r\n} else {\r\n    removed_an_entry = true;\r\n    coin.Clear();\r\n    stack.back()->SpendCoin(COutPoint(txid, 0));\r\n}\r\n```\r\n",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-23T15:47:26Z",
      "diff_hunk" : "@@ -133,36 +147,62 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         // Do a random modification.\n         {\n             uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n-            CCoins& coins = result[txid];\n-            CCoinsModifier entry = stack.back()->ModifyCoins(txid);\n-            BOOST_CHECK(coins == *entry);\n-            if (insecure_rand() % 5 == 0 || coins.IsPruned()) {\n-                if (coins.IsPruned()) {\n-                    added_an_entry = true;\n+            Coin& coin = result[COutPoint(txid, 0)];\n+            Coin newcoin;\n+            const Coin& entry = (insecure_rand() % 500 == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n+            BOOST_CHECK(coin == entry);\n+\n+            if (insecure_rand() % 5 == 0 || coin.IsPruned()) {\n+                newcoin.out.scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n+                newcoin.out.nValue = insecure_rand();\n+                newcoin.nHeight = 1;\n+            }\n+            if (newcoin.IsPruned()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r118030591",
      "id" : 118030591,
      "original_commit_id" : "8ec6ed0bc964a3beb0ba6b8945b3219d6d8189b2",
      "original_position" : 125,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 39785526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/118030591",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r118030787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/118030787"
         }
      },
      "body" : "\"In commit \"Extend coins_tests\"\r\n\r\nMaybe declare newcoin below closer to its first use.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-23T15:48:08Z",
      "diff_hunk" : "@@ -133,36 +147,62 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         // Do a random modification.\n         {\n             uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n-            CCoins& coins = result[txid];\n-            CCoinsModifier entry = stack.back()->ModifyCoins(txid);\n-            BOOST_CHECK(coins == *entry);\n-            if (insecure_rand() % 5 == 0 || coins.IsPruned()) {\n-                if (coins.IsPruned()) {\n-                    added_an_entry = true;\n+            Coin& coin = result[COutPoint(txid, 0)];\n+            Coin newcoin;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r118030787",
      "id" : 118030787,
      "original_commit_id" : "8ec6ed0bc964a3beb0ba6b8945b3219d6d8189b2",
      "original_position" : 116,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 39785526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/118030787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Modified the last few commits to include @sdaftuar and @ryanofsky's suggestions.",
      "created_at" : "2017-05-23T17:07:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303468452",
      "id" : 303468452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-23T17:07:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/303468452",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Need helpwith all this",
      "created_at" : "2017-05-24T00:32:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303580548",
      "id" : 303580548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-24T00:32:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/303580548",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/28849506?v=3",
         "events_url" : "https://api.github.com/users/dougstrong77/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dougstrong77/followers",
         "following_url" : "https://api.github.com/users/dougstrong77/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dougstrong77/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dougstrong77",
         "id" : 28849506,
         "login" : "dougstrong77",
         "organizations_url" : "https://api.github.com/users/dougstrong77/orgs",
         "received_events_url" : "https://api.github.com/users/dougstrong77/received_events",
         "repos_url" : "https://api.github.com/users/dougstrong77/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dougstrong77/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dougstrong77/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dougstrong77"
      }
   },
   {
      "body" : "re-ACK 99eecb9",
      "created_at" : "2017-05-24T15:40:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-303763971",
      "id" : 303763971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-24T15:40:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/303763971",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Rebased on top of #10445, and squashed fixes into appropriate commits. No other changes were made.\r\n\r\nI think this is ready.",
      "created_at" : "2017-05-26T21:49:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-304395376",
      "id" : 304395376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-26T21:56:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/304395376",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "re-ACK",
      "created_at" : "2017-05-30T07:44:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-304800586",
      "id" : 304800586,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-30T07:44:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/304800586",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119097194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119097194"
         }
      },
      "body" : "the name should be updated to `hash_serialized_2`. The description should also be updated to say that `hash_serialized_2` will not be compatible with `hash_serialized` from clients <0.15.0.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T13:24:15Z",
      "diff_hunk" : "@@ -878,8 +891,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n-            \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n             \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119097194",
      "id" : 119097194,
      "original_commit_id" : "a86f1c959c4beaf2b2667b000983f22de6acadf2",
      "original_position" : 84,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 84,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119097194",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119102355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119102355"
         }
      },
      "body" : "I think what you're trying to say with `\"Earlier versions also stored the transaction version.\"` would be better captured as `\"Also stores a dummy value of zero. This is to be compatible with older versions which stored the transaction version\"`.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T13:45:24Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119102355",
      "id" : 119102355,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 14,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119102355",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119105782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119105782"
         }
      },
      "body" : "perhaps add `Required to maintain compatibility with undo files written by pre-v0.15 clients`",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T13:57:04Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class TxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    const Coin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119105782",
      "id" : 119105782,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 39,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119105782",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119110483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119110483"
         }
      },
      "body" : "nit: prefer using the util function `assert_greater_than_or_equal()` for this and the next line (`assert_greater_than_or_equal()` will print the value of `size` if the assert fails). Also consider implementing an `assert_in_range()` function to combine the two lines.\r\n\r\nYou could also add the size asserts to the tests on res2 and res3 below.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T14:13:08Z",
      "diff_hunk" : "@@ -49,10 +49,12 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bytes_serialized'], 13924),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n+        size = res['disk_size']\n+        assert size > 6400",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119110483",
      "id" : 119110483,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 7,
      "path" : "test/functional/blockchain.py",
      "position" : 7,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119110483",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119113261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119113261"
         }
      },
      "body" : "Why is this test needed? Won't the prevout's height always be greater than zero?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T14:22:34Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class TxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    const Coin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119113261",
      "id" : 119113261,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 38,
      "path" : "src/undo.h",
      "position" : 39,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119113261",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119115976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119115976"
         }
      },
      "body" : "Is there a particular reason you're using a bitshift here, but multiplication/division elsewhere (in `Serialize()` and in `TxInUndoSerializer::Serialize()`/`Deserialize()`)?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T14:31:45Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT((coinbase ? 1 : 0) | (height << 1))\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class Coin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n-\n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! unspent transaction output\n+    CTxOut out;\n \n-    //! at which height this transaction was included in the active block chain\n-    int nHeight;\n+    //! whether containing transaction was a coinbase\n+    unsigned int fCoinBase : 1;\n \n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n+    //! at which height this containing transaction was included in the active block chain\n+    uint32_t nHeight : 31;\n \n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n-\n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a Coin from a CTxOut and height/coinbase information.\n+    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}\n+    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}\n \n     void Clear() {\n+        out.SetNull();\n         fCoinBase = false;\n-        std::vector<CTxOut>().swap(vout);\n         nHeight = 0;\n-        nVersion = 0;\n     }\n \n     //! empty constructor\n-    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n-\n-    //!remove spent outputs at the end of vout\n-    void Cleanup() {\n-        while (vout.size() > 0 && vout.back().IsNull())\n-            vout.pop_back();\n-        if (vout.empty())\n-            std::vector<CTxOut>().swap(vout);\n-    }\n-\n-    void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n-            if (txout.scriptPubKey.IsUnspendable())\n-                txout.SetNull();\n-        }\n-        Cleanup();\n-    }\n-\n-    void swap(CCoins &to) {\n-        std::swap(to.fCoinBase, fCoinBase);\n-        to.vout.swap(vout);\n-        std::swap(to.nHeight, nHeight);\n-        std::swap(to.nVersion, nVersion);\n-    }\n-\n-    //! equality test\n-    friend bool operator==(const CCoins &a, const CCoins &b) {\n-         // Empty CCoins objects are always equal.\n-         if (a.IsPruned() && b.IsPruned())\n-             return true;\n-         return a.fCoinBase == b.fCoinBase &&\n-                a.nHeight == b.nHeight &&\n-                a.nVersion == b.nVersion &&\n-                a.vout == b.vout;\n-    }\n-    friend bool operator!=(const CCoins &a, const CCoins &b) {\n-        return !(a == b);\n-    }\n-\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const;\n+    Coin() : fCoinBase(false), nHeight(0) { }\n \n     bool IsCoinBase() const {\n         return fCoinBase;\n     }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        ::Serialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Serialize(s, VARINT(nCode));\n-        // spentness bitmask\n-        for (unsigned int b = 0; b<nMaskSize; b++) {\n-            unsigned char chAvail = 0;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n-                if (!vout[2+b*8+i].IsNull())\n-                    chAvail |= (1 << i);\n-            ::Serialize(s, chAvail);\n-        }\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++) {\n-            if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])));\n-        }\n-        // coinbase height\n-        ::Serialize(s, VARINT(nHeight));\n+        assert(!IsPruned());\n+        uint32_t code = nHeight * 2 + fCoinBase;\n+        ::Serialize(s, VARINT(code));\n+        ::Serialize(s, CTxOutCompressor(REF(out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n-        unsigned int nCode = 0;\n-        // version\n-        ::Unserialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Unserialize(s, VARINT(nCode));\n-        fCoinBase = nCode & 1;\n-        std::vector<bool> vAvail(2, false);\n-        vAvail[0] = (nCode & 2) != 0;\n-        vAvail[1] = (nCode & 4) != 0;\n-        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n-        // spentness bitmask\n-        while (nMaskCode > 0) {\n-            unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail);\n-            for (unsigned int p = 0; p < 8; p++) {\n-                bool f = (chAvail & (1 << p)) != 0;\n-                vAvail.push_back(f);\n-            }\n-            if (chAvail != 0)\n-                nMaskCode--;\n-        }\n-        // txouts themself\n-        vout.assign(vAvail.size(), CTxOut());\n-        for (unsigned int i = 0; i < vAvail.size(); i++) {\n-            if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n-        }\n-        // coinbase height\n-        ::Unserialize(s, VARINT(nHeight));\n-        Cleanup();\n+        uint32_t code = 0;\n+        ::Unserialize(s, VARINT(code));\n+        nHeight = code >> 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119115976",
      "id" : 119115976,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 221,
      "path" : "src/coins.h",
      "position" : 221,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119115976",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119202611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119202611"
         }
      },
      "body" : "Should we add some sort of performance warning here, so people don't think they should be able to use this function without thinking about what it might end up doing?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T20:12:55Z",
      "diff_hunk" : "@@ -318,3 +388,16 @@ CCoinsModifier::~CCoinsModifier()\n CCoinsViewCursor::~CCoinsViewCursor()\n {\n }\n+\n+static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE /  ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION); // TODO: merge with similar definition in undo.h.\n+\n+const Coin AccessByTxid(const CCoinsViewCache& view, const uint256& txid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119202611",
      "id" : 119202611,
      "original_commit_id" : "7c1efc60f122ae18f501babdcae9047507267be6",
      "original_position" : 114,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 41001846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-07T20:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119202611",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "re-ACK",
      "created_at" : "2017-05-30T20:40:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305001591",
      "id" : 305001591,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-30T20:40:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305001591",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119212393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119212393"
         }
      },
      "body" : "nit: should use new style of braces for an if clause on a new line (and remove the outdated comment)",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T20:56:01Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119212393",
      "id" : 119212393,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 115,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119212393",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119217248"
         }
      },
      "body" : "Rename to `GetCoin()`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:15:50Z",
      "diff_hunk" : "@@ -306,17 +146,17 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    virtual bool GetCoins(const COutPoint &outpoint, Coin &coin) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217248",
      "id" : 119217248,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 318,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119217248",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119217338"
         }
      },
      "body" : "rename to `HaveCoin()` (or `HasCoin()`)?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:16:09Z",
      "diff_hunk" : "@@ -306,17 +146,17 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    virtual bool GetCoins(const COutPoint &outpoint, Coin &coin) const;\n \n-    //! Just check whether we have data for a given txid.\n-    //! This may (but cannot always) return true for fully spent transactions\n-    virtual bool HaveCoins(const uint256 &txid) const;\n+    //! Just check whether we have data for a given outpoint.\n+    //! This may (but cannot always) return true for spent outputs.\n+    virtual bool HaveCoins(const COutPoint &outpoint) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217338",
      "id" : 119217338,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 325,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119217338",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119217455"
         }
      },
      "body" : "rename to `FetchCoin()`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:16:36Z",
      "diff_hunk" : "@@ -460,17 +272,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n-    friend class CCoinsModifier;\n-\n private:\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoins(const COutPoint &outpoint) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119217455",
      "id" : 119217455,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 489,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119217455",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119219254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119219254"
         }
      },
      "body" : "Rename to `CoinEntry`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:24:37Z",
      "diff_hunk" : "@@ -24,17 +25,40 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+namespace {\n+\n+struct CoinsEntry {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119219254",
      "id" : 119219254,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 14,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119219254",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119221003"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119221003"
         }
      },
      "body" : "Rename to `HaveCoinInCache()` (or `HasCoinInCache()`)?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:32:51Z",
      "diff_hunk" : "@@ -336,97 +179,66 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView *viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const override;\n+    bool HaveCoins(const COutPoint &outpoint) const override;\n+    uint256 GetBestBlock() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    CCoinsViewCursor *Cursor() const;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    CCoinsViewCursor *Cursor() const override;\n+    size_t EstimateSize() const override;\n };\n \n \n-class CCoinsViewCache;\n-\n-/** \n- * A reference to a mutable cache entry. Encapsulating it allows us to run\n- *  cleanup code after the modification is finished, and keeping track of\n- *  concurrent modifications. \n- */\n-class CCoinsModifier\n-{\n-private:\n-    CCoinsViewCache& cache;\n-    CCoinsMap::iterator it;\n-    size_t cachedCoinUsage; // Cached memory usage of the CCoins object before modification\n-    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage);\n-\n-public:\n-    CCoins* operator->() { return &it->second.coins; }\n-    CCoins& operator*() { return it->second.coins; }\n-    ~CCoinsModifier();\n-    friend class CCoinsViewCache;\n-};\n-\n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n-    /* Whether this cache has an active modifier. */\n-    bool hasModifier;\n-\n-\n     /**\n      * Make mutable so that we can \"fill the cache\" even from Get-methods\n      * declared as \"const\".  \n      */\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n-    /* Cached dynamic memory usage for the inner CCoins objects. */\n+    /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n-    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const;\n+    bool HaveCoins(const COutPoint &outpoint) const;\n     uint256 GetBestBlock() const;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     /**\n-     * Check if we have the given tx already loaded in this cache.\n+     * Check if we have the given utxo already loaded in this cache.\n      * The semantics are the same as HaveCoins(), but no calls to\n      * the backing CCoinsView are made.\n      */\n-    bool HaveCoinsInCache(const uint256 &txid) const;\n+    bool HaveCoinsInCache(const COutPoint &outpoint) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119221003",
      "id" : 119221003,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 425,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119221003",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119223628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119223628"
         }
      },
      "body" : "braces",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:45:36Z",
      "diff_hunk" : "@@ -437,30 +437,28 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n-        if (view.HaveCoins(hash)) {\n-            if (!fHadTxInCache)\n-                vHashTxnToUncache.push_back(hash);\n-            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        for (size_t out = 0; out < tx.vout.size(); out++) {\n+            COutPoint outpoint(hash, out);\n+            bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(outpoint);\n+            if (view.HaveCoins(outpoint)) {\n+                if (!fHadTxInCache) {\n+                    vHashTxnToUncache.push_back(outpoint);\n+                }\n+                return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+            }\n         }\n \n         // do all inputs exist?\n-        // Note that this does not check for the presence of actual outputs (see the next check for that),\n-        // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n         BOOST_FOREACH(const CTxIn txin, tx.vin) {\n-            if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n-                vHashTxnToUncache.push_back(txin.prevout.hash);\n-            if (!view.HaveCoins(txin.prevout.hash)) {\n+            if (!pcoinsTip->HaveCoinsInCache(txin.prevout))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119223628",
      "id" : 119223628,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 68,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119223628",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119224485"
         }
      },
      "body" : "rename to `fHadCoinInCache`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:49:41Z",
      "diff_hunk" : "@@ -437,30 +437,28 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n-        if (view.HaveCoins(hash)) {\n-            if (!fHadTxInCache)\n-                vHashTxnToUncache.push_back(hash);\n-            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        for (size_t out = 0; out < tx.vout.size(); out++) {\n+            COutPoint outpoint(hash, out);\n+            bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224485",
      "id" : 119224485,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 52,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119224485",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119224666"
         }
      },
      "body" : "rename final argument to `vCoinsToUncache`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:50:29Z",
      "diff_hunk" : "@@ -344,7 +344,7 @@ static bool IsCurrentForFeeEstimation()\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<uint256>& vHashTxnToUncache)\n+                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& vHashTxnToUncache)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224666",
      "id" : 119224666,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 37,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119224666",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119224793"
         }
      },
      "body" : "rename to `vCoinToUncache`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:51:01Z",
      "diff_hunk" : "@@ -763,10 +761,10 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n-    std::vector<uint256> vHashTxToUncache;\n+    std::vector<COutPoint> vHashTxToUncache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119224793",
      "id" : 119224793,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 100,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119224793",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119225288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119225288"
         }
      },
      "body" : "rename variable to `coin`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T21:53:16Z",
      "diff_hunk" : "@@ -168,7 +168,7 @@ int do_fuzz()\n         {\n             try\n             {\n-                CCoins block;\n+                Coin block;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119225288",
      "id" : 119225288,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 5,
      "path" : "src/test/test_bitcoin_fuzzy.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119225288",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119226713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119226713"
         }
      },
      "body" : "to me, `IsPruned()` makes less sense in the context of a single coin. For CCoins, `IsPruned()` meant that all the coins were spent and so the containing object could be pruned. For a single Coin class, I think `IsSpent()` makes more sense.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:00:22Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT((coinbase ? 1 : 0) | (height << 1))\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class Coin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n-\n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! unspent transaction output\n+    CTxOut out;\n \n-    //! at which height this transaction was included in the active block chain\n-    int nHeight;\n+    //! whether containing transaction was a coinbase\n+    unsigned int fCoinBase : 1;\n \n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n+    //! at which height this containing transaction was included in the active block chain\n+    uint32_t nHeight : 31;\n \n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n-\n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a Coin from a CTxOut and height/coinbase information.\n+    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}\n+    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}\n \n     void Clear() {\n+        out.SetNull();\n         fCoinBase = false;\n-        std::vector<CTxOut>().swap(vout);\n         nHeight = 0;\n-        nVersion = 0;\n     }\n \n     //! empty constructor\n-    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n-\n-    //!remove spent outputs at the end of vout\n-    void Cleanup() {\n-        while (vout.size() > 0 && vout.back().IsNull())\n-            vout.pop_back();\n-        if (vout.empty())\n-            std::vector<CTxOut>().swap(vout);\n-    }\n-\n-    void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n-            if (txout.scriptPubKey.IsUnspendable())\n-                txout.SetNull();\n-        }\n-        Cleanup();\n-    }\n-\n-    void swap(CCoins &to) {\n-        std::swap(to.fCoinBase, fCoinBase);\n-        to.vout.swap(vout);\n-        std::swap(to.nHeight, nHeight);\n-        std::swap(to.nVersion, nVersion);\n-    }\n-\n-    //! equality test\n-    friend bool operator==(const CCoins &a, const CCoins &b) {\n-         // Empty CCoins objects are always equal.\n-         if (a.IsPruned() && b.IsPruned())\n-             return true;\n-         return a.fCoinBase == b.fCoinBase &&\n-                a.nHeight == b.nHeight &&\n-                a.nVersion == b.nVersion &&\n-                a.vout == b.vout;\n-    }\n-    friend bool operator!=(const CCoins &a, const CCoins &b) {\n-        return !(a == b);\n-    }\n-\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const;\n+    Coin() : fCoinBase(false), nHeight(0) { }\n \n     bool IsCoinBase() const {\n         return fCoinBase;\n     }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        ::Serialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Serialize(s, VARINT(nCode));\n-        // spentness bitmask\n-        for (unsigned int b = 0; b<nMaskSize; b++) {\n-            unsigned char chAvail = 0;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n-                if (!vout[2+b*8+i].IsNull())\n-                    chAvail |= (1 << i);\n-            ::Serialize(s, chAvail);\n-        }\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++) {\n-            if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])));\n-        }\n-        // coinbase height\n-        ::Serialize(s, VARINT(nHeight));\n+        assert(!IsPruned());\n+        uint32_t code = nHeight * 2 + fCoinBase;\n+        ::Serialize(s, VARINT(code));\n+        ::Serialize(s, CTxOutCompressor(REF(out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n-        unsigned int nCode = 0;\n-        // version\n-        ::Unserialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Unserialize(s, VARINT(nCode));\n-        fCoinBase = nCode & 1;\n-        std::vector<bool> vAvail(2, false);\n-        vAvail[0] = (nCode & 2) != 0;\n-        vAvail[1] = (nCode & 4) != 0;\n-        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n-        // spentness bitmask\n-        while (nMaskCode > 0) {\n-            unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail);\n-            for (unsigned int p = 0; p < 8; p++) {\n-                bool f = (chAvail & (1 << p)) != 0;\n-                vAvail.push_back(f);\n-            }\n-            if (chAvail != 0)\n-                nMaskCode--;\n-        }\n-        // txouts themself\n-        vout.assign(vAvail.size(), CTxOut());\n-        for (unsigned int i = 0; i < vAvail.size(); i++) {\n-            if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n-        }\n-        // coinbase height\n-        ::Unserialize(s, VARINT(nHeight));\n-        Cleanup();\n+        uint32_t code = 0;\n+        ::Unserialize(s, VARINT(code));\n+        nHeight = code >> 1;\n+        fCoinBase = code & 1;\n+        ::Unserialize(s, REF(CTxOutCompressor(out)));\n     }\n \n-    //! mark a vout spent\n-    bool Spend(uint32_t nPos);\n-\n-    //! check whether a particular output is still available\n-    bool IsAvailable(unsigned int nPos) const {\n-        return (nPos < vout.size() && !vout[nPos].IsNull());\n-    }\n-\n-    //! check whether the entire CCoins is spent\n-    //! note that only !IsPruned() CCoins can be serialized\n     bool IsPruned() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119226713",
      "id" : 119226713,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 236,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119226713",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119227156"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119227156"
         }
      },
      "body" : "rename to `coinbasecoins`? Same for next two variables.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:02:45Z",
      "diff_hunk" : "@@ -242,18 +273,18 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n {\n     bool spent_a_duplicate_coinbase = false;\n     // A simple map to track what we expect the cache stack to represent.\n-    std::map<uint256, CCoins> result;\n+    std::map<COutPoint, Coin> result;\n \n     // The cache stack.\n     CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n     // Track the txids we've used in various sets\n-    std::set<uint256> coinbaseids;\n-    std::set<uint256> disconnectedids;\n-    std::set<uint256> duplicateids;\n-    std::set<uint256> utxoset;\n+    std::set<COutPoint> coinbaseids;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119227156",
      "id" : 119227156,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 233,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119227156",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119227210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119227210"
         }
      },
      "body" : "rename to `oldcoin`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:03:00Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119227210",
      "id" : 119227210,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 247,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119227210",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119228013"
         }
      },
      "body" : "braces, same line, or ternary operator",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:07:39Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    auto utxod = FindRandomFrom(coinbaseids);\n                     // Reuse the exact same coinbase\n-                    tx = std::get<0>(txd);\n+                    tx = std::get<0>(utxod->second);\n                     // shouldn't be available for reconnection if its been duplicated\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n \n-                    duplicateids.insert(tx.GetHash());\n+                    duplicateids.insert(utxod->first);\n                 }\n                 else {\n-                    coinbaseids.insert(tx.GetHash());\n+                    coinbaseids.insert(COutPoint(tx.GetHash(), 0));\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n \n             // 17/20 times reconnect previous or add a regular tx\n             else {\n \n-                uint256 prevouthash;\n+                COutPoint prevout;\n                 // 1/20 times reconnect a previously disconnected tx\n                 if (randiter % 20 == 2 && disconnectedids.size()) {\n-                    TxData &txd = FindRandomFrom(disconnectedids);\n-                    tx = std::get<0>(txd);\n-                    prevouthash = tx.vin[0].prevout.hash;\n-                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n-                        disconnectedids.erase(tx.GetHash());\n+                    auto utxod = FindRandomFrom(disconnectedids);\n+                    tx = std::get<0>(utxod->second);\n+                    prevout = tx.vin[0].prevout;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevout)) {\n+                        disconnectedids.erase(utxod->first);\n                         continue;\n                     }\n \n                     // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n-                    if (utxoset.count(tx.GetHash())) {\n+                    if (utxoset.count(utxod->first)) {\n                         assert(CTransaction(tx).IsCoinBase());\n-                        assert(duplicateids.count(tx.GetHash()));\n+                        assert(duplicateids.count(utxod->first));\n                     }\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n                 }\n \n                 // 16/20 times create a regular tx\n                 else {\n-                    TxData &txd = FindRandomFrom(utxoset);\n-                    prevouthash = std::get<0>(txd).GetHash();\n+                    auto utxod = FindRandomFrom(utxoset);\n+                    prevout = utxod->first;\n \n                     // Construct the tx to spend the coins of prevouthash\n-                    tx.vin[0].prevout.hash = prevouthash;\n-                    tx.vin[0].prevout.n = 0;\n+                    tx.vin[0].prevout = prevout;\n                     assert(!CTransaction(tx).IsCoinBase());\n                 }\n                 // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n-                oldcoins = result[prevouthash];\n+                oldcoins = result[prevout];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                result[prevouthash].Clear();\n+                result[prevout].Clear();\n \n-                utxoset.erase(prevouthash);\n+                utxoset.erase(prevout);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n-                if (duplicateids.count(prevouthash))\n+                if (duplicateids.count(prevout))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228013",
      "id" : 119228013,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 329,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119228013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119228067"
         }
      },
      "body" : "braces or same line",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:07:57Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    auto utxod = FindRandomFrom(coinbaseids);\n                     // Reuse the exact same coinbase\n-                    tx = std::get<0>(txd);\n+                    tx = std::get<0>(utxod->second);\n                     // shouldn't be available for reconnection if its been duplicated\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n \n-                    duplicateids.insert(tx.GetHash());\n+                    duplicateids.insert(utxod->first);\n                 }\n                 else {\n-                    coinbaseids.insert(tx.GetHash());\n+                    coinbaseids.insert(COutPoint(tx.GetHash(), 0));\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n \n             // 17/20 times reconnect previous or add a regular tx\n             else {\n \n-                uint256 prevouthash;\n+                COutPoint prevout;\n                 // 1/20 times reconnect a previously disconnected tx\n                 if (randiter % 20 == 2 && disconnectedids.size()) {\n-                    TxData &txd = FindRandomFrom(disconnectedids);\n-                    tx = std::get<0>(txd);\n-                    prevouthash = tx.vin[0].prevout.hash;\n-                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n-                        disconnectedids.erase(tx.GetHash());\n+                    auto utxod = FindRandomFrom(disconnectedids);\n+                    tx = std::get<0>(utxod->second);\n+                    prevout = tx.vin[0].prevout;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevout)) {\n+                        disconnectedids.erase(utxod->first);\n                         continue;\n                     }\n \n                     // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n-                    if (utxoset.count(tx.GetHash())) {\n+                    if (utxoset.count(utxod->first)) {\n                         assert(CTransaction(tx).IsCoinBase());\n-                        assert(duplicateids.count(tx.GetHash()));\n+                        assert(duplicateids.count(utxod->first));\n                     }\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n                 }\n \n                 // 16/20 times create a regular tx\n                 else {\n-                    TxData &txd = FindRandomFrom(utxoset);\n-                    prevouthash = std::get<0>(txd).GetHash();\n+                    auto utxod = FindRandomFrom(utxoset);\n+                    prevout = utxod->first;\n \n                     // Construct the tx to spend the coins of prevouthash\n-                    tx.vin[0].prevout.hash = prevouthash;\n-                    tx.vin[0].prevout.n = 0;\n+                    tx.vin[0].prevout = prevout;\n                     assert(!CTransaction(tx).IsCoinBase());\n                 }\n                 // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n-                oldcoins = result[prevouthash];\n+                oldcoins = result[prevout];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                result[prevouthash].Clear();\n+                result[prevout].Clear();\n \n-                utxoset.erase(prevouthash);\n+                utxoset.erase(prevout);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n-                if (duplicateids.count(prevouthash))\n+                if (duplicateids.count(prevout))\n                     spent_a_duplicate_coinbase = true;\n \n             }\n             // Update the expected result to know about the new output coins\n-            result[tx.GetHash()].FromTx(tx, height);\n+            assert(tx.vout.size() == 1);\n+            const COutPoint outpoint(tx.GetHash(), 0);\n+            result[outpoint] = Coin(tx.vout[0], height, CTransaction(tx).IsCoinBase());\n \n             // Call UpdateCoins on the top cache\n             CTxUndo undo;\n             UpdateCoins(tx, *(stack.back()), undo, height);\n \n             // Update the utxo set for future spends\n-            utxoset.insert(tx.GetHash());\n+            utxoset.insert(outpoint);\n \n             // Track this tx and undo info to use later\n-            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+            utxoData.emplace(outpoint, std::make_tuple(tx,undo,oldcoins));\n         }\n \n         //1/20 times undo a previous transaction\n         else if (utxoset.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228067",
      "id" : 119228067,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 353,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119228067",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119228192"
         }
      },
      "body" : "rename to `origcoin`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:08:34Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    auto utxod = FindRandomFrom(coinbaseids);\n                     // Reuse the exact same coinbase\n-                    tx = std::get<0>(txd);\n+                    tx = std::get<0>(utxod->second);\n                     // shouldn't be available for reconnection if its been duplicated\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n \n-                    duplicateids.insert(tx.GetHash());\n+                    duplicateids.insert(utxod->first);\n                 }\n                 else {\n-                    coinbaseids.insert(tx.GetHash());\n+                    coinbaseids.insert(COutPoint(tx.GetHash(), 0));\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n \n             // 17/20 times reconnect previous or add a regular tx\n             else {\n \n-                uint256 prevouthash;\n+                COutPoint prevout;\n                 // 1/20 times reconnect a previously disconnected tx\n                 if (randiter % 20 == 2 && disconnectedids.size()) {\n-                    TxData &txd = FindRandomFrom(disconnectedids);\n-                    tx = std::get<0>(txd);\n-                    prevouthash = tx.vin[0].prevout.hash;\n-                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n-                        disconnectedids.erase(tx.GetHash());\n+                    auto utxod = FindRandomFrom(disconnectedids);\n+                    tx = std::get<0>(utxod->second);\n+                    prevout = tx.vin[0].prevout;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevout)) {\n+                        disconnectedids.erase(utxod->first);\n                         continue;\n                     }\n \n                     // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n-                    if (utxoset.count(tx.GetHash())) {\n+                    if (utxoset.count(utxod->first)) {\n                         assert(CTransaction(tx).IsCoinBase());\n-                        assert(duplicateids.count(tx.GetHash()));\n+                        assert(duplicateids.count(utxod->first));\n                     }\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n                 }\n \n                 // 16/20 times create a regular tx\n                 else {\n-                    TxData &txd = FindRandomFrom(utxoset);\n-                    prevouthash = std::get<0>(txd).GetHash();\n+                    auto utxod = FindRandomFrom(utxoset);\n+                    prevout = utxod->first;\n \n                     // Construct the tx to spend the coins of prevouthash\n-                    tx.vin[0].prevout.hash = prevouthash;\n-                    tx.vin[0].prevout.n = 0;\n+                    tx.vin[0].prevout = prevout;\n                     assert(!CTransaction(tx).IsCoinBase());\n                 }\n                 // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n-                oldcoins = result[prevouthash];\n+                oldcoins = result[prevout];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                result[prevouthash].Clear();\n+                result[prevout].Clear();\n \n-                utxoset.erase(prevouthash);\n+                utxoset.erase(prevout);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n-                if (duplicateids.count(prevouthash))\n+                if (duplicateids.count(prevout))\n                     spent_a_duplicate_coinbase = true;\n \n             }\n             // Update the expected result to know about the new output coins\n-            result[tx.GetHash()].FromTx(tx, height);\n+            assert(tx.vout.size() == 1);\n+            const COutPoint outpoint(tx.GetHash(), 0);\n+            result[outpoint] = Coin(tx.vout[0], height, CTransaction(tx).IsCoinBase());\n \n             // Call UpdateCoins on the top cache\n             CTxUndo undo;\n             UpdateCoins(tx, *(stack.back()), undo, height);\n \n             // Update the utxo set for future spends\n-            utxoset.insert(tx.GetHash());\n+            utxoset.insert(outpoint);\n \n             // Track this tx and undo info to use later\n-            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+            utxoData.emplace(outpoint, std::make_tuple(tx,undo,oldcoins));\n         }\n \n         //1/20 times undo a previous transaction\n         else if (utxoset.size()) {\n-            TxData &txd = FindRandomFrom(utxoset);\n-\n-            CTransaction &tx = std::get<0>(txd);\n-            CTxUndo &undo = std::get<1>(txd);\n-            CCoins &origcoins = std::get<2>(txd);\n+            auto utxod = FindRandomFrom(utxoset);\n \n-            uint256 undohash = tx.GetHash();\n+            CTransaction &tx = std::get<0>(utxod->second);\n+            CTxUndo &undo = std::get<1>(utxod->second);\n+            Coin &origcoins = std::get<2>(utxod->second);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119228192",
      "id" : 119228192,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 364,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119228192",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119229794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119229794"
         }
      },
      "body" : "braces or same line",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:18:24Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool\n             return NullUniValue;\n-        mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n     } else {\n-        if (!pcoinsTip->GetCoins(hash, coins))\n+        if (!pcoinsTip->GetCoins(out, coin))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119229794",
      "id" : 119229794,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 120,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119229794",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119229864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119229864"
         }
      },
      "body" : "braces",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:18:43Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool\n             return NullUniValue;\n-        mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n     } else {\n-        if (!pcoinsTip->GetCoins(hash, coins))\n+        if (!pcoinsTip->GetCoins(out, coin))\n             return NullUniValue;\n     }\n-    if (n<0 || (unsigned int)n>=coins.vout.size() || coins.vout[n].IsNull())\n-        return NullUniValue;\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n     ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n-    if ((unsigned int)coins.nHeight == MEMPOOL_HEIGHT)\n+    if ((unsigned int)coin.nHeight == MEMPOOL_HEIGHT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119229864",
      "id" : 119229864,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 130,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119229864",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119230287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119230287"
         }
      },
      "body" : "Why not make this a uint32_t to match `Coin.nHeight`?",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-30T22:21:32Z",
      "diff_hunk" : "@@ -30,7 +30,7 @@\n class CAutoFile;\n class CBlockIndex;\n \n-/** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n+/** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119230287",
      "id" : 119230287,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 40945807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119230287",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253072"
         }
      },
      "body" : "Fixed. The comment is not outdated.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:24:52Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253072",
      "id" : 119253072,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 115,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 41114711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253072",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253107"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:25:09Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool\n             return NullUniValue;\n-        mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n     } else {\n-        if (!pcoinsTip->GetCoins(hash, coins))\n+        if (!pcoinsTip->GetCoins(out, coin))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253107",
      "id" : 119253107,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 120,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 41114749,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253107",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253126"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:25:24Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool\n             return NullUniValue;\n-        mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n     } else {\n-        if (!pcoinsTip->GetCoins(hash, coins))\n+        if (!pcoinsTip->GetCoins(out, coin))\n             return NullUniValue;\n     }\n-    if (n<0 || (unsigned int)n>=coins.vout.size() || coins.vout[n].IsNull())\n-        return NullUniValue;\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n     ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n-    if ((unsigned int)coins.nHeight == MEMPOOL_HEIGHT)\n+    if ((unsigned int)coin.nHeight == MEMPOOL_HEIGHT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253126",
      "id" : 119253126,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 130,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 41114773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253126",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253150"
         }
      },
      "body" : "Done.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:25:37Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253150",
      "id" : 119253150,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 14,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 41114803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253172"
         }
      },
      "body" : "Added a comment to explain.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:25:52Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class TxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    const Coin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253172",
      "id" : 119253172,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 38,
      "path" : "src/undo.h",
      "position" : 39,
      "pull_request_review_id" : 41114826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253204"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:26:03Z",
      "diff_hunk" : "@@ -7,58 +7,86 @@\n #define BITCOIN_UNDO_H\n \n #include \"compressor.h\" \n+#include \"consensus/consensus.h\"\n #include \"primitives/transaction.h\"\n #include \"serialize.h\"\n \n /** Undo information for a CTxIn\n  *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n+ *  Contains the prevout's CTxOut being spent, and its metadata as well\n+ *  (coinbase or not, height). Earlier versions also stored the transaction\n+ *  version.\n  */\n-class CTxInUndo\n+class TxInUndoSerializer\n {\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+    const Coin* txout;\n \n+public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion));\n-        ::Serialize(s, CTxOutCompressor(REF(txout)));\n+        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n+        if (txout->nHeight > 0) {\n+            // Store a dummy for the transaction version.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253204",
      "id" : 119253204,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 39,
      "path" : "src/undo.h",
      "position" : null,
      "pull_request_review_id" : 41114861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253323"
         }
      },
      "body" : "Will do, but this should go in #10396.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:27:03Z",
      "diff_hunk" : "@@ -49,10 +49,12 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bytes_serialized'], 13924),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n+        size = res['disk_size']\n+        assert size > 6400",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253323",
      "id" : 119253323,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 7,
      "path" : "test/functional/blockchain.py",
      "position" : 7,
      "pull_request_review_id" : 41114995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253323",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253406"
         }
      },
      "body" : "Not really... just inconsistently applying the best practices of using the faster operation (and not relying on the compiler optimizer for doing so).",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:27:51Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT((coinbase ? 1 : 0) | (height << 1))\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class Coin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n-\n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! unspent transaction output\n+    CTxOut out;\n \n-    //! at which height this transaction was included in the active block chain\n-    int nHeight;\n+    //! whether containing transaction was a coinbase\n+    unsigned int fCoinBase : 1;\n \n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n+    //! at which height this containing transaction was included in the active block chain\n+    uint32_t nHeight : 31;\n \n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n-\n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a Coin from a CTxOut and height/coinbase information.\n+    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}\n+    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}\n \n     void Clear() {\n+        out.SetNull();\n         fCoinBase = false;\n-        std::vector<CTxOut>().swap(vout);\n         nHeight = 0;\n-        nVersion = 0;\n     }\n \n     //! empty constructor\n-    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n-\n-    //!remove spent outputs at the end of vout\n-    void Cleanup() {\n-        while (vout.size() > 0 && vout.back().IsNull())\n-            vout.pop_back();\n-        if (vout.empty())\n-            std::vector<CTxOut>().swap(vout);\n-    }\n-\n-    void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n-            if (txout.scriptPubKey.IsUnspendable())\n-                txout.SetNull();\n-        }\n-        Cleanup();\n-    }\n-\n-    void swap(CCoins &to) {\n-        std::swap(to.fCoinBase, fCoinBase);\n-        to.vout.swap(vout);\n-        std::swap(to.nHeight, nHeight);\n-        std::swap(to.nVersion, nVersion);\n-    }\n-\n-    //! equality test\n-    friend bool operator==(const CCoins &a, const CCoins &b) {\n-         // Empty CCoins objects are always equal.\n-         if (a.IsPruned() && b.IsPruned())\n-             return true;\n-         return a.fCoinBase == b.fCoinBase &&\n-                a.nHeight == b.nHeight &&\n-                a.nVersion == b.nVersion &&\n-                a.vout == b.vout;\n-    }\n-    friend bool operator!=(const CCoins &a, const CCoins &b) {\n-        return !(a == b);\n-    }\n-\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const;\n+    Coin() : fCoinBase(false), nHeight(0) { }\n \n     bool IsCoinBase() const {\n         return fCoinBase;\n     }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        ::Serialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Serialize(s, VARINT(nCode));\n-        // spentness bitmask\n-        for (unsigned int b = 0; b<nMaskSize; b++) {\n-            unsigned char chAvail = 0;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n-                if (!vout[2+b*8+i].IsNull())\n-                    chAvail |= (1 << i);\n-            ::Serialize(s, chAvail);\n-        }\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++) {\n-            if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])));\n-        }\n-        // coinbase height\n-        ::Serialize(s, VARINT(nHeight));\n+        assert(!IsPruned());\n+        uint32_t code = nHeight * 2 + fCoinBase;\n+        ::Serialize(s, VARINT(code));\n+        ::Serialize(s, CTxOutCompressor(REF(out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n-        unsigned int nCode = 0;\n-        // version\n-        ::Unserialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Unserialize(s, VARINT(nCode));\n-        fCoinBase = nCode & 1;\n-        std::vector<bool> vAvail(2, false);\n-        vAvail[0] = (nCode & 2) != 0;\n-        vAvail[1] = (nCode & 4) != 0;\n-        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n-        // spentness bitmask\n-        while (nMaskCode > 0) {\n-            unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail);\n-            for (unsigned int p = 0; p < 8; p++) {\n-                bool f = (chAvail & (1 << p)) != 0;\n-                vAvail.push_back(f);\n-            }\n-            if (chAvail != 0)\n-                nMaskCode--;\n-        }\n-        // txouts themself\n-        vout.assign(vAvail.size(), CTxOut());\n-        for (unsigned int i = 0; i < vAvail.size(); i++) {\n-            if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n-        }\n-        // coinbase height\n-        ::Unserialize(s, VARINT(nHeight));\n-        Cleanup();\n+        uint32_t code = 0;\n+        ::Unserialize(s, VARINT(code));\n+        nHeight = code >> 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253406",
      "id" : 119253406,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 221,
      "path" : "src/coins.h",
      "position" : 221,
      "pull_request_review_id" : 41115081,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253406",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253435"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:28:11Z",
      "diff_hunk" : "@@ -20,251 +20,90 @@\n #include <boost/foreach.hpp>\n #include <unordered_map>\n \n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT((coinbase ? 1 : 0) | (height << 1))\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class Coin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n-\n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! unspent transaction output\n+    CTxOut out;\n \n-    //! at which height this transaction was included in the active block chain\n-    int nHeight;\n+    //! whether containing transaction was a coinbase\n+    unsigned int fCoinBase : 1;\n \n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n+    //! at which height this containing transaction was included in the active block chain\n+    uint32_t nHeight : 31;\n \n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n-\n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a Coin from a CTxOut and height/coinbase information.\n+    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}\n+    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}\n \n     void Clear() {\n+        out.SetNull();\n         fCoinBase = false;\n-        std::vector<CTxOut>().swap(vout);\n         nHeight = 0;\n-        nVersion = 0;\n     }\n \n     //! empty constructor\n-    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n-\n-    //!remove spent outputs at the end of vout\n-    void Cleanup() {\n-        while (vout.size() > 0 && vout.back().IsNull())\n-            vout.pop_back();\n-        if (vout.empty())\n-            std::vector<CTxOut>().swap(vout);\n-    }\n-\n-    void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n-            if (txout.scriptPubKey.IsUnspendable())\n-                txout.SetNull();\n-        }\n-        Cleanup();\n-    }\n-\n-    void swap(CCoins &to) {\n-        std::swap(to.fCoinBase, fCoinBase);\n-        to.vout.swap(vout);\n-        std::swap(to.nHeight, nHeight);\n-        std::swap(to.nVersion, nVersion);\n-    }\n-\n-    //! equality test\n-    friend bool operator==(const CCoins &a, const CCoins &b) {\n-         // Empty CCoins objects are always equal.\n-         if (a.IsPruned() && b.IsPruned())\n-             return true;\n-         return a.fCoinBase == b.fCoinBase &&\n-                a.nHeight == b.nHeight &&\n-                a.nVersion == b.nVersion &&\n-                a.vout == b.vout;\n-    }\n-    friend bool operator!=(const CCoins &a, const CCoins &b) {\n-        return !(a == b);\n-    }\n-\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const;\n+    Coin() : fCoinBase(false), nHeight(0) { }\n \n     bool IsCoinBase() const {\n         return fCoinBase;\n     }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        ::Serialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Serialize(s, VARINT(nCode));\n-        // spentness bitmask\n-        for (unsigned int b = 0; b<nMaskSize; b++) {\n-            unsigned char chAvail = 0;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n-                if (!vout[2+b*8+i].IsNull())\n-                    chAvail |= (1 << i);\n-            ::Serialize(s, chAvail);\n-        }\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++) {\n-            if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])));\n-        }\n-        // coinbase height\n-        ::Serialize(s, VARINT(nHeight));\n+        assert(!IsPruned());\n+        uint32_t code = nHeight * 2 + fCoinBase;\n+        ::Serialize(s, VARINT(code));\n+        ::Serialize(s, CTxOutCompressor(REF(out)));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream &s) {\n-        unsigned int nCode = 0;\n-        // version\n-        ::Unserialize(s, VARINT(this->nVersion));\n-        // header code\n-        ::Unserialize(s, VARINT(nCode));\n-        fCoinBase = nCode & 1;\n-        std::vector<bool> vAvail(2, false);\n-        vAvail[0] = (nCode & 2) != 0;\n-        vAvail[1] = (nCode & 4) != 0;\n-        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n-        // spentness bitmask\n-        while (nMaskCode > 0) {\n-            unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail);\n-            for (unsigned int p = 0; p < 8; p++) {\n-                bool f = (chAvail & (1 << p)) != 0;\n-                vAvail.push_back(f);\n-            }\n-            if (chAvail != 0)\n-                nMaskCode--;\n-        }\n-        // txouts themself\n-        vout.assign(vAvail.size(), CTxOut());\n-        for (unsigned int i = 0; i < vAvail.size(); i++) {\n-            if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n-        }\n-        // coinbase height\n-        ::Unserialize(s, VARINT(nHeight));\n-        Cleanup();\n+        uint32_t code = 0;\n+        ::Unserialize(s, VARINT(code));\n+        nHeight = code >> 1;\n+        fCoinBase = code & 1;\n+        ::Unserialize(s, REF(CTxOutCompressor(out)));\n     }\n \n-    //! mark a vout spent\n-    bool Spend(uint32_t nPos);\n-\n-    //! check whether a particular output is still available\n-    bool IsAvailable(unsigned int nPos) const {\n-        return (nPos < vout.size() && !vout[nPos].IsNull());\n-    }\n-\n-    //! check whether the entire CCoins is spent\n-    //! note that only !IsPruned() CCoins can be serialized\n     bool IsPruned() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253435",
      "id" : 119253435,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 236,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 41115111,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253435",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253461"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:28:28Z",
      "diff_hunk" : "@@ -306,17 +146,17 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    virtual bool GetCoins(const COutPoint &outpoint, Coin &coin) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253461",
      "id" : 119253461,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 318,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 41115140,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253461",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253487"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:28:42Z",
      "diff_hunk" : "@@ -336,97 +179,66 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView *viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const override;\n+    bool HaveCoins(const COutPoint &outpoint) const override;\n+    uint256 GetBestBlock() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    CCoinsViewCursor *Cursor() const;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    CCoinsViewCursor *Cursor() const override;\n+    size_t EstimateSize() const override;\n };\n \n \n-class CCoinsViewCache;\n-\n-/** \n- * A reference to a mutable cache entry. Encapsulating it allows us to run\n- *  cleanup code after the modification is finished, and keeping track of\n- *  concurrent modifications. \n- */\n-class CCoinsModifier\n-{\n-private:\n-    CCoinsViewCache& cache;\n-    CCoinsMap::iterator it;\n-    size_t cachedCoinUsage; // Cached memory usage of the CCoins object before modification\n-    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage);\n-\n-public:\n-    CCoins* operator->() { return &it->second.coins; }\n-    CCoins& operator*() { return it->second.coins; }\n-    ~CCoinsModifier();\n-    friend class CCoinsViewCache;\n-};\n-\n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n-    /* Whether this cache has an active modifier. */\n-    bool hasModifier;\n-\n-\n     /**\n      * Make mutable so that we can \"fill the cache\" even from Get-methods\n      * declared as \"const\".  \n      */\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n-    /* Cached dynamic memory usage for the inner CCoins objects. */\n+    /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n-    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n+    bool GetCoins(const COutPoint &outpoint, Coin &coin) const;\n+    bool HaveCoins(const COutPoint &outpoint) const;\n     uint256 GetBestBlock() const;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     /**\n-     * Check if we have the given tx already loaded in this cache.\n+     * Check if we have the given utxo already loaded in this cache.\n      * The semantics are the same as HaveCoins(), but no calls to\n      * the backing CCoinsView are made.\n      */\n-    bool HaveCoinsInCache(const uint256 &txid) const;\n+    bool HaveCoinsInCache(const COutPoint &outpoint) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253487",
      "id" : 119253487,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 425,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 41115163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253487",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253505"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:28:57Z",
      "diff_hunk" : "@@ -460,17 +272,22 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n-    friend class CCoinsModifier;\n-\n private:\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoins(const COutPoint &outpoint) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253505",
      "id" : 119253505,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 489,
      "path" : "src/coins.h",
      "position" : null,
      "pull_request_review_id" : 41115185,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253505",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253590"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:29:49Z",
      "diff_hunk" : "@@ -24,17 +25,40 @@ static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n+namespace {\n+\n+struct CoinsEntry {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253590",
      "id" : 119253590,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 14,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41115271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253590",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253613"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:30:03Z",
      "diff_hunk" : "@@ -344,7 +344,7 @@ static bool IsCurrentForFeeEstimation()\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<uint256>& vHashTxnToUncache)\n+                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& vHashTxnToUncache)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253613",
      "id" : 119253613,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 37,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 41115294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253613",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253638"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:30:18Z",
      "diff_hunk" : "@@ -437,30 +437,28 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n-        if (view.HaveCoins(hash)) {\n-            if (!fHadTxInCache)\n-                vHashTxnToUncache.push_back(hash);\n-            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        for (size_t out = 0; out < tx.vout.size(); out++) {\n+            COutPoint outpoint(hash, out);\n+            bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253638",
      "id" : 119253638,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 52,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 41115317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253638",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253652"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:30:29Z",
      "diff_hunk" : "@@ -437,30 +437,28 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n-        if (view.HaveCoins(hash)) {\n-            if (!fHadTxInCache)\n-                vHashTxnToUncache.push_back(hash);\n-            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        for (size_t out = 0; out < tx.vout.size(); out++) {\n+            COutPoint outpoint(hash, out);\n+            bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(outpoint);\n+            if (view.HaveCoins(outpoint)) {\n+                if (!fHadTxInCache) {\n+                    vHashTxnToUncache.push_back(outpoint);\n+                }\n+                return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+            }\n         }\n \n         // do all inputs exist?\n-        // Note that this does not check for the presence of actual outputs (see the next check for that),\n-        // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n         BOOST_FOREACH(const CTxIn txin, tx.vin) {\n-            if (!pcoinsTip->HaveCoinsInCache(txin.prevout.hash))\n-                vHashTxnToUncache.push_back(txin.prevout.hash);\n-            if (!view.HaveCoins(txin.prevout.hash)) {\n+            if (!pcoinsTip->HaveCoinsInCache(txin.prevout))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253652",
      "id" : 119253652,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 68,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 41115332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253652",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253671"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:30:43Z",
      "diff_hunk" : "@@ -763,10 +761,10 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n-    std::vector<uint256> vHashTxToUncache;\n+    std::vector<COutPoint> vHashTxToUncache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253671",
      "id" : 119253671,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 100,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 41115352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253671",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253742"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:31:21Z",
      "diff_hunk" : "@@ -168,7 +168,7 @@ int do_fuzz()\n         {\n             try\n             {\n-                CCoins block;\n+                Coin block;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253742",
      "id" : 119253742,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 5,
      "path" : "src/test/test_bitcoin_fuzzy.cpp",
      "position" : null,
      "pull_request_review_id" : 41115406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253742",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253764"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:31:35Z",
      "diff_hunk" : "@@ -242,18 +273,18 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n {\n     bool spent_a_duplicate_coinbase = false;\n     // A simple map to track what we expect the cache stack to represent.\n-    std::map<uint256, CCoins> result;\n+    std::map<COutPoint, Coin> result;\n \n     // The cache stack.\n     CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n     // Track the txids we've used in various sets\n-    std::set<uint256> coinbaseids;\n-    std::set<uint256> disconnectedids;\n-    std::set<uint256> duplicateids;\n-    std::set<uint256> utxoset;\n+    std::set<COutPoint> coinbaseids;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253764",
      "id" : 119253764,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 233,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 41115433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253764",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253790"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:31:52Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253790",
      "id" : 119253790,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 247,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 41115462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253790",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253805"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:32:05Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    auto utxod = FindRandomFrom(coinbaseids);\n                     // Reuse the exact same coinbase\n-                    tx = std::get<0>(txd);\n+                    tx = std::get<0>(utxod->second);\n                     // shouldn't be available for reconnection if its been duplicated\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n \n-                    duplicateids.insert(tx.GetHash());\n+                    duplicateids.insert(utxod->first);\n                 }\n                 else {\n-                    coinbaseids.insert(tx.GetHash());\n+                    coinbaseids.insert(COutPoint(tx.GetHash(), 0));\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n \n             // 17/20 times reconnect previous or add a regular tx\n             else {\n \n-                uint256 prevouthash;\n+                COutPoint prevout;\n                 // 1/20 times reconnect a previously disconnected tx\n                 if (randiter % 20 == 2 && disconnectedids.size()) {\n-                    TxData &txd = FindRandomFrom(disconnectedids);\n-                    tx = std::get<0>(txd);\n-                    prevouthash = tx.vin[0].prevout.hash;\n-                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n-                        disconnectedids.erase(tx.GetHash());\n+                    auto utxod = FindRandomFrom(disconnectedids);\n+                    tx = std::get<0>(utxod->second);\n+                    prevout = tx.vin[0].prevout;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevout)) {\n+                        disconnectedids.erase(utxod->first);\n                         continue;\n                     }\n \n                     // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n-                    if (utxoset.count(tx.GetHash())) {\n+                    if (utxoset.count(utxod->first)) {\n                         assert(CTransaction(tx).IsCoinBase());\n-                        assert(duplicateids.count(tx.GetHash()));\n+                        assert(duplicateids.count(utxod->first));\n                     }\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n                 }\n \n                 // 16/20 times create a regular tx\n                 else {\n-                    TxData &txd = FindRandomFrom(utxoset);\n-                    prevouthash = std::get<0>(txd).GetHash();\n+                    auto utxod = FindRandomFrom(utxoset);\n+                    prevout = utxod->first;\n \n                     // Construct the tx to spend the coins of prevouthash\n-                    tx.vin[0].prevout.hash = prevouthash;\n-                    tx.vin[0].prevout.n = 0;\n+                    tx.vin[0].prevout = prevout;\n                     assert(!CTransaction(tx).IsCoinBase());\n                 }\n                 // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n-                oldcoins = result[prevouthash];\n+                oldcoins = result[prevout];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                result[prevouthash].Clear();\n+                result[prevout].Clear();\n \n-                utxoset.erase(prevouthash);\n+                utxoset.erase(prevout);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n-                if (duplicateids.count(prevouthash))\n+                if (duplicateids.count(prevout))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253805",
      "id" : 119253805,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 329,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 41115481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253805",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253903"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:33:14Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    auto utxod = FindRandomFrom(coinbaseids);\n                     // Reuse the exact same coinbase\n-                    tx = std::get<0>(txd);\n+                    tx = std::get<0>(utxod->second);\n                     // shouldn't be available for reconnection if its been duplicated\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n \n-                    duplicateids.insert(tx.GetHash());\n+                    duplicateids.insert(utxod->first);\n                 }\n                 else {\n-                    coinbaseids.insert(tx.GetHash());\n+                    coinbaseids.insert(COutPoint(tx.GetHash(), 0));\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n \n             // 17/20 times reconnect previous or add a regular tx\n             else {\n \n-                uint256 prevouthash;\n+                COutPoint prevout;\n                 // 1/20 times reconnect a previously disconnected tx\n                 if (randiter % 20 == 2 && disconnectedids.size()) {\n-                    TxData &txd = FindRandomFrom(disconnectedids);\n-                    tx = std::get<0>(txd);\n-                    prevouthash = tx.vin[0].prevout.hash;\n-                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n-                        disconnectedids.erase(tx.GetHash());\n+                    auto utxod = FindRandomFrom(disconnectedids);\n+                    tx = std::get<0>(utxod->second);\n+                    prevout = tx.vin[0].prevout;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevout)) {\n+                        disconnectedids.erase(utxod->first);\n                         continue;\n                     }\n \n                     // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n-                    if (utxoset.count(tx.GetHash())) {\n+                    if (utxoset.count(utxod->first)) {\n                         assert(CTransaction(tx).IsCoinBase());\n-                        assert(duplicateids.count(tx.GetHash()));\n+                        assert(duplicateids.count(utxod->first));\n                     }\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n                 }\n \n                 // 16/20 times create a regular tx\n                 else {\n-                    TxData &txd = FindRandomFrom(utxoset);\n-                    prevouthash = std::get<0>(txd).GetHash();\n+                    auto utxod = FindRandomFrom(utxoset);\n+                    prevout = utxod->first;\n \n                     // Construct the tx to spend the coins of prevouthash\n-                    tx.vin[0].prevout.hash = prevouthash;\n-                    tx.vin[0].prevout.n = 0;\n+                    tx.vin[0].prevout = prevout;\n                     assert(!CTransaction(tx).IsCoinBase());\n                 }\n                 // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n-                oldcoins = result[prevouthash];\n+                oldcoins = result[prevout];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                result[prevouthash].Clear();\n+                result[prevout].Clear();\n \n-                utxoset.erase(prevouthash);\n+                utxoset.erase(prevout);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n-                if (duplicateids.count(prevouthash))\n+                if (duplicateids.count(prevout))\n                     spent_a_duplicate_coinbase = true;\n \n             }\n             // Update the expected result to know about the new output coins\n-            result[tx.GetHash()].FromTx(tx, height);\n+            assert(tx.vout.size() == 1);\n+            const COutPoint outpoint(tx.GetHash(), 0);\n+            result[outpoint] = Coin(tx.vout[0], height, CTransaction(tx).IsCoinBase());\n \n             // Call UpdateCoins on the top cache\n             CTxUndo undo;\n             UpdateCoins(tx, *(stack.back()), undo, height);\n \n             // Update the utxo set for future spends\n-            utxoset.insert(tx.GetHash());\n+            utxoset.insert(outpoint);\n \n             // Track this tx and undo info to use later\n-            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+            utxoData.emplace(outpoint, std::make_tuple(tx,undo,oldcoins));\n         }\n \n         //1/20 times undo a previous transaction\n         else if (utxoset.size()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253903",
      "id" : 119253903,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 353,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 41115587,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253903",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253917"
         }
      },
      "body" : "Fixed using scripted-diff.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:33:31Z",
      "diff_hunk" : "@@ -264,138 +295,144 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n+            tx.vout[0].scriptPubKey.assign(insecure_rand() & 0x3F, 0); // Random sizes so we can test memory usage accounting\n             unsigned int height = insecure_rand();\n-            CCoins oldcoins;\n+            Coin oldcoins;\n \n             // 2/20 times create a new coinbase\n             if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n                 // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    auto utxod = FindRandomFrom(coinbaseids);\n                     // Reuse the exact same coinbase\n-                    tx = std::get<0>(txd);\n+                    tx = std::get<0>(utxod->second);\n                     // shouldn't be available for reconnection if its been duplicated\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n \n-                    duplicateids.insert(tx.GetHash());\n+                    duplicateids.insert(utxod->first);\n                 }\n                 else {\n-                    coinbaseids.insert(tx.GetHash());\n+                    coinbaseids.insert(COutPoint(tx.GetHash(), 0));\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n \n             // 17/20 times reconnect previous or add a regular tx\n             else {\n \n-                uint256 prevouthash;\n+                COutPoint prevout;\n                 // 1/20 times reconnect a previously disconnected tx\n                 if (randiter % 20 == 2 && disconnectedids.size()) {\n-                    TxData &txd = FindRandomFrom(disconnectedids);\n-                    tx = std::get<0>(txd);\n-                    prevouthash = tx.vin[0].prevout.hash;\n-                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n-                        disconnectedids.erase(tx.GetHash());\n+                    auto utxod = FindRandomFrom(disconnectedids);\n+                    tx = std::get<0>(utxod->second);\n+                    prevout = tx.vin[0].prevout;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevout)) {\n+                        disconnectedids.erase(utxod->first);\n                         continue;\n                     }\n \n                     // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n-                    if (utxoset.count(tx.GetHash())) {\n+                    if (utxoset.count(utxod->first)) {\n                         assert(CTransaction(tx).IsCoinBase());\n-                        assert(duplicateids.count(tx.GetHash()));\n+                        assert(duplicateids.count(utxod->first));\n                     }\n-                    disconnectedids.erase(tx.GetHash());\n+                    disconnectedids.erase(utxod->first);\n                 }\n \n                 // 16/20 times create a regular tx\n                 else {\n-                    TxData &txd = FindRandomFrom(utxoset);\n-                    prevouthash = std::get<0>(txd).GetHash();\n+                    auto utxod = FindRandomFrom(utxoset);\n+                    prevout = utxod->first;\n \n                     // Construct the tx to spend the coins of prevouthash\n-                    tx.vin[0].prevout.hash = prevouthash;\n-                    tx.vin[0].prevout.n = 0;\n+                    tx.vin[0].prevout = prevout;\n                     assert(!CTransaction(tx).IsCoinBase());\n                 }\n                 // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n-                oldcoins = result[prevouthash];\n+                oldcoins = result[prevout];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                result[prevouthash].Clear();\n+                result[prevout].Clear();\n \n-                utxoset.erase(prevouthash);\n+                utxoset.erase(prevout);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n-                if (duplicateids.count(prevouthash))\n+                if (duplicateids.count(prevout))\n                     spent_a_duplicate_coinbase = true;\n \n             }\n             // Update the expected result to know about the new output coins\n-            result[tx.GetHash()].FromTx(tx, height);\n+            assert(tx.vout.size() == 1);\n+            const COutPoint outpoint(tx.GetHash(), 0);\n+            result[outpoint] = Coin(tx.vout[0], height, CTransaction(tx).IsCoinBase());\n \n             // Call UpdateCoins on the top cache\n             CTxUndo undo;\n             UpdateCoins(tx, *(stack.back()), undo, height);\n \n             // Update the utxo set for future spends\n-            utxoset.insert(tx.GetHash());\n+            utxoset.insert(outpoint);\n \n             // Track this tx and undo info to use later\n-            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+            utxoData.emplace(outpoint, std::make_tuple(tx,undo,oldcoins));\n         }\n \n         //1/20 times undo a previous transaction\n         else if (utxoset.size()) {\n-            TxData &txd = FindRandomFrom(utxoset);\n-\n-            CTransaction &tx = std::get<0>(txd);\n-            CTxUndo &undo = std::get<1>(txd);\n-            CCoins &origcoins = std::get<2>(txd);\n+            auto utxod = FindRandomFrom(utxoset);\n \n-            uint256 undohash = tx.GetHash();\n+            CTransaction &tx = std::get<0>(utxod->second);\n+            CTxUndo &undo = std::get<1>(utxod->second);\n+            Coin &origcoins = std::get<2>(utxod->second);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253917",
      "id" : 119253917,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 364,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 41115605,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253917",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253945"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T01:33:47Z",
      "diff_hunk" : "@@ -30,7 +30,7 @@\n class CAutoFile;\n class CBlockIndex;\n \n-/** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n+/** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119253945",
      "id" : 119253945,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 6,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 41115638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119253945",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119372511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119372511"
         }
      },
      "body" : "I'd like to see some comments around this call (and the Upgrade() function definition). I imagine that at some point in a future version we might want to remove the Upgrade code and tear out the CCoins class entirely. That will break the ability to upgrade directly from pre 0.15 to that version without a reindex. A small comment at this call saying that this Upgrade is for a chainstate db build on pre 0.15 would make make that easier.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T14:36:08Z",
      "diff_hunk" : "@@ -1455,6 +1455,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n                     if (fPruneMode)\n                         CleanupBlockRevFiles();\n+                } else {\n+                    if (!pcoinsdbview->Upgrade()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119372511",
      "id" : 119372511,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 17,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 41246962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119372511",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119373253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119373253"
         }
      },
      "body" : "Please add a comment saying this is a legacy class, only retained for the ability to upgrade chainstate DBs from pre 0.15 to post 0.15 without a reindex.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T14:38:32Z",
      "diff_hunk" : "@@ -215,3 +252,121 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n \n     return true;\n }\n+\n+namespace {\n+\n+class CCoins",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119373253",
      "id" : 119373253,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 151,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41246962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119373253",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119378767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119378767"
         }
      },
      "body" : "this was caught up in your scripted diff. For correctness should really be called `old_coins`, but I don't think it really matters.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T14:54:35Z",
      "diff_hunk" : "@@ -215,3 +252,121 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n \n     return true;\n }\n+\n+namespace {\n+\n+class CCoins\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n+    std::vector<CTxOut> vout;\n+\n+    //! at which height this transaction was included in the active block chain\n+    int nHeight;\n+\n+    //! empty constructor\n+    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }\n+\n+    /**\n+     * calculate number of bytes for the bitmask, and its number of non-zero bytes\n+     * each bit in the bitmask represents the availability of one output, but the\n+     * availabilities of the first two outputs are encoded separately\n+     */\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n+        unsigned int nLastUsedByte = 0;\n+        for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n+            bool fZero = true;\n+            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n+                if (!vout[2+b*8+i].IsNull()) {\n+                    fZero = false;\n+                    continue;\n+                }\n+            }\n+            if (!fZero) {\n+                nLastUsedByte = b + 1;\n+                nNonzeroBytes++;\n+            }\n+        }\n+        nBytes += nLastUsedByte;\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s) {\n+        unsigned int nCode = 0;\n+        // version\n+        int nVersionDummy;\n+        ::Unserialize(s, VARINT(nVersionDummy));\n+        // header code\n+        ::Unserialize(s, VARINT(nCode));\n+        fCoinBase = nCode & 1;\n+        std::vector<bool> vAvail(2, false);\n+        vAvail[0] = (nCode & 2) != 0;\n+        vAvail[1] = (nCode & 4) != 0;\n+        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n+        // spentness bitmask\n+        while (nMaskCode > 0) {\n+            unsigned char chAvail = 0;\n+            ::Unserialize(s, chAvail);\n+            for (unsigned int p = 0; p < 8; p++) {\n+                bool f = (chAvail & (1 << p)) != 0;\n+                vAvail.push_back(f);\n+            }\n+            if (chAvail != 0)\n+                nMaskCode--;\n+        }\n+        // txouts themself\n+        vout.assign(vAvail.size(), CTxOut());\n+        for (unsigned int i = 0; i < vAvail.size(); i++) {\n+            if (vAvail[i])\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n+        }\n+        // coinbase height\n+        ::Unserialize(s, VARINT(nHeight));\n+    }\n+};\n+\n+}\n+\n+bool CCoinsViewDB::Upgrade() {\n+    std::unique_ptr<CDBIterator> pcursor(db.NewIterator());\n+    pcursor->Seek(std::make_pair(DB_COINS, uint256()));\n+    if (!pcursor->Valid()) {\n+        return true;\n+    }\n+\n+    LogPrintf(\"Upgrading database...\\n\");\n+    size_t batch_size = 1 << 24;\n+    CDBBatch batch(db);\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        std::pair<unsigned char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == DB_COINS) {\n+            CCoins old_coin;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119378767",
      "id" : 119378767,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 240,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41246962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119378767",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119380059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119380059"
         }
      },
      "body" : "I think this can be removed? The only CCoins functions that are used in Upgrade() are the constructor and the deserializer.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T14:57:27Z",
      "diff_hunk" : "@@ -215,3 +252,121 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n \n     return true;\n }\n+\n+namespace {\n+\n+class CCoins\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n+    std::vector<CTxOut> vout;\n+\n+    //! at which height this transaction was included in the active block chain\n+    int nHeight;\n+\n+    //! empty constructor\n+    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }\n+\n+    /**\n+     * calculate number of bytes for the bitmask, and its number of non-zero bytes\n+     * each bit in the bitmask represents the availability of one output, but the\n+     * availabilities of the first two outputs are encoded separately\n+     */\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119380059",
      "id" : 119380059,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 171,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41246962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119380059",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119383283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119383283"
         }
      },
      "body" : "In that case, I don't understand the comment. I thought it meant that the CCoinsViewMemPool class should be responsible for pruning the spent funds, instead of only when called through the rpc or rest.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T15:06:12Z",
      "diff_hunk" : "@@ -963,37 +976,34 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoins(out, coin) || mempool.isSpent(out)) // TODO: this should be done by the CCoinsViewMemPool",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119383283",
      "id" : 119383283,
      "original_commit_id" : "1927df1a2316004d5cac22b65a561b578b37ec47",
      "original_position" : 115,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 41246962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119383283",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119384151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119384151"
         }
      },
      "body" : "cast not required. `coin.nHeight` and `MEMPOOL_HEIGHT` are both uint32_t",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T15:09:06Z",
      "diff_hunk" : "@@ -963,37 +976,37 @@ UniValue gettxout(const JSONRPCRequest& request)\n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     int n = request.params[1].get_int();\n+    COutPoint out(hash, n);\n     bool fMempool = true;\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n-    CCoins coins;\n+    Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(pcoinsTip, mempool);\n-        if (!view.GetCoins(hash, coins))\n+        if (!view.GetCoin(out, coin) || mempool.isSpent(out)) { // TODO: this should be done by the CCoinsViewMemPool\n             return NullUniValue;\n-        mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n+        }\n     } else {\n-        if (!pcoinsTip->GetCoins(hash, coins))\n+        if (!pcoinsTip->GetCoin(out, coin)) {\n             return NullUniValue;\n+        }\n     }\n-    if (n<0 || (unsigned int)n>=coins.vout.size() || coins.vout[n].IsNull())\n-        return NullUniValue;\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n     ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n-    if ((unsigned int)coins.nHeight == MEMPOOL_HEIGHT)\n+    if ((unsigned int)coin.nHeight == MEMPOOL_HEIGHT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119384151",
      "id" : 119384151,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 132,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 41259383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119384151",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402571"
         }
      },
      "body" : "Added some comments. The details about upgrading are in the cpp file, because I expect that the Upgrade method will remain, regardless of what upgrades it supports.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T16:13:14Z",
      "diff_hunk" : "@@ -1455,6 +1455,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n                     if (fPruneMode)\n                         CleanupBlockRevFiles();\n+                } else {\n+                    if (!pcoinsdbview->Upgrade()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402571",
      "id" : 119402571,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 17,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 41279591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402655"
         }
      },
      "body" : "Done.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T16:13:33Z",
      "diff_hunk" : "@@ -215,3 +252,121 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n \n     return true;\n }\n+\n+namespace {\n+\n+class CCoins",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402655",
      "id" : 119402655,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 151,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41279674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402655",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402728"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402728"
         }
      },
      "body" : "Great catch, done!",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T16:13:52Z",
      "diff_hunk" : "@@ -215,3 +252,121 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n \n     return true;\n }\n+\n+namespace {\n+\n+class CCoins\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n+    std::vector<CTxOut> vout;\n+\n+    //! at which height this transaction was included in the active block chain\n+    int nHeight;\n+\n+    //! empty constructor\n+    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }\n+\n+    /**\n+     * calculate number of bytes for the bitmask, and its number of non-zero bytes\n+     * each bit in the bitmask represents the availability of one output, but the\n+     * availabilities of the first two outputs are encoded separately\n+     */\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402728",
      "id" : 119402728,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 171,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41279758,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402728",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402812"
         }
      },
      "body" : "Reverted.",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-05-31T16:14:05Z",
      "diff_hunk" : "@@ -215,3 +252,121 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n \n     return true;\n }\n+\n+namespace {\n+\n+class CCoins\n+{\n+public:\n+    //! whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n+    std::vector<CTxOut> vout;\n+\n+    //! at which height this transaction was included in the active block chain\n+    int nHeight;\n+\n+    //! empty constructor\n+    CCoins() : fCoinBase(false), vout(0), nHeight(0) { }\n+\n+    /**\n+     * calculate number of bytes for the bitmask, and its number of non-zero bytes\n+     * each bit in the bitmask represents the availability of one output, but the\n+     * availabilities of the first two outputs are encoded separately\n+     */\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n+        unsigned int nLastUsedByte = 0;\n+        for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n+            bool fZero = true;\n+            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n+                if (!vout[2+b*8+i].IsNull()) {\n+                    fZero = false;\n+                    continue;\n+                }\n+            }\n+            if (!fZero) {\n+                nLastUsedByte = b + 1;\n+                nNonzeroBytes++;\n+            }\n+        }\n+        nBytes += nLastUsedByte;\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s) {\n+        unsigned int nCode = 0;\n+        // version\n+        int nVersionDummy;\n+        ::Unserialize(s, VARINT(nVersionDummy));\n+        // header code\n+        ::Unserialize(s, VARINT(nCode));\n+        fCoinBase = nCode & 1;\n+        std::vector<bool> vAvail(2, false);\n+        vAvail[0] = (nCode & 2) != 0;\n+        vAvail[1] = (nCode & 4) != 0;\n+        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n+        // spentness bitmask\n+        while (nMaskCode > 0) {\n+            unsigned char chAvail = 0;\n+            ::Unserialize(s, chAvail);\n+            for (unsigned int p = 0; p < 8; p++) {\n+                bool f = (chAvail & (1 << p)) != 0;\n+                vAvail.push_back(f);\n+            }\n+            if (chAvail != 0)\n+                nMaskCode--;\n+        }\n+        // txouts themself\n+        vout.assign(vAvail.size(), CTxOut());\n+        for (unsigned int i = 0; i < vAvail.size(); i++) {\n+            if (vAvail[i])\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n+        }\n+        // coinbase height\n+        ::Unserialize(s, VARINT(nHeight));\n+    }\n+};\n+\n+}\n+\n+bool CCoinsViewDB::Upgrade() {\n+    std::unique_ptr<CDBIterator> pcursor(db.NewIterator());\n+    pcursor->Seek(std::make_pair(DB_COINS, uint256()));\n+    if (!pcursor->Valid()) {\n+        return true;\n+    }\n+\n+    LogPrintf(\"Upgrading database...\\n\");\n+    size_t batch_size = 1 << 24;\n+    CDBBatch batch(db);\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        std::pair<unsigned char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == DB_COINS) {\n+            CCoins old_coin;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119402812",
      "id" : 119402812,
      "original_commit_id" : "1bc281f36e8ec88c66dad651c405b381cb9a39a0",
      "original_position" : 240,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 41279839,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-01T20:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119402812",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/10195/commits/dfdf1d5fef732d24602e693f917e41ed357d4937",
      "created_at" : "2017-05-31T17:17:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305256191",
      "id" : 305256191,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-05-31T17:17:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305256191",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Tested ACK dfdf1d5\r\n\r\n>  I think this is ready.\r\n\r\nI agree. \r\nAre you going to do a final squash before merge (\"Address some nits\" and \"Address more nits\" seem like squashme's)?",
      "created_at" : "2017-06-01T11:38:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305468433",
      "id" : 305468433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T11:38:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305468433",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "How does this change affect UTXO set bloat attacks?\r\n\r\nIn the current model where UTXO entries are indexed by txid, I think the most efficient attack would be stuffing a block full of max-sized (10,000 byte?) scriptPubKeys.  That makes the worst-case UTXO byte-size increase per block slightly smaller than the maximum base block size.\r\n\r\nBut if UTXO entries are indexed by outpoint, it seems to me an attacker could create a single large transaction with many small outputs (minimum size 9 bytes?) which would each add a 33 to 36 byte compressed outpoint to the UTXO DB.  That makes the worst-case byte-size increase per block a multiple of the maximum base block size.\r\n\r\nI see @sipa's comment in the OP about, \"LevelDB internally uses an encoding that omits repeated prefix bytes in keys, and because of that, duplicating the txids is not very significant.\"  I was just wondering if the affect of this change on UTXO bloat attacks was considered (or was even worth considering)?",
      "created_at" : "2017-06-01T12:21:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305477065",
      "id" : 305477065,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T12:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305477065",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/61096?v=3",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "body" : "This is a fantastic change.  I'm sorry it's taking me so long to work through it.  I can't promise I will finish today, but I have no objection to merge based on other's review and I'll keep working my way through either way.\r\n\r\n@harding raises an interesting question, but I feel its more of an academic one, there is nothing preventing us from changing the implementation again in the future if that becomes an issue (or heaven forbid reverting)",
      "created_at" : "2017-06-01T15:25:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305528429",
      "id" : 305528429,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T15:25:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305528429",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@harding As you note that  sipa notes: the database deduplicates the IDs; this largely eliminates the concern your present.  The old structure also has quadratic access costs for transactions with many outputs which this change eliminates.",
      "created_at" : "2017-06-01T16:27:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305547398",
      "id" : 305547398,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T16:27:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305547398",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@laanwj I'll squash soon.\n\n@harding It's an interesting question what the worst cast UTXO bloat attack becomes after this change. I believe you're right that many small outputs will have a larger impact on disk size, though not as dramatically as you predict - most of it will be eaten by prefix compression.",
      "created_at" : "2017-06-01T17:06:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305557835",
      "id" : 305557835,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T17:06:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305557835",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119683775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119683775"
         }
      },
      "body" : "Do we want to check that `coin.nHeight == pindex->nHeight` ?\r\nNot sure if it matters, but that used to get checked...",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-06-01T17:48:09Z",
      "diff_hunk" : "@@ -1313,15 +1296,15 @@ static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex*\n \n         // Check that all outputs are available and match the outputs in the block itself\n         // exactly.\n-        {\n-        CCoinsModifier outs = view.ModifyCoins(hash);\n-        outs->ClearUnspendable();\n-\n-        CCoins outsBlock(tx, pindex->nHeight);\n-        if (*outs != outsBlock) fClean = false; // transaction mismatch\n-\n-        // remove outputs\n-        outs->Clear();\n+        for (size_t o = 0; o < tx.vout.size(); o++) {\n+            if (!tx.vout[o].scriptPubKey.IsUnspendable()) {\n+                COutPoint out(hash, o);\n+                Coin coin;\n+                view.SpendCoin(out, &coin);\n+                if (tx.vout[o] != coin.out) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119683775",
      "id" : 119683775,
      "original_commit_id" : "b1216c967a9f12a18bcce9a9a2e39be30825c367",
      "original_position" : 108,
      "path" : "src/validation.cpp",
      "position" : 311,
      "pull_request_review_id" : 41001846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-07T20:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119683775",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Pre-squash history:\r\n\r\n* e66dbde6d14cb5f253b3bf8850a98f4fda2d9f49: Add SizeEstimate to CDBBatch\r\n* f54580e7e4f225bb615204daef32f72ab8688418: error() in disconnect for disk corruption, not inconsistency\r\n* e484652fc36ef7135cf08ad380ea7142b6cbadc0: Introduce CHashVerifier to hash read data\r\n* 7e0032290669fae5f52c256856c53038511c7db4: Add specialization of SipHash for 256 + 32 bit data\r\n* d342424301013ec47dc146a4beb49d5c9319d80a: Remove/ignore tx version in utxo and undo\r\n* c3aa0c11947dfd82702df276d39bb7f748dd83a1: Report on-disk size in gettxoutsetinfo\r\n* 7d991b55dbf0b0f6e21c0680ee3ebd09df09012f: Store/allow tx metadata in all undo records\r\n* 422634e2f5ac1ff74cd358144cecbac63007adc4: Introduce Coin, a single unspent output\r\n* 16a2789d33ab830787da8e716f4a65e14aecb159: Replace CTxInUndo with Coin\r\n* 4d1246060c3587c1605f85735a50515929a8deff: Optimization: Coin&& to ApplyTxInUndo\r\n* 7c1efc60f122ae18f501babdcae9047507267be6: Introduce new per-txout CCoinsViewCache functions\r\n* b1216c967a9f12a18bcce9a9a2e39be30825c367: Switch from per-tx to per-txout CCoinsViewCache methods in some places\r\n* 2cc9c5495c8c5f9b394017e163a21e4e3f9b2c84: Only pass things committed to by tx's witness hash to CScriptCheck\r\n* f2d42ab5d45163aa2a6574884635ba3c2bb82984: Switch CScriptCheck to use Coin instead of CCoins\r\n* 875b4123134c02a61486060996d3573116be776b: Switch tests from ModifyCoins to AddCoin/SpendCoin\r\n* 96b992072a8cda6509b4185118aadb3097452ee2: Remove ModifyCoins/ModifyNewCoins\r\n* f1b70c320f31d4a0cced7928757297cbb3475cff: Replace CCoins-based CTxMemPool::pruneSpent with isSpent\r\n* 105377227ce041b943d149c59458d48319e56730: Refactor GetUTXOStats in preparation for per-COutPoint iteration\r\n* 0dcdbbd0b36298299d59f3960cd8b0be48dd3b80: Switch CCoinsView and chainstate db from per-txid to per-txout\r\n* b3cf86e59245d3715ab4e32186e0e30931f63aa8: Extend coins_tests\r\n* d475d03c4ca1dedaba311add2e2c38279c79c6a0: Remove unused CCoins methods\r\n* 363843fc4c0f1eadef589be20af34738e67ba835: Pack Coin more tightly\r\n* c5faf390dfee5c969b20e8bee305542ef74fe8cb: Reduce reserved memory space for flushing\r\n* 72eed2650fa9f3d31205712a965b9f99a5c8ee99: Upgrade from per-tx database to per-txout\r\n* 7acbc2b7c688729c7c50802182300b7859f77349: [MOVEONLY] Move old CCoins class to txdb.cpp\r\n* 854dad479c53960ee7fbae2bb7f544c10473b023: Merge CCoinsViewCache's GetOutputFor and AccessCoin\r\n* ea0a7b9224d20962aa6bb78e5bd678b8d5492832: Rename CCoinsCacheEntry::coins to coin\r\n* 1927df1a2316004d5cac22b65a561b578b37ec47: Increase travis unit test timeout\r\n* 0328074fc823e0e9cc8461140df68fcdf70d43fd: scripted-diff: various renames for per-utxo consistency\r\n* 1bc281f36e8ec88c66dad651c405b381cb9a39a0: Address some nits\r\n* dfdf1d5fef732d24602e693f917e41ed357d4937: Address more nits\r\n",
      "created_at" : "2017-06-01T18:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305581795",
      "id" : 305581795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T18:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305581795",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@morcos @gmaxwell @sipa Thanks for your responses (and, with the others, your work on this change!).  I agree the ability to adapt the underlying implementation to prevailing conditions makes the question academic, as hopefully does the increasing ratio of fees-to-subsidy which increases the lost-income cost to miners for maximizing bloat.\r\n\r\nPlease consider my comment non-blocking, and thank you all again for your work.",
      "created_at" : "2017-06-01T18:51:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305585669",
      "id" : 305585669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T18:51:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305585669",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/61096?v=3",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119699551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119699551"
         }
      },
      "body" : "This comment is incorrect I believe?  It will never return true (nor should it) for a spent output",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-06-01T18:52:22Z",
      "diff_hunk" : "@@ -362,17 +363,17 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    virtual bool GetCoins(const COutPoint &outpoint, Coin &coin) const;\n \n-    //! Just check whether we have data for a given txid.\n-    //! This may (but cannot always) return true for fully spent transactions\n-    virtual bool HaveCoins(const uint256 &txid) const;\n+    //! Just check whether we have data for a given outpoint.\n+    //! This may (but cannot always) return true for spent outputs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r119699551",
      "id" : 119699551,
      "original_commit_id" : "0dcdbbd0b36298299d59f3960cd8b0be48dd3b80",
      "original_position" : 74,
      "path" : "src/coins.h",
      "position" : 325,
      "pull_request_review_id" : 41001846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-07T20:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/119699551",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Squashed all fixes without rebasing (so the resulting tree is identical to dfdf1d5).",
      "created_at" : "2017-06-01T20:20:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#issuecomment-305608860",
      "id" : 305608860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10195",
      "updated_at" : "2017-06-01T20:23:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305608860",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120685214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120685214"
         }
      },
      "body" : "This is a DOS vector for too many disk lookups for a tx with lots of outputs, maybe the best bet is to check for all outputs only in cache iff there is a missing input",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-06-07T16:58:42Z",
      "diff_hunk" : "@@ -437,30 +437,30 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n-        bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(hash);\n-        if (view.HaveCoins(hash)) {\n-            if (!fHadTxInCache)\n-                vHashTxnToUncache.push_back(hash);\n-            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n+        for (size_t out = 0; out < tx.vout.size(); out++) {\n+            COutPoint outpoint(hash, out);\n+            bool fHadTxInCache = pcoinsTip->HaveCoinsInCache(outpoint);\n+            if (view.HaveCoins(outpoint)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120685214",
      "id" : 120685214,
      "original_commit_id" : "50830796889ecaa458871f1db878c255dd2554cb",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 41001846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-07T20:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120685214",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120728059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120728059"
         }
      },
      "body" : "maybe this should be 30?\r\nsdaftuar said he saw 17 in only a week of testing",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-06-07T19:53:32Z",
      "diff_hunk" : "@@ -22,9 +22,7 @@ class uint256;\n //! Compensate for extra memory peak (x1.5-x1.9) at flush time.\n static constexpr int DB_PEAK_USAGE_FACTOR = 2;\n //! No need to periodic flush if at least this much space still available.\n-static constexpr int MAX_BLOCK_COINSDB_USAGE = 200 * DB_PEAK_USAGE_FACTOR;\n-//! Always periodic flush if less than this much space still available.\n-static constexpr int MIN_BLOCK_COINSDB_USAGE = 50 * DB_PEAK_USAGE_FACTOR;\n+static constexpr int MAX_BLOCK_COINSDB_USAGE = 10 * DB_PEAK_USAGE_FACTOR;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120728059",
      "id" : 120728059,
      "original_commit_id" : "b2af357f39c7d17ab6ddb2938531155bf90126ec",
      "original_position" : 7,
      "path" : "src/txdb.h",
      "position" : 7,
      "pull_request_review_id" : 41001846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-07T20:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120728059",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120737583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120737583"
         }
      },
      "body" : "17 was incorrect; I mistakenly reported the cache delta between blocks (which includes the effect of transactions on the cache) as the per-block cache delta. ",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-06-07T20:36:07Z",
      "diff_hunk" : "@@ -22,9 +22,7 @@ class uint256;\n //! Compensate for extra memory peak (x1.5-x1.9) at flush time.\n static constexpr int DB_PEAK_USAGE_FACTOR = 2;\n //! No need to periodic flush if at least this much space still available.\n-static constexpr int MAX_BLOCK_COINSDB_USAGE = 200 * DB_PEAK_USAGE_FACTOR;\n-//! Always periodic flush if less than this much space still available.\n-static constexpr int MIN_BLOCK_COINSDB_USAGE = 50 * DB_PEAK_USAGE_FACTOR;\n+static constexpr int MAX_BLOCK_COINSDB_USAGE = 10 * DB_PEAK_USAGE_FACTOR;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r120737583",
      "id" : 120737583,
      "original_commit_id" : "b2af357f39c7d17ab6ddb2938531155bf90126ec",
      "original_position" : 7,
      "path" : "src/txdb.h",
      "position" : 7,
      "pull_request_review_id" : 42726723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-06-07T20:36:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120737583",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r137979557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137979557"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is the point of this? Just to keep the database backwards compatible? ",
      "commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "created_at" : "2017-09-11T04:48:07Z",
      "diff_hunk" : "@@ -42,16 +42,19 @@ static const struct {\n };\n \n struct CCoin {\n-    uint32_t nTxVer; // Don't call this nVersion, that name has a special meaning inside IMPLEMENT_SERIALIZE\n     uint32_t nHeight;\n     CTxOut out;\n \n     ADD_SERIALIZE_METHODS;\n \n+    CCoin() : nHeight(0) {}\n+    CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}\n+\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n-        READWRITE(nTxVer);\n+        uint32_t nTxVerDummy = 0;\n+        READWRITE(nTxVerDummy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10195#discussion_r137979557",
      "id" : 137979557,
      "original_commit_id" : "589827975f9f241e2f23eb674a7383592bff1cad",
      "original_position" : 18,
      "path" : "src/rest.cpp",
      "position" : 18,
      "pull_request_review_id" : 61715519,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10195",
      "updated_at" : "2017-09-11T04:48:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137979557",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/371222?v=4",
         "events_url" : "https://api.github.com/users/Earlz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Earlz/followers",
         "following_url" : "https://api.github.com/users/Earlz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Earlz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Earlz",
         "id" : 371222,
         "login" : "Earlz",
         "organizations_url" : "https://api.github.com/users/Earlz/orgs",
         "received_events_url" : "https://api.github.com/users/Earlz/received_events",
         "repos_url" : "https://api.github.com/users/Earlz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Earlz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Earlz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Earlz"
      }
   }
]
