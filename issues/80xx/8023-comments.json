[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62432475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62432475"
         }
      },
      "body" : "nit: I don't see this being shared anywhere. Is there any reason it isn't a `unique_ptr`?\r\n\r\n[[ If it is a `unique_ptr`, the instances of `noexcept(true)` above need to be replaced with the equivalent plain `noexcept` to compile in clang3.7 due to a compiler bug - looks related to clang/23383. ]]",
      "commit_id" : "33dd6c85b92e1d09048329c31e70141fb0eef42c",
      "created_at" : "2016-05-08T14:11:08Z",
      "diff_hunk" : "@@ -0,0 +1,63 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_H\n+\n+#include \"interruptible/this_thread.h\"\n+\n+#include <thread>\n+#include <memory>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data;\n+}\n+\n+class thread\n+{\n+public:\n+    typedef std::thread thread_type;\n+    typedef thread_type::native_handle_type native_handle_type;\n+    typedef thread_type::id id;\n+\n+    thread() noexcept = default;\n+\n+    template <typename T, typename... Args>\n+    explicit thread(T&& func, Args&&... args)\n+    {\n+        start_thread(std::bind(std::forward<T>(func), std::forward<Args>(args)...));\n+    }\n+\n+    thread(const thread&) = delete;\n+    thread(thread&& t) noexcept(true) = default;\n+\n+    thread& operator=(const thread&) = delete;\n+    thread& operator=(thread&& t) noexcept(true) = default;\n+\n+    void join();\n+    void swap(thread& rhs) noexcept;\n+    bool joinable() const noexcept;\n+    void detach();\n+    id get_id() const noexcept;\n+    native_handle_type native_handle();\n+    static unsigned hardware_concurrency() noexcept;\n+\n+    // interruptible additions\n+    void interrupt();\n+    bool interruption_requested() const;\n+\n+private:\n+    std::shared_ptr<detail::thread_data> m_data;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62432475",
      "id" : 62432475,
      "original_commit_id" : "33dd6c85b92e1d09048329c31e70141fb0eef42c",
      "original_position" : 54,
      "path" : "src/interruptible/thread.h",
      "position" : 54,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-08T14:11:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62432475",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "body" : "`thread` is the only owner of the `m_data` shared pointer, but `this_thread` is given a raw pointer to the same object. If the `thread` is destroyed while the thread is still running, it will destroy the `thread_data` object the thread's still using via `this_thread`'s pointer.",
      "created_at" : "2016-05-08T15:08:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#issuecomment-217725758",
      "id" : 217725758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8023",
      "updated_at" : "2016-05-08T15:08:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217725758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "body" : "Boost's `thread_group.remove_thread` doesn't destroy the thread object.",
      "created_at" : "2016-05-08T15:44:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#issuecomment-217727730",
      "id" : 217727730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8023",
      "updated_at" : "2016-05-08T15:44:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217727730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62434688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62434688"
         }
      },
      "body" : "The loop spins after timeout. Should this test be `if (ret)`?",
      "commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "created_at" : "2016-05-08T16:45:47Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H\n+#define BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H\n+\n+#include \"interruptible/lock.h\"\n+#include \"interruptible/this_thread.h\"\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <mutex>\n+#include <thread>\n+\n+namespace interruptible\n+{\n+class condition_variable\n+{\n+public:\n+    typedef int_lock<std::unique_lock<std::mutex> > lock_type;\n+\n+    condition_variable() = default;\n+    ~condition_variable() = default;\n+\n+    condition_variable(const condition_variable&) = delete;\n+    condition_variable& operator=(const condition_variable&) = delete;\n+\n+    inline void notify_one() noexcept\n+    {\n+        m_condvar.notify_one();\n+    }\n+\n+    inline void notify_all() noexcept\n+    {\n+        m_condvar.notify_all();\n+    }\n+\n+    template <class Lockable>\n+    inline void wait(Lockable& user_lock)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        m_condvar.wait(lock);\n+        this_thread::interruption_point();\n+    }\n+\n+    template <class Lockable, class Predicate>\n+    void wait(Lockable& user_lock, Predicate pred)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        while (!pred()) {\n+            m_condvar.wait(lock);\n+            this_thread::interruption_point();\n+        }\n+    }\n+\n+    template <class Lockable, class Clock, class Duration>\n+    std::cv_status wait_until(Lockable& user_lock, const std::chrono::time_point<Clock, Duration>& abs_time)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        std::cv_status ret = m_condvar.wait_until(lock, abs_time);\n+        this_thread::interruption_point();\n+        return ret;\n+    }\n+\n+    template <class Lockable, class Clock, class Duration, class Predicate>\n+    bool wait_until(Lockable& user_lock, const std::chrono::time_point<Clock, Duration>& abs_time, Predicate pred)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        while (!pred()) {\n+            bool ret = m_condvar.wait_until(lock, abs_time) == std::cv_status::timeout;\n+            this_thread::interruption_point();\n+            if (!ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62434688",
      "id" : 62434688,
      "original_commit_id" : "33dd6c85b92e1d09048329c31e70141fb0eef42c",
      "original_position" : 77,
      "path" : "src/interruptible/condition_variable.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-08T17:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62434688",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62435221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62435221"
         }
      },
      "body" : "yep!",
      "commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "created_at" : "2016-05-08T17:15:06Z",
      "diff_hunk" : "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H\n+#define BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H\n+\n+#include \"interruptible/lock.h\"\n+#include \"interruptible/this_thread.h\"\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <mutex>\n+#include <thread>\n+\n+namespace interruptible\n+{\n+class condition_variable\n+{\n+public:\n+    typedef int_lock<std::unique_lock<std::mutex> > lock_type;\n+\n+    condition_variable() = default;\n+    ~condition_variable() = default;\n+\n+    condition_variable(const condition_variable&) = delete;\n+    condition_variable& operator=(const condition_variable&) = delete;\n+\n+    inline void notify_one() noexcept\n+    {\n+        m_condvar.notify_one();\n+    }\n+\n+    inline void notify_all() noexcept\n+    {\n+        m_condvar.notify_all();\n+    }\n+\n+    template <class Lockable>\n+    inline void wait(Lockable& user_lock)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        m_condvar.wait(lock);\n+        this_thread::interruption_point();\n+    }\n+\n+    template <class Lockable, class Predicate>\n+    void wait(Lockable& user_lock, Predicate pred)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        while (!pred()) {\n+            m_condvar.wait(lock);\n+            this_thread::interruption_point();\n+        }\n+    }\n+\n+    template <class Lockable, class Clock, class Duration>\n+    std::cv_status wait_until(Lockable& user_lock, const std::chrono::time_point<Clock, Duration>& abs_time)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        std::cv_status ret = m_condvar.wait_until(lock, abs_time);\n+        this_thread::interruption_point();\n+        return ret;\n+    }\n+\n+    template <class Lockable, class Clock, class Duration, class Predicate>\n+    bool wait_until(Lockable& user_lock, const std::chrono::time_point<Clock, Duration>& abs_time, Predicate pred)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        while (!pred()) {\n+            bool ret = m_condvar.wait_until(lock, abs_time) == std::cv_status::timeout;\n+            this_thread::interruption_point();\n+            if (!ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62435221",
      "id" : 62435221,
      "original_commit_id" : "33dd6c85b92e1d09048329c31e70141fb0eef42c",
      "original_position" : 77,
      "path" : "src/interruptible/condition_variable.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-08T17:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62435221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62436328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62436328"
         }
      },
      "body" : "This needs to be at least `memory_order_acquire` so it happens before the notify. Locking the mutex is only an acquire operation and won't act as a suitable fence.",
      "commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "created_at" : "2016-05-08T18:33:54Z",
      "diff_hunk" : "@@ -0,0 +1,90 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+\n+#include <atomic>\n+#include <assert.h>\n+#include <mutex>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data\n+{\n+public:\n+    thread_data() noexcept = default;\n+    thread_data(thread_data&& t) = default;\n+    thread_data& operator=(thread_data&& t) = default;\n+    ~thread_data() = default;\n+\n+    thread_data(const thread_data&) = delete;\n+    thread_data& operator=(const thread_data&) = delete;\n+\n+    template <typename T, typename... Args>\n+    void start_thread(T&& func, Args&&... args)\n+    {\n+        m_thread = std::thread(std::forward<T>(func), std::forward<Args>(args)...);\n+    }\n+\n+    void set_interrupted()\n+    {\n+        m_interrupted.store(true, std::memory_order_relaxed);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62436328",
      "id" : 62436328,
      "original_commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "original_position" : 35,
      "path" : "src/interruptible/thread_data.h",
      "position" : 35,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-08T18:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62436328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "body" : "Concept ACK on moving away from boost for threading.\r\n\r\nSince most threads are in the same `thread_group`, we'd have to switch over almost everything at once, right? Shouldn't be too hard with a drop-in replacement though...",
      "created_at" : "2016-05-08T18:44:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#issuecomment-217738836",
      "id" : 217738836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8023",
      "updated_at" : "2016-05-08T18:44:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217738836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "body" : "The relationship between `int_lock` and `thread_data` does seem a bit funky, especially around the `m_wake_mutex` lock. What about switching the ownership: `unique_lock` in `thread_data`, reference to it in the `int_lock`? `int_lock` could become a generic utility class that takes two lock references and dispatch to both of them in tandem. `condition_variable` would need to `set_cond` after taking the double-lock, but I think it's a clearer division of the concerns.",
      "created_at" : "2016-05-08T19:24:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#issuecomment-217740912",
      "id" : 217740912,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8023",
      "updated_at" : "2016-05-08T19:24:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217740912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62437695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62437695"
         }
      },
      "body" : "Yep, thanks. This and the load should've both been marked for TODO, as I don't understand their interaction with the notify well enough. The orderings seem like pure voodoo :)",
      "commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "created_at" : "2016-05-08T20:18:49Z",
      "diff_hunk" : "@@ -0,0 +1,90 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+\n+#include <atomic>\n+#include <assert.h>\n+#include <mutex>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data\n+{\n+public:\n+    thread_data() noexcept = default;\n+    thread_data(thread_data&& t) = default;\n+    thread_data& operator=(thread_data&& t) = default;\n+    ~thread_data() = default;\n+\n+    thread_data(const thread_data&) = delete;\n+    thread_data& operator=(const thread_data&) = delete;\n+\n+    template <typename T, typename... Args>\n+    void start_thread(T&& func, Args&&... args)\n+    {\n+        m_thread = std::thread(std::forward<T>(func), std::forward<Args>(args)...);\n+    }\n+\n+    void set_interrupted()\n+    {\n+        m_interrupted.store(true, std::memory_order_relaxed);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62437695",
      "id" : 62437695,
      "original_commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "original_position" : 35,
      "path" : "src/interruptible/thread_data.h",
      "position" : 35,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-08T20:18:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62437695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@kazcw The problem with that is that you still have to access the private condvar pointer after grabbing the double-lock, or use a getter that provides unguarded access, so the lock isn't actually providing any protection other than the understanding that the caller will use it to change the pointer (If I'm understanding you correctly). I tried that approach, and it led to the creation of an RAII wrapper holding a ```unique_lock``` and ```condition_variable_any``` which null'd the pointer at destruction. But The concept of grabbing a lock just to pass into another lock to be combined with a 3rd user lock was just too wonky.\r\n\r\nBut by all means, I'd be happy to see something more intuitive than what's here now :)",
      "created_at" : "2016-05-08T20:28:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#issuecomment-217744227",
      "id" : 217744227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8023",
      "updated_at" : "2016-05-08T20:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217744227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62442773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62442773"
         }
      },
      "body" : "Yeah, it's wild stuff. I don't really understand it either.\r\n\r\nThe synchronization effects of `notify` on non-`condition_variable` values aren't specified, so I think we have to be conservative. One approach would be a release fence after the store and an acquire load operation. There may be marginally better-performing options on the store side, but this has the benefit that acquire/release pairs are relatively comprehensible. The load could technically be relaxed and the compiler still \"should\" make sure thread that's doing the loads sees the update \"in a reasonable amount of time\", but the compiler can hoist relaxed loads out of loops if it sees fit and who knows what's a reasonable amount of time to a compiler. Acquire and release are both cheap on x86 and anyway, interrupt points are going to be places that we expect time consuming operations to be happening, not in tight loops.",
      "commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "created_at" : "2016-05-09T01:21:02Z",
      "diff_hunk" : "@@ -0,0 +1,90 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+\n+#include <atomic>\n+#include <assert.h>\n+#include <mutex>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data\n+{\n+public:\n+    thread_data() noexcept = default;\n+    thread_data(thread_data&& t) = default;\n+    thread_data& operator=(thread_data&& t) = default;\n+    ~thread_data() = default;\n+\n+    thread_data(const thread_data&) = delete;\n+    thread_data& operator=(const thread_data&) = delete;\n+\n+    template <typename T, typename... Args>\n+    void start_thread(T&& func, Args&&... args)\n+    {\n+        m_thread = std::thread(std::forward<T>(func), std::forward<Args>(args)...);\n+    }\n+\n+    void set_interrupted()\n+    {\n+        m_interrupted.store(true, std::memory_order_relaxed);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62442773",
      "id" : 62442773,
      "original_commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "original_position" : 35,
      "path" : "src/interruptible/thread_data.h",
      "position" : 35,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-09T01:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62442773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "body" : "I see. Yeah, I don't see any way for `thread_data` to expose a data-race-safe API that doesn't require some funky business. The current approach would work fine.",
      "created_at" : "2016-05-09T01:29:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#issuecomment-217759125",
      "id" : 217759125,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8023",
      "updated_at" : "2016-05-09T01:29:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/217759125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62938901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62938901"
         }
      },
      "body" : "I've been thinking about this... I think it was actually fine as is. The store and the notify don't need to be ordered relative to each other because the release of the lock at the exit of the scope is synchronized-with the acquire of the lock that `wait` must perform before returning.",
      "commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "created_at" : "2016-05-11T22:34:33Z",
      "diff_hunk" : "@@ -0,0 +1,90 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+\n+#include <atomic>\n+#include <assert.h>\n+#include <mutex>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data\n+{\n+public:\n+    thread_data() noexcept = default;\n+    thread_data(thread_data&& t) = default;\n+    thread_data& operator=(thread_data&& t) = default;\n+    ~thread_data() = default;\n+\n+    thread_data(const thread_data&) = delete;\n+    thread_data& operator=(const thread_data&) = delete;\n+\n+    template <typename T, typename... Args>\n+    void start_thread(T&& func, Args&&... args)\n+    {\n+        m_thread = std::thread(std::forward<T>(func), std::forward<Args>(args)...);\n+    }\n+\n+    void set_interrupted()\n+    {\n+        m_interrupted.store(true, std::memory_order_relaxed);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8023#discussion_r62938901",
      "id" : 62938901,
      "original_commit_id" : "64133202a7b927839bd706e6a957e8f43797f4b8",
      "original_position" : 35,
      "path" : "src/interruptible/thread_data.h",
      "position" : 35,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8023",
      "updated_at" : "2016-05-11T22:34:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/62938901",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=3",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   }
]
