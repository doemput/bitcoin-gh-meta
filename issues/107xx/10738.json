{
   "assignee" : null,
   "assignees" : [],
   "body" : "This is a more involved version of #10697, which instead completely gets rid of our nasty AddRef() and Release() in favor of automatic lifetime management.\r\n\r\nSpecial care must be taken, though, to only delete CNodes from a single thread, and to control which thread that is. Eventually, this should move to the message processing thread, so that it's not possible to hit cs_main from the main network thread.\r\n\r\nIn order to do this safely, this PR introduces 2 new generic smart pointer types: strong_ptr and decay_ptr. They provide a functionality that I've wanted for a long time: the ability to safely decay a shared_ptr to a unique_ptr. That sounds somewhat nonsensical at first, but it's useful to be able to make copies of a pointer for a while, stop, wait until only one remains, then delete with guaranteed safety.\r\n\r\nPlease read shared_ptr.h and check out the tests before groaning. I think this is a very cool (and completely safe) pattern.\r\n\r\nThis functionality could potentially be accomplished with a shared_ptr and polling ptr.unique(), but that's inherently racy because a new copy could be created simultaneously. Even moving to a local instance and calling .unique() on that one is not safe, as a weak_ptr could be upgraded simultaneously.\r\n\r\nInstead, a strong_ptr is created which acts like a unique_ptr but allows shared_ptrs to be \"loaned\" out. Once a strong_ptr is moved into a decay_ptr, the strong_ptr is reset and no new loans may be created. The decay_ptr tracks the lifetime of the loaned copies, and knows whether or not they have all expired. This can be queried, with no race concerns, with decay_ptr::decay().\r\n\r\nAdditionally, if the loaned shared_ptrs for some reason outlive the strong_ptr/decay_ptr, they are safely deleted once the last loaned shared_ptr expires. So there is no risk of leaks.\r\n\r\nIn order to make review easier, these changes were made in a few stages:\r\n1. Where possible, make functions agnostic to the type of pointer being used\r\n2. Switch to shared_ptr but keep existing refcounting on top\r\n3. Switch to strong_ptr\r\n4. Drop existing refcounting and now-unnecessary locking.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10738/comments",
   "created_at" : "2017-07-04T00:00:45Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10738/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/10738",
   "id" : 240283546,
   "labels" : [
      {
         "color" : "006b75",
         "default" : false,
         "id" : 98298007,
         "name" : "P2P",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10738/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 10738,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/10738.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10738",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/10738.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "net: drop custom CNode refcounting in favor of smart pointers",
   "updated_at" : "2017-07-04T01:07:53Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10738",
   "user" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/417043?v=3",
      "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
      "followers_url" : "https://api.github.com/users/theuni/followers",
      "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/theuni",
      "id" : 417043,
      "login" : "theuni",
      "organizations_url" : "https://api.github.com/users/theuni/orgs",
      "received_events_url" : "https://api.github.com/users/theuni/received_events",
      "repos_url" : "https://api.github.com/users/theuni/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/theuni"
   }
}
