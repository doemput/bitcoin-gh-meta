[
   {
      "body" : "Should probably be tested on big endian. :)",
      "created_at" : "2017-07-10T18:32:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314194922",
      "id" : 314194922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-07-10T18:32:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314194922",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551394"
         }
      },
      "author_association" : "OWNER",
      "body" : "For ease of implementation, deserialization first happens into a `std::vector<uint64_t>`, and is then converted. This means a temporary is created and allocated, which is an overhead that the old implementation didn't have.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-07-10T22:18:13Z",
      "diff_hunk" : "@@ -12,58 +12,70 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(obj) { READWRITE(obj.tx); }\n+};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n     }\n };\n \n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n+\n class BlockTransactionsRequest {\n public:\n     // A BlockTransactionsRequest message\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << CompactSize(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n+            s << CompactSize(index);\n+        }\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::vector<uint64_t> tmp;\n+        s >> blockhash >> VectorApply<CompactSizeWrapper>(tmp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551394",
      "id" : 126551394,
      "original_commit_id" : "21cf5887e9cc6f8b3521b4748acc167a905655da",
      "original_position" : 98,
      "path" : "src/blockencodings.h",
      "position" : 100,
      "pull_request_review_id" : 49047147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551772"
         }
      },
      "author_association" : "OWNER",
      "body" : "This whole test is somewhat less valuable now, as both cases use `READWRITE`.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-07-10T22:20:41Z",
      "diff_hunk" : "@@ -49,11 +48,10 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n {\n public:\n     using CSerializeMethodsTestSingle::CSerializeMethodsTestSingle;\n-    ADD_SERIALIZE_METHODS;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEMANY(intval, boolval, stringval, FLATDATA(charstrval), txval);\n+    SERIALIZE_METHODS(obj)\n+    {\n+        READWRITE(obj.intval, obj.boolval, obj.stringval, FlatData(obj.charstrval), obj.txval);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126551772",
      "id" : 126551772,
      "original_commit_id" : "21cf5887e9cc6f8b3521b4748acc167a905655da",
      "original_position" : 35,
      "path" : "src/test/serialize_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 49047147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126551772",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552095"
         }
      },
      "author_association" : "OWNER",
      "body" : "This is one of the more involved changes, as it's both splitting the serializer into two versions, and the `Serialize` code no longer modifies `mapValue` in-place (wtf?).",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-07-10T22:22:40Z",
      "diff_hunk" : "@@ -378,42 +376,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n+    template<typename Stream>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552095",
      "id" : 126552095,
      "original_commit_id" : "21cf5887e9cc6f8b3521b4748acc167a905655da",
      "original_position" : 79,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 49047147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552095",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552169"
         }
      },
      "author_association" : "OWNER",
      "body" : "Here is another big change, that avoids modifying `mapValue` and `strAccount` and then later fixing it up before returning (wtf?).",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-07-10T22:23:15Z",
      "diff_hunk" : "@@ -378,42 +376,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(NULL);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        s << AsBaseType<CMerkleTx>(*this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    template<typename Stream>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552169",
      "id" : 126552169,
      "original_commit_id" : "21cf5887e9cc6f8b3521b4748acc167a905655da",
      "original_position" : 117,
      "path" : "src/wallet/wallet.h",
      "position" : 117,
      "pull_request_review_id" : 49047147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552169",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552640"
         }
      },
      "author_association" : "OWNER",
      "body" : "Notice the unusual construction of a template that takes a template as parameter here. See \"Template template parameter\" here: http://en.cppreference.com/w/cpp/language/template_parameters",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-07-10T22:25:58Z",
      "diff_hunk" : "@@ -456,14 +458,104 @@ class LimitedString\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)&string[0], string.size());\n+        s << string;\n     }\n };\n+//! Add a LimitedString wrapper around a const string (identity)\n+template<size_t I> static inline const std::string& LimitedString(const std::string& str) { return str; }\n+//! Add a LimitedString wrapper around a non-const string\n+template<size_t I> static inline LimitedStringWrapper<I> LimitedString(std::string& str) { return LimitedStringWrapper<I>(str); }\n+\n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(S == 2, \"Unsupported BigEndian size\");\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (S == 2) ser_writedata16be(s, m_val);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        if (S == 2) m_val = ser_readdata16be(s);\n+    }\n+};\n+//! Automatically construct a BigEndianWrapper around the argument.\n+template<typename I> static inline BigEndianWrapper<I,sizeof(I)> BigEndian(I& i) { return BigEndianWrapper<I,sizeof(I)>(i); }\n+\n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552640",
      "id" : 126552640,
      "original_commit_id" : "21cf5887e9cc6f8b3521b4748acc167a905655da",
      "original_position" : 302,
      "path" : "src/serialize.h",
      "position" : 402,
      "pull_request_review_id" : 49047147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552640",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552772"
         }
      },
      "author_association" : "OWNER",
      "body" : "The reason for removing the `std::forward` calls here is explained in the commit message (there is no benefit in passing down the rvalue-ness).",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-07-10T22:26:40Z",
      "diff_hunk" : "@@ -898,16 +978,16 @@ void SerializeMany(Stream& s)\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, Arg&& arg)\n+void SerializeMany(Stream& s, const Arg& arg)\n {\n-    ::Serialize(s, std::forward<Arg>(arg));\n+    ::Serialize(s, arg);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r126552772",
      "id" : 126552772,
      "original_commit_id" : "21cf5887e9cc6f8b3521b4748acc167a905655da",
      "original_position" : 381,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 49047147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126552772",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Concept ACK.\r\nBinaries: https://bitcoin.jonasschnelli.ch/build/210 (Currently running on a fresh node)\r\nAgree with @gmaxwell that some BE testing would be good.\r\n\r\nWill code-review soon.",
      "created_at" : "2017-07-11T13:24:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-314442225",
      "id" : 314442225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-07-11T13:24:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314442225",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Made some changes to reduce the size of the overall diff.",
      "created_at" : "2017-07-30T00:20:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-318868567",
      "id" : 318868567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-07-30T00:20:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318868567",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r131536929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131536929"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing periods in comments.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-06T08:12:46Z",
      "diff_hunk" : "@@ -495,11 +494,14 @@ class LimitedString\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)string.data(), string.size());\n+        s << string;\n     }\n };\n+//! Add a LimitedString wrapper around a const string (identity)\n+template<size_t I> static inline const std::string& LimitedString(const std::string& str) { return str; }\n+//! Add a LimitedString wrapper around a non-const string",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r131536929",
      "id" : 131536929,
      "original_commit_id" : "6020efb64a92ace29ad5a4a73648637799d6b44e",
      "original_position" : 38,
      "path" : "src/serialize.h",
      "position" : 340,
      "pull_request_review_id" : 54529753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/131536929",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "body" : "Rebased.",
      "created_at" : "2017-08-15T21:38:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-322597231",
      "id" : 322597231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-08-15T21:38:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322597231",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Rebased.",
      "created_at" : "2017-08-25T19:02:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-325009932",
      "id" : 325009932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-08-25T19:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325009932",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136429372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136429372"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nShould also static assert sizeof(I) <= S, and std::is_unsigned\\<I>::value",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-31T19:39:01Z",
      "diff_hunk" : "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136429372",
      "id" : 136429372,
      "original_commit_id" : "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
      "original_position" : 65,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 59968407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136429372",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nThis seems to support 16 and 32 bit types, not just 16.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-31T19:42:53Z",
      "diff_hunk" : "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430185",
      "id" : 136430185,
      "original_commit_id" : "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
      "original_position" : 56,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 59968407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430185",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430865"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nCan you add a usage note here on when big endian numbers are actually recommended? Is this only for backwards compatibility with CService? It seems like a serialization format that uses a mix of big endian and little endian numbers would be confusing to work with.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-31T19:46:01Z",
      "diff_hunk" : "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136430865",
      "id" : 136430865,
      "original_commit_id" : "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
      "original_position" : 53,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 59968407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136430865",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435274"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Generalize CompactSize wrapper\r\n\r\nProbably should add static assert to check std::is_unsigned\\<I>, or raise exception if n is less than 0.\r\n\r\nCould also check against numeric_limits\\<int64_t\\>::max() at runtime or compile time.\r\n\r\n(It also seems weird, though not relevant to this wrapper, that it is an error to read a compact int greater than MAX_SIZE but not to write one.)",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-31T20:04:43Z",
      "diff_hunk" : "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const {\n+        WriteCompactSize<Stream>(s, n);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435274",
      "id" : 136435274,
      "original_commit_id" : "a090659685519395e2b637bf32ec7353535092b4",
      "original_position" : 35,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 59968407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435274",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435516"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Generalize CompactSize wrapper\"\r\n\r\nIdeally, this would throw an exception if return value is greater than numeric_limits\\<I>::max()",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-31T20:05:45Z",
      "diff_hunk" : "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136435516",
      "id" : 136435516,
      "original_commit_id" : "a090659685519395e2b637bf32ec7353535092b4",
      "original_position" : 28,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 59968407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136435516",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136457586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136457586"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Generalize FlatData wrapper\"\r\n\r\nThough these changes don't make FLATDATA more dangerous than it was previously, the lack of type safety relying on C casts and sizeof here is a little scary. I experimented a little, and it seems this could be cleaned up with some simple changes I posted here: 6ef78bcd83dd6f88362dec29736811b762ad75eb. Could you take a look, and maybe incorporate these into the PR?",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-08-31T21:50:28Z",
      "diff_hunk" : "@@ -446,6 +428,16 @@ class CFlatData\n         s.read(pbegin, pend - pbegin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>((const char*)t.data(), (const char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a non-const vector.\n+template<typename T> static inline FlatRangeWrapper<char> FlatVector(T& t) { return FlatRangeWrapper<char>((char*)t.data(), (char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a const POD and array types.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatDataInner(const T* t, size_t len) { return FlatRangeWrapper<const char>((const char*)t, ((const char*)t) + len); }\n+//! Construct a FlatRange wrapper around a non-const POD and array types.\n+template<typename T> static inline FlatRangeWrapper<char> FlatDataInner(T* t, size_t len) { return FlatRangeWrapper<char>((char*)t, ((char*)t) + len); }\n+//! Helper macro to easily serialize POD types.\n+#define FLATDATA(x) FlatDataInner(&(x), sizeof(x))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136457586",
      "id" : 136457586,
      "original_commit_id" : "2061c50879fc75fbb24dbaf1489f71f24d555077",
      "original_position" : 55,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 59968407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136457586",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493050"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493050"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T03:34:50Z",
      "diff_hunk" : "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493050",
      "id" : 136493050,
      "in_reply_to_id" : 136435516,
      "original_commit_id" : "a090659685519395e2b637bf32ec7353535092b4",
      "original_position" : 28,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60040038,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493050",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493065"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T03:35:00Z",
      "diff_hunk" : "@@ -468,23 +467,27 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s) {\n+        n = ReadCompactSize<Stream>(s);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const {\n+        WriteCompactSize<Stream>(s, n);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493065",
      "id" : 136493065,
      "in_reply_to_id" : 136435274,
      "original_commit_id" : "a090659685519395e2b637bf32ec7353535092b4",
      "original_position" : 35,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60040054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493065",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493075"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T03:35:09Z",
      "diff_hunk" : "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493075",
      "id" : 136493075,
      "in_reply_to_id" : 136430865,
      "original_commit_id" : "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
      "original_position" : 53,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60040068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493075",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493129"
         }
      },
      "author_association" : "OWNER",
      "body" : "I've incorporated part of your changes, but gone further and just added native support for serializing char arrays (without any wrapper). I think this is much cleaner now.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T03:36:07Z",
      "diff_hunk" : "@@ -446,6 +428,16 @@ class CFlatData\n         s.read(pbegin, pend - pbegin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>((const char*)t.data(), (const char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a non-const vector.\n+template<typename T> static inline FlatRangeWrapper<char> FlatVector(T& t) { return FlatRangeWrapper<char>((char*)t.data(), (char*)(t.data() + t.size())); }\n+//! Construct a FlatRange wrapper around a const POD and array types.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatDataInner(const T* t, size_t len) { return FlatRangeWrapper<const char>((const char*)t, ((const char*)t) + len); }\n+//! Construct a FlatRange wrapper around a non-const POD and array types.\n+template<typename T> static inline FlatRangeWrapper<char> FlatDataInner(T* t, size_t len) { return FlatRangeWrapper<char>((char*)t, ((char*)t) + len); }\n+//! Helper macro to easily serialize POD types.\n+#define FLATDATA(x) FlatDataInner(&(x), sizeof(x))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493129",
      "id" : 136493129,
      "in_reply_to_id" : 136457586,
      "original_commit_id" : "2061c50879fc75fbb24dbaf1489f71f24d555077",
      "original_position" : 55,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60040133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493129",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493137"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T03:36:13Z",
      "diff_hunk" : "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493137",
      "id" : 136493137,
      "in_reply_to_id" : 136430185,
      "original_commit_id" : "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
      "original_position" : 56,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60040146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493137",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493144"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T03:36:21Z",
      "diff_hunk" : "@@ -493,9 +515,44 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation.\n+ *\n+ * Onlyy 16-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136493144",
      "id" : 136493144,
      "in_reply_to_id" : 136429372,
      "original_commit_id" : "8dc6fc7cad4fa76544f4651c45063031cae0d5c0",
      "original_position" : 65,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60040153,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136493144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136527772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136527772"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add BigEndian serialization wrapper\"\r\n\r\nWould be good to throw exception if deserialized value is greater than numeric_limits\\<I>::max(). Or alternately, change the `sizeof(I) <= S` requirement to `sizeof(I) == S` to prevent this being possible.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T08:53:15Z",
      "diff_hunk" : "@@ -495,9 +517,48 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation. This is only intended\n+ * to implement serializers that are compatible with existing formats, and\n+ * its use is not recommended for new data structures.\n+ *\n+ * Only 16-bit and 32-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(sizeof(I) <= S, \"BigEndian type exceeds claimed size\");\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");\n+        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (S == 2) ser_writedata16be(s, m_val);\n+        if (S == 4) ser_writedata32be(s, m_val);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        if (S == 2) m_val = ser_readdata16be(s);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136527772",
      "id" : 136527772,
      "original_commit_id" : "00284cb0a69b224304a2046463601f8161e9a918",
      "original_position" : 82,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60079059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136527772",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136529062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136529062"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Generalize CompactSize wrapper\"\r\n\r\nWould be good to throw exception if `m_n` is greater than numeric_limits<uint64_t>::max(). Or alternately, require `numeric_limits<I>::max() < numeric_limits<int64_t>::max()` with static assert.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T08:59:59Z",
      "diff_hunk" : "@@ -470,23 +469,36 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136529062",
      "id" : 136529062,
      "original_commit_id" : "dddd1af7514be05f940eb618b2afa8dbadb9b3c9",
      "original_position" : 44,
      "path" : "src/serialize.h",
      "position" : 295,
      "pull_request_review_id" : 60079059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136529062",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136531179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136531179"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Overhaul FLATDATA\"\r\n\r\nMight be worth splitting this change out into separate commit, or noting in commit message here that that this change is not backwards compatible on platforms where sizeof(bool) is not 1.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T09:11:24Z",
      "diff_hunk" : "@@ -132,7 +132,7 @@ class CSubNet\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n             READWRITE(FLATDATA(netmask));\n-            READWRITE(FLATDATA(valid));\n+            READWRITE(valid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136531179",
      "id" : 136531179,
      "original_commit_id" : "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
      "original_position" : 5,
      "path" : "src/netaddress.h",
      "position" : null,
      "pull_request_review_id" : 60079059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136531179",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136532188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136532188"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Overhaul FLATDATA\"\r\n\r\nProbably more accurate to say \"wrapper for serializing char arrays\". (Though in principle this could work with stream classes with read/write methods not taking char pointers.)",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T09:16:44Z",
      "diff_hunk" : "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136532188",
      "id" : 136532188,
      "original_commit_id" : "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
      "original_position" : 41,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60079059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136532188",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136534994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136534994"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Overhaul FLATDATA\"\r\n\r\nMaybe call it CharVector or CharArray instead of FlatVector. FlatVector is kind of redundant because any vectors should be flat. But also the vector part is limiting because these functions can work for other types (std::array, std::string, SecureString, std::basic_string_view, etc)",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T09:32:15Z",
      "diff_hunk" : "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */\n+template<typename C>\n+class FlatRangeWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    C* m_end;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    char* begin() { return pbegin; }\n-    const char* begin() const { return pbegin; }\n-    char* end() { return pend; }\n-    const char* end() const { return pend; }\n+    FlatRangeWrapper(C* begin, C* end) : m_begin(begin), m_end(end) { }\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write(pbegin, pend - pbegin);\n+        s.write(m_begin, m_end - m_begin);\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read(pbegin, pend - pbegin);\n+        s.read(m_begin, m_end - m_begin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const char vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>(CharCast(t.data()), CharCast(t.data() + t.size())); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136534994",
      "id" : 136534994,
      "original_commit_id" : "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
      "original_position" : 85,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60079059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136534994",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136538430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136538430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Remove old serialization primitives\"\r\n\r\nThere are still two references to ADD_SERIALIZE_METHODS in comments.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T09:46:51Z",
      "diff_hunk" : "@@ -189,22 +170,6 @@ template<typename X> const X&& AsBaseType(const X&& x) { return std::move(x); }\n  */\n #define READWRITEAS(obj, typ) (::SerReadWriteMany(s, ser_action, AsBaseType<typ>(obj)))\n \n-/** \n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members. \n- */\n-#define ADD_SERIALIZE_METHODS                                         \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136538430",
      "id" : 136538430,
      "original_commit_id" : "d04c25740539ab5d8a764fd8cbf713f55e571ec0",
      "original_position" : 43,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136538430",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631456"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T17:53:28Z",
      "diff_hunk" : "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631456",
      "id" : 136631456,
      "in_reply_to_id" : 136532188,
      "original_commit_id" : "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
      "original_position" : 41,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60202506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631456",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631479"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T17:53:37Z",
      "diff_hunk" : "@@ -470,23 +469,36 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631479",
      "id" : 136631479,
      "in_reply_to_id" : 136529062,
      "original_commit_id" : "dddd1af7514be05f940eb618b2afa8dbadb9b3c9",
      "original_position" : 44,
      "path" : "src/serialize.h",
      "position" : 295,
      "pull_request_review_id" : 60202539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631479",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631499"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T17:53:44Z",
      "diff_hunk" : "@@ -495,9 +517,48 @@ class LimitedString\n     }\n };\n \n+/** Serialization wrapper class for big-endian integers.\n+ *\n+ * Use this wrapper around integer types that are stored in memory in native\n+ * byte order, but serialized in big endian notation. This is only intended\n+ * to implement serializers that are compatible with existing formats, and\n+ * its use is not recommended for new data structures.\n+ *\n+ * Only 16-bit and 32-bit types are supported for now.\n+ */\n+template<typename I, size_t S> class BigEndianWrapper\n+{\n+protected:\n+    I& m_val;\n+public:\n+    explicit BigEndianWrapper(I& val) : m_val(val)\n+    {\n+        static_assert(sizeof(I) <= S, \"BigEndian type exceeds claimed size\");\n+        static_assert(S == 2 || S == 4, \"Unsupported BigEndian size\");\n+        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        if (S == 2) ser_writedata16be(s, m_val);\n+        if (S == 4) ser_writedata32be(s, m_val);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        if (S == 2) m_val = ser_readdata16be(s);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631499",
      "id" : 136631499,
      "in_reply_to_id" : 136527772,
      "original_commit_id" : "00284cb0a69b224304a2046463601f8161e9a918",
      "original_position" : 82,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60202565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631499",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631541"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T17:53:51Z",
      "diff_hunk" : "@@ -406,48 +415,36 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing arrays and POD. */\n+template<typename C>\n+class FlatRangeWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    C* m_end;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    char* begin() { return pbegin; }\n-    const char* begin() const { return pbegin; }\n-    char* end() { return pend; }\n-    const char* end() const { return pend; }\n+    FlatRangeWrapper(C* begin, C* end) : m_begin(begin), m_end(end) { }\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write(pbegin, pend - pbegin);\n+        s.write(m_begin, m_end - m_begin);\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read(pbegin, pend - pbegin);\n+        s.read(m_begin, m_end - m_begin);\n     }\n };\n+//! Construct a FlatRange wrapper around a const char vector.\n+template<typename T> static inline const FlatRangeWrapper<const char> FlatVector(const T& t) { return FlatRangeWrapper<const char>(CharCast(t.data()), CharCast(t.data() + t.size())); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631541",
      "id" : 136631541,
      "in_reply_to_id" : 136534994,
      "original_commit_id" : "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
      "original_position" : 85,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60202601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631541",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631558"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T17:53:57Z",
      "diff_hunk" : "@@ -132,7 +132,7 @@ class CSubNet\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n             READWRITE(FLATDATA(netmask));\n-            READWRITE(FLATDATA(valid));\n+            READWRITE(valid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136631558",
      "id" : 136631558,
      "in_reply_to_id" : 136531179,
      "original_commit_id" : "f8c39376a39e0971629dab0c37eac5cc94e0b94e",
      "original_position" : 5,
      "path" : "src/netaddress.h",
      "position" : null,
      "pull_request_review_id" : 60202626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136631558",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136638567"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136638567"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce new serialization macros without casts\"\r\n\r\nIt would be nice if the `SERIALIZE_METHODS` macro took a `class_name` argument. I'd like this so it'd be possible to add deserializing constructors here (like `CTransaction` has), so there could be a uniform way to deserialize objects without assuming they support default construction. But also a `class_name` argument would make the macro more flexible and future proof, so it'd be easy to do things like:\r\n\r\n- Adding stricter type checking (e.g. an `is_same<class_name, remove_const<Type>>` assert in SerializationOps to prevent usage errors or template bloat.\r\n- Logging or debugging with `#class_name`\r\n- Adding static or friend functions that reference `class_name`.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T18:27:41Z",
      "diff_hunk" : "@@ -167,6 +167,28 @@ enum\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(obj)                                                      \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136638567",
      "id" : 136638567,
      "original_commit_id" : "d85bbf9affb8002a48e8319d94c1de2a2d6eb013",
      "original_position" : 11,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136638567",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136639150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136639150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add READWRITEAS, a macro to serialize safely as a different type\"\r\n\r\nMaybe use `//!`",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T18:30:40Z",
      "diff_hunk" : "@@ -148,9 +148,21 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n+// Convert the reference base type to X, without changing constness or reference type.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136639150",
      "id" : 136639150,
      "original_commit_id" : "2d0edd1cfcadd5ccda25c9ea8b5ae7faae88b5f8",
      "original_position" : 4,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136639150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136643231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136643231"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Generalize CompactSize wrapper\"\r\n\r\nMight be good to add `const I& i` overload so it's possible to serialize rvalues.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T18:52:07Z",
      "diff_hunk" : "@@ -470,23 +469,37 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);\n     }\n };\n+//! Automatically construct a CompactSize wrapper around the argument.\n+template<typename I> static inline CompactSizeWrapper<I> COMPACTSIZE(I& i) { return CompactSizeWrapper<I>(i); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136643231",
      "id" : 136643231,
      "original_commit_id" : "08da230f0f351c7a34539e20990ea1fa7b5a96df",
      "original_position" : 49,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136643231",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644028"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Generalize VarInt wrappers\"\r\n\r\nThis might be easier to understand written with overloads instead of rvalue references:\r\n\r\n```\r\ntemplate<typename I> static inline VarIntWrapper<I> VARINT(I& i) { return VarIntWrapper<I>(i); }\r\ntemplate<typename I> static inline VarIntWrapper<const I> VARINT(const I& i) { return VarIntWrapper<const I>(i); }\r\n```\r\n\r\nAlso would make it more consistent with other wrappers.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T18:56:22Z",
      "diff_hunk" : "@@ -450,24 +449,29 @@ class CFlatData\n     }\n };\n \n+/** Serialization wrapper class for integers in VarInt format. */\n template<typename I>\n-class CVarInt\n+class VarIntWrapper\n {\n protected:\n-    I &n;\n+    I &m_n;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit VarIntWrapper(I& n) : m_n(n) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+    void Serialize(Stream &s) const\n+    {\n+        WriteVarInt(s, m_n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+    void Unserialize(Stream& s)\n+    {\n+        m_n = ReadVarInt<Stream,I>(s);\n     }\n };\n+//! Automatically construct a VarInt wrapper around the argument.\n+template<typename I> static inline VarIntWrapper<typename std::remove_reference<I>::type> VARINT(I&& i) { return VarIntWrapper<typename std::remove_reference<I>::type>(i); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644028",
      "id" : 136644028,
      "original_commit_id" : "d013fb285b19a748bbf49e19b6882fa52975ea41",
      "original_position" : 41,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644028",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644775"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Overhaul FLATDATA for char arrays only\"\r\n\r\nConsider dropping this assert. I don't think it accomplishes much, and in principle CharArrayWrapper should work perfectly well with wchar_t, or with any stream object that has happens to have non-`char` read and write methods.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T19:00:25Z",
      "diff_hunk" : "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136644775",
      "id" : 136644775,
      "original_commit_id" : "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
      "original_position" : 64,
      "path" : "src/serialize.h",
      "position" : 205,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136644775",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136648225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136648225"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Support deserializing into temporaries\"\r\n\r\nCould drop this overload entirely. The overload above is sufficient for a base case.\r\n\r\nAlso applies to UnserializeMany below.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T19:21:22Z",
      "diff_hunk" : "@@ -898,16 +898,16 @@ void SerializeMany(Stream& s)\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, Arg&& arg)\n+void SerializeMany(Stream& s, const Arg& arg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136648225",
      "id" : 136648225,
      "original_commit_id" : "a2d870857730dccb171be87313fe20a6baac3dc1",
      "original_position" : 23,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136648225",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136649911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136649911"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Generalize LimitedString wrapper\"\r\n\r\nMaybe use `&m_string[0]` avoid writing to a const pointer.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T19:31:23Z",
      "diff_hunk" : "@@ -519,19 +518,23 @@ class LimitedString\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        m_string.resize(size);\n+        if (size != 0) {\n+            s.read((char*)m_string.data(), size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136649911",
      "id" : 136649911,
      "original_commit_id" : "0b5fd4ad9c28d850f545eab5015e7b9062f51259",
      "original_position" : 36,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136649911",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136653725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136653725"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add custom vector-element serialization wrapper\"\r\n\r\nThis could use a comment. I don't understand it at all. Wouldn't it be simpler and more efficient to just resize and fill the vector once instead of resizing it multiple times?",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T19:55:44Z",
      "diff_hunk" : "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136653725",
      "id" : 136653725,
      "original_commit_id" : "ba4260615daae26ddb0112d8b7b88eab43863660",
      "original_position" : 48,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136653725",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136654732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136654732"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add custom vector-element serialization wrapper\"\r\n\r\nDoesn't this overwrite elements in the front of the vector each time through the while loop?",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T20:01:39Z",
      "diff_hunk" : "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);\n+            if (nMid > nSize) {\n+                nMid = nSize;\n+            }\n+            m_vector.resize(nMid);\n+            for (value_type& x : m_vector) {\n+                s >> W<value_type>(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136654732",
      "id" : 136654732,
      "original_commit_id" : "ba4260615daae26ddb0112d8b7b88eab43863660",
      "original_position" : 54,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136654732",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136655347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136655347"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert blockencodings to new serialization\"\r\n\r\nMaybe move this up closer to TransactionCompressWrapper class",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T20:05:40Z",
      "diff_hunk" : "@@ -12,58 +12,70 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(obj) { READWRITE(obj.tx); }\n+};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n     }\n };\n \n+template<typename T>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136655347",
      "id" : 136655347,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 42,
      "path" : "src/blockencodings.h",
      "position" : null,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136655347",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136660513"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert blockencodings to new serialization\"\r\n\r\nWould you be opposed to adding mutable object access to SERIALIZE_METHODS so Serialize and Unserialize methods don't need to be split up? I could think of a number of ways to do this. Maybe easiest would be to stick a mutable pointer inside ser_action:\r\n\r\n```\r\nSERIALIZE_METHODS(obj) {\r\n  READWRITE(obj.header, obj.nonce, VectorApply<Uint48Wrapper>(obj.shorttxids), obj.prefilledtxn);\r\n  if (ser_action.ForRead()) ser_action.MutableObj()->FillShortTxId();\r\n}\r\n```\r\n\r\nThe pointer would be null when serializing.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-01T20:35:53Z",
      "diff_hunk" : "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513",
      "id" : 136660513,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 214,
      "path" : "src/blockencodings.h",
      "position" : 216,
      "pull_request_review_id" : 60091325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136660513",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683939"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T00:19:26Z",
      "diff_hunk" : "@@ -148,9 +148,21 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n+// Convert the reference base type to X, without changing constness or reference type.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683939",
      "id" : 136683939,
      "in_reply_to_id" : 136639150,
      "original_commit_id" : "2d0edd1cfcadd5ccda25c9ea8b5ae7faae88b5f8",
      "original_position" : 4,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60263104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683943"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done!",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T00:19:33Z",
      "diff_hunk" : "@@ -167,6 +167,28 @@ enum\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(obj)                                                      \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683943",
      "id" : 136683943,
      "in_reply_to_id" : 136638567,
      "original_commit_id" : "d85bbf9affb8002a48e8319d94c1de2a2d6eb013",
      "original_position" : 11,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60263107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683943",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683952"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T00:19:43Z",
      "diff_hunk" : "@@ -898,16 +898,16 @@ void SerializeMany(Stream& s)\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, Arg&& arg)\n+void SerializeMany(Stream& s, const Arg& arg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683952",
      "id" : 136683952,
      "in_reply_to_id" : 136648225,
      "original_commit_id" : "a2d870857730dccb171be87313fe20a6baac3dc1",
      "original_position" : 23,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60263117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683952",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683956"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T00:19:50Z",
      "diff_hunk" : "@@ -519,19 +518,23 @@ class LimitedString\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        m_string.resize(size);\n+        if (size != 0) {\n+            s.read((char*)m_string.data(), size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683956",
      "id" : 136683956,
      "in_reply_to_id" : 136649911,
      "original_commit_id" : "0b5fd4ad9c28d850f545eab5015e7b9062f51259",
      "original_position" : 36,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60263126,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683956",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683982"
         }
      },
      "author_association" : "OWNER",
      "body" : "The problem is that VARINT is called with temporaries as arguments, which is not true for the other ones. Either it's written as 4 cases, or using `std::remove_refence`.\r\n\r\nEDIT: Oh, you're right. An lvalue reference parameter binds to rvalue reference argument, so all good.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T00:20:36Z",
      "diff_hunk" : "@@ -450,24 +449,29 @@ class CFlatData\n     }\n };\n \n+/** Serialization wrapper class for integers in VarInt format. */\n template<typename I>\n-class CVarInt\n+class VarIntWrapper\n {\n protected:\n-    I &n;\n+    I &m_n;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit VarIntWrapper(I& n) : m_n(n) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+    void Serialize(Stream &s) const\n+    {\n+        WriteVarInt(s, m_n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+    void Unserialize(Stream& s)\n+    {\n+        m_n = ReadVarInt<Stream,I>(s);\n     }\n };\n+//! Automatically construct a VarInt wrapper around the argument.\n+template<typename I> static inline VarIntWrapper<typename std::remove_reference<I>::type> VARINT(I&& i) { return VarIntWrapper<typename std::remove_reference<I>::type>(i); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136683982",
      "id" : 136683982,
      "in_reply_to_id" : 136644028,
      "original_commit_id" : "d013fb285b19a748bbf49e19b6882fa52975ea41",
      "original_position" : 41,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60263156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136683982",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690564"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:38:06Z",
      "diff_hunk" : "@@ -450,24 +449,29 @@ class CFlatData\n     }\n };\n \n+/** Serialization wrapper class for integers in VarInt format. */\n template<typename I>\n-class CVarInt\n+class VarIntWrapper\n {\n protected:\n-    I &n;\n+    I &m_n;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit VarIntWrapper(I& n) : m_n(n) { }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,I>(s, n);\n+    void Serialize(Stream &s) const\n+    {\n+        WriteVarInt(s, m_n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,I>(s);\n+    void Unserialize(Stream& s)\n+    {\n+        m_n = ReadVarInt<Stream,I>(s);\n     }\n };\n+//! Automatically construct a VarInt wrapper around the argument.\n+template<typename I> static inline VarIntWrapper<typename std::remove_reference<I>::type> VARINT(I&& i) { return VarIntWrapper<typename std::remove_reference<I>::type>(i); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690564",
      "id" : 136690564,
      "in_reply_to_id" : 136644028,
      "original_commit_id" : "d013fb285b19a748bbf49e19b6882fa52975ea41",
      "original_position" : 41,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60270049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690564",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690565"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:38:14Z",
      "diff_hunk" : "@@ -189,22 +170,6 @@ template<typename X> const X&& AsBaseType(const X&& x) { return std::move(x); }\n  */\n #define READWRITEAS(obj, typ) (::SerReadWriteMany(s, ser_action, AsBaseType<typ>(obj)))\n \n-/** \n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members. \n- */\n-#define ADD_SERIALIZE_METHODS                                         \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690565",
      "id" : 136690565,
      "in_reply_to_id" : 136538430,
      "original_commit_id" : "d04c25740539ab5d8a764fd8cbf713f55e571ec0",
      "original_position" : 43,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60270051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690572"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done. The code was also totally broken, so I've rewritten it.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:38:38Z",
      "diff_hunk" : "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690572",
      "id" : 136690572,
      "in_reply_to_id" : 136653725,
      "original_commit_id" : "ba4260615daae26ddb0112d8b7b88eab43863660",
      "original_position" : 48,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60270058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690572",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690575"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690575"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done (and for other wrappers).",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:38:53Z",
      "diff_hunk" : "@@ -470,23 +469,37 @@ class CVarInt\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+template<typename I>\n+class CompactSizeWrapper\n {\n protected:\n-    uint64_t &n;\n+    I &m_n;\n public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CompactSizeWrapper(I& n) : m_n(n)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+    }\n \n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+        }\n+        m_n = n;\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize<Stream>(s, m_n);\n     }\n };\n+//! Automatically construct a CompactSize wrapper around the argument.\n+template<typename I> static inline CompactSizeWrapper<I> COMPACTSIZE(I& i) { return CompactSizeWrapper<I>(i); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690575",
      "id" : 136690575,
      "in_reply_to_id" : 136643231,
      "original_commit_id" : "08da230f0f351c7a34539e20990ea1fa7b5a96df",
      "original_position" : 49,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60270061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690575",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690581"
         }
      },
      "author_association" : "OWNER",
      "body" : "Yes, this was bogus. Thanks for pointing that out; fixed by rewriting,",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:39:14Z",
      "diff_hunk" : "@@ -573,6 +573,64 @@ template<typename I> class BigEndianWrapper\n //! Automatically construct a BigEndianWrapper around the argument.\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        unsigned int nSize = ReadCompactSize(s);\n+        unsigned int nMid = 0;\n+        while (nMid < nSize) {\n+            nMid += 5000000 / sizeof(value_type);\n+            if (nMid > nSize) {\n+                nMid = nSize;\n+            }\n+            m_vector.resize(nMid);\n+            for (value_type& x : m_vector) {\n+                s >> W<value_type>(x);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690581",
      "id" : 136690581,
      "in_reply_to_id" : 136654732,
      "original_commit_id" : "ba4260615daae26ddb0112d8b7b88eab43863660",
      "original_position" : 54,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60270068,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690581",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690588"
         }
      },
      "author_association" : "OWNER",
      "body" : "I'm not sure that wchar_t has a well-defined in-memory representation.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:39:37Z",
      "diff_hunk" : "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690588",
      "id" : 136690588,
      "in_reply_to_id" : 136644775,
      "original_commit_id" : "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
      "original_position" : 64,
      "path" : "src/serialize.h",
      "position" : 205,
      "pull_request_review_id" : 60270075,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690588",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690591"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-02T06:39:50Z",
      "diff_hunk" : "@@ -12,58 +12,70 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(obj) { READWRITE(obj.tx); }\n+};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n     }\n };\n \n+template<typename T>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136690591",
      "id" : 136690591,
      "in_reply_to_id" : 136655347,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 42,
      "path" : "src/blockencodings.h",
      "position" : null,
      "pull_request_review_id" : 60270077,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136690591",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136707627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136707627"
         }
      },
      "author_association" : "OWNER",
      "body" : "That's a neat trick. It seems a bit ugly to need to fake returning a mutable object nullptr. I have an alternative, but I'm not sure it's any better.:\r\n\r\n```c++\r\ntemplate <typename T, typename F>\r\nvoid IfUnserializer(T& obj, CSerActionUnserialize ser_action, const F& fn) { fn(obj); }\r\ntemplate <typename T, typename F>\r\nvoid IfUnserialize(const T& obj, CSerActionSerialize ser_action, const F& fn) {}\r\n#define IF_UNSERIALIZE(typ, obj, code) (::IfUnserialize<typ>(obj, ser_action, [&](typ& obj)code))\r\n```\r\n\r\nWhich you'd then invoke using\r\n\r\n```c++\r\n     SERIALIZE_METHODS(SomeType, obj)\r\n     {\r\n          READWRITE(obj.member);\r\n          IF_UNSERIALIZE(SomeType, obj, {obj.FillShortTxid();});\r\n     }\r\n```\r\n",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-03T03:29:17Z",
      "diff_hunk" : "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136707627",
      "id" : 136707627,
      "in_reply_to_id" : 136660513,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 214,
      "path" : "src/blockencodings.h",
      "position" : 216,
      "pull_request_review_id" : 60287367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136707627",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137061927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137061927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I'm not sure that wchar_t has a well-defined in-memory representation.\r\n\r\nSince this class is no longer casting any pointers, I don't think that's a problem. Existing c++ type checking will make sure pointers passed to stream read & write methods are compatible, so I don't think there is a reason for this class to be interjecting and adding extra type requirements.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T17:29:22Z",
      "diff_hunk" : "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137061927",
      "id" : 137061927,
      "in_reply_to_id" : 136644775,
      "original_commit_id" : "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
      "original_position" : 64,
      "path" : "src/serialize.h",
      "position" : 205,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137061927",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137093656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137093656"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add custom vector-element serialization wrapper\"\r\n\r\nMaybe declare 5MiB as a constant next to to MAX_SIZE, since it serves a similar purpose.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T19:40:02Z",
      "diff_hunk" : "@@ -577,6 +577,66 @@ template<typename I> class BigEndianWrapper\n template<typename I> static inline BigEndianWrapper<const I> BigEndian(const I& i) { return BigEndianWrapper<const I>(i); }\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        size_t deserialized = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + 5000000 / sizeof(value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137093656",
      "id" : 137093656,
      "original_commit_id" : "954826ce26573edf67701055d21ef4b5714d4504",
      "original_position" : 52,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137093656",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137102968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137102968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert blockencodings to new serialization\"\r\n\r\nSimilar to previous suggestions, could throw here if m_int is >= 2**48 or less than 0 (or static assert is_unsigned).",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T20:19:14Z",
      "diff_hunk" : "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137102968",
      "id" : 137102968,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 33,
      "path" : "src/blockencodings.h",
      "position" : 37,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137102968",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137106687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137106687"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert blockencodings to new serialization\"\r\n\r\nCould throw if deserialized value is greater than numeric_limits\\<I>::max(), or static_assert that I max is big enough to hold any 48 bit value.\r\n",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T20:35:22Z",
      "diff_hunk" : "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137106687",
      "id" : 137106687,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 40,
      "path" : "src/blockencodings.h",
      "position" : 44,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137106687",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137111254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137111254"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thread https://github.com/bitcoin/bitcoin/pull/10785#discussion_r136660513\r\n\r\nThat looks good to me. I was actually going to suggest this same approach before I noticed there was a ser_action.ForRead method. ser_action could also have a method returning a reference instead of a pointer. I think any approach that would avoid duplicating serialization & deserialization would be good, though.\r\n\r\nFor IF_UNSERIALIZE, maybe consider getting of all the obj macro arguments:\r\n\r\n```c++\r\n     SERIALIZE_METHODS(SomeType)\r\n     {\r\n          READWRITE(obj.member);\r\n          IF_UNSERIALIZE({obj.FillShortTxid();});\r\n     }\r\n```\r\n\r\nI think the obj arguments maybe help make serialize methods resemble normal methods, but don't actually add real utility.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T20:54:31Z",
      "diff_hunk" : "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137111254",
      "id" : 137111254,
      "in_reply_to_id" : 136660513,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 214,
      "path" : "src/blockencodings.h",
      "position" : 216,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137111254",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137125177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137125177"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert blockencodings to new serialization\"\r\n\r\nWould be good to assert or throw if indexes[i] <= indices[i-1].",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T21:55:25Z",
      "diff_hunk" : "@@ -32,38 +50,31 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << COMPACTSIZE(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137125177",
      "id" : 137125177,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 86,
      "path" : "src/blockencodings.h",
      "position" : 91,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137125177",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137139951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139951"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe mention in commit message if behavior is changing here. I guess the limit is higher now.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T23:28:24Z",
      "diff_hunk" : "@@ -18,81 +18,49 @@\n  *  zero. This is be compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+template<typename C>\n+class TxInUndoWrapper\n {\n-    const Coin* txout;\n+    C& txout;\n \n public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n-        if (txout->nHeight > 0) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1 : 0)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n+        ::Serialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n+        ::Unserialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n+    explicit TxInUndoWrapper(C& coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, REF(TxInUndoSerializer(&prevout)));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137139951",
      "id" : 137139951,
      "original_commit_id" : "62f7eb2925532ef844374e593d43002253eb5bab",
      "original_position" : 82,
      "path" : "src/undo.h",
      "position" : 82,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137139951",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137140260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137140260"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert Qt to new serialization\"\r\n\r\nI guess this is another place that could use IF_UNSERIALIZE if you decide to go this route.\r\n",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T23:30:46Z",
      "diff_hunk" : "@@ -24,19 +24,19 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         unsigned int nDate = date.toTime_t();\n+        s << this->nVersion << id << nDate << recipient;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        unsigned int nDate;\n+        s >> this->nVersion >> id >> nDate >> recipient;\n+        date = QDateTime::fromTime_t(nDate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137140260",
      "id" : 137140260,
      "original_commit_id" : "30d7e934d6cef080744c39f93958d51e2a63af2b",
      "original_position" : 27,
      "path" : "src/qt/recentrequeststablemodel.h",
      "position" : null,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137140260",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137141562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141562"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert Qt to new serialization\"\r\n\r\nIt seems like if there were serialization wrappers from QString and proto types, the serialize and deserialize methods could be combined again.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T23:41:57Z",
      "diff_hunk" : "@@ -62,35 +62,32 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n         std::string sPaymentRequest;\n-        if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n+        if (paymentRequest.IsInitialized()) {\n             paymentRequest.SerializeToString(&sPaymentRequest);\n+        }\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        s << this->nVersion << sAddress << sLabel << amount << sMessage << sPaymentRequest << sAuthenticatedMerchant;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n-\n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            if (!sPaymentRequest.empty())\n-                paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string sAddress, sLabel, sMessage, sPaymentRequest, sAuthenticatedMerchant;\n+        s >> this->nVersion >> sAddress >> sLabel >> amount >> sMessage >> sPaymentRequest >> sAuthenticatedMerchant;\n+        address = QString::fromStdString(sAddress);\n+        label = QString::fromStdString(sLabel);\n+        message = QString::fromStdString(sMessage);\n+        if (!sPaymentRequest.empty()) {\n+            paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n         }\n+        authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137141562",
      "id" : 137141562,
      "original_commit_id" : "30d7e934d6cef080744c39f93958d51e2a63af2b",
      "original_position" : 50,
      "path" : "src/qt/walletmodel.h",
      "position" : null,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137141562",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143490"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert wallet/walletdb/crypter to new serialization\r\n\r\nMaybe another place to use IF_UNSERIALIZE. Or maybe there could be a wrapper that ignores ios_base errors on deserialization.\r\n",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-05T23:58:14Z",
      "diff_hunk" : "@@ -111,27 +111,30 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n         }\n-        else {\n-            READWRITE(fInternal);\n+        s << nTime << vchPubKey << fInternal;\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        int nVersion;\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        s >> nTime >> vchPubKey;\n+        try {\n+            s >> fInternal;\n+        } catch (std::ios_base::failure&) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143490",
      "id" : 137143490,
      "original_commit_id" : "651bb85d380babb5904f802103216a22f1f9d402",
      "original_position" : 43,
      "path" : "src/wallet/wallet.h",
      "position" : 43,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143490",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143998"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could use std::move here.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T00:02:43Z",
      "diff_hunk" : "@@ -381,42 +379,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(nullptr);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        s << AsBaseType<CMerkleTx>(*this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        Init(nullptr);\n+        char fSpent;\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+        s >> AsBaseType<CMerkleTx>(*this);\n+        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n+        s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n+\n+        strFromAccount = mapValue[\"fromaccount\"];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137143998",
      "id" : 137143998,
      "original_commit_id" : "651bb85d380babb5904f802103216a22f1f9d402",
      "original_position" : 129,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 60681544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137143998",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137353871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137353871"
         }
      },
      "author_association" : "OWNER",
      "body" : "@ryanofsky I don't see how to get rid of passing in the type to IF_UNSERIALIZE.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T18:34:39Z",
      "diff_hunk" : "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137353871",
      "id" : 137353871,
      "in_reply_to_id" : 136660513,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 214,
      "path" : "src/blockencodings.h",
      "position" : 216,
      "pull_request_review_id" : 61009641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137353871",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354186"
         }
      },
      "author_association" : "OWNER",
      "body" : "I think I'm talking about something else.\r\n\r\nIf you serialize a 16-bit wchar_t on a big endian system using this class, the characters will be serialized using 2 big endian bytes. If you then deserialize it on a little endian system, you won't get the same wchar_t values back. ",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T18:36:04Z",
      "diff_hunk" : "@@ -406,48 +415,38 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n #define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))\n \n-/** \n- * Wrapper for serializing arrays and POD.\n- */\n-class CFlatData\n+/** Wrapper for serializing ranges of chars. */\n+template<typename C>\n+class CharArrayWrapper\n {\n protected:\n-    char* pbegin;\n-    char* pend;\n+    C* m_begin;\n+    size_t m_size;\n public:\n-    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n-    template <class T, class TAl>\n-    explicit CFlatData(std::vector<T,TAl> &v)\n-    {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n-    }\n-    template <unsigned int N, typename T, typename S, typename D>\n-    explicit CFlatData(prevector<N, T, S, D> &v)\n+    CharArrayWrapper(C* begin, size_t size) : m_begin(begin), m_size(size)\n     {\n-        pbegin = (char*)v.data();\n-        pend = (char*)(v.data() + v.size());\n+        static_assert(sizeof(C) == 1, \"CharArrayWrapper only works for char types\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354186",
      "id" : 137354186,
      "in_reply_to_id" : 136644775,
      "original_commit_id" : "f6063a02801d19c2b41d8fbf0092cffd892c7f53",
      "original_position" : 64,
      "path" : "src/serialize.h",
      "position" : 205,
      "pull_request_review_id" : 61010033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354186",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354251"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354251"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T18:36:21Z",
      "diff_hunk" : "@@ -577,6 +577,66 @@ template<typename I> class BigEndianWrapper\n template<typename I> static inline BigEndianWrapper<const I> BigEndian(const I& i) { return BigEndianWrapper<const I>(i); }\n template<typename I> static inline BigEndianWrapper<I> BigEndian(I& i) { return BigEndianWrapper<I>(i); }\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * For const-correctness, the W parameter is a template itself.\n+ * It is instantiated as W<const V::value_type> when serializing, and as\n+ * W<V::value_type> when deserializing.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(VectorApply<VarIntWrapper>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, iteration, and resize method that behave like vectors.\n+ */\n+template<template <typename> class W, typename V> class VectorApplyWrapper\n+{\n+protected:\n+    typedef typename V::value_type value_type;\n+    V& m_vector;\n+public:\n+    explicit VectorApplyWrapper(V& vector) : m_vector(vector) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        WriteCompactSize(s, m_vector.size());\n+        for (const value_type& x : m_vector) {\n+            s << W<const value_type>(x);\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        m_vector.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        size_t deserialized = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + 5000000 / sizeof(value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354251",
      "id" : 137354251,
      "in_reply_to_id" : 137093656,
      "original_commit_id" : "954826ce26573edf67701055d21ef4b5714d4504",
      "original_position" : 52,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 61010115,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354251",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354337"
         }
      },
      "author_association" : "OWNER",
      "body" : "Added static assert; I'd like to avoid runtime impact.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T18:36:42Z",
      "diff_hunk" : "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354337",
      "id" : 137354337,
      "in_reply_to_id" : 137102968,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 33,
      "path" : "src/blockencodings.h",
      "position" : 37,
      "pull_request_review_id" : 61010222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354337",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354381"
         }
      },
      "author_association" : "OWNER",
      "body" : "Added static assert.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T18:36:52Z",
      "diff_hunk" : "@@ -12,17 +12,35 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n+template<typename T>\n+struct TransactionCompressWrapper {\n private:\n-    CTransactionRef& tx;\n+    T& tx;\n public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n-\n-    ADD_SERIALIZE_METHODS;\n+    explicit TransactionCompressWrapper(T& txIn) : tx(txIn) {}\n+    SERIALIZE_METHODS(TransactionCompressWrapper, obj) { READWRITE(obj.tx); }\n+};\n+template<typename T>\n+static inline TransactionCompressWrapper<T> TransactionCompressor(T& tx) { return TransactionCompressWrapper<T>(tx); }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n+template<typename I>\n+struct Uint48Wrapper {\n+private:\n+    I& m_int;\n+public:\n+    Uint48Wrapper(I& i) : m_int(i) {}\n+    template <typename Stream> void Serialize(Stream& s) const\n+    {\n+        uint32_t lsb = m_int & 0xffffffff;\n+        uint16_t msb = (m_int >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n+    template <typename Stream> void Unserialize(Stream& s)\n+    {\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        m_int = (uint64_t(msb) << 32) | uint64_t(lsb);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354381",
      "id" : 137354381,
      "in_reply_to_id" : 137106687,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 40,
      "path" : "src/blockencodings.h",
      "position" : 44,
      "pull_request_review_id" : 61010271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354381",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354421"
         }
      },
      "author_association" : "OWNER",
      "body" : "I'd rather avoid runtime overhead.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T18:37:03Z",
      "diff_hunk" : "@@ -32,38 +50,31 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << COMPACTSIZE(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137354421",
      "id" : 137354421,
      "in_reply_to_id" : 137125177,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 86,
      "path" : "src/blockencodings.h",
      "position" : 91,
      "pull_request_review_id" : 61010324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137354421",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137366161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137366161"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In that case, could add a comment like \"this code will produce an invalid serialization if indices are not increasing.\"",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T19:24:44Z",
      "diff_hunk" : "@@ -32,38 +50,31 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << blockhash;\n         uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            uint16_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n+        s << COMPACTSIZE(indexes_size);\n+        for (size_t i = 0; i < indexes.size(); i++) {\n+            const uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137366161",
      "id" : 137366161,
      "in_reply_to_id" : 137125177,
      "original_commit_id" : "97250236a0b43822cf0d5b17f3889b83ea7019c3",
      "original_position" : 86,
      "path" : "src/blockencodings.h",
      "position" : 91,
      "pull_request_review_id" : 61023743,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137366161",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137367021"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137367021"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky I don't see how to get rid of passing in the type to IF_UNSERIALIZE.\r\n\r\nYou could pass it as a template parameter to CSerActionSerialize / CSerActionUnserialize and access it through ser_action.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-06T19:28:46Z",
      "diff_hunk" : "@@ -154,40 +156,18 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << VectorApply<Uint48Wrapper>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> VectorApply<Uint48Wrapper>(shorttxids) >> prefilledtxn;\n+        FillShortTxIDSelector();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137367021",
      "id" : 137367021,
      "in_reply_to_id" : 136660513,
      "original_commit_id" : "d64f7fb78da1d2f1fdc3e7046a28740e1276a235",
      "original_position" : 214,
      "path" : "src/blockencodings.h",
      "position" : 216,
      "pull_request_review_id" : 61023743,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137367021",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Big concept ACK, happy to get rid of FLATDATA and similar ugly macros. This is a lot to review/test though, and reasonably high-risk.",
      "created_at" : "2017-09-06T22:12:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-327626776",
      "id" : 327626776,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-09-06T22:12:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327626776",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137454932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137454932"
         }
      },
      "author_association" : "OWNER",
      "body" : "It could use slightly more memory when deserializing an otherwise invalid object, but that shouldn't change behaviour otherwise - if the number of transaction undo objects doesn't match the number of transaction in the block, it's invalid anyway.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-07T06:25:13Z",
      "diff_hunk" : "@@ -18,81 +18,49 @@\n  *  zero. This is be compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+template<typename C>\n+class TxInUndoWrapper\n {\n-    const Coin* txout;\n+    C& txout;\n \n public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1 : 0)));\n-        if (txout->nHeight > 0) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1 : 0)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n+        ::Serialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n+        ::Unserialize(s, TxOutCompress(txout.out));\n     }\n \n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n+    explicit TxInUndoWrapper(C& coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, REF(TxInUndoSerializer(&prevout)));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137454932",
      "id" : 137454932,
      "in_reply_to_id" : 137139951,
      "original_commit_id" : "62f7eb2925532ef844374e593d43002253eb5bab",
      "original_position" : 82,
      "path" : "src/undo.h",
      "position" : 82,
      "pull_request_review_id" : 61122835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137454932",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137629183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137629183"
         }
      },
      "author_association" : "OWNER",
      "body" : "Introduced a wrapper for QDateTime instead.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-07T19:05:11Z",
      "diff_hunk" : "@@ -24,19 +24,19 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         unsigned int nDate = date.toTime_t();\n+        s << this->nVersion << id << nDate << recipient;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        unsigned int nDate;\n+        s >> this->nVersion >> id >> nDate >> recipient;\n+        date = QDateTime::fromTime_t(nDate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137629183",
      "id" : 137629183,
      "in_reply_to_id" : 137140260,
      "original_commit_id" : "30d7e934d6cef080744c39f93958d51e2a63af2b",
      "original_position" : 27,
      "path" : "src/qt/recentrequeststablemodel.h",
      "position" : null,
      "pull_request_review_id" : 61321775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137629183",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630099"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-07T19:09:15Z",
      "diff_hunk" : "@@ -381,42 +379,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(nullptr);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        s << AsBaseType<CMerkleTx>(*this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n-\n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        Init(nullptr);\n+        char fSpent;\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+        s >> AsBaseType<CMerkleTx>(*this);\n+        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n+        s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n+\n+        strFromAccount = mapValue[\"fromaccount\"];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630099",
      "id" : 137630099,
      "in_reply_to_id" : 137143998,
      "original_commit_id" : "651bb85d380babb5904f802103216a22f1f9d402",
      "original_position" : 129,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 61322875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630099",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630189"
         }
      },
      "author_association" : "OWNER",
      "body" : "Done using wrappers for QString and proto.",
      "commit_id" : "7f023ecb0614e0a06938384f50a9823b83232f8a",
      "created_at" : "2017-09-07T19:09:43Z",
      "diff_hunk" : "@@ -62,35 +62,32 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n         std::string sPaymentRequest;\n-        if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n+        if (paymentRequest.IsInitialized()) {\n             paymentRequest.SerializeToString(&sPaymentRequest);\n+        }\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        s << this->nVersion << sAddress << sLabel << amount << sMessage << sPaymentRequest << sAuthenticatedMerchant;\n+    }\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n-\n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            if (!sPaymentRequest.empty())\n-                paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        std::string sAddress, sLabel, sMessage, sPaymentRequest, sAuthenticatedMerchant;\n+        s >> this->nVersion >> sAddress >> sLabel >> amount >> sMessage >> sPaymentRequest >> sAuthenticatedMerchant;\n+        address = QString::fromStdString(sAddress);\n+        label = QString::fromStdString(sLabel);\n+        message = QString::fromStdString(sMessage);\n+        if (!sPaymentRequest.empty()) {\n+            paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n         }\n+        authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#discussion_r137630189",
      "id" : 137630189,
      "in_reply_to_id" : 137141562,
      "original_commit_id" : "30d7e934d6cef080744c39f93958d51e2a63af2b",
      "original_position" : 50,
      "path" : "src/qt/walletmodel.h",
      "position" : null,
      "pull_request_review_id" : 61322988,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10785",
      "updated_at" : "2017-09-08T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137630189",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Rebased.",
      "created_at" : "2017-10-20T11:27:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10785#issuecomment-338180383",
      "id" : 338180383,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10785",
      "updated_at" : "2017-10-20T11:27:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338180383",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
