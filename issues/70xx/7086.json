{
   "assignee" : null,
   "body" : "https://wiki.openssl.org/index.php/Manual:BN_new(3)\r\n\r\nhttps://www.openssl.org/docs/man1.0.2/crypto/bn.html\r\n  void BN_init(BIGNUM *);\r\n\r\nhttps://www.openssl.org/docs/manmaster/crypto/bn.html\r\n   BIGNUM *BN_new(void);\r\n```\r\n  CXX      test/test_test_bitcoin-scriptnum_tests.o\r\nIn file included from test/scriptnum_tests.cpp:5:0:\r\ntest/bignum.h:26:24: error: invalid use of incomplete type Ã¢ÂÂBIGNUM {aka struct bignum_st}Ã¢ÂÂ\r\n class CBigNum : public BIGNUM\r\n                        ^\r\nIn file included from /usr/local/ssl/include/openssl/bn.h:132:0,\r\n                 from test/bignum.h:16,\r\n                 from test/scriptnum_tests.cpp:5:\r\n/usr/local/ssl/include/openssl/ossl_typ.h:120:16: error: forward declaration of Ã¢ÂÂBIGNUM {aka struct bignum_st}Ã¢ÂÂ\r\n typedef struct bignum_st BIGNUM;\r\n                ^\r\nIn file included from test/scriptnum_tests.cpp:5:0:\r\ntest/bignum.h: In constructor Ã¢ÂÂCBigNum::CBigNum()Ã¢ÂÂ:\r\ntest/bignum.h:31:21: error: Ã¢ÂÂBN_initÃ¢ÂÂ was not declared in this scope\r\n         BN_init(this);\r\n                     ^\r\ntest/bignum.h: In copy constructor Ã¢ÂÂCBigNum::CBigNum(const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:36:21: error: Ã¢ÂÂBN_initÃ¢ÂÂ was not declared in this scope\r\n         BN_init(this);\r\n                     ^\r\ntest/bignum.h:37:30: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂBIGNUM* BN_copy(BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n         if (!BN_copy(this, &b))\r\n                              ^\r\ntest/bignum.h:39:31: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂvoid BN_clear_free(BIGNUM*)Ã¢ÂÂ\r\n             BN_clear_free(this);\r\n                               ^\r\ntest/bignum.h: In member function Ã¢ÂÂCBigNum& CBigNum::operator=(const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:46:30: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂBIGNUM* BN_copy(BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n         if (!BN_copy(this, &b))\r\n                              ^\r\ntest/bignum.h: In destructor Ã¢ÂÂCBigNum::~CBigNum()Ã¢ÂÂ:\r\ntest/bignum.h:53:27: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂvoid BN_clear_free(BIGNUM*)Ã¢ÂÂ\r\n         BN_clear_free(this);\r\n                           ^\r\ntest/bignum.h: In constructor Ã¢ÂÂCBigNum::CBigNum(long long int)Ã¢ÂÂ:\r\ntest/bignum.h:56:49: error: Ã¢ÂÂBN_initÃ¢ÂÂ was not declared in this scope\r\n     CBigNum(long long n)          { BN_init(this); setint64(n); }\r\n                                                 ^\r\ntest/bignum.h: In constructor Ã¢ÂÂCBigNum::CBigNum(const std::vector<unsigned char>&)Ã¢ÂÂ:\r\ntest/bignum.h:60:21: error: Ã¢ÂÂBN_initÃ¢ÂÂ was not declared in this scope\r\n         BN_init(this);\r\n                     ^\r\ntest/bignum.h: In member function Ã¢ÂÂint CBigNum::getint() constÃ¢ÂÂ:\r\ntest/bignum.h:66:38: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂunsigned int BN_get_word(const BIGNUM*)Ã¢ÂÂ\r\n         BN_ULONG n = BN_get_word(this);\r\n                                      ^\r\ntest/bignum.h:67:33: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_is_negative(const BIGNUM*)Ã¢ÂÂ\r\n         if (!BN_is_negative(this))\r\n                                 ^\r\nIn file included from test/scriptnum_tests.cpp:5:0:\r\ntest/bignum.h: In member function Ã¢ÂÂvoid CBigNum::setint64(int64_t)Ã¢ÂÂ:\r\ntest/bignum.h:115:37: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ3Ã¢ÂÂ to Ã¢ÂÂBIGNUM* BN_mpi2bn(const unsigned char*, int, BIGNUM*)Ã¢ÂÂ\r\n         BN_mpi2bn(pch, p - pch, this);\r\n                                     ^\r\ntest/bignum.h: In member function Ã¢ÂÂvoid CBigNum::setvch(const std::vector<unsigned char>&)Ã¢ÂÂ:\r\ntest/bignum.h:130:46: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ3Ã¢ÂÂ to Ã¢ÂÂBIGNUM* BN_mpi2bn(const unsigned char*, int, BIGNUM*)Ã¢ÂÂ\r\n         BN_mpi2bn(&vch2[0], vch2.size(), this);\r\n                                              ^\r\ntest/bignum.h: In member function Ã¢ÂÂstd::vector<unsigned char> CBigNum::getvch() constÃ¢ÂÂ:\r\ntest/bignum.h:135:50: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_bn2mpi(const BIGNUM*, unsigned char*)Ã¢ÂÂ\r\n         unsigned int nSize = BN_bn2mpi(this, NULL);\r\n                                                  ^\r\ntest/bignum.h:139:32: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_bn2mpi(const BIGNUM*, unsigned char*)Ã¢ÂÂ\r\n         BN_bn2mpi(this, &vch[0]);\r\n                                ^\r\ntest/bignum.h: In function Ã¢ÂÂconst CBigNum operator+(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h: In member function Ã¢ÂÂvoid CBigNum::setint64(int64_t)Ã¢ÂÂ:\r\ntest/bignum.h:115:37: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ3Ã¢ÂÂ to Ã¢ÂÂBIGNUM* BN_mpi2bn(const unsigned char*, int, BIGNUM*)Ã¢ÂÂ\r\n         BN_mpi2bn(pch, p - pch, this);\r\n                                     ^\r\ntest/bignum.h: In member function Ã¢ÂÂvoid CBigNum::setvch(const std::vector<unsigned char>&)Ã¢ÂÂ:\r\ntest/bignum.h:130:46: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ3Ã¢ÂÂ to Ã¢ÂÂBIGNUM* BN_mpi2bn(const unsigned char*, int, BIGNUM*)Ã¢ÂÂ\r\n         BN_mpi2bn(&vch2[0], vch2.size(), this);\r\n                                              ^\r\ntest/bignum.h: In member function Ã¢ÂÂstd::vector<unsigned char> CBigNum::getvch() constÃ¢ÂÂ:\r\ntest/bignum.h:135:50: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_bn2mpi(const BIGNUM*, unsigned char*)Ã¢ÂÂ\r\n         unsigned int nSize = BN_bn2mpi(this, NULL);\r\n                                                  ^\r\ntest/bignum.h:139:32: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_bn2mpi(const BIGNUM*, unsigned char*)Ã¢ÂÂ\r\n         BN_bn2mpi(this, &vch[0]);\r\n                                ^\r\ntest/bignum.h: In function Ã¢ÂÂconst CBigNum operator+(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:153:27: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_add(BIGNUM*, const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n     if (!BN_add(&r, &a, &b))\r\n                           ^\r\ntest/bignum.h: In function Ã¢ÂÂconst CBigNum operator-(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:161:27: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂBIGNUM* {aka bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_sub(BIGNUM*, const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n     if (!BN_sub(&r, &a, &b))\r\n                           ^\r\ntest/bignum.h: In function Ã¢ÂÂconst CBigNum operator-(const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:169:43: error: cannot convert Ã¢ÂÂCBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_is_negative(const BIGNUM*)Ã¢ÂÂ\r\n     BN_set_negative(&r, !BN_is_negative(&r));\r\n                                           ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator==(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:173:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator!=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:174:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator<=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:175:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator>=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:176:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator<(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:177:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator>(const CBigNum&, const CBigNum&)Ã¢ÂÂ:test/bignum.h:174:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator<=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:175:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator>=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:176:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator<(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:177:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }\r\n                                                                                   ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator>(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:178:83: error: cannot convert Ã¢ÂÂconst CBigNum*Ã¢ÂÂ to Ã¢ÂÂconst BIGNUM* {aka const bignum_st*}Ã¢ÂÂ for argument Ã¢ÂÂ1Ã¢ÂÂ to Ã¢ÂÂint BN_cmp(const BIGNUM*, const BIGNUM*)Ã¢ÂÂ\r\n inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }\r\n                                                                                   ^\r\nIn file included from test/scriptnum_tests.cpp:5:0:\r\ntest/bignum.h: In member function Ã¢ÂÂint CBigNum::getint() constÃ¢ÂÂ:\r\ntest/bignum.h:71:5: warning: control reaches end of non-void function [-Wreturn-type]\r\n     }\r\n     ^\r\nIn file included from test/scriptnum_tests.cpp:5:0:\r\ntest/bignum.h: In function Ã¢ÂÂbool operator==(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:173:92: warning: control reaches end of non-void function [-Wreturn-type]\r\n inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }\r\n                                                                                            ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator!=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:174:92: warning: control reaches end of non-void function [-Wreturn-type]\r\n inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }\r\n                                                                                            ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator<(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:177:91: warning: control reaches end of non-void function [-Wreturn-type]\r\n inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }\r\n                                                                                           ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator>(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:178:91: warning: control reaches end of non-void function [-Wreturn-type]\r\n inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }\r\n                                                                                           ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator>=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:176:92: warning: control reaches end of non-void function [-Wreturn-type]\r\n inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }\r\n                                                                                            ^\r\ntest/bignum.h: In function Ã¢ÂÂbool operator<=(const CBigNum&, const CBigNum&)Ã¢ÂÂ:\r\ntest/bignum.h:175:92: warning: control reaches end of non-void function [-Wreturn-type]\r\n inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }\r\n                                                                                            ^\r\nAt global scope:\r\ncc1plus: warning: unrecognized command line option \"-Wno-self-assign\"\r\nMakefile:6494: recipe for target 'test/test_test_bitcoin-scriptnum_tests.o' failed\r\nmake[2]: *** [test/test_test_bitcoin-scriptnum_tests.o] Error 1\r\n```",
   "closed_at" : "2015-11-27T13:17:04Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 26,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7086/comments",
   "created_at" : "2015-11-24T02:52:57Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7086/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/7086",
   "id" : 118521428,
   "labels" : [
      {
         "color" : "d4c5f9",
         "name" : "Tests",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7086/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 7086,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "OpenSSL 1.1 - tests* BIGNUM - BN_init -> BN_new",
   "updated_at" : "2015-12-02T00:51:18Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7086",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/4075850?v=3",
      "events_url" : "https://api.github.com/users/vindicatorr/events{/privacy}",
      "followers_url" : "https://api.github.com/users/vindicatorr/followers",
      "following_url" : "https://api.github.com/users/vindicatorr/following{/other_user}",
      "gists_url" : "https://api.github.com/users/vindicatorr/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/vindicatorr",
      "id" : 4075850,
      "login" : "vindicatorr",
      "organizations_url" : "https://api.github.com/users/vindicatorr/orgs",
      "received_events_url" : "https://api.github.com/users/vindicatorr/received_events",
      "repos_url" : "https://api.github.com/users/vindicatorr/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/vindicatorr/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/vindicatorr/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/vindicatorr"
   }
}
