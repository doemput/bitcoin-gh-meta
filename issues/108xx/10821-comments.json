[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127395978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127395978"
         }
      },
      "body" : "I'd prefer to do this setup explicitly during initialization; this also avoids having to use an atomic pointer, which seems overkill (why would it ever change during runtime?) and may be inefficient on some platforms.\r\n(also the detection might be more involved on some platforms, so it's better for clarity to drive it from an init function instead of magically at first call).",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-14T06:57:56Z",
      "diff_hunk" : "@@ -43,91 +52,122 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    uint32_t s0 = s[0], s1 = s[1], s2 = s[2], s3 = s[3], s4 = s[4], s5 = s[5], s6 = s[6], s7 = s[7];\n+\n+    while (blocks--) {\n+        uint32_t a = s0, b = s1, c = s2, d = s3, e = s4, f = s5, g = s6, h = s7;\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s0 += a;\n+        s1 += b;\n+        s2 += c;\n+        s3 += d;\n+        s4 += e;\n+        s5 += f;\n+        s6 += g;\n+        s7 += h;\n+        chunk += 64;\n+    }\n+\n+    s[0] = s0; s[1] = s1; s[2] = s2; s[3] = s3; s[4] = s4; s[5] = s5; s[6] = s6; s[7] = s7;\n }\n \n } // namespace sha256\n+\n+void Dispatch(uint32_t*, const unsigned char*, size_t);\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+std::atomic<TransformType> TransformPointer{Dispatch};\n+\n+#define Transform(a,b,c) ((TransformPointer.load(std::memory_order_relaxed))(a,b,c))\n+\n+void Dispatch(uint32_t* a, const unsigned char* b, size_t c)\n+{\n+    TransformType fn = sha256::Transform;\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 20) & 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127395978",
      "id" : 127395978,
      "original_commit_id" : "e486f5774d79e01fe806a766d57b7346e80f4cc8",
      "original_position" : 212,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 49975988,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127395978",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Even with inline assembly, there are build complications unfortunately. The compile will fail if the target doesn't support it..",
      "created_at" : "2017-07-14T07:15:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315289223",
      "id" : 315289223,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T07:15:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315289223",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr There are system macros to test whether you're compiling for x86_64 or not.",
      "created_at" : "2017-07-14T08:36:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315304464",
      "id" : 315304464,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T08:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315304464",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "You said *almost* every x86_64 CPU. Are we going to drop support for the outliers then?",
      "created_at" : "2017-07-14T09:34:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315316466",
      "id" : 315316466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T09:34:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315316466",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "One of the travis builds obviously has an issue with it too:\r\n`crypto/sha256_sse42.cpp:42:9: error: inline assembly requires more registers than available`",
      "created_at" : "2017-07-14T10:13:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315324518",
      "id" : 315324518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T10:13:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315324518",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127451919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127451919"
         }
      },
      "body" : "We also have the option of using the ifunc attribute, supported on recent binutils with at least gcc and clang.\r\n\r\nThough it's non-standard and afaik elf-specific, it's worth considering where possible.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-14T13:07:06Z",
      "diff_hunk" : "@@ -43,91 +52,122 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    uint32_t s0 = s[0], s1 = s[1], s2 = s[2], s3 = s[3], s4 = s[4], s5 = s[5], s6 = s[6], s7 = s[7];\n+\n+    while (blocks--) {\n+        uint32_t a = s0, b = s1, c = s2, d = s3, e = s4, f = s5, g = s6, h = s7;\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s0 += a;\n+        s1 += b;\n+        s2 += c;\n+        s3 += d;\n+        s4 += e;\n+        s5 += f;\n+        s6 += g;\n+        s7 += h;\n+        chunk += 64;\n+    }\n+\n+    s[0] = s0; s[1] = s1; s[2] = s2; s[3] = s3; s[4] = s4; s[5] = s5; s[6] = s6; s[7] = s7;\n }\n \n } // namespace sha256\n+\n+void Dispatch(uint32_t*, const unsigned char*, size_t);\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+std::atomic<TransformType> TransformPointer{Dispatch};\n+\n+#define Transform(a,b,c) ((TransformPointer.load(std::memory_order_relaxed))(a,b,c))\n+\n+void Dispatch(uint32_t* a, const unsigned char* b, size_t c)\n+{\n+    TransformType fn = sha256::Transform;\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 20) & 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127451919",
      "id" : 127451919,
      "original_commit_id" : "e486f5774d79e01fe806a766d57b7346e80f4cc8",
      "original_position" : 212,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 50040497,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127451919",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "The clang/osx build succeeds when -fomit-frame-pointer is used. I don't speak enough asm to know if a register can be freed up.",
      "created_at" : "2017-07-14T16:11:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315400196",
      "id" : 315400196,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T16:11:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315400196",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "> Even with inline assembly, there are build complications unfortunately. The compile will fail if the target doesn't support it..\r\n\r\nNo it won't-- these files are compiled without -msse4.2 already.  The only thing required is that its x86_64, which the build tests for. ",
      "created_at" : "2017-07-14T16:20:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315402227",
      "id" : 315402227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T16:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315402227",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@luke-jr There is runtime detection to see if the CPU supports the extension. The only requirement is that the target is x86_64.",
      "created_at" : "2017-07-14T18:24:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315431876",
      "id" : 315431876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T18:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315431876",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Gitian OSX build is broken (https://bitcoin.jonasschnelli.ch/build/216):\r\n\r\n```\r\nGenerated test/data/base58_keys_invalid.json.h\r\ncrypto/sha256_sse42.cpp:42:9: error: inline assembly requires more registers than available\r\n        \"shl    $0x6,%2;\"\r\n        ^\r\n1 error generated.\r\n```\r\nNo problem on Win/ ~~OSX~~ÃÂ Linux",
      "created_at" : "2017-07-14T19:11:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315443570",
      "id" : 315443570,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T19:16:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315443570",
      "user" : {
         "avatar_url" : "https://avatars7.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli @theuni figured it out - clang isn't compiling with `-fomit-frame-pointer`, and thus there is one fewer register available. Unfortunately, omitting the frame pointer still makes this code not work...",
      "created_at" : "2017-07-14T19:41:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315449667",
      "id" : 315449667,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T19:41:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315449667",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Updated the code to use one fewer register. The original YASM code used the `dx` register for two purposes, which I had separated out into two separate registers. They're merged now.",
      "created_at" : "2017-07-14T22:11:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315480292",
      "id" : 315480292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-14T22:12:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315480292",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127567007"
         }
      },
      "body" : "We're gonna have to do *something* to meet this condition, though it doesnt appear we'd have to do much.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-14T23:28:35Z",
      "diff_hunk" : "@@ -0,0 +1,1504 @@\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+\n+namespace sha256_sse42\n+{\n+/** This implements a SHA256 multi-block transform using sse 4.2 instructions.\n+ *\n+ *  It is a translation to gcc extended asm syntax from the YASM source code\n+ *  provided at the bottom of this file.\n+ */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n+{\n+    static const uint32_t K256[] alignas(16) = {\n+        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n+        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n+        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n+        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n+        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n+        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n+        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n+        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n+        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n+        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n+        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n+        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n+        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n+        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n+        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n+        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n+    };\n+    static const uint32_t FLIP_MASK[] alignas(16) = {0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f};\n+    static const uint32_t SHUF_00BA[] alignas(16) = {0x03020100, 0x0b0a0908, 0xffffffff, 0xffffffff};\n+    static const uint32_t SHUF_DC00[] alignas(16) = {0xffffffff, 0xffffffff, 0x03020100, 0x0b0a0908};\n+    uint32_t a, b, c, d, f, g, h, y0, y1, y2;\n+    uint64_t tbl;\n+    uint64_t inp_end, inp;\n+    uint32_t xfer[4] alignas(16);\n+\n+    __asm__ __volatile__(\n+        \"shl    $0x6,%2;\"\n+        \"je     done_hash_%=;\"\n+        \"add    %1,%2;\"\n+        \"mov    %2,%14;\"\n+        \"mov    (%0),%3;\"\n+        \"mov    0x4(%0),%4;\"\n+        \"mov    0x8(%0),%5;\"\n+        \"mov    0xc(%0),%6;\"\n+        \"mov    0x10(%0),%k2;\"\n+        \"mov    0x14(%0),%7;\"\n+        \"mov    0x18(%0),%8;\"\n+        \"mov    0x1c(%0),%9;\"\n+        \"movdqa %18,%%xmm12;\"\n+        \"movdqa %19,%%xmm10;\"\n+        \"movdqa %20,%%xmm11;\"\n+\n+        \"loop0_%=:\"\n+        \"lea    %17,%13;\"\n+        \"movdqu (%1),%%xmm4;\"\n+        \"pshufb %%xmm12,%%xmm4;\"\n+        \"movdqu 0x10(%1),%%xmm5;\"\n+        \"pshufb %%xmm12,%%xmm5;\"\n+        \"movdqu 0x20(%1),%%xmm6;\"\n+        \"pshufb %%xmm12,%%xmm6;\"\n+        \"movdqu 0x30(%1),%%xmm7;\"\n+        \"pshufb %%xmm12,%%xmm7;\"\n+        \"mov    %1,%15;\"\n+        \"mov    $3,%1;\"\n+\n+        \"loop1_%=:\"\n+        \"movdqa 0x0(%13),%%xmm9;\"\n+        \"paddd  %%xmm4,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm7,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm5,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm4,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm7,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm4;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm4;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm4;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm4;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm4;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x10(%13),%%xmm9;\"\n+        \"paddd  %%xmm5,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm4,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm6,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm5,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm4,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm5;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm5;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm5;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm5;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm5;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa 0x20(%13),%%xmm9;\"\n+        \"paddd  %%xmm6,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm5,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm7,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm6,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm5,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm6;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm6;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm6;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm6;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm6;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x30(%13),%%xmm9;\"\n+        \"paddd  %%xmm7,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"add    $0x40,%13;\"\n+        \"movdqa %%xmm6,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm4,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm7,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm6,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm7;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm7;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm7;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm7;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm7;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    loop1_%=;\"\n+        \"mov    $0x2,%1;\"\n+\n+        \"loop2_%=:\"\n+        \"paddd  0x0(%13),%%xmm4;\"\n+        \"movdqa %%xmm4,%16;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %7,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %8,%12;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %k2,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"mov    %6,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %9,%11;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %k2,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %6,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %7,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"mov    %5,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %8,%11;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %5,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %5,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %6,%12;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %4,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"paddd  0x10(%13),%%xmm5;\"\n+        \"movdqa %%xmm5,%16;\"\n+        \"add    $0x20,%13;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %4,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %5,%12;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %3,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"mov    %9,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %6,%11;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %3,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %9,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %4,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"mov    %8,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %5,%11;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %3,%12;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %8,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %3,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %8,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %9,%12;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %7,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa %%xmm6,%%xmm4;\"\n+        \"movdqa %%xmm7,%%xmm5;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    loop2_%=;\"\n+        \"add    (%0),%3;\"\n+        \"mov    %3,(%0);\"\n+        \"add    0x4(%0),%4;\"\n+        \"mov    %4,0x4(%0);\"\n+        \"add    0x8(%0),%5;\"\n+        \"mov    %5,0x8(%0);\"\n+        \"add    0xc(%0),%6;\"\n+        \"mov    %6,0xc(%0);\"\n+        \"add    0x10(%0),%k2;\"\n+        \"mov    %k2,0x10(%0);\"\n+        \"add    0x14(%0),%7;\"\n+        \"mov    %7,0x14(%0);\"\n+        \"add    0x18(%0),%8;\"\n+        \"mov    %8,0x18(%0);\"\n+        \"add    0x1c(%0),%9;\"\n+        \"mov    %9,0x1c(%0);\"\n+        \"mov    %15,%1;\"\n+        \"add    $0x40,%1;\"\n+        \"cmp    %14,%1;\"\n+        \"jne    loop0_%=;\"\n+\n+        \"done_hash_%=:\"\n+\n+        : \"+r\"(s), \"+r\"(chunk), \"+r\"(blocks), \"=r\"(a), \"=r\"(b), \"=r\"(c), \"=r\"(d), /* e = chunk */ \"=r\"(f), \"=r\"(g), \"=r\"(h), \"=r\"(y0), \"=r\"(y1), \"=r\"(y2), \"=r\"(tbl), \"+m\"(inp_end), \"+m\"(inp), \"+m\"(xfer)\n+        : \"m\"(K256), \"m\"(FLIP_MASK), \"m\"(SHUF_00BA), \"m\"(SHUF_DC00)\n+        : \"cc\", \"memory\", \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\", \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\"\n+   );\n+}\n+}\n+\n+/*\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+; Copyright (c) 2012, Intel Corporation \n+; \n+; All rights reserved. \n+; \n+; Redistribution and use in source and binary forms, with or without\n+; modification, are permitted provided that the following conditions are\n+; met: \n+; \n+; * Redistributions of source code must retain the above copyright\n+;   notice, this list of conditions and the following disclaimer.  \n+; \n+; * Redistributions in binary form must reproduce the above copyright\n+;   notice, this list of conditions and the following disclaimer in the\n+;   documentation and/or other materials provided with the\n+;   distribution. \n+; \n+; * Neither the name of the Intel Corporation nor the names of its",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567007",
      "id" : 127567007,
      "original_commit_id" : "dc1fa8410c5e116e93ee69c472639b505c351ad3",
      "original_position" : 975,
      "path" : "src/crypto/sha256_sse42.cpp",
      "position" : null,
      "pull_request_review_id" : 50172120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127567007",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127567433"
         }
      },
      "body" : "This is the standard three clause BSD license, it is GPL and whatnot compatible. The source code to Bitcoin, which contains this notice, is part of the \"documentation and/or other materials\" we provide.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-14T23:33:36Z",
      "diff_hunk" : "@@ -0,0 +1,1504 @@\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+\n+namespace sha256_sse42\n+{\n+/** This implements a SHA256 multi-block transform using sse 4.2 instructions.\n+ *\n+ *  It is a translation to gcc extended asm syntax from the YASM source code\n+ *  provided at the bottom of this file.\n+ */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n+{\n+    static const uint32_t K256[] alignas(16) = {\n+        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n+        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n+        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n+        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n+        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n+        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n+        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n+        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n+        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n+        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n+        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n+        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n+        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n+        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n+        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n+        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n+    };\n+    static const uint32_t FLIP_MASK[] alignas(16) = {0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f};\n+    static const uint32_t SHUF_00BA[] alignas(16) = {0x03020100, 0x0b0a0908, 0xffffffff, 0xffffffff};\n+    static const uint32_t SHUF_DC00[] alignas(16) = {0xffffffff, 0xffffffff, 0x03020100, 0x0b0a0908};\n+    uint32_t a, b, c, d, f, g, h, y0, y1, y2;\n+    uint64_t tbl;\n+    uint64_t inp_end, inp;\n+    uint32_t xfer[4] alignas(16);\n+\n+    __asm__ __volatile__(\n+        \"shl    $0x6,%2;\"\n+        \"je     done_hash_%=;\"\n+        \"add    %1,%2;\"\n+        \"mov    %2,%14;\"\n+        \"mov    (%0),%3;\"\n+        \"mov    0x4(%0),%4;\"\n+        \"mov    0x8(%0),%5;\"\n+        \"mov    0xc(%0),%6;\"\n+        \"mov    0x10(%0),%k2;\"\n+        \"mov    0x14(%0),%7;\"\n+        \"mov    0x18(%0),%8;\"\n+        \"mov    0x1c(%0),%9;\"\n+        \"movdqa %18,%%xmm12;\"\n+        \"movdqa %19,%%xmm10;\"\n+        \"movdqa %20,%%xmm11;\"\n+\n+        \"loop0_%=:\"\n+        \"lea    %17,%13;\"\n+        \"movdqu (%1),%%xmm4;\"\n+        \"pshufb %%xmm12,%%xmm4;\"\n+        \"movdqu 0x10(%1),%%xmm5;\"\n+        \"pshufb %%xmm12,%%xmm5;\"\n+        \"movdqu 0x20(%1),%%xmm6;\"\n+        \"pshufb %%xmm12,%%xmm6;\"\n+        \"movdqu 0x30(%1),%%xmm7;\"\n+        \"pshufb %%xmm12,%%xmm7;\"\n+        \"mov    %1,%15;\"\n+        \"mov    $3,%1;\"\n+\n+        \"loop1_%=:\"\n+        \"movdqa 0x0(%13),%%xmm9;\"\n+        \"paddd  %%xmm4,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm7,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm5,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm4,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm7,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm4;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm4;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm4;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm4;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm4;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x10(%13),%%xmm9;\"\n+        \"paddd  %%xmm5,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm4,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm6,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm5,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm4,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm5;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm5;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm5;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm5;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm5;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa 0x20(%13),%%xmm9;\"\n+        \"paddd  %%xmm6,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm5,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm7,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm6,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm5,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm6;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm6;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm6;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm6;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm6;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x30(%13),%%xmm9;\"\n+        \"paddd  %%xmm7,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"add    $0x40,%13;\"\n+        \"movdqa %%xmm6,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm4,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm7,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm6,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm7;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm7;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm7;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm7;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm7;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    loop1_%=;\"\n+        \"mov    $0x2,%1;\"\n+\n+        \"loop2_%=:\"\n+        \"paddd  0x0(%13),%%xmm4;\"\n+        \"movdqa %%xmm4,%16;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %7,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %8,%12;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %k2,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"mov    %6,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %9,%11;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %k2,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %6,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %7,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"mov    %5,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %8,%11;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %5,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %5,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %6,%12;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %4,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"paddd  0x10(%13),%%xmm5;\"\n+        \"movdqa %%xmm5,%16;\"\n+        \"add    $0x20,%13;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %4,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %5,%12;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %3,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"mov    %9,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %6,%11;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %3,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %9,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %4,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"mov    %8,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %5,%11;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %3,%12;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %8,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %3,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %8,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %9,%12;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %7,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa %%xmm6,%%xmm4;\"\n+        \"movdqa %%xmm7,%%xmm5;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    loop2_%=;\"\n+        \"add    (%0),%3;\"\n+        \"mov    %3,(%0);\"\n+        \"add    0x4(%0),%4;\"\n+        \"mov    %4,0x4(%0);\"\n+        \"add    0x8(%0),%5;\"\n+        \"mov    %5,0x8(%0);\"\n+        \"add    0xc(%0),%6;\"\n+        \"mov    %6,0xc(%0);\"\n+        \"add    0x10(%0),%k2;\"\n+        \"mov    %k2,0x10(%0);\"\n+        \"add    0x14(%0),%7;\"\n+        \"mov    %7,0x14(%0);\"\n+        \"add    0x18(%0),%8;\"\n+        \"mov    %8,0x18(%0);\"\n+        \"add    0x1c(%0),%9;\"\n+        \"mov    %9,0x1c(%0);\"\n+        \"mov    %15,%1;\"\n+        \"add    $0x40,%1;\"\n+        \"cmp    %14,%1;\"\n+        \"jne    loop0_%=;\"\n+\n+        \"done_hash_%=:\"\n+\n+        : \"+r\"(s), \"+r\"(chunk), \"+r\"(blocks), \"=r\"(a), \"=r\"(b), \"=r\"(c), \"=r\"(d), /* e = chunk */ \"=r\"(f), \"=r\"(g), \"=r\"(h), \"=r\"(y0), \"=r\"(y1), \"=r\"(y2), \"=r\"(tbl), \"+m\"(inp_end), \"+m\"(inp), \"+m\"(xfer)\n+        : \"m\"(K256), \"m\"(FLIP_MASK), \"m\"(SHUF_00BA), \"m\"(SHUF_DC00)\n+        : \"cc\", \"memory\", \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\", \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\"\n+   );\n+}\n+}\n+\n+/*\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+; Copyright (c) 2012, Intel Corporation \n+; \n+; All rights reserved. \n+; \n+; Redistribution and use in source and binary forms, with or without\n+; modification, are permitted provided that the following conditions are\n+; met: \n+; \n+; * Redistributions of source code must retain the above copyright\n+;   notice, this list of conditions and the following disclaimer.  \n+; \n+; * Redistributions in binary form must reproduce the above copyright\n+;   notice, this list of conditions and the following disclaimer in the\n+;   documentation and/or other materials provided with the\n+;   distribution. \n+; \n+; * Neither the name of the Intel Corporation nor the names of its",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567433",
      "id" : 127567433,
      "original_commit_id" : "dc1fa8410c5e116e93ee69c472639b505c351ad3",
      "original_position" : 975,
      "path" : "src/crypto/sha256_sse42.cpp",
      "position" : null,
      "pull_request_review_id" : 50172570,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127567433",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127567734"
         }
      },
      "body" : "We ship sans-source all the time? I figured we'd just put a \"contains softare copyright Intel\" in the --help output or a README somewhere.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-14T23:37:07Z",
      "diff_hunk" : "@@ -0,0 +1,1504 @@\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+\n+namespace sha256_sse42\n+{\n+/** This implements a SHA256 multi-block transform using sse 4.2 instructions.\n+ *\n+ *  It is a translation to gcc extended asm syntax from the YASM source code\n+ *  provided at the bottom of this file.\n+ */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n+{\n+    static const uint32_t K256[] alignas(16) = {\n+        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n+        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n+        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n+        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n+        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n+        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n+        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n+        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n+        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n+        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n+        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n+        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n+        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n+        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n+        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n+        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n+    };\n+    static const uint32_t FLIP_MASK[] alignas(16) = {0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f};\n+    static const uint32_t SHUF_00BA[] alignas(16) = {0x03020100, 0x0b0a0908, 0xffffffff, 0xffffffff};\n+    static const uint32_t SHUF_DC00[] alignas(16) = {0xffffffff, 0xffffffff, 0x03020100, 0x0b0a0908};\n+    uint32_t a, b, c, d, f, g, h, y0, y1, y2;\n+    uint64_t tbl;\n+    uint64_t inp_end, inp;\n+    uint32_t xfer[4] alignas(16);\n+\n+    __asm__ __volatile__(\n+        \"shl    $0x6,%2;\"\n+        \"je     done_hash_%=;\"\n+        \"add    %1,%2;\"\n+        \"mov    %2,%14;\"\n+        \"mov    (%0),%3;\"\n+        \"mov    0x4(%0),%4;\"\n+        \"mov    0x8(%0),%5;\"\n+        \"mov    0xc(%0),%6;\"\n+        \"mov    0x10(%0),%k2;\"\n+        \"mov    0x14(%0),%7;\"\n+        \"mov    0x18(%0),%8;\"\n+        \"mov    0x1c(%0),%9;\"\n+        \"movdqa %18,%%xmm12;\"\n+        \"movdqa %19,%%xmm10;\"\n+        \"movdqa %20,%%xmm11;\"\n+\n+        \"loop0_%=:\"\n+        \"lea    %17,%13;\"\n+        \"movdqu (%1),%%xmm4;\"\n+        \"pshufb %%xmm12,%%xmm4;\"\n+        \"movdqu 0x10(%1),%%xmm5;\"\n+        \"pshufb %%xmm12,%%xmm5;\"\n+        \"movdqu 0x20(%1),%%xmm6;\"\n+        \"pshufb %%xmm12,%%xmm6;\"\n+        \"movdqu 0x30(%1),%%xmm7;\"\n+        \"pshufb %%xmm12,%%xmm7;\"\n+        \"mov    %1,%15;\"\n+        \"mov    $3,%1;\"\n+\n+        \"loop1_%=:\"\n+        \"movdqa 0x0(%13),%%xmm9;\"\n+        \"paddd  %%xmm4,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm7,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm5,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm4,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm7,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm4;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm4;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm4;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm4;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm4;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x10(%13),%%xmm9;\"\n+        \"paddd  %%xmm5,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm4,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm6,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm5,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm4,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm5;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm5;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm5;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm5;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm5;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa 0x20(%13),%%xmm9;\"\n+        \"paddd  %%xmm6,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"movdqa %%xmm5,%%xmm0;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"palignr $0x4,%%xmm4,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"mov    %7,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm7,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"xor    %8,%12;\"\n+        \"paddd  %%xmm6,%%xmm0;\"\n+        \"xor    %k2,%10;\"\n+        \"and    %k2,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm6,%%xmm1;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %6,%10;\"\n+        \"mov    %9,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %6,%10;\"\n+        \"mov    %k2,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %6,%10;\"\n+        \"and    %6,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %9,%11;\"\n+        \"xor    %7,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"pshufd $0xfa,%%xmm5,%%xmm2;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %5,%10;\"\n+        \"mov    %8,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %k2,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %5,%10;\"\n+        \"and    %5,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %8,%11;\"\n+        \"xor    %k2,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"movdqa %%xmm2,%%xmm6;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %4,%10;\"\n+        \"mov    %5,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %7,%11;\"\n+        \"xor    %6,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %4,%10;\"\n+        \"and    %4,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm6;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm6;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"pshufb %%xmm11,%%xmm6;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"paddd  %%xmm0,%%xmm6;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"movdqa 0x30(%13),%%xmm9;\"\n+        \"paddd  %%xmm7,%%xmm9;\"\n+        \"movdqa %%xmm9,%16;\"\n+        \"add    $0x40,%13;\"\n+        \"movdqa %%xmm6,%%xmm0;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"palignr $0x4,%%xmm5,%%xmm0;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %3,%10;\"\n+        \"mov    %4,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"movdqa %%xmm4,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"xor    %5,%12;\"\n+        \"paddd  %%xmm7,%%xmm0;\"\n+        \"xor    %3,%10;\"\n+        \"and    %3,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"palignr $0x4,%%xmm7,%%xmm1;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"movdqa %%xmm1,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    %16,%12;\"\n+        \"movdqa %%xmm1,%%xmm3;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"pslld  $0x19,%%xmm1;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0x7,%%xmm2;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"por    %%xmm2,%%xmm1;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"movdqa %%xmm3,%%xmm2;\"\n+        \"mov    %9,%10;\"\n+        \"mov    %6,%11;\"\n+        \"movdqa %%xmm3,%%xmm8;\"\n+        \"ror    $0xe,%10;\"\n+        \"xor    %9,%10;\"\n+        \"mov    %3,%12;\"\n+        \"ror    $0x9,%11;\"\n+        \"pslld  $0xe,%%xmm3;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x12,%%xmm2;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %9,%10;\"\n+        \"and    %9,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm1;\"\n+        \"xor    %6,%11;\"\n+        \"xor    %4,%12;\"\n+        \"psrld  $0x3,%%xmm8;\"\n+        \"add    %10,%12;\"\n+        \"add    4+%16,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"pxor   %%xmm2,%%xmm1;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"pxor   %%xmm8,%%xmm1;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"pshufd $0xfa,%%xmm6,%%xmm2;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"paddd  %%xmm1,%%xmm0;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %8,%10;\"\n+        \"mov    %5,%11;\"\n+        \"ror    $0xe,%10;\"\n+        \"movdqa %%xmm2,%%xmm8;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %3,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %8,%10;\"\n+        \"and    %8,%12;\"\n+        \"psrld  $0xa,%%xmm8;\"\n+        \"ror    $0xb,%11;\"\n+        \"xor    %5,%11;\"\n+        \"xor    %3,%12;\"\n+        \"ror    $0x6,%10;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm8;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"pshufb %%xmm10,%%xmm8;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"paddd  %%xmm8,%%xmm0;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"pshufd $0x50,%%xmm0,%%xmm2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"movdqa %%xmm2,%%xmm3;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"movdqa %%xmm2,%%xmm7;\"\n+        \"ror    $0x9,%11;\"\n+        \"xor    %7,%10;\"\n+        \"mov    %8,%12;\"\n+        \"ror    $0x5,%10;\"\n+        \"psrlq  $0x11,%%xmm2;\"\n+        \"xor    %4,%11;\"\n+        \"xor    %9,%12;\"\n+        \"psrlq  $0x13,%%xmm3;\"\n+        \"xor    %7,%10;\"\n+        \"and    %7,%12;\"\n+        \"ror    $0xb,%11;\"\n+        \"psrld  $0xa,%%xmm7;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"pxor   %%xmm3,%%xmm2;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %10,%12;\"\n+        \"add    12+%16,%12;\"\n+        \"pxor   %%xmm2,%%xmm7;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"pshufb %%xmm11,%%xmm7;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"paddd  %%xmm0,%%xmm7;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    loop1_%=;\"\n+        \"mov    $0x2,%1;\"\n+\n+        \"loop2_%=:\"\n+        \"paddd  0x0(%13),%%xmm4;\"\n+        \"movdqa %%xmm4,%16;\"\n+        \"mov    %k2,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %3,%11;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %7,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %8,%12;\"\n+        \"xor    %k2,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %k2,%12;\"\n+        \"xor    %3,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %8,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %3,%10;\"\n+        \"add    %12,%9;\"\n+        \"mov    %3,%12;\"\n+        \"or     %5,%10;\"\n+        \"add    %9,%6;\"\n+        \"and    %5,%12;\"\n+        \"and    %4,%10;\"\n+        \"add    %11,%9;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%9;\"\n+        \"mov    %6,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %9,%11;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %k2,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %7,%12;\"\n+        \"xor    %6,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %6,%12;\"\n+        \"xor    %9,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %7,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %9,%10;\"\n+        \"add    %12,%8;\"\n+        \"mov    %9,%12;\"\n+        \"or     %4,%10;\"\n+        \"add    %8,%5;\"\n+        \"and    %4,%12;\"\n+        \"and    %3,%10;\"\n+        \"add    %11,%8;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%8;\"\n+        \"mov    %5,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %8,%11;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %6,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"xor    %5,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %5,%12;\"\n+        \"xor    %8,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %k2,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %8,%10;\"\n+        \"add    %12,%7;\"\n+        \"mov    %8,%12;\"\n+        \"or     %3,%10;\"\n+        \"add    %7,%4;\"\n+        \"and    %3,%12;\"\n+        \"and    %9,%10;\"\n+        \"add    %11,%7;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%7;\"\n+        \"mov    %4,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %7,%11;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %5,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %6,%12;\"\n+        \"xor    %4,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %4,%12;\"\n+        \"xor    %7,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %6,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %7,%10;\"\n+        \"add    %12,%k2;\"\n+        \"mov    %7,%12;\"\n+        \"or     %9,%10;\"\n+        \"add    %k2,%3;\"\n+        \"and    %9,%12;\"\n+        \"and    %8,%10;\"\n+        \"add    %11,%k2;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%k2;\"\n+        \"paddd  0x10(%13),%%xmm5;\"\n+        \"movdqa %%xmm5,%16;\"\n+        \"add    $0x20,%13;\"\n+        \"mov    %3,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %k2,%11;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %4,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %5,%12;\"\n+        \"xor    %3,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %3,%12;\"\n+        \"xor    %k2,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %5,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    %16,%12;\"\n+        \"mov    %k2,%10;\"\n+        \"add    %12,%6;\"\n+        \"mov    %k2,%12;\"\n+        \"or     %8,%10;\"\n+        \"add    %6,%9;\"\n+        \"and    %8,%12;\"\n+        \"and    %7,%10;\"\n+        \"add    %11,%6;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%6;\"\n+        \"mov    %9,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %6,%11;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %3,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %4,%12;\"\n+        \"xor    %9,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %9,%12;\"\n+        \"xor    %6,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %4,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    4+%16,%12;\"\n+        \"mov    %6,%10;\"\n+        \"add    %12,%5;\"\n+        \"mov    %6,%12;\"\n+        \"or     %7,%10;\"\n+        \"add    %5,%8;\"\n+        \"and    %7,%12;\"\n+        \"and    %k2,%10;\"\n+        \"add    %11,%5;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%5;\"\n+        \"mov    %8,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %5,%11;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %9,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %3,%12;\"\n+        \"xor    %8,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %8,%12;\"\n+        \"xor    %5,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %3,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    8+%16,%12;\"\n+        \"mov    %5,%10;\"\n+        \"add    %12,%4;\"\n+        \"mov    %5,%12;\"\n+        \"or     %k2,%10;\"\n+        \"add    %4,%7;\"\n+        \"and    %k2,%12;\"\n+        \"and    %6,%10;\"\n+        \"add    %11,%4;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%4;\"\n+        \"mov    %7,%10;\"\n+        \"ror    $0xe,%10;\"\n+        \"mov    %4,%11;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0x9,%11;\"\n+        \"mov    %8,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x5,%10;\"\n+        \"xor    %9,%12;\"\n+        \"xor    %7,%10;\"\n+        \"ror    $0xb,%11;\"\n+        \"and    %7,%12;\"\n+        \"xor    %4,%11;\"\n+        \"ror    $0x6,%10;\"\n+        \"xor    %9,%12;\"\n+        \"add    %10,%12;\"\n+        \"ror    $0x2,%11;\"\n+        \"add    12+%16,%12;\"\n+        \"mov    %4,%10;\"\n+        \"add    %12,%3;\"\n+        \"mov    %4,%12;\"\n+        \"or     %6,%10;\"\n+        \"add    %3,%k2;\"\n+        \"and    %6,%12;\"\n+        \"and    %5,%10;\"\n+        \"add    %11,%3;\"\n+        \"or     %12,%10;\"\n+        \"add    %10,%3;\"\n+        \"movdqa %%xmm6,%%xmm4;\"\n+        \"movdqa %%xmm7,%%xmm5;\"\n+        \"sub    $0x1,%1;\"\n+        \"jne    loop2_%=;\"\n+        \"add    (%0),%3;\"\n+        \"mov    %3,(%0);\"\n+        \"add    0x4(%0),%4;\"\n+        \"mov    %4,0x4(%0);\"\n+        \"add    0x8(%0),%5;\"\n+        \"mov    %5,0x8(%0);\"\n+        \"add    0xc(%0),%6;\"\n+        \"mov    %6,0xc(%0);\"\n+        \"add    0x10(%0),%k2;\"\n+        \"mov    %k2,0x10(%0);\"\n+        \"add    0x14(%0),%7;\"\n+        \"mov    %7,0x14(%0);\"\n+        \"add    0x18(%0),%8;\"\n+        \"mov    %8,0x18(%0);\"\n+        \"add    0x1c(%0),%9;\"\n+        \"mov    %9,0x1c(%0);\"\n+        \"mov    %15,%1;\"\n+        \"add    $0x40,%1;\"\n+        \"cmp    %14,%1;\"\n+        \"jne    loop0_%=;\"\n+\n+        \"done_hash_%=:\"\n+\n+        : \"+r\"(s), \"+r\"(chunk), \"+r\"(blocks), \"=r\"(a), \"=r\"(b), \"=r\"(c), \"=r\"(d), /* e = chunk */ \"=r\"(f), \"=r\"(g), \"=r\"(h), \"=r\"(y0), \"=r\"(y1), \"=r\"(y2), \"=r\"(tbl), \"+m\"(inp_end), \"+m\"(inp), \"+m\"(xfer)\n+        : \"m\"(K256), \"m\"(FLIP_MASK), \"m\"(SHUF_00BA), \"m\"(SHUF_DC00)\n+        : \"cc\", \"memory\", \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\", \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\"\n+   );\n+}\n+}\n+\n+/*\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+; Copyright (c) 2012, Intel Corporation \n+; \n+; All rights reserved. \n+; \n+; Redistribution and use in source and binary forms, with or without\n+; modification, are permitted provided that the following conditions are\n+; met: \n+; \n+; * Redistributions of source code must retain the above copyright\n+;   notice, this list of conditions and the following disclaimer.  \n+; \n+; * Redistributions in binary form must reproduce the above copyright\n+;   notice, this list of conditions and the following disclaimer in the\n+;   documentation and/or other materials provided with the\n+;   distribution. \n+; \n+; * Neither the name of the Intel Corporation nor the names of its",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127567734",
      "id" : 127567734,
      "original_commit_id" : "dc1fa8410c5e116e93ee69c472639b505c351ad3",
      "original_position" : 975,
      "path" : "src/crypto/sha256_sse42.cpp",
      "position" : null,
      "pull_request_review_id" : 50172878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127567734",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Marking as WIP, as this does not seem to produce correct hashes on OSX (cc @theuni).",
      "created_at" : "2017-07-15T01:05:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315498962",
      "id" : 315498962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-15T01:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315498962",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I poked at this for hours and came up empty-handed. I'll wait for someone else to confirm my osx breakage isn't just local.",
      "created_at" : "2017-07-15T05:46:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315511895",
      "id" : 315511895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-15T05:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315511895",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "two more data points:\r\n1. @fanquake verified that this crashes on osx for him as well.\r\n\r\n2. I managed to reproduce a crash on Linux with an old clang (3.2), and it's even uglier, crashing gdb as well:\r\n\r\n>Starting program: /home/cory/dev/bitcoin2/src/bitcoind\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\n>\r\n>Program received signal SIGSEGV, Segmentation fault.\r\n/build/buildd/gdb-7.6\\~20130417/gdb/dwarf2read.c:10350: internal-error: dwarf2_record_block_ranges: Assertion `dwarf2_per_objfile->ranges.readin' failed.\r\nA problem internal to GDB has been detected,\r\nfurther debugging may prove unreliable.\r\nQuit this debugging session? (y or n) n\r\n/build/buildd/gdb-7.6~20130417/gdb/dwarf2read.c:10350: internal-error: dwarf2_record_block_ranges: Assertion `dwarf2_per_objfile->ranges.readin' failed.\r\nA problem internal to GDB has been detected,\r\nfurther debugging may prove unreliable.\r\nCreate a core file of GDB? (y or n) n\r\n**0x000000000074c910 in sha256_sse42::Transform (**\r\n/build/buildd/gdb-7.6~20130417/gdb/dwarf2read.c:10350: internal-error: dwarf2_record_block_ranges: Assertion `dwarf2_per_objfile->ranges.readin' failed.\r\nA problem internal to GDB has been detected,\r\nfurther debugging may prove unreliable.\r\nQuit this debugging session? (y or n) n\r\n/build/buildd/gdb-7.6~20130417/gdb/dwarf2read.c:10350: internal-error: dwarf2_record_block_ranges: Assertion `dwarf2_per_objfile->ranges.readin' failed.\r\nA problem internal to GDB has been detected,\r\nfurther debugging may prove unreliable.\r\nCreate a core file of GDB? (y or n) n\r\nSegmentation fault (core dumped)",
      "created_at" : "2017-07-15T06:51:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315514931",
      "id" : 315514931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-15T06:51:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315514931",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127597240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127597240"
         }
      },
      "body" : "do we have constructors with hashing in them?",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-16T02:50:19Z",
      "diff_hunk" : "@@ -43,91 +52,122 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    uint32_t s0 = s[0], s1 = s[1], s2 = s[2], s3 = s[3], s4 = s[4], s5 = s[5], s6 = s[6], s7 = s[7];\n+\n+    while (blocks--) {\n+        uint32_t a = s0, b = s1, c = s2, d = s3, e = s4, f = s5, g = s6, h = s7;\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s0 += a;\n+        s1 += b;\n+        s2 += c;\n+        s3 += d;\n+        s4 += e;\n+        s5 += f;\n+        s6 += g;\n+        s7 += h;\n+        chunk += 64;\n+    }\n+\n+    s[0] = s0; s[1] = s1; s[2] = s2; s[3] = s3; s[4] = s4; s[5] = s5; s[6] = s6; s[7] = s7;\n }\n \n } // namespace sha256\n+\n+void Dispatch(uint32_t*, const unsigned char*, size_t);\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+std::atomic<TransformType> TransformPointer{Dispatch};\n+\n+#define Transform(a,b,c) ((TransformPointer.load(std::memory_order_relaxed))(a,b,c))\n+\n+void Dispatch(uint32_t* a, const unsigned char* b, size_t c)\n+{\n+    TransformType fn = sha256::Transform;\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 20) & 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127597240",
      "id" : 127597240,
      "original_commit_id" : "e486f5774d79e01fe806a766d57b7346e80f4cc8",
      "original_position" : 212,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 50201638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127597240",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Tested ACK 08b7438f73236fc738fb655f766e77a81e6b7311. Good on OSX now!\r\n\r\nEdit: Though I'd prefer to have the cpu check done separately.",
      "created_at" : "2017-07-16T06:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315589421",
      "id" : 315589421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T06:45:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315589421",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "Removing WIP tag, I believe we solved the OSX problem.",
      "created_at" : "2017-07-16T06:43:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315589480",
      "id" : 315589480,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T06:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315589480",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127601294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127601294"
         }
      },
      "body" : "@laanwj Fixed.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-16T07:54:51Z",
      "diff_hunk" : "@@ -43,91 +52,122 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    uint32_t s0 = s[0], s1 = s[1], s2 = s[2], s3 = s[3], s4 = s[4], s5 = s[5], s6 = s[6], s7 = s[7];\n+\n+    while (blocks--) {\n+        uint32_t a = s0, b = s1, c = s2, d = s3, e = s4, f = s5, g = s6, h = s7;\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s0 += a;\n+        s1 += b;\n+        s2 += c;\n+        s3 += d;\n+        s4 += e;\n+        s5 += f;\n+        s6 += g;\n+        s7 += h;\n+        chunk += 64;\n+    }\n+\n+    s[0] = s0; s[1] = s1; s[2] = s2; s[3] = s3; s[4] = s4; s[5] = s5; s[6] = s6; s[7] = s7;\n }\n \n } // namespace sha256\n+\n+void Dispatch(uint32_t*, const unsigned char*, size_t);\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+std::atomic<TransformType> TransformPointer{Dispatch};\n+\n+#define Transform(a,b,c) ((TransformPointer.load(std::memory_order_relaxed))(a,b,c))\n+\n+void Dispatch(uint32_t* a, const unsigned char* b, size_t c)\n+{\n+    TransformType fn = sha256::Transform;\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+    uint32_t eax, ebx, ecx, edx;\n+    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 20) & 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127601294",
      "id" : 127601294,
      "original_commit_id" : "e486f5774d79e01fe806a766d57b7346e80f4cc8",
      "original_position" : 212,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 50205347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127601294",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Confirmed that this now runs on OSX.\r\n\r\nRunning `src/bench/bench_bitcoin`\r\nmaster (https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d)\r\n```\r\nSHA256,30,0.034190416336060,0.035426974296570,0.034737364451090,115983933,120179929,117843926\r\nSHA256,30,0.033560991287231,0.037778496742249,0.035649696985881,113846584,128155476,120938933\r\nSHA256,30,0.033833026885986,0.035175085067749,0.034680000940959,114771438,119322675,117649641\r\nSHA256_32b,2,2.333264589309692,2.333264589309692,2.333264589309692,7915485729,7915485729,7915485729\r\nSHA256_32b,2,2.289189100265503,2.289189100265503,2.289189100265503,7765884738,7765884738,7765884738\r\nSHA256_32b,2,2.370669960975647,2.370669960975647,2.370669960975647,8042288399,8042288399,8042288399\r\n```\r\nmaster (https://github.com/bitcoin/bitcoin/commit/5cfdda2503c995cdd563b1a2a29162ac298d173d) + this PR\r\n```\r\nSHA256,320,0.003191620111465,0.003264248371124,0.003223562240601,10826857,11073394,10935724\r\nSHA256,352,0.003048248589039,0.003163591027260,0.003104761242867,10340442,10731709,10532673\r\nSHA256,352,0.003055907785892,0.003142252564430,0.003093159334226,10366424,10659420,10493303\r\nSHA256_32b,4,0.324660062789917,0.329437971115112,0.327049016952515,1101416645,1117628996,1109522820\r\nSHA256_32b,4,0.327362537384033,0.329176425933838,0.328269481658936,1110585003,1116655624,1113620313\r\nSHA256_32b,4,0.325733423233032,0.331611037254333,0.328672230243683,1105059350,1124999710,1115029530\r\n```",
      "created_at" : "2017-07-16T10:20:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315599667",
      "id" : 315599667,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T10:20:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315599667",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "body" : "This should do something to print what implementation its using to help spot runtime auto-detection bugs.",
      "created_at" : "2017-07-16T14:06:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315611435",
      "id" : 315611435,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T14:06:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315611435",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell Already done",
      "created_at" : "2017-07-16T17:28:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315623897",
      "id" : 315623897,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T17:28:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315623897",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Added an extra commit that performs a self-test before selecting an optimized transform function.",
      "created_at" : "2017-07-16T18:31:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315627735",
      "id" : 315627735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T18:31:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315627735",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@fanquake Are you compiling with -O0 or something similar? This shouldn't give a 10x speedup for the SHA256 benchmark. More like a factor 1.5x.",
      "created_at" : "2017-07-16T18:44:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315628546",
      "id" : 315628546,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T18:44:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315628546",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Tested ACK on my OSX box as well as on a Debian with Skylake\r\n\r\nCPU OSX: `Intel(R) Core(TM) i7-6920HQ CPU @ 2.90GHz`\r\nCPU Debian: `Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz`\r\n\r\nPerf.-improvements: factor ~1.6.\r\n\r\n\r\n---- DETAILS:\r\n\r\nExts OSX:\r\n```SYSCALL XD 1GBPAGE EM64T LAHF LZCNT PREFETCHW RDTSCP TSCI\r\nSMEP ERMS RDWRFSGS TSC_THREAD_OFFSET BMI1 HLE AVX2 BMI2 INVPCID RTM SMAP RDSEED ADX IPT SGX FPU_CSDS MPX CLFSOPT\r\nFPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX SMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC MOVBE POPCNT AES PCID XSAVE OSXSAVE SEGLIM64 TSCTMR AVX1.0 RDRAND F16C\r\n```\r\nExts Debian:\r\n```\r\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt\r\n```\r\n\r\n### OSX Master\r\n```\r\nSHA1,576,0.001819185912609,0.002340316772461,0.001918800589111,5282892,6796157,5572193\r\nSHA256,208,0.004609435796738,0.005578860640526,0.004965331691962,13385764,16201094,14419137\r\nSHA256_32b,4,0.332423448562622,0.333897590637207,0.333160519599915,965338619,969639015,967488817\r\nSHA512,352,0.002628467977047,0.003746151924133,0.002973860637708,7633100,10878782,8636088\r\n```\r\n\r\n### OSX This PR\r\n```\r\nSHA1,576,0.001871295273304,0.002110570669174,0.001951401018434,5434265,6129157,5666867\r\nSHA256,352,0.002895936369896,0.003193676471710,0.002999408678575,8409812,9274468,8710180\r\nSHA256_32b,6,0.216736078262329,0.222404479980469,0.219772179921468,629402126,645863039,638218484\r\nSHA512,352,0.002783536911011,0.003117501735687,0.002889553931626,8083365,9053381,8391166\r\n```\r\n\r\n\r\n### Debian Master\r\n```\r\nSHA1,704,0.001483812928200,0.001535888761282,0.001513123512268,5341692,5529187,5447247\r\nSHA256,256,0.003961175680161,0.004363536834717,0.004079484380782,14260373,15708338,14686141\r\nSHA256_32b,4,0.281208992004395,0.283093929290771,0.282151460647583,1012352610,1019139204,1015745907\r\nSHA512,416,0.002545125782490,0.002609595656395,0.002585454629018,9162493,9394502,9307633\r\n```\r\n\r\n### Debian This PR\r\n```\r\nSHA1,704,0.001500129699707,0.001563936471939,0.001528463241729,5400623,5630186,5502462\r\nSHA256,384,0.002633377909660,0.002746812999249,0.002677822485566,9480191,9888481,9640152\r\nSHA256_32b,6,0.190533041954041,0.193126082420349,0.191900690396627,685917852,695253649,690841909\r\nSHA512,384,0.002558782696724,0.002740010619164,0.002604349205891,9211619,9863917,9375649\r\n```\r\n\r\n(non 256 SHA's are for comp. reference).",
      "created_at" : "2017-07-16T19:26:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315631135",
      "id" : 315631135,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T19:26:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315631135",
      "user" : {
         "avatar_url" : "https://avatars7.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased, and moved the autodetection to an explicit `SHA256AutoDetect()` function that is called during initialization.",
      "created_at" : "2017-07-16T19:42:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315632014",
      "id" : 315632014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T19:42:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315632014",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Improved the self test (it now tests 0, 1, and 2-block transforms), and made it assert when the selftest fails rather than failing over to the standard implementation. This way, it won't hide problems.",
      "created_at" : "2017-07-16T23:50:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315646928",
      "id" : 315646928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-16T23:50:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315646928",
      "user" : {
         "avatar_url" : "https://avatars5.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127709044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127709044"
         }
      },
      "body" : "It'd be helpful to add a little note about the 'L' prefix and what problem it solves. If nothing else, it may turn up as a another useful google hit for someone in the future.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-17T13:36:28Z",
      "diff_hunk" : "@@ -0,0 +1,1506 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// This is a translation to GCC extended asm syntax from YASM code by Intel\n+// (available at the bottom of this file).\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+#if defined(__x86_64__) || defined(__amd64__)\n+\n+namespace sha256_sse4\n+{\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n+{\n+    static const uint32_t K256 alignas(16) [] = {\n+        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n+        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n+        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n+        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n+        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n+        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n+        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n+        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n+        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n+        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n+        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n+        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n+        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n+        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n+        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n+        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n+    };\n+    static const uint32_t FLIP_MASK alignas(16) [] = {0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f};\n+    static const uint32_t SHUF_00BA alignas(16) [] = {0x03020100, 0x0b0a0908, 0xffffffff, 0xffffffff};\n+    static const uint32_t SHUF_DC00 alignas(16) [] = {0xffffffff, 0xffffffff, 0x03020100, 0x0b0a0908};\n+    uint32_t a, b, c, d, f, g, h, y0, y1, y2;\n+    uint64_t tbl;\n+    uint64_t inp_end, inp;\n+    uint32_t xfer alignas(16) [4];\n+\n+    __asm__ __volatile__(\n+        \"shl    $0x6,%2;\"\n+        \"je     Ldone_hash_%=;\"\n+        \"add    %1,%2;\"\n+        \"mov    %2,%14;\"\n+        \"mov    (%0),%3;\"\n+        \"mov    0x4(%0),%4;\"\n+        \"mov    0x8(%0),%5;\"\n+        \"mov    0xc(%0),%6;\"\n+        \"mov    0x10(%0),%k2;\"\n+        \"mov    0x14(%0),%7;\"\n+        \"mov    0x18(%0),%8;\"\n+        \"mov    0x1c(%0),%9;\"\n+        \"movdqa %18,%%xmm12;\"\n+        \"movdqa %19,%%xmm10;\"\n+        \"movdqa %20,%%xmm11;\"\n+\n+        \"Lloop0_%=:\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127709044",
      "id" : 127709044,
      "original_commit_id" : "7308332e70cc5c0a2bb3d704028074775832bfc9",
      "original_position" : 60,
      "path" : "src/crypto/sha256_sse4.cpp",
      "position" : 60,
      "pull_request_review_id" : 50320277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127709044",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127717020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127717020"
         }
      },
      "body" : "Like with the rand init, I think we'd save ourselves from future oopses by setting this to nullptr initially, and letting SHA256AutoDetect() set the fallback to sha256::Transform if necessary.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-17T14:06:26Z",
      "diff_hunk" : "@@ -43,93 +52,142 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    while (blocks--) {\n+        uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s[0] += a;\n+        s[1] += b;\n+        s[2] += c;\n+        s[3] += d;\n+        s[4] += e;\n+        s[5] += f;\n+        s[6] += g;\n+        s[7] += h;\n+        chunk += 64;\n+    }\n }\n \n } // namespace sha256\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+\n+bool SelfTest(TransformType tr) {\n+    static const unsigned char in1[65] = {0, 0x80};\n+    static const unsigned char in2[129] = {\n+        0,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0\n+    };\n+    static const uint32_t init[8] = {0x6a09e667ul, 0xbb67ae85ul, 0x3c6ef372ul, 0xa54ff53aul, 0x510e527ful, 0x9b05688cul, 0x1f83d9abul, 0x5be0cd19ul};\n+    static const uint32_t out1[8] = {0xe3b0c442ul, 0x98fc1c14ul, 0x9afbf4c8ul, 0x996fb924ul, 0x27ae41e4ul, 0x649b934cul, 0xa495991bul, 0x7852b855ul};\n+    static const uint32_t out2[8] = {0xce4153b0ul, 0x147c2a86ul, 0x3ed4298eul, 0xe0676bc8ul, 0x79fc77a1ul, 0x2abe1f49ul, 0xb2b055dful, 0x1069523eul};\n+    uint32_t buf[8];\n+    memcpy(buf, init, sizeof(buf));\n+    // Process nothing, and check we remain in the initial state.\n+    tr(buf, nullptr, 0);\n+    if (memcmp(buf, init, sizeof(buf))) return false;\n+    // Process the padded empty string (unaligned)\n+    tr(buf, in1 + 1, 1);\n+    if (memcmp(buf, out1, sizeof(buf))) return false;\n+    // Process 64 spaces (unaligned)\n+    memcpy(buf, init, sizeof(buf));\n+    tr(buf, in2 + 1, 2);\n+    if (memcmp(buf, out2, sizeof(buf))) return false;\n+    return true;\n+}\n+\n+TransformType Transform = sha256::Transform;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127717020",
      "id" : 127717020,
      "original_commit_id" : "7308332e70cc5c0a2bb3d704028074775832bfc9",
      "original_position" : 224,
      "path" : "src/crypto/sha256.cpp",
      "position" : 226,
      "pull_request_review_id" : 50329359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127717020",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127719818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127719818"
         }
      },
      "body" : "I don't think that will work - there is some SHA256 work before main (IIRC to set up the chain parameteters). Better if that uses the 'canonical' SHA256.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-17T14:16:43Z",
      "diff_hunk" : "@@ -43,93 +52,142 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    while (blocks--) {\n+        uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s[0] += a;\n+        s[1] += b;\n+        s[2] += c;\n+        s[3] += d;\n+        s[4] += e;\n+        s[5] += f;\n+        s[6] += g;\n+        s[7] += h;\n+        chunk += 64;\n+    }\n }\n \n } // namespace sha256\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+\n+bool SelfTest(TransformType tr) {\n+    static const unsigned char in1[65] = {0, 0x80};\n+    static const unsigned char in2[129] = {\n+        0,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0\n+    };\n+    static const uint32_t init[8] = {0x6a09e667ul, 0xbb67ae85ul, 0x3c6ef372ul, 0xa54ff53aul, 0x510e527ful, 0x9b05688cul, 0x1f83d9abul, 0x5be0cd19ul};\n+    static const uint32_t out1[8] = {0xe3b0c442ul, 0x98fc1c14ul, 0x9afbf4c8ul, 0x996fb924ul, 0x27ae41e4ul, 0x649b934cul, 0xa495991bul, 0x7852b855ul};\n+    static const uint32_t out2[8] = {0xce4153b0ul, 0x147c2a86ul, 0x3ed4298eul, 0xe0676bc8ul, 0x79fc77a1ul, 0x2abe1f49ul, 0xb2b055dful, 0x1069523eul};\n+    uint32_t buf[8];\n+    memcpy(buf, init, sizeof(buf));\n+    // Process nothing, and check we remain in the initial state.\n+    tr(buf, nullptr, 0);\n+    if (memcmp(buf, init, sizeof(buf))) return false;\n+    // Process the padded empty string (unaligned)\n+    tr(buf, in1 + 1, 1);\n+    if (memcmp(buf, out1, sizeof(buf))) return false;\n+    // Process 64 spaces (unaligned)\n+    memcpy(buf, init, sizeof(buf));\n+    tr(buf, in2 + 1, 2);\n+    if (memcmp(buf, out2, sizeof(buf))) return false;\n+    return true;\n+}\n+\n+TransformType Transform = sha256::Transform;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127719818",
      "id" : 127719818,
      "original_commit_id" : "7308332e70cc5c0a2bb3d704028074775832bfc9",
      "original_position" : 224,
      "path" : "src/crypto/sha256.cpp",
      "position" : 226,
      "pull_request_review_id" : 50332586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127719818",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127736970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127736970"
         }
      },
      "body" : "Right, nevermind.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-17T15:16:34Z",
      "diff_hunk" : "@@ -43,93 +52,142 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    while (blocks--) {\n+        uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s[0] += a;\n+        s[1] += b;\n+        s[2] += c;\n+        s[3] += d;\n+        s[4] += e;\n+        s[5] += f;\n+        s[6] += g;\n+        s[7] += h;\n+        chunk += 64;\n+    }\n }\n \n } // namespace sha256\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+\n+bool SelfTest(TransformType tr) {\n+    static const unsigned char in1[65] = {0, 0x80};\n+    static const unsigned char in2[129] = {\n+        0,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0\n+    };\n+    static const uint32_t init[8] = {0x6a09e667ul, 0xbb67ae85ul, 0x3c6ef372ul, 0xa54ff53aul, 0x510e527ful, 0x9b05688cul, 0x1f83d9abul, 0x5be0cd19ul};\n+    static const uint32_t out1[8] = {0xe3b0c442ul, 0x98fc1c14ul, 0x9afbf4c8ul, 0x996fb924ul, 0x27ae41e4ul, 0x649b934cul, 0xa495991bul, 0x7852b855ul};\n+    static const uint32_t out2[8] = {0xce4153b0ul, 0x147c2a86ul, 0x3ed4298eul, 0xe0676bc8ul, 0x79fc77a1ul, 0x2abe1f49ul, 0xb2b055dful, 0x1069523eul};\n+    uint32_t buf[8];\n+    memcpy(buf, init, sizeof(buf));\n+    // Process nothing, and check we remain in the initial state.\n+    tr(buf, nullptr, 0);\n+    if (memcmp(buf, init, sizeof(buf))) return false;\n+    // Process the padded empty string (unaligned)\n+    tr(buf, in1 + 1, 1);\n+    if (memcmp(buf, out1, sizeof(buf))) return false;\n+    // Process 64 spaces (unaligned)\n+    memcpy(buf, init, sizeof(buf));\n+    tr(buf, in2 + 1, 2);\n+    if (memcmp(buf, out2, sizeof(buf))) return false;\n+    return true;\n+}\n+\n+TransformType Transform = sha256::Transform;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127736970",
      "id" : 127736970,
      "original_commit_id" : "7308332e70cc5c0a2bb3d704028074775832bfc9",
      "original_position" : 224,
      "path" : "src/crypto/sha256.cpp",
      "position" : 226,
      "pull_request_review_id" : 50351299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127736970",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127779308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127779308"
         }
      },
      "body" : "Indeed, that is the reason.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-17T18:01:52Z",
      "diff_hunk" : "@@ -43,93 +52,142 @@ void inline Initialize(uint32_t* s)\n     s[7] = 0x5be0cd19ul;\n }\n \n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+/** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n+void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n+    while (blocks--) {\n+        uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+        s[0] += a;\n+        s[1] += b;\n+        s[2] += c;\n+        s[3] += d;\n+        s[4] += e;\n+        s[5] += f;\n+        s[6] += g;\n+        s[7] += h;\n+        chunk += 64;\n+    }\n }\n \n } // namespace sha256\n+\n+typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+\n+bool SelfTest(TransformType tr) {\n+    static const unsigned char in1[65] = {0, 0x80};\n+    static const unsigned char in2[129] = {\n+        0,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, \n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0\n+    };\n+    static const uint32_t init[8] = {0x6a09e667ul, 0xbb67ae85ul, 0x3c6ef372ul, 0xa54ff53aul, 0x510e527ful, 0x9b05688cul, 0x1f83d9abul, 0x5be0cd19ul};\n+    static const uint32_t out1[8] = {0xe3b0c442ul, 0x98fc1c14ul, 0x9afbf4c8ul, 0x996fb924ul, 0x27ae41e4ul, 0x649b934cul, 0xa495991bul, 0x7852b855ul};\n+    static const uint32_t out2[8] = {0xce4153b0ul, 0x147c2a86ul, 0x3ed4298eul, 0xe0676bc8ul, 0x79fc77a1ul, 0x2abe1f49ul, 0xb2b055dful, 0x1069523eul};\n+    uint32_t buf[8];\n+    memcpy(buf, init, sizeof(buf));\n+    // Process nothing, and check we remain in the initial state.\n+    tr(buf, nullptr, 0);\n+    if (memcmp(buf, init, sizeof(buf))) return false;\n+    // Process the padded empty string (unaligned)\n+    tr(buf, in1 + 1, 1);\n+    if (memcmp(buf, out1, sizeof(buf))) return false;\n+    // Process 64 spaces (unaligned)\n+    memcpy(buf, init, sizeof(buf));\n+    tr(buf, in2 + 1, 2);\n+    if (memcmp(buf, out2, sizeof(buf))) return false;\n+    return true;\n+}\n+\n+TransformType Transform = sha256::Transform;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127779308",
      "id" : 127779308,
      "original_commit_id" : "7308332e70cc5c0a2bb3d704028074775832bfc9",
      "original_position" : 224,
      "path" : "src/crypto/sha256.cpp",
      "position" : 226,
      "pull_request_review_id" : 50398253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127779308",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK, looks good to me now, but I still think it's too late for 0.15. \r\nAt least to enable it by default, I'm ok with an `--enable-experimental-asm` option, then enabling it by default after the 0.15 branch-off.",
      "created_at" : "2017-07-18T06:42:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315972697",
      "id" : 315972697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-18T06:42:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315972697",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj Added a `--enable-experimental-asm` configure option, disabled by default.",
      "created_at" : "2017-07-18T08:07:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-315990007",
      "id" : 315990007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-18T08:07:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315990007",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127953973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127953973"
         }
      },
      "body" : "This should be `$enableval`, not `$withval`",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T11:57:53Z",
      "diff_hunk" : "@@ -177,6 +177,16 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([experimental-asm],\n+  [AS_HELP_STRING([--enable-experimental-asm],\n+  [Enable experimental assembly routines (default is no)])],\n+  [experimental_asm=$withval],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r127953973",
      "id" : 127953973,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 7,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 50586524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127953973",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128025351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128025351"
         }
      },
      "body" : "Strange, I tested this.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T16:22:39Z",
      "diff_hunk" : "@@ -177,6 +177,16 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([experimental-asm],\n+  [AS_HELP_STRING([--enable-experimental-asm],\n+  [Enable experimental assembly routines (default is no)])],\n+  [experimental_asm=$withval],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128025351",
      "id" : 128025351,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 7,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 50666437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128025351",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128028248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128028248"
         }
      },
      "body" : "Me too, and it didn't work for me unless I changed it. Using $withval here most llikelys pick up the last --with check result (for qrencode, which wasn't installed in my case, so it always had `no`)",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T16:34:10Z",
      "diff_hunk" : "@@ -177,6 +177,16 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([experimental-asm],\n+  [AS_HELP_STRING([--enable-experimental-asm],\n+  [Enable experimental assembly routines (default is no)])],\n+  [experimental_asm=$withval],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128028248",
      "id" : 128028248,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 7,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 50669717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128028248",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128033631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128033631"
         }
      },
      "body" : "This is only needed if you intended to avoid compiling the _sse4.o variant altogether. AM_CONDITIONAL sets Makefile variables.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T16:56:21Z",
      "diff_hunk" : "@@ -1162,6 +1172,7 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n+AM_CONDITIONAL([EXPERIMENTAL_ASM],[test x$experimental_asm = xyes])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128033631",
      "id" : 128033631,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 21,
      "path" : "configure.ac",
      "position" : 21,
      "pull_request_review_id" : 50675778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128033631",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128035298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128035298"
         }
      },
      "body" : "On second thought, I'd actually prefer doing it that way in order to keep sha256_sse4.cpp completely generic. It was very helpful for me while testing to just throw together a quick test app using the .cpp directly.\r\n\r\nThe makefile change would become:\r\n```\r\nif EXPERIMENTAL_ASM\r\ncrypto_libbitcoin_crypto_a_SOURCES += crypto/sha256_sse4.cpp\r\nendif\r\n```\r\nThen obviously the guard isn't needed in the .cpp.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:03:34Z",
      "diff_hunk" : "@@ -1162,6 +1172,7 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n+AM_CONDITIONAL([EXPERIMENTAL_ASM],[test x$experimental_asm = xyes])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128035298",
      "id" : 128035298,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 21,
      "path" : "configure.ac",
      "position" : 21,
      "pull_request_review_id" : 50677746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128035298",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128039476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128039476"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:20:18Z",
      "diff_hunk" : "@@ -1162,6 +1172,7 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n+AM_CONDITIONAL([EXPERIMENTAL_ASM],[test x$experimental_asm = xyes])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128039476",
      "id" : 128039476,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 21,
      "path" : "configure.ac",
      "position" : 21,
      "pull_request_review_id" : 50682392,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128039476",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128039503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128039503"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:20:27Z",
      "diff_hunk" : "@@ -177,6 +177,16 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([experimental-asm],\n+  [AS_HELP_STRING([--enable-experimental-asm],\n+  [Enable experimental assembly routines (default is no)])],\n+  [experimental_asm=$withval],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128039503",
      "id" : 128039503,
      "original_commit_id" : "e0aa4ab6fedea005be111561a3978fba525ffbbf",
      "original_position" : 7,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 50682392,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128039503",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043032"
         }
      },
      "body" : "Nit: no need to risk including the not-guaranteed-to-exist header. Move the ```#if``` up a bit?",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:33:59Z",
      "diff_hunk" : "@@ -11,11 +11,13 @@\n \n #if defined(__x86_64__) || defined(__amd64__)\n #include <cpuid.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043032",
      "id" : 128043032,
      "original_commit_id" : "66043d3682aa3559b8cc372c1f8f84f0877369c0",
      "original_position" : 3,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 50686126,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043032",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043106"
         }
      },
      "body" : "Not needed anymore :)",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:34:16Z",
      "diff_hunk" : "@@ -5,6 +5,8 @@\n // This is a translation to GCC extended asm syntax from YASM code by Intel\n // (available at the bottom of this file).\n \n+#include \"config/bitcoin-config.h\"\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043106",
      "id" : 128043106,
      "original_commit_id" : "66043d3682aa3559b8cc372c1f8f84f0877369c0",
      "original_position" : 5,
      "path" : "src/crypto/sha256_sse4.cpp",
      "position" : null,
      "pull_request_review_id" : 50686200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043106",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "utACK modulo the small nits.",
      "created_at" : "2017-07-18T17:35:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-316138914",
      "id" : 316138914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-18T17:35:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316138914",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043705"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:36:19Z",
      "diff_hunk" : "@@ -11,11 +11,13 @@\n \n #if defined(__x86_64__) || defined(__amd64__)\n #include <cpuid.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043705",
      "id" : 128043705,
      "original_commit_id" : "66043d3682aa3559b8cc372c1f8f84f0877369c0",
      "original_position" : 3,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 50686777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043705",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043734"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-18T17:36:25Z",
      "diff_hunk" : "@@ -5,6 +5,8 @@\n // This is a translation to GCC extended asm syntax from YASM code by Intel\n // (available at the bottom of this file).\n \n+#include \"config/bitcoin-config.h\"\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128043734",
      "id" : 128043734,
      "original_commit_id" : "66043d3682aa3559b8cc372c1f8f84f0877369c0",
      "original_position" : 5,
      "path" : "src/crypto/sha256_sse4.cpp",
      "position" : null,
      "pull_request_review_id" : 50686801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-18T17:36:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128043734",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128443230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128443230"
         }
      },
      "body" : "Nit: Seems this is a log message with the side-effect of detecting the SHA256 implementation. \r\nI'd prefer to assign the result explicitly, so that if someone happens to comment this out, or moves it to debug category, it won't just be skipped.",
      "commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "created_at" : "2017-07-20T07:32:11Z",
      "diff_hunk" : "@@ -1161,6 +1161,7 @@ bool AppInitSanityChecks()\n     // ********************************************************* Step 4: sanity checks\n \n     // Initialize elliptic curve code\n+    LogPrintf(\"Using the '%s' SHA256 implementation\\n\", SHA256AutoDetect());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#discussion_r128443230",
      "id" : 128443230,
      "original_commit_id" : "03a0e554bad3a59c388b97d055e6466d9977ec18",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_review_id" : 51121072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10821",
      "updated_at" : "2017-07-20T07:32:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128443230",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 6b8d872e5e2dd68a5229ec55f5261dae34ff9bdb, though I extensively tested earlier revisions.",
      "created_at" : "2017-07-20T16:39:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-316761536",
      "id" : 316761536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-07-20T16:39:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316761536",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "For future reference, as of #11176 this is now enabled by default.",
      "created_at" : "2017-10-20T07:16:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10821#issuecomment-338125795",
      "id" : 338125795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10821",
      "updated_at" : "2017-10-20T07:16:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338125795",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
