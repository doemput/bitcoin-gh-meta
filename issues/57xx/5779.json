{
   "assignee" : null,
   "body" : "I've been thinking lately about how a dev may use libbitcoinconsensus to add verification to his program. Unfortunately, there are several current issues that (I believe) seriously hamper real-world usage.\r\n\r\nFor example, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG was just recently added as a flag for the lib. For the sake of discussion, let's imagine that this flag was not present in the 0.10 release at all, but it is present in 0.11.\r\n\r\nA dev is working against the 0.11 version. He releases a program that loads libbitcoinconsensus.so and uses it to verify. It specifies the bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG flag and compiles fine, and he distributes it to users. Someone with the 0.10 version of the lib runs the program, which silently verifies without taking the new flag into account. Ouch.\r\n\r\nThe obvious guard against that would be for the lib to first verify that it understands the flags passed in. If it doesn't, then it bails out with an error.\r\n\r\nBut there's a problem with that as well... the lib currently understands more flags than it exposes externally. By adding a check to ensure that the user has only used exposed flags, we'd be artificially limiting it. In this case, adding that check would break verification for the user that would've otherwise worked.\r\n\r\nI've run in circles trying to figure out how to deal with these issues, so any suggestions would be appreciated.\r\n\r\n1. If libbitcoinconsensus is passed a flag that is not exposed externally, should it immediately fail?\r\n2. If 'no' to 1., if it is passed a flag that is also not understood _internally_ should it immediately fail?\r\n3. Despite objections about purity, I believe that ultimately devs will eventually want a bitcoinconsensus_script_isstandard() function. This would likely require having the other flags available as well, so it may change answers to 1. and 2.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 6,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5779/comments",
   "created_at" : "2015-02-09T23:51:38Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5779/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/5779",
   "id" : 57109078,
   "labels" : [
      {
         "color" : "ebd775",
         "name" : "Brainstorming",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "009800",
         "name" : "Consensus",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5779/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 5779,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "libbitcoinconsensus flag issues",
   "updated_at" : "2016-02-16T15:04:33Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5779",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
      "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
      "followers_url" : "https://api.github.com/users/theuni/followers",
      "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/theuni",
      "id" : 417043,
      "login" : "theuni",
      "organizations_url" : "https://api.github.com/users/theuni/orgs",
      "received_events_url" : "https://api.github.com/users/theuni/received_events",
      "repos_url" : "https://api.github.com/users/theuni/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/theuni"
   }
}
