{
   "assignee" : null,
   "assignees" : [],
   "body" : "The minimal HD wallet implementation (#8035) changes the derivation scheme for new keys from random to deterministic. This guarantees that an old backup will be able to recreate all keys, and no money can be lost. However, recovery in this case is not trivial, as the wallet will not automatically \"look forward\" to see if future keys are being used.\n\nThe suggestion is to implement a \"gap limit\" as is called in other BIP32 derived standard, simply reusing the existing keypool. Whenever a key from the keypool is used in a received transaction, we should automatically mark it as used, and if possible replenish.\n\nOne difficulty is encrypted wallets. We are unable to replenish the keypool in case the wallet is encrypted. Options to deal with this are:\n- Only warn the user in some way, that he may need to unlock the wallet and `-rescan` (doesn't play well with pruning).\n- Stop syncing after the number of keys drops below a configurable number (the gap limit). This means no rescanning is needed, but it may be very annoying if there is a lot of chain to sync.\n- Stop syncing the wallet but continue otherwise. This depends on having the wallet sync be made entirely independent from the node's sync (see discussion in http://www.erisian.com.au/meetbot/bitcoin-core-dev/2016/bitcoin-core-dev.2016-09-08-18.59.log.html), and also doesn't play well with pruning.\n- Switch to non-hardered derivation at the last level of the path, allowing the computation of new keys without access to the encrypted key material.\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 10,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8689/comments",
   "created_at" : "2016-09-09T11:04:47Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8689/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/8689",
   "id" : 175983909,
   "labels" : [
      {
         "color" : "02d7e1",
         "default" : false,
         "id" : 149424,
         "name" : "Wallet",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8689/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 8689,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Implement gap detection for deterministic wallets",
   "updated_at" : "2017-02-11T13:25:07Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8689",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
      "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sipa/followers",
      "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sipa",
      "id" : 548488,
      "login" : "sipa",
      "organizations_url" : "https://api.github.com/users/sipa/orgs",
      "received_events_url" : "https://api.github.com/users/sipa/received_events",
      "repos_url" : "https://api.github.com/users/sipa/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sipa"
   }
}
