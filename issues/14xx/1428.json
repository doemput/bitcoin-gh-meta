{
   "assignee" : null,
   "body" : "I believe the vector76 attack (also referred to as the \"one confirmation attack\", which is a variation of the Finney attack) can easily lead to a subsequent situation that is, at best, an annoyance but to some degree it may result in causing a denial of service for Bitcoin users.\n\nThe problem is that coin selection in the client can choose a coin that only has only one confirmation.  At the same time though, the vector76 attack makes it possible that a transaction will exist with at least one confirmation but will never confirm.  The result is that the spend transaction chooses a coin from a transaction whose block will eventually be orphaned and that spend transaction will never confirm.\n\nThis is an annoyance to the user because the client does not (yet) have a mechanism to clear these 0/unconfirmed spend transactions that will never confirm.  How this could result in a denial of service though is because there is a period of time that the user believes a spend transaction has been made but because the transaction for that payment won't get relayed by any other nodes, as it is invalid, the recipient will not receive payment.\n\nHow this occurs:\n\nBob's bitcoin node is left configured using the default settings and receives incoming traffic on the default port 8333.\nEvil miner creates a transaction (Trx A) to Bob's address but does not broadcast it. \nAs soon as Evil miner solves a block he waits for a block at the same height to be solved.  Immediately on learning this, Evil miner sends his block directly to (and only to) Bob's node.  Evil miner then immediately creates another transaction (Trx B) that double spends the coin used in Trx A and broadcasts Trx B to well connected nodes.\nShortly after, Bob then makes a payment to Alice (Trx C).  Bob doesn't keep much of a balance, so the coin that was chosen by the client happened to be from Trx A which came from Evil miner and has one confirmation yet.\nBecause Trx B got a head start by being sent through a well connected node, Trx A from Bob's node won't get propagated.  Eventually the blockchain will include Trx B in the next block and Bob's node will drop Trx A back to 0/unconfirmed.\nBob's Trx C to Alice will never confirm then.  Alice might think Bob is a scammer as the payment that Bob claims to have made doesn't arrive and will not get included in any blocks.\n\nIt is ironic that only Bob's node is either the sole ignorant node (or one of the few nodes) that doesn't realize that Trx A is invalid.  It will be in this state until next block gets mined, -- so on average there will be a ten minute span that Bob's client remains ignorant and is willing to spend that invalid coin.\n\nBob could have lessened the chance of this occurring by following the recommended step of not listening (-nolisten) and explicitly connecting only to a well connected node (-connect=) but if even Bob didn't do that the Bitcoin client could handle this situation a little better.\n\nApparently the future plans for how the Bitcoin.org client deals with these 0/unconfirmed spend transactions is to have the client temporarily disable them and eventually to delete them when the conflict is buried deep in the chain.  There could, however, be a configurable option added to prevent the spend transaction from occurring in the first place.\n\nIf there was a configuration setting that added a restriction to coin selection (i.e., only choose coins with N or more confirmations), then this situation could be averted entirely.  Another approach, I suppose, would be to for the client to retain in the memory pool any transactions that it rejected (e.g., Trx B) and to then not consider using any coins where it knows there is at least one conflict until after the coin with a conflict has confirmed.\n\nNow the normal situation where Evil miner might be motivated to do this is if Bob delivers the goods after seeing just one confirmation (or on 0/unconfirmed even).  This is not the recommended practice, of course, as six confirmations is the recommended level for merchants who transact with untrusted parties or where there is no recourse (e.g., exchange for Dwolla or Liberty Reserve, for example).\n\nBut if Evil miner's intention is to be disruptive to Bob such that Bob's service is harmed, then this attack is effective.  (And inexpensive, say if the transaction is an exchange where little or no value is lost -- such as a deposit of bitcoins to an account on Bob's service and then a later withdrawal in which Bob assesses no fees.) \n\nIf Bob could configure the client to only spend coins that have confirmed (e.g., those with six confirmations or more), the scenario where Bob makes spend transactions that will not confirm he could prevent this scenario of him creating invalid payments from occurring.\n\nThe vector76 attack is described here:\nhttp://bitcointalk.org/index.php?topic=36788.msg463391#msg463391\nand further here\nhttp://sourceforge.net/mailarchive/message.php?msg_id=27963970",
   "closed_at" : "2014-09-25T10:19:47Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1428/comments",
   "created_at" : "2012-06-06T19:40:11Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1428/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/1428",
   "id" : 4936884,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1428/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 1428,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Configurable level of confirmations needed before a coin can be spent",
   "updated_at" : "2014-09-25T10:19:47Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1428",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/24884?v=3",
      "events_url" : "https://api.github.com/users/sgornick/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sgornick/followers",
      "following_url" : "https://api.github.com/users/sgornick/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sgornick/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sgornick",
      "id" : 24884,
      "login" : "sgornick",
      "organizations_url" : "https://api.github.com/users/sgornick/orgs",
      "received_events_url" : "https://api.github.com/users/sgornick/received_events",
      "repos_url" : "https://api.github.com/users/sgornick/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sgornick/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sgornick/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sgornick"
   }
}
