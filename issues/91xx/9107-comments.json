[
   {
      "body" : "Concept ACK, thanks for improving documentation around this code.\r\n",
      "created_at" : "2016-11-21T11:06:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-261908235",
      "id" : 261908235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-11-21T11:06:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261908235",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908233"
         }
      },
      "body" : "nit: \"ids\" instead of \"txs\" would be more consistent with other names",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-11-21T14:47:27Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908233",
      "id" : 88908233,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 50,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908996"
         }
      },
      "body" : "Arg could be const reference",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-11-21T14:50:38Z",
      "diff_hunk" : "@@ -211,6 +215,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     BOOST_CHECK(missed_an_entry);\n }\n \n+typedef std::tuple<CTransaction,CTxUndo,CCoins> TxData;\n+// Store of all necessary tx and undo data for next test\n+std::map<uint256, TxData> alltxs;\n+\n+TxData &FindRandomFrom(std::set<uint256> &txidset) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908996",
      "id" : 88908996,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 26,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88916229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88916229"
         }
      },
      "body" : "Is this special case actually needed? Seems like origcoins/oldcoins will be empty in this case anyway.",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-11-21T15:23:18Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;\n     std::set<uint256> duplicateids;\n+    std::set<uint256> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        {\n+        uint32_t randiter = insecure_rand();\n+\n+        // 19/20 txs add a new transaction\n+        if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n             unsigned int height = insecure_rand();\n+            CCoins oldcoins;\n \n-            // 1/10 times create a coinbase\n-            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n-                // 1/100 times create a duplicate coinbase\n+            // 2/20 times create a newscoinbase\n+            if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n+                // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n-                    if (coinbaseIt == coinbaseids.end()) {\n-                        coinbaseIt = coinbaseids.begin();\n-                    }\n-                    //Use same random value to have same hash and be a true duplicate\n-                    tx.vout[0].nValue = coinbaseIt->second;\n-                    assert(tx.GetHash() == coinbaseIt->first);\n-                    duplicateids.insert(coinbaseIt->first);\n+                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    // Reuse the exact same coinbase\n+                    tx = std::get<0>(txd);\n+                    // shouldn't be available for reconnection if its been duplicated\n+                    disconnectedtxs.erase(tx.GetHash());\n+\n+                    duplicateids.insert(tx.GetHash());\n                 }\n                 else {\n-                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                    coinbaseids.insert(tx.GetHash());\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n-            // 9/10 times create a regular tx\n+\n+            // 17/20 times reconnect previous or add a regular tx\n             else {\n+\n                 uint256 prevouthash;\n-                // equally likely to spend coinbase or non coinbase\n-                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n-                if (txIt == alltxids.end()) {\n-                    txIt = alltxids.begin();\n+                // 1/20 times reconnect a previously disconnected tx\n+                if (randiter % 20 == 2 && disconnectedtxs.size()) {\n+                    TxData &txd = FindRandomFrom(disconnectedtxs);\n+                    tx = std::get<0>(txd);\n+                    prevouthash = tx.vin[0].prevout.hash;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n+                        disconnectedtxs.erase(tx.GetHash());\n+                        continue;\n+                    }\n+\n+                    // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n+                    if (utxoset.count(tx.GetHash())) {\n+                        assert(CTransaction(tx).IsCoinBase());\n+                        assert(duplicateids.count(tx.GetHash()));\n+                    }\n+                    disconnectedtxs.erase(tx.GetHash());\n                 }\n-                prevouthash = *txIt;\n \n-                // Construct the tx to spend the coins of prevouthash\n-                tx.vin[0].prevout.hash = prevouthash;\n-                tx.vin[0].prevout.n = 0;\n+                // 16/20 times create a regular tx\n+                else {\n+                    TxData &txd = FindRandomFrom(utxoset);\n+                    prevouthash = std::get<0>(txd).GetHash();\n \n+                    // Construct the tx to spend the coins of prevouthash\n+                    tx.vin[0].prevout.hash = prevouthash;\n+                    tx.vin[0].prevout.n = 0;\n+                    assert(!CTransaction(tx).IsCoinBase());\n+                }\n+                // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n+                oldcoins = result[prevouthash];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                CCoins& oldcoins = result[prevouthash];\n-                oldcoins.Clear();\n+                result[prevouthash].Clear();\n \n-                // It is of particular importance here that once we spend a coinbase tx hash\n-                // it is no longer available to be duplicated (or spent again)\n-                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n-                // results in the fact that no coinbases were duplicated after they were already spent\n-                alltxids.erase(prevouthash);\n-                coinbaseids.erase(prevouthash);\n+                utxoset.erase(prevouthash);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n                 if (duplicateids.count(prevouthash))\n                     spent_a_duplicate_coinbase = true;\n \n-                assert(!CTransaction(tx).IsCoinBase());\n             }\n-            // Track this tx to possibly spend later\n-            alltxids.insert(tx.GetHash());\n-\n             // Update the expected result to know about the new output coins\n-            CCoins &coins = result[tx.GetHash()];\n-            coins.FromTx(tx, height);\n+            result[tx.GetHash()].FromTx(tx, height);\n+\n+            // Call UpdateCoins on the top cache\n+            CTxUndo undo;\n+            UpdateCoins(tx, *(stack.back()), undo, height);\n+\n+            // Track this tx and undo info to use later\n+            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+\n+            // Update the utxo set for future spends\n+            utxoset.insert(tx.GetHash());\n+        }\n+\n+        //1/20 times undo a previous transaction\n+        else if (utxoset.size()) {\n+            TxData &txd = FindRandomFrom(utxoset);\n+\n+            CTransaction &tx = std::get<0>(txd);\n+            CTxUndo &undo = std::get<1>(txd);\n+            CCoins &origcoins = std::get<2>(txd);\n+\n+            uint256 undohash = tx.GetHash();\n \n-            UpdateCoins(tx, *(stack.back()), height);\n+            // Update the expected result\n+            // Remove new outputs\n+            result[undohash].Clear();\n+            // If not coinbase restore prevout\n+            if (!tx.IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88916229",
      "id" : 88916229,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 194,
      "path" : "src/test/coins_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88916229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88919480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88919480"
         }
      },
      "body" : "Suggestion: Maybe move the `utxoset` updates here and elsewhere next to the `result` updates, since `utxoset` is essentially just a list of the keys present in the `result` map. If somebody is changing one of these, they probably need to update the other too.",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-11-21T15:37:17Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;\n     std::set<uint256> duplicateids;\n+    std::set<uint256> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        {\n+        uint32_t randiter = insecure_rand();\n+\n+        // 19/20 txs add a new transaction\n+        if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n             unsigned int height = insecure_rand();\n+            CCoins oldcoins;\n \n-            // 1/10 times create a coinbase\n-            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n-                // 1/100 times create a duplicate coinbase\n+            // 2/20 times create a newscoinbase\n+            if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n+                // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n-                    if (coinbaseIt == coinbaseids.end()) {\n-                        coinbaseIt = coinbaseids.begin();\n-                    }\n-                    //Use same random value to have same hash and be a true duplicate\n-                    tx.vout[0].nValue = coinbaseIt->second;\n-                    assert(tx.GetHash() == coinbaseIt->first);\n-                    duplicateids.insert(coinbaseIt->first);\n+                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    // Reuse the exact same coinbase\n+                    tx = std::get<0>(txd);\n+                    // shouldn't be available for reconnection if its been duplicated\n+                    disconnectedtxs.erase(tx.GetHash());\n+\n+                    duplicateids.insert(tx.GetHash());\n                 }\n                 else {\n-                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                    coinbaseids.insert(tx.GetHash());\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n-            // 9/10 times create a regular tx\n+\n+            // 17/20 times reconnect previous or add a regular tx\n             else {\n+\n                 uint256 prevouthash;\n-                // equally likely to spend coinbase or non coinbase\n-                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n-                if (txIt == alltxids.end()) {\n-                    txIt = alltxids.begin();\n+                // 1/20 times reconnect a previously disconnected tx\n+                if (randiter % 20 == 2 && disconnectedtxs.size()) {\n+                    TxData &txd = FindRandomFrom(disconnectedtxs);\n+                    tx = std::get<0>(txd);\n+                    prevouthash = tx.vin[0].prevout.hash;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n+                        disconnectedtxs.erase(tx.GetHash());\n+                        continue;\n+                    }\n+\n+                    // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n+                    if (utxoset.count(tx.GetHash())) {\n+                        assert(CTransaction(tx).IsCoinBase());\n+                        assert(duplicateids.count(tx.GetHash()));\n+                    }\n+                    disconnectedtxs.erase(tx.GetHash());\n                 }\n-                prevouthash = *txIt;\n \n-                // Construct the tx to spend the coins of prevouthash\n-                tx.vin[0].prevout.hash = prevouthash;\n-                tx.vin[0].prevout.n = 0;\n+                // 16/20 times create a regular tx\n+                else {\n+                    TxData &txd = FindRandomFrom(utxoset);\n+                    prevouthash = std::get<0>(txd).GetHash();\n \n+                    // Construct the tx to spend the coins of prevouthash\n+                    tx.vin[0].prevout.hash = prevouthash;\n+                    tx.vin[0].prevout.n = 0;\n+                    assert(!CTransaction(tx).IsCoinBase());\n+                }\n+                // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n+                oldcoins = result[prevouthash];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                CCoins& oldcoins = result[prevouthash];\n-                oldcoins.Clear();\n+                result[prevouthash].Clear();\n \n-                // It is of particular importance here that once we spend a coinbase tx hash\n-                // it is no longer available to be duplicated (or spent again)\n-                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n-                // results in the fact that no coinbases were duplicated after they were already spent\n-                alltxids.erase(prevouthash);\n-                coinbaseids.erase(prevouthash);\n+                utxoset.erase(prevouthash);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n                 if (duplicateids.count(prevouthash))\n                     spent_a_duplicate_coinbase = true;\n \n-                assert(!CTransaction(tx).IsCoinBase());\n             }\n-            // Track this tx to possibly spend later\n-            alltxids.insert(tx.GetHash());\n-\n             // Update the expected result to know about the new output coins\n-            CCoins &coins = result[tx.GetHash()];\n-            coins.FromTx(tx, height);\n+            result[tx.GetHash()].FromTx(tx, height);\n+\n+            // Call UpdateCoins on the top cache\n+            CTxUndo undo;\n+            UpdateCoins(tx, *(stack.back()), undo, height);\n+\n+            // Track this tx and undo info to use later\n+            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+\n+            // Update the utxo set for future spends\n+            utxoset.insert(tx.GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88919480",
      "id" : 88919480,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 176,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88919480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90118146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90118146"
         }
      },
      "body" : "hmm.. I'll move this above the alltxs insert, but I was trying to keep the order the same for each set of changes.\r\n\r\n- update expected result\r\n- modify cache the same way the production code does\r\n(these first two things are what we will compare against each other)\r\n- modify state used to run the test (which includes utxoset)\r\n",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-11-29T21:29:40Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;\n     std::set<uint256> duplicateids;\n+    std::set<uint256> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        {\n+        uint32_t randiter = insecure_rand();\n+\n+        // 19/20 txs add a new transaction\n+        if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n             unsigned int height = insecure_rand();\n+            CCoins oldcoins;\n \n-            // 1/10 times create a coinbase\n-            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n-                // 1/100 times create a duplicate coinbase\n+            // 2/20 times create a newscoinbase\n+            if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n+                // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n-                    if (coinbaseIt == coinbaseids.end()) {\n-                        coinbaseIt = coinbaseids.begin();\n-                    }\n-                    //Use same random value to have same hash and be a true duplicate\n-                    tx.vout[0].nValue = coinbaseIt->second;\n-                    assert(tx.GetHash() == coinbaseIt->first);\n-                    duplicateids.insert(coinbaseIt->first);\n+                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    // Reuse the exact same coinbase\n+                    tx = std::get<0>(txd);\n+                    // shouldn't be available for reconnection if its been duplicated\n+                    disconnectedtxs.erase(tx.GetHash());\n+\n+                    duplicateids.insert(tx.GetHash());\n                 }\n                 else {\n-                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                    coinbaseids.insert(tx.GetHash());\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n-            // 9/10 times create a regular tx\n+\n+            // 17/20 times reconnect previous or add a regular tx\n             else {\n+\n                 uint256 prevouthash;\n-                // equally likely to spend coinbase or non coinbase\n-                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n-                if (txIt == alltxids.end()) {\n-                    txIt = alltxids.begin();\n+                // 1/20 times reconnect a previously disconnected tx\n+                if (randiter % 20 == 2 && disconnectedtxs.size()) {\n+                    TxData &txd = FindRandomFrom(disconnectedtxs);\n+                    tx = std::get<0>(txd);\n+                    prevouthash = tx.vin[0].prevout.hash;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n+                        disconnectedtxs.erase(tx.GetHash());\n+                        continue;\n+                    }\n+\n+                    // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n+                    if (utxoset.count(tx.GetHash())) {\n+                        assert(CTransaction(tx).IsCoinBase());\n+                        assert(duplicateids.count(tx.GetHash()));\n+                    }\n+                    disconnectedtxs.erase(tx.GetHash());\n                 }\n-                prevouthash = *txIt;\n \n-                // Construct the tx to spend the coins of prevouthash\n-                tx.vin[0].prevout.hash = prevouthash;\n-                tx.vin[0].prevout.n = 0;\n+                // 16/20 times create a regular tx\n+                else {\n+                    TxData &txd = FindRandomFrom(utxoset);\n+                    prevouthash = std::get<0>(txd).GetHash();\n \n+                    // Construct the tx to spend the coins of prevouthash\n+                    tx.vin[0].prevout.hash = prevouthash;\n+                    tx.vin[0].prevout.n = 0;\n+                    assert(!CTransaction(tx).IsCoinBase());\n+                }\n+                // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n+                oldcoins = result[prevouthash];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                CCoins& oldcoins = result[prevouthash];\n-                oldcoins.Clear();\n+                result[prevouthash].Clear();\n \n-                // It is of particular importance here that once we spend a coinbase tx hash\n-                // it is no longer available to be duplicated (or spent again)\n-                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n-                // results in the fact that no coinbases were duplicated after they were already spent\n-                alltxids.erase(prevouthash);\n-                coinbaseids.erase(prevouthash);\n+                utxoset.erase(prevouthash);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n                 if (duplicateids.count(prevouthash))\n                     spent_a_duplicate_coinbase = true;\n \n-                assert(!CTransaction(tx).IsCoinBase());\n             }\n-            // Track this tx to possibly spend later\n-            alltxids.insert(tx.GetHash());\n-\n             // Update the expected result to know about the new output coins\n-            CCoins &coins = result[tx.GetHash()];\n-            coins.FromTx(tx, height);\n+            result[tx.GetHash()].FromTx(tx, height);\n+\n+            // Call UpdateCoins on the top cache\n+            CTxUndo undo;\n+            UpdateCoins(tx, *(stack.back()), undo, height);\n+\n+            // Track this tx and undo info to use later\n+            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+\n+            // Update the utxo set for future spends\n+            utxoset.insert(tx.GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90118146",
      "id" : 90118146,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 176,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 10642674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90118146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90118896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90118896"
         }
      },
      "body" : "It seems cleaner to me to not be messing with tx.vin of coinbases",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-11-29T21:33:36Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;\n     std::set<uint256> duplicateids;\n+    std::set<uint256> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        {\n+        uint32_t randiter = insecure_rand();\n+\n+        // 19/20 txs add a new transaction\n+        if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n             unsigned int height = insecure_rand();\n+            CCoins oldcoins;\n \n-            // 1/10 times create a coinbase\n-            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n-                // 1/100 times create a duplicate coinbase\n+            // 2/20 times create a newscoinbase\n+            if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n+                // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n-                    if (coinbaseIt == coinbaseids.end()) {\n-                        coinbaseIt = coinbaseids.begin();\n-                    }\n-                    //Use same random value to have same hash and be a true duplicate\n-                    tx.vout[0].nValue = coinbaseIt->second;\n-                    assert(tx.GetHash() == coinbaseIt->first);\n-                    duplicateids.insert(coinbaseIt->first);\n+                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    // Reuse the exact same coinbase\n+                    tx = std::get<0>(txd);\n+                    // shouldn't be available for reconnection if its been duplicated\n+                    disconnectedtxs.erase(tx.GetHash());\n+\n+                    duplicateids.insert(tx.GetHash());\n                 }\n                 else {\n-                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                    coinbaseids.insert(tx.GetHash());\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n-            // 9/10 times create a regular tx\n+\n+            // 17/20 times reconnect previous or add a regular tx\n             else {\n+\n                 uint256 prevouthash;\n-                // equally likely to spend coinbase or non coinbase\n-                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n-                if (txIt == alltxids.end()) {\n-                    txIt = alltxids.begin();\n+                // 1/20 times reconnect a previously disconnected tx\n+                if (randiter % 20 == 2 && disconnectedtxs.size()) {\n+                    TxData &txd = FindRandomFrom(disconnectedtxs);\n+                    tx = std::get<0>(txd);\n+                    prevouthash = tx.vin[0].prevout.hash;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n+                        disconnectedtxs.erase(tx.GetHash());\n+                        continue;\n+                    }\n+\n+                    // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n+                    if (utxoset.count(tx.GetHash())) {\n+                        assert(CTransaction(tx).IsCoinBase());\n+                        assert(duplicateids.count(tx.GetHash()));\n+                    }\n+                    disconnectedtxs.erase(tx.GetHash());\n                 }\n-                prevouthash = *txIt;\n \n-                // Construct the tx to spend the coins of prevouthash\n-                tx.vin[0].prevout.hash = prevouthash;\n-                tx.vin[0].prevout.n = 0;\n+                // 16/20 times create a regular tx\n+                else {\n+                    TxData &txd = FindRandomFrom(utxoset);\n+                    prevouthash = std::get<0>(txd).GetHash();\n \n+                    // Construct the tx to spend the coins of prevouthash\n+                    tx.vin[0].prevout.hash = prevouthash;\n+                    tx.vin[0].prevout.n = 0;\n+                    assert(!CTransaction(tx).IsCoinBase());\n+                }\n+                // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n+                oldcoins = result[prevouthash];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                CCoins& oldcoins = result[prevouthash];\n-                oldcoins.Clear();\n+                result[prevouthash].Clear();\n \n-                // It is of particular importance here that once we spend a coinbase tx hash\n-                // it is no longer available to be duplicated (or spent again)\n-                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n-                // results in the fact that no coinbases were duplicated after they were already spent\n-                alltxids.erase(prevouthash);\n-                coinbaseids.erase(prevouthash);\n+                utxoset.erase(prevouthash);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n                 if (duplicateids.count(prevouthash))\n                     spent_a_duplicate_coinbase = true;\n \n-                assert(!CTransaction(tx).IsCoinBase());\n             }\n-            // Track this tx to possibly spend later\n-            alltxids.insert(tx.GetHash());\n-\n             // Update the expected result to know about the new output coins\n-            CCoins &coins = result[tx.GetHash()];\n-            coins.FromTx(tx, height);\n+            result[tx.GetHash()].FromTx(tx, height);\n+\n+            // Call UpdateCoins on the top cache\n+            CTxUndo undo;\n+            UpdateCoins(tx, *(stack.back()), undo, height);\n+\n+            // Track this tx and undo info to use later\n+            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+\n+            // Update the utxo set for future spends\n+            utxoset.insert(tx.GetHash());\n+        }\n+\n+        //1/20 times undo a previous transaction\n+        else if (utxoset.size()) {\n+            TxData &txd = FindRandomFrom(utxoset);\n+\n+            CTransaction &tx = std::get<0>(txd);\n+            CTxUndo &undo = std::get<1>(txd);\n+            CCoins &origcoins = std::get<2>(txd);\n+\n+            uint256 undohash = tx.GetHash();\n \n-            UpdateCoins(tx, *(stack.back()), height);\n+            // Update the expected result\n+            // Remove new outputs\n+            result[undohash].Clear();\n+            // If not coinbase restore prevout\n+            if (!tx.IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90118896",
      "id" : 90118896,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 194,
      "path" : "src/test/coins_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 10643425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90118896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "utACK 743009682111aef5c4aab84c0cb5189e4afa4f06\r\nCare to squash?",
      "created_at" : "2016-12-01T01:02:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264047295",
      "id" : 264047295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-01T01:02:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264047295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Squashed\r\nidentical code to 7430096\r\nonly nits and minor changes to address test comments from 3572fea",
      "created_at" : "2016-12-01T02:39:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264062852",
      "id" : 264062852,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-01T02:39:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264062852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90374150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90374150"
         }
      },
      "body" : "I hate bip numbers...any chance you can also/or only state what this actually means?",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-12-01T02:44:19Z",
      "diff_hunk" : "@@ -117,17 +117,30 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n-// ModifyNewCoins has to know whether the new outputs its creating are for a\n-// coinbase or not.  If they are for a coinbase, it can not mark them as fresh.\n-// This is to ensure that the historical duplicate coinbases before BIP30 was\n-// in effect will still be properly overwritten when spent.\n+/* ModifyNewCoins allows for faster coin modification when creating the new\n+ * outputs from a transaction.  It assumes that BIP 30 applies and has already",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90374150",
      "id" : 90374150,
      "original_commit_id" : "c9270c96e2ff1676eb87a94ef9b872bea3653804",
      "original_position" : 9,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 10893314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90374150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "While you're at it, can you add a comment to coins.cpp:200 (last else branch in BatchWrite) noting that it is very important that we are only swapping the coins itself, and keeping the flags set on the parent cache.",
      "created_at" : "2016-12-01T02:48:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264064136",
      "id" : 264064136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-01T02:48:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264064136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90374583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90374583"
         }
      },
      "body" : "(I think you did for 30, but not for 34)",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-12-01T02:49:24Z",
      "diff_hunk" : "@@ -117,17 +117,30 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n-// ModifyNewCoins has to know whether the new outputs its creating are for a\n-// coinbase or not.  If they are for a coinbase, it can not mark them as fresh.\n-// This is to ensure that the historical duplicate coinbases before BIP30 was\n-// in effect will still be properly overwritten when spent.\n+/* ModifyNewCoins allows for faster coin modification when creating the new\n+ * outputs from a transaction.  It assumes that BIP 30 applies and has already",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90374583",
      "id" : 90374583,
      "original_commit_id" : "c9270c96e2ff1676eb87a94ef9b872bea3653804",
      "original_position" : 9,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 10893672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90374583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "utACK code changes in c9270c96e2ff1676eb87a94ef9b872bea3653804, though I'd prefer more comments. Didnt review tests, but did spend a bunch of time looking at this with @morcos when he was deciding the best route to go for changes.",
      "created_at" : "2016-12-01T02:53:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264064869",
      "id" : 264064869,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-01T02:53:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264064869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt tell me if this is what you had in mind?  I'm not sure it's worth it, but don't mind squashing the additional comments if you want them.  The whole design of coins would be broken if we were copying all the flags over, but I tried to flag the confusing case.",
      "created_at" : "2016-12-01T17:08:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264232232",
      "id" : 264232232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-01T17:08:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264232232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Yea, looks good to me.",
      "created_at" : "2016-12-01T22:19:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264313285",
      "id" : 264313285,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-01T22:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264313285",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "squashed in additional comments",
      "created_at" : "2016-12-02T00:40:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264340329",
      "id" : 264340329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-02T00:40:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264340329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90737316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90737316"
         }
      },
      "body" : "Just a suggestion, but I think another way you could write this section might be:\r\n\r\n```\r\n    if (!coinbase) {\r\n        // New coins must not already exist.\r\n        assert(ret.first->second.coins.IsPruned());\r\n\r\n        if (!(ret.first->second.flags & CCoinsCacheEntry::DIRTY)) {\r\n            // If the coin is known to be pruned (have no unspent outputs) in\r\n            // the current view and the cache entry is not dirty, we know the\r\n            // coin also must be pruned in the base view as well, so it is safe\r\n            // to mark this fresh.\r\n            ret.first->second.flags |= CCoinsCacheEntry::FRESH;\r\n        }\r\n    }\r\n```\r\n\r\nDifferences from above:\r\n- Assert is broader and more prominent.\r\n- Comments are inline, which I think make this more understandable.\r\n- FRESH flag will continue to be set in the case of the non-dirty existing cache entry.",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-12-02T23:20:40Z",
      "diff_hunk" : "@@ -117,17 +117,31 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n-// ModifyNewCoins has to know whether the new outputs its creating are for a\n-// coinbase or not.  If they are for a coinbase, it can not mark them as fresh.\n-// This is to ensure that the historical duplicate coinbases before BIP30 was\n-// in effect will still be properly overwritten when spent.\n+/* ModifyNewCoins allows for faster coin modification when creating the new\n+ * outputs from a transaction.  It assumes that BIP 30 (no duplicate txids)\n+ * applies and has already been tested for (or the test is not required due to\n+ * BIP 34, height in coinbase).  If we can assume BIP 30 then we know that any\n+ * transaction we are adding to the UTXO must not already exist in the utxo\n+ * unless it is fully spent.  Thus we can check only if it exists at the current\n+ * level of the cache, in which case it is not safe to mark it FRESH (b/c then\n+ * spentness might still need to flushed) and if it doesn't exist in the current\n+ * cache, we know it either doesn't exist or is pruned in parent caches, which\n+ * is the definition of FRESH.  The exception to this is the two historical\n+ * violations of BIP 30 in the chain, both of which were coinbases.  We do not\n+ * mark these fresh so we we can ensure that they will still be properly\n+ * overwritten when spent.\n+ */\n CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {\n     assert(!hasModifier);\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    ret.first->second.coins.Clear();\n     if (!coinbase) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90737316",
      "id" : 90737316,
      "original_commit_id" : "8174c1dead3e06c5b09939ec0681806e3d0573d8",
      "original_position" : 26,
      "path" : "src/coins.cpp",
      "position" : 26,
      "pull_request_review_id" : 11258369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90737316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90739981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90739981"
         }
      },
      "body" : "heh.  i'll want to think about that 100 times, but that sounds right to me",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2016-12-02T23:48:35Z",
      "diff_hunk" : "@@ -117,17 +117,31 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n-// ModifyNewCoins has to know whether the new outputs its creating are for a\n-// coinbase or not.  If they are for a coinbase, it can not mark them as fresh.\n-// This is to ensure that the historical duplicate coinbases before BIP30 was\n-// in effect will still be properly overwritten when spent.\n+/* ModifyNewCoins allows for faster coin modification when creating the new\n+ * outputs from a transaction.  It assumes that BIP 30 (no duplicate txids)\n+ * applies and has already been tested for (or the test is not required due to\n+ * BIP 34, height in coinbase).  If we can assume BIP 30 then we know that any\n+ * transaction we are adding to the UTXO must not already exist in the utxo\n+ * unless it is fully spent.  Thus we can check only if it exists at the current\n+ * level of the cache, in which case it is not safe to mark it FRESH (b/c then\n+ * spentness might still need to flushed) and if it doesn't exist in the current\n+ * cache, we know it either doesn't exist or is pruned in parent caches, which\n+ * is the definition of FRESH.  The exception to this is the two historical\n+ * violations of BIP 30 in the chain, both of which were coinbases.  We do not\n+ * mark these fresh so we we can ensure that they will still be properly\n+ * overwritten when spent.\n+ */\n CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {\n     assert(!hasModifier);\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    ret.first->second.coins.Clear();\n     if (!coinbase) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r90739981",
      "id" : 90739981,
      "original_commit_id" : "8174c1dead3e06c5b09939ec0681806e3d0573d8",
      "original_position" : 26,
      "path" : "src/coins.cpp",
      "position" : 26,
      "pull_request_review_id" : 11261007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-12-05T19:32:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90739981",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "dancing the dance of a clean rebase on the grave of main.cpp\r\n\r\nwill address @ryanofsky's suggestion separately\r\n",
      "created_at" : "2016-12-03T14:16:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264641852",
      "id" : 264641852,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-03T14:16:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264641852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@sipa @TheBlueMatt Can you guys take a look one more time at the new logic.  I'll squash to one commit after you ACK.\r\n\r\n@fanquake Can you milestone for 0.14.0\r\n",
      "created_at" : "2016-12-05T19:34:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-264952880",
      "id" : 264952880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-12-05T19:34:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264952880",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r94500547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94500547"
         }
      },
      "body" : "This line could move into an else branch.",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2017-01-03T22:47:56Z",
      "diff_hunk" : "@@ -121,24 +121,29 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n  * outputs from a transaction.  It assumes that BIP 30 (no duplicate txids)\n  * applies and has already been tested for (or the test is not required due to\n  * BIP 34, height in coinbase).  If we can assume BIP 30 then we know that any\n- * transaction we are adding to the UTXO must not already exist in the utxo\n- * unless it is fully spent.  Thus we can check only if it exists at the current\n- * level of the cache, in which case it is not safe to mark it FRESH (b/c then\n- * spentness might still need to flushed) and if it doesn't exist in the current\n- * cache, we know it either doesn't exist or is pruned in parent caches, which\n- * is the definition of FRESH.  The exception to this is the two historical\n- * violations of BIP 30 in the chain, both of which were coinbases.  We do not\n- * mark these fresh so we we can ensure that they will still be properly\n- * overwritten when spent.\n+ * non-coinbase transaction we are adding to the UTXO must not already exist in\n+ * the utxo unless it is fully spent.  Thus we can check only if it exists DIRTY\n+ * at the current level of the cache, in which case it is not safe to mark it\n+ * FRESH (b/c then its spentness still needs to flushed).  If it's not dirty and\n+ * doesn't exist or is pruned in the current cache, we know it either doesn't\n+ * exist or is pruned in parent caches, which is the definition of FRESH.  The\n+ * exception to this is the two historical violations of BIP 30 in the chain,\n+ * both of which were coinbases.  We do not mark these fresh so we we can ensure\n+ * that they will still be properly overwritten when spent.\n  */\n CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {\n     assert(!hasModifier);\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n     if (!coinbase) {\n-        if (ret.second) {\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else {\n-            assert(ret.first->second.coins.IsPruned());\n+        // New coins must not already exist.\n+        assert(ret.first->second.coins.IsPruned());\n+\n+        if (!(ret.first->second.flags & CCoinsCacheEntry::DIRTY)) {\n+            // If the coin is known to be pruned (have no unspent outputs) in\n+            // the current view and the cache entry is not dirty, we know the\n+            // coin also must be pruned in the parent view as well, so it is safe\n+            // to mark this fresh.\n+            ret.first->second.flags |= CCoinsCacheEntry::FRESH;\n         }\n     }\n     ret.first->second.coins.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r94500547",
      "id" : 94500547,
      "original_commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "original_position" : 42,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 15028685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2017-01-03T22:48:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94500547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r94522226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94522226"
         }
      },
      "body" : "Which line?  The `Clear()`?  Isn't that needed for the historical coinbase overwrite cases?",
      "commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "created_at" : "2017-01-04T02:32:37Z",
      "diff_hunk" : "@@ -121,24 +121,29 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n  * outputs from a transaction.  It assumes that BIP 30 (no duplicate txids)\n  * applies and has already been tested for (or the test is not required due to\n  * BIP 34, height in coinbase).  If we can assume BIP 30 then we know that any\n- * transaction we are adding to the UTXO must not already exist in the utxo\n- * unless it is fully spent.  Thus we can check only if it exists at the current\n- * level of the cache, in which case it is not safe to mark it FRESH (b/c then\n- * spentness might still need to flushed) and if it doesn't exist in the current\n- * cache, we know it either doesn't exist or is pruned in parent caches, which\n- * is the definition of FRESH.  The exception to this is the two historical\n- * violations of BIP 30 in the chain, both of which were coinbases.  We do not\n- * mark these fresh so we we can ensure that they will still be properly\n- * overwritten when spent.\n+ * non-coinbase transaction we are adding to the UTXO must not already exist in\n+ * the utxo unless it is fully spent.  Thus we can check only if it exists DIRTY\n+ * at the current level of the cache, in which case it is not safe to mark it\n+ * FRESH (b/c then its spentness still needs to flushed).  If it's not dirty and\n+ * doesn't exist or is pruned in the current cache, we know it either doesn't\n+ * exist or is pruned in parent caches, which is the definition of FRESH.  The\n+ * exception to this is the two historical violations of BIP 30 in the chain,\n+ * both of which were coinbases.  We do not mark these fresh so we we can ensure\n+ * that they will still be properly overwritten when spent.\n  */\n CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid, bool coinbase) {\n     assert(!hasModifier);\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n     if (!coinbase) {\n-        if (ret.second) {\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else {\n-            assert(ret.first->second.coins.IsPruned());\n+        // New coins must not already exist.\n+        assert(ret.first->second.coins.IsPruned());\n+\n+        if (!(ret.first->second.flags & CCoinsCacheEntry::DIRTY)) {\n+            // If the coin is known to be pruned (have no unspent outputs) in\n+            // the current view and the cache entry is not dirty, we know the\n+            // coin also must be pruned in the parent view as well, so it is safe\n+            // to mark this fresh.\n+            ret.first->second.flags |= CCoinsCacheEntry::FRESH;\n         }\n     }\n     ret.first->second.coins.Clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r94522226",
      "id" : 94522226,
      "original_commit_id" : "e5f93783cd4c55a4a040719a9006e897e44509a3",
      "original_position" : 42,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 15049761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2017-01-04T02:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94522226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "The branch above starts with an assert that coins.IsPruned(), so a Clear()\nin that case would be a no-op (I think?).\n",
      "created_at" : "2017-01-04T02:36:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270281722",
      "id" : 270281722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T02:36:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270281722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "oh yes, confused myself..\r\ni can change it if you think thats clearer, or a potential performance improvement?\r\n",
      "created_at" : "2017-01-04T02:39:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270282121",
      "id" : 270282121,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T02:39:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270282121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Test fixes are here: https://github.com/ryanofsky/bitcoin/commits/pr/morcos-saferModifyNewCoins (in the two squash commits) if you see failures after rebasing.",
      "created_at" : "2017-01-04T02:54:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270283759",
      "id" : 270283759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T02:54:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270283759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@morcos No strong opinion, just pointing it out. I don't think it will have a noticable performance impact.",
      "created_at" : "2017-01-04T14:45:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270386939",
      "id" : 270386939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T14:45:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270386939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Rebased and squashed\r\n\r\nIgnored @sipa's suggestion (sorry)\r\nIncluded @ryanofsky's updates to the tests and switched the assert to throw std::logic_error so we could non-noisily test that code path.\r\n\r\nDiff is here:\r\nhttps://0bin.net/paste/RH2QCOc8C7lq505F#67QWes6s2d2bttLu6KXZqcKb7YJqEHzmY8pFv9+BV-M\r\n",
      "created_at" : "2017-01-04T16:45:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270419824",
      "id" : 270419824,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T16:45:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270419824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "utACK b50cd7a67e71051db59199a4185e7c82b669c659",
      "created_at" : "2017-01-04T19:12:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270459095",
      "id" : 270459095,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T19:12:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270459095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I ran the simulation test 1000x longer than the normal unit tests do.",
      "created_at" : "2017-01-04T19:57:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-270470469",
      "id" : 270470469,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2017-01-04T19:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270470469",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
