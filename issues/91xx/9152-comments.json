[
   {
      "body" : "Concept ACK (Haven't really looked at the code).\r\nI think a sweep function would be a great feature. One could import \"old\" private keys into a new HD wallet for example.\r\n\r\nPossible extension: `sweepseed` could be an extended version of that, moving all funds form a HD seed to a new one, generating large lookup-windows on different chainpathes. It could also be UTXO set only not requiring a -rescan.",
      "created_at" : "2016-11-14T07:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-260267890",
      "id" : 260267890,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2016-11-14T07:41:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/260267890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "From a raw flow perspective, the generation of the sweep transaction is something that works from public information and should be possible on an online node without access to the private keys... so that one should be a 'createrawsweeptransaction' which takes a list of adresses/pubkeys/redeemscripts (and maybe private keys ... maybe some kind of BIP32 chain spec) and returns a transaction that spends all coins assigned to matching keys, potentially with arguments to limit the set of inputs collected.",
      "created_at" : "2016-11-15T17:29:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-260708687",
      "id" : 260708687,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2016-11-15T17:29:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/260708687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Hmm, what about extending RPC `importprivkey` with another optional argument `sweep` defaulting to `false`?",
      "created_at" : "2016-11-17T11:20:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-261222140",
      "id" : 261222140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2016-11-17T11:20:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261222140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "sweepprivkeys is intended for users, and not to import keys. Users should never use importprivkey.",
      "created_at" : "2016-11-17T11:32:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-261224370",
      "id" : 261224370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2016-11-17T11:32:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261224370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r94074507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94074507"
         }
      },
      "body" : "It might be appropriate to loop over mapCoins calling CTxMemPool::pruneSpent, on each entry, to avoid trying to sweep from an output that is already in the process of being spent.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2016-12-28T20:31:23Z",
      "diff_hunk" : "@@ -972,6 +990,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet *&pwallet = pwalletMain;\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+            \"  \\\"comment\\\":\\\"description\\\"             (string, optional) Local comment for the receive transaction\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VOBJ));\n+\n+    // Parse options\n+    std::set<CScript> setscriptSearch;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string strLabel, strComment;\n+    CAmount nTotalIn = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string strSecret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(strSecret, key, pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID vchAddress = pubkey.GetID();\n+                CScript script = GetScriptForDestination(vchAddress);\n+                if (!script.empty()) {\n+                    setscriptSearch.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    setscriptSearch.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            strLabel = AccountFromValue(optval.get_str());\n+        } else if (optname == \"comment\") {\n+            strComment = optval.get_str();\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey vchPubKey;\n+    if (!reservekey.GetReservedKey(vchPubKey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n+\n+    // Scan UTXO set for inputs\n+    std::vector<CTxOut> vInTXOs;\n+    {\n+        // Collect all possible inputs\n+        std::map<uint256, CCoins> mapcoins;\n+        {\n+            LOCK(cs_main);\n+            mempool.FindScriptPubKey(setscriptSearch, mapcoins);\n+            FlushStateToDisk();\n+            pcoinsTip->FindScriptPubKey(setscriptSearch, mapcoins);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r94074507",
      "id" : 94074507,
      "original_commit_id" : "ed604747289c12d605f219b3f859a9bef376174e",
      "original_position" : 120,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 14605089,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94074507",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Concept ACK.\r\n\r\n> Hmm, what about extending RPC importprivkey with another optional argument sweep defaulting to false?\r\n\r\nPlease don't do this. People confuse `import` and `sweep` all over the place. The least we can do is make them separate RPCs with separate documentation.",
      "created_at" : "2017-02-27T09:31:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-282670040",
      "id" : 282670040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2017-02-27T09:31:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282670040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Seems this won't be making it for 0.15. Untagging.",
      "created_at" : "2017-07-12T22:50:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-314919860",
      "id" : 314919860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2017-07-12T22:50:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314919860",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Concept Re-ACK. Needs rebase. I guess this is also something we could want for 0.16.\r\nI have no strong opinion about sweep versus createrawsweep. The approach we took for bumpfee was also to do the non raw one first, although I agree that the ramification of sweep is different then a bump.",
      "created_at" : "2017-08-15T20:14:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-322575985",
      "id" : 322575985,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2017-08-15T20:14:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322575985",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased and added a simple functional test.",
      "created_at" : "2017-08-19T03:55:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-323497915",
      "id" : 323497915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2017-08-19T03:55:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323497915",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094095"
         }
      },
      "body" : "Throw if duplicate? Add test.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-19T15:17:04Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094095",
      "id" : 134094095,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 57352361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094095",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094100"
         }
      },
      "body" : "Throw if duplicate? Add test.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-19T15:17:10Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094100",
      "id" : 134094100,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 58,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 58,
      "pull_request_review_id" : 57352361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094100",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094129"
         }
      },
      "body" : "Throw if needles is empty? Add test.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-19T15:18:38Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094129",
      "id" : 134094129,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 68,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 68,
      "pull_request_review_id" : 57352361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094129",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094162"
         }
      },
      "body" : "Add test for this error?",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-19T15:20:53Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094162",
      "id" : 134094162,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 81,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 81,
      "pull_request_review_id" : 57352361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094162",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094173"
         }
      },
      "body" : "Unnecessary block?",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-19T15:21:27Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n+\n+    // Scan UTXO set for inputs\n+    std::vector<CTxOut> input_txos;\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094173",
      "id" : 134094173,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 86,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 86,
      "pull_request_review_id" : 57352361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094173",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094260"
         }
      },
      "body" : "Take this out of fee loop?",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-19T15:27:11Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n+\n+    // Scan UTXO set for inputs\n+    std::vector<CTxOut> input_txos;\n+    {\n+        // Collect all possible inputs\n+        std::map<COutPoint, Coin> coins;\n+        {\n+            LOCK(cs_main);\n+            mempool.FindScriptPubKey(needles, coins);\n+            FlushStateToDisk();\n+            pcoinsdbview->FindScriptPubKey(needles, coins);\n+        }\n+\n+        // Add them as inputs to the transaction, and count the total value\n+        for (auto& it : coins) {\n+            const COutPoint& outpoint = it.first;\n+            const Coin& coin = it.second;\n+            const CTxOut& txo = coin.out;\n+            tx.vin.emplace_back(outpoint.hash, outpoint.n);\n+            input_txos.push_back(txo);\n+            total_in += txo.nValue;\n+        }\n+    }\n+\n+    if (total_in == 0) {\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"No value to sweep\");\n+    }\n+\n+    CKeyID keyID = pubkey.GetID();\n+    CTxDestination txdest = CBitcoinAddress(keyID).Get();\n+\n+    tx.vout.emplace_back(total_in, GetScriptForDestination(txdest));\n+\n+    while (true) {\n+        if (IsDust(tx.vout[0], ::minRelayTxFee)) {\n+            throw JSONRPCError(RPC_VERIFY_REJECTED, \"Swept value would be dust\");\n+        }\n+        for (size_t input_index = 0; input_index < tx.vin.size(); ++input_index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134094260",
      "id" : 134094260,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 120,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 120,
      "pull_request_review_id" : 57352361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134094260",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138130"
         }
      },
      "body" : "I don't see why a duplicate privkey should be an error.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-21T02:55:04Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138130",
      "id" : 134138130,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 54,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 54,
      "pull_request_review_id" : 57394925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:55:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138130",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138212"
         }
      },
      "body" : "If it's empty, we'll throw \"No value to sweep\" later on. And so long as the user provides something, it will never be empty.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-21T02:56:19Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138212",
      "id" : 134138212,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 68,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 68,
      "pull_request_review_id" : 57394994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T02:56:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138212",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138904"
         }
      },
      "body" : "I don't know how, and the two tests currently \"testing\" it don't make logical sense.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-21T03:07:42Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138904",
      "id" : 134138904,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 81,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 81,
      "pull_request_review_id" : 57395721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T03:07:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138904",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138919"
         }
      },
      "body" : "Scope for `coins`",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-21T03:08:04Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n+\n+    // Scan UTXO set for inputs\n+    std::vector<CTxOut> input_txos;\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134138919",
      "id" : 134138919,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 86,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 86,
      "pull_request_review_id" : 57395742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T03:08:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134138919",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134139181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134139181"
         }
      },
      "body" : "Fee changes require resigning. Perhaps it could be made to sign only before and after the loop, but the time here is trivial in comparison to the UTXO search.",
      "commit_id" : "2732ac7ec49e6b971cbb3df52ed077b199516065",
      "created_at" : "2017-08-21T03:12:51Z",
      "diff_hunk" : "@@ -1064,6 +1065,153 @@ UniValue sendmany(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+UniValue sweepprivkeys(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"sweepprivkeys {\\\"privkeys\\\": [\\\"bitcoinprivkey\\\",...], other options}\\n\"\n+            \"\\nSends bitcoins controlled by private key to specified destinations.\\n\"\n+            \"\\nOptions:\\n\"\n+            \"  \\\"privkeys\\\":[\\\"bitcoinprivkey\\\",...]   (array of strings, required) An array of WIF private key(s)\\n\"\n+            \"  \\\"label\\\":\\\"actuallabelname\\\"           (string, optional) Label for received bitcoins\\n\"\n+        );\n+\n+    // NOTE: It isn't safe to sweep-and-send in a single action, since this would leave the send missing from the transaction history\n+\n+    RPCTypeCheck(request.params, {UniValue::VOBJ});\n+\n+    // Parse options\n+    std::set<CScript> needles;\n+    CCoinControl coin_control;\n+    CBasicKeyStore tempKeystore;\n+    CMutableTransaction tx;\n+    std::string label;\n+    CAmount total_in = 0;\n+    for (const std::string& optname : request.params[0].getKeys()) {\n+        const UniValue& optval = request.params[0][optname];\n+        if (optname == \"privkeys\") {\n+            const UniValue& privkeys_a = optval.get_array();\n+            for (size_t privkey_i = 0; privkey_i < privkeys_a.size(); ++privkey_i) {\n+                const UniValue& privkey_wif = privkeys_a[privkey_i];\n+                std::string wif_secret = privkey_wif.get_str();\n+                CKey key;\n+                CPubKey pubkey;\n+                ParseWIFPrivKey(wif_secret, key, &pubkey);\n+\n+                tempKeystore.AddKey(key);\n+                CKeyID address = pubkey.GetID();\n+                CScript script = GetScriptForDestination(address);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+                script = GetScriptForRawPubKey(pubkey);\n+                if (!script.empty()) {\n+                    needles.insert(script);\n+                }\n+            }\n+        } else if (optname == \"label\") {\n+            label = AccountFromValue(optval.get_str());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unrecognised option '%s'\", optname));\n+        }\n+    }\n+\n+    // Ensure keypool is filled if possible\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        if (!pwallet->IsLocked()) {\n+            pwallet->TopUpKeyPool();\n+        }\n+    }\n+\n+    // Reserve the key we will be using\n+    CReserveKey reservekey(pwallet);\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n+\n+    // Scan UTXO set for inputs\n+    std::vector<CTxOut> input_txos;\n+    {\n+        // Collect all possible inputs\n+        std::map<COutPoint, Coin> coins;\n+        {\n+            LOCK(cs_main);\n+            mempool.FindScriptPubKey(needles, coins);\n+            FlushStateToDisk();\n+            pcoinsdbview->FindScriptPubKey(needles, coins);\n+        }\n+\n+        // Add them as inputs to the transaction, and count the total value\n+        for (auto& it : coins) {\n+            const COutPoint& outpoint = it.first;\n+            const Coin& coin = it.second;\n+            const CTxOut& txo = coin.out;\n+            tx.vin.emplace_back(outpoint.hash, outpoint.n);\n+            input_txos.push_back(txo);\n+            total_in += txo.nValue;\n+        }\n+    }\n+\n+    if (total_in == 0) {\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"No value to sweep\");\n+    }\n+\n+    CKeyID keyID = pubkey.GetID();\n+    CTxDestination txdest = CBitcoinAddress(keyID).Get();\n+\n+    tx.vout.emplace_back(total_in, GetScriptForDestination(txdest));\n+\n+    while (true) {\n+        if (IsDust(tx.vout[0], ::minRelayTxFee)) {\n+            throw JSONRPCError(RPC_VERIFY_REJECTED, \"Swept value would be dust\");\n+        }\n+        for (size_t input_index = 0; input_index < tx.vin.size(); ++input_index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#discussion_r134139181",
      "id" : 134139181,
      "original_commit_id" : "c0bd1d3ff54e1f3bbd512264430348e7a9aaba3c",
      "original_position" : 120,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 120,
      "pull_request_review_id" : 57396045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9152",
      "updated_at" : "2017-08-21T03:12:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/134139181",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Fixed the test failure (missing `cs_main` lock on `AcceptToMemoryPool`)",
      "created_at" : "2017-08-21T03:18:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9152#issuecomment-323637548",
      "id" : 323637548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9152",
      "updated_at" : "2017-08-21T03:18:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323637548",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   }
]
