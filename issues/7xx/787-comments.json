[
   {
      "body" : "What needs testing with these changes?\r\n\r\nI assume:\r\n\r\n+ Deals with existing addr.dat\r\n+ Is faster\r\n+ Works with -noirc -nodnsseed and a removed addr.dat (bootstrap from seed nodes)\r\n\r\nDo you have a tool for comparing two addrman databases?  Might be nice to verify that two copies of bitcoin started at about the same time end up with mostly different peer-sets.\r\n",
      "created_at" : "2012-01-27T14:23:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#issuecomment-3687283",
      "id" : 3687283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/787",
      "updated_at" : "2012-01-31T19:26:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3687283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Some improvements and bugfixes done.\r\n\r\n@gavinandresen:\r\n * It will convert an old addr.dat to the new format. During the first start-up, all addr.dat entries are imported. During a second start-up, all old addr entries are removed (using CDB::Rewrite).\r\n * It is faster in the sense that all locking issues involving CAddrDB and cs_mapAddresses are gone, and address-operations are fast. Reaching 8 connections may be a bit slower, as the new code much less strongly favors trying recently seen addresses - that is the price to pay for some protection against sybil attacks. When connection count is low, it will however favor self-tried addresses.\r\n* Yes, booting from seed nodes is no problem.\r\n\r\nThe main thing to be tested is whether the bucket count (256 and 64) and bucket size (64) are large enough, knowing that they do not get quickly filled completely. For example, a new-style addr.dat of a week old, will it easily find connections when ran using -noirc -nodnsseed -nolisten?\r\n",
      "created_at" : "2012-01-28T02:21:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#issuecomment-3697594",
      "id" : 3697594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/787",
      "updated_at" : "2012-01-28T02:50:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3697594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Testing on my Mac: I get a core dump on exit, in:\r\n\r\nCDB::Write<std::string, CAddrMan> (this=0xb0594f20, key=@0xb0594ed0, value=@0x372560, fOverwrite=true) at db.h:106\r\n106\t        int ret = pdb->put(GetTxn(), &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\r\n\r\nLooks like a use-after-free problem:\r\n\r\n(gdb) p *this\r\n$1 = {\r\n  pdb = 0x5005da0, \r\n  strFile = {\r\n    _M_dataplus = {\r\n      <std::allocator<char>> = {\r\n        <__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, \r\n      members of std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider: \r\n      _M_p = 0x500168c \"addr.dat\"\r\n    }\r\n  }, \r\n  vTxn = {\r\n    <std::_Vector_base<DbTxn*,std::allocator<DbTxn*> >> = {\r\n      _M_impl = {\r\n        <std::allocator<DbTxn*>> = {\r\n          <__gnu_cxx::new_allocator<DbTxn*>> = {<No data fields>}, <No data fields>}, \r\n        members of std::_Vector_base<DbTxn*,std::allocator<DbTxn*> >::_Vector_impl: \r\n        _M_start = 0x0, \r\n        _M_finish = 0x0, \r\n        _M_end_of_storage = 0x0\r\n      }\r\n    }, <No data fields>}, \r\n  fReadOnly = false\r\n}\r\n",
      "created_at" : "2012-01-31T19:28:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#issuecomment-3746080",
      "id" : 3746080,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/787",
      "updated_at" : "2012-01-31T19:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3746080",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Also: I tested running with your patch and then running an old bitcoind; works nicely (old bitcoind thinks the addr.dat is empty, which is OK; run the new bitcoind and it thinks it needs to rewrite addr.dat again, which is also OK).\r\n",
      "created_at" : "2012-01-31T19:35:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#issuecomment-3746236",
      "id" : 3746236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/787",
      "updated_at" : "2012-01-31T19:35:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3746236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "@luke-jr recently had a crash that seemed related to addrman; I am unable to reproduce the problem though. Stack traces or valgrind information from anyone who can reproduce it, is very welcome.",
      "created_at" : "2012-02-24T12:37:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#issuecomment-4156179",
      "id" : 4156179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/787",
      "updated_at" : "2012-02-24T12:37:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4156179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/787#discussion_r85637902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/787"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85637902"
         }
      },
      "body" : "always makes me laugh this line does :) thanks :)",
      "commit_id" : "5fee401fe14aa6459428a26a82f764db70a6a0b9",
      "created_at" : "2016-10-29T10:04:09Z",
      "diff_hunk" : "@@ -0,0 +1,506 @@\n+// Copyright (c) 2012 Pieter Wuille\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"addrman.h\"\n+\n+using namespace std;\n+\n+int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n+{\n+    CDataStream ss1(SER_GETHASH);\n+    std::vector<unsigned char> vchKey = GetKey();\n+    ss1 << nKey << vchKey;\n+    uint64 hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n+\n+    CDataStream ss2(SER_GETHASH);\n+    std::vector<unsigned char> vchGroupKey = GetGroup();\n+    ss2 << nKey << vchGroupKey << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP);\n+    uint64 hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n+    return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n+}\n+\n+int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const\n+{\n+    CDataStream ss1(SER_GETHASH);\n+    std::vector<unsigned char> vchGroupKey = GetGroup();\n+    std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n+    ss1 << nKey << vchGroupKey << vchSourceGroupKey;\n+    uint64 hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n+\n+    CDataStream ss2(SER_GETHASH);\n+    ss2 << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP);\n+    uint64 hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n+    return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n+}\n+\n+bool CAddrInfo::IsTerrible(int64 nNow) const\n+{\n+    if (nLastTry && nLastTry >= nNow-60) // never remove things tried the last minute\n+        return false;\n+\n+    if (nTime > nNow + 10*60) // came in a flying DeLorean",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#discussion_r85637902",
      "id" : 85637902,
      "original_commit_id" : "5fee401fe14aa6459428a26a82f764db70a6a0b9",
      "original_position" : 42,
      "path" : "src/addrman.cpp",
      "position" : 42,
      "pull_request_review_id" : 6345293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/787",
      "updated_at" : "2016-10-29T10:04:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85637902",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=3",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/787#discussion_r85637922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/787"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85637922"
         }
      },
      "body" : "Why 23%?",
      "commit_id" : "5fee401fe14aa6459428a26a82f764db70a6a0b9",
      "created_at" : "2016-10-29T10:05:52Z",
      "diff_hunk" : "@@ -0,0 +1,499 @@\n+// Copyright (c) 2012 Pieter Wuille\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef _BITCOIN_ADDRMAN\n+#define _BITCOIN_ADDRMAN 1\n+\n+#include \"netbase.h\"\n+#include \"protocol.h\"\n+#include \"util.h\"\n+\n+\n+#include <map>\n+#include <vector>\n+\n+#include <openssl/rand.h>\n+\n+\n+// Extended statistics about a CAddress\n+class CAddrInfo : public CAddress\n+{\n+private:\n+    // where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    // last succesfull connection by us\n+    int64 nLastSuccess;\n+\n+    // last try whatsoever by us:\n+    // int64 CAddress::nLastTry\n+\n+    // connection attempts since last succesful attempt\n+    int nAttempts;\n+\n+    // reference count in new sets (memory only)\n+    int nRefCount;\n+\n+    // in tried set? (memory only)\n+    bool fInTried;\n+\n+    // position in vRandom\n+    int nRandomPos;\n+\n+    friend class CAddrMan;\n+\n+public:\n+\n+    IMPLEMENT_SERIALIZE(\n+        CAddress* pthis = (CAddress*)(this);\n+        READWRITE(*pthis);\n+        READWRITE(source);\n+        READWRITE(nLastSuccess);\n+        READWRITE(nAttempts);\n+    )\n+\n+    void Init()\n+    {\n+        nLastSuccess = 0;\n+        nLastTry = 0;\n+        nAttempts = 0;\n+        nRefCount = 0;\n+        fInTried = false;\n+        nRandomPos = -1;\n+    }\n+\n+    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn)\n+    {\n+        Init();\n+    }\n+\n+    CAddrInfo() : CAddress(), source()\n+    {\n+        Init();\n+    }\n+\n+    // Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const std::vector<unsigned char> &nKey) const;\n+\n+    // Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const;\n+\n+    // Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const std::vector<unsigned char> &nKey) const\n+    {\n+        return GetNewBucket(nKey, source);\n+    }\n+\n+    // Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64 nNow = GetAdjustedTime()) const;\n+\n+    // Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64 nNow = GetAdjustedTime()) const;\n+\n+};\n+\n+// Stochastic address manager\n+//\n+// Design goals:\n+//  * Only keep a limited number of addresses around, so that addr.dat and memory requirements do not grow without bound.\n+//  * Keep the address tables in-memory, and asynchronously dump the entire to able in addr.dat.\n+//  * Make sure no (localized) attacker can fill the entire table with his nodes/addresses.\n+//\n+// To that end:\n+//  * Addresses are organized into buckets.\n+//    * Address that have not yet been tried go into 256 \"new\" buckets.\n+//      * Based on the address range (/16 for IPv4) of source of the information, 32 buckets are selected at random\n+//      * The actual bucket is chosen from one of these, based on the range the address itself is located.\n+//      * One single address can occur in up to 4 different buckets, to increase selection chances for addresses that\n+//        are seen frequently. The chance for increasing this multiplicity decreases exponentially.\n+//      * When adding a new address to a full bucket, a randomly chosen entry (with a bias favoring less recently seen\n+//        ones) is removed from it first.\n+//    * Addresses of nodes that are known to be accessible go into 64 \"tried\" buckets.\n+//      * Each address range selects at random 4 of these buckets.\n+//      * The actual bucket is chosen from one of these, based on the full address.\n+//      * When adding a new good address to a full bucket, a randomly chosen entry (with a bias favoring less recently\n+//        tried ones) is evicted from it, back to the \"new\" buckets.\n+//    * Bucket selection is based on cryptographic hashing, using a randomly-generated 256-bit key, which should not\n+//      be observable by adversaries.\n+//    * Several indexes are kept for high performance. Defining DEBUG_ADDRMAN will introduce frequent (and expensive)\n+//      consistency checks for the entire datastructure.\n+\n+// total number of buckets for tried addresses\n+#define ADDRMAN_TRIED_BUCKET_COUNT 64\n+\n+// maximum allowed number of entries in buckets for tried addresses\n+#define ADDRMAN_TRIED_BUCKET_SIZE 64\n+\n+// total number of buckets for new addresses\n+#define ADDRMAN_NEW_BUCKET_COUNT 256\n+\n+// maximum allowed number of entries in buckets for new addresses\n+#define ADDRMAN_NEW_BUCKET_SIZE 64\n+\n+// over how many buckets entries with tried addresses from a single group (/16 for IPv4) are spread\n+#define ADDRMAN_TRIED_BUCKETS_PER_GROUP 4\n+\n+// over how many buckets entries with new addresses originating from a single group are spread\n+#define ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP 32\n+\n+// in how many buckets for entries with new addresses a single address may occur\n+#define ADDRMAN_NEW_BUCKETS_PER_ADDRESS 4\n+\n+// how many entries in a bucket with tried addresses are inspected, when selecting one to replace\n+#define ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT 4\n+\n+// how old addresses can maximally be\n+#define ADDRMAN_HORIZON_DAYS 30\n+\n+// after how many failed attempts we give up on a new node\n+#define ADDRMAN_RETRIES 3\n+\n+// how many successive failures are allowed ...\n+#define ADDRMAN_MAX_FAILURES 10\n+\n+// ... in at least this many days\n+#define ADDRMAN_MIN_FAIL_DAYS 7\n+\n+// the maximum percentage of nodes to return in a getaddr call\n+#define ADDRMAN_GETADDR_MAX_PCT 23",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/787#discussion_r85637922",
      "id" : 85637922,
      "original_commit_id" : "5fee401fe14aa6459428a26a82f764db70a6a0b9",
      "original_position" : 158,
      "path" : "src/addrman.h",
      "position" : 158,
      "pull_request_review_id" : 6345314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/787",
      "updated_at" : "2016-10-29T10:05:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85637922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=3",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   }
]
