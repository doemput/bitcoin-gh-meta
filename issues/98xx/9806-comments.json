[
   {
      "body" : "Wshadow statistics: \r\n   1 coinsbyscript.cpp:180:2200: warning: declaration shadows a local variable [-Wshadow]\r\n",
      "created_at" : "2017-02-20T08:53:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-281021069",
      "id" : 281021069,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-02-20T08:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281021069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "@paveljanik - Thanks! Fixed that up. Looks like that's the only shadow warning.",
      "created_at" : "2017-02-20T21:33:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-281186046",
      "id" : 281186046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-02-20T21:33:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281186046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5931802?v=3",
         "events_url" : "https://api.github.com/users/droark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/droark/followers",
         "following_url" : "https://api.github.com/users/droark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/droark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/droark",
         "id" : 5931802,
         "login" : "droark",
         "organizations_url" : "https://api.github.com/users/droark/orgs",
         "received_events_url" : "https://api.github.com/users/droark/received_events",
         "repos_url" : "https://api.github.com/users/droark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/droark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/droark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/droark"
      }
   },
   {
      "body" : "Thanks for reviving this. IMO this is important.",
      "created_at" : "2017-02-22T07:58:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-281596044",
      "id" : 281596044,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-02-22T07:58:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281596044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK, are there any statistics on how much extra burden this places on an ordinary node with the index off?",
      "created_at" : "2017-03-14T18:27:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-286516298",
      "id" : 286516298,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-14T18:28:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/286516298",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6238042?v=3",
         "events_url" : "https://api.github.com/users/sidhujag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sidhujag/followers",
         "following_url" : "https://api.github.com/users/sidhujag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sidhujag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sidhujag",
         "id" : 6238042,
         "login" : "sidhujag",
         "organizations_url" : "https://api.github.com/users/sidhujag/orgs",
         "received_events_url" : "https://api.github.com/users/sidhujag/received_events",
         "repos_url" : "https://api.github.com/users/sidhujag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sidhujag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sidhujag"
      }
   },
   {
      "body" : "needs rebase ",
      "created_at" : "2017-03-16T02:23:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-286939051",
      "id" : 286939051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-16T02:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/286939051",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs - Rebased. Thanks for the heads up. (Side note: Is there any way to have GH tell you when a conflict occurs? That would be really handy.)\r\n\r\n@sidhujag - Good question. I don't know offhand. I'm happy to do some benchmarking. I may need some help with that. If anybody would like to make some suggestions, I'm all ears.\r\n\r\nAll - Will get more movement on this. Life intervened for awhile and has finally slowed down enough to where I can dedicate more time to this.",
      "created_at" : "2017-03-17T22:13:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-287484338",
      "id" : 287484338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-17T22:13:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287484338",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5931802?v=3",
         "events_url" : "https://api.github.com/users/droark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/droark/followers",
         "following_url" : "https://api.github.com/users/droark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/droark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/droark",
         "id" : 5931802,
         "login" : "droark",
         "organizations_url" : "https://api.github.com/users/droark/orgs",
         "received_events_url" : "https://api.github.com/users/droark/received_events",
         "repos_url" : "https://api.github.com/users/droark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/droark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/droark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/droark"
      }
   },
   {
      "body" : "Thanks droark great feature btw.. this makes walletless spending very easy",
      "created_at" : "2017-03-18T02:24:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-287510058",
      "id" : 287510058,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-18T02:24:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287510058",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6238042?v=3",
         "events_url" : "https://api.github.com/users/sidhujag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sidhujag/followers",
         "following_url" : "https://api.github.com/users/sidhujag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sidhujag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sidhujag",
         "id" : 6238042,
         "login" : "sidhujag",
         "organizations_url" : "https://api.github.com/users/sidhujag/orgs",
         "received_events_url" : "https://api.github.com/users/sidhujag/received_events",
         "repos_url" : "https://api.github.com/users/sidhujag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sidhujag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sidhujag"
      }
   },
   {
      "body" : "Am placing a to-do list here to remind myself of what I need to do, and solicit feedback on anything people might think is missing.\r\n\r\n- [x] Remove all Boost code from the PR.\r\n- [x] Address feedback from #8660 (primarily @ryanofsky). (Mostly done but I want to double check a couple of things before proceeding.)\r\n- [ ] Add some C++ tests for CCoinsView classes.\r\n- [x] Probably switch names of this & that per the suggestion of @gmaxwell. (\"utxoindex\" is my current choice but I'm not attached to it.)\r\n- [x] Add a default constructor value for CTxMemPool. (A recently merged PR, combined with this PR, inadvertently nukes the default constructor.)\r\n- [ ] Check in once a day to see if a rebase is needed. (Ongoing task.)",
      "created_at" : "2017-03-18T21:53:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-287577584",
      "id" : 287577584,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-23T00:42:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287577584",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5931802?v=3",
         "events_url" : "https://api.github.com/users/droark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/droark/followers",
         "following_url" : "https://api.github.com/users/droark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/droark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/droark",
         "id" : 5931802,
         "login" : "droark",
         "organizations_url" : "https://api.github.com/users/droark/orgs",
         "received_events_url" : "https://api.github.com/users/droark/received_events",
         "repos_url" : "https://api.github.com/users/droark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/droark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/droark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/droark"
      }
   },
   {
      "body" : "needs rebase.\r\n",
      "created_at" : "2017-03-22T00:49:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-288264890",
      "id" : 288264890,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-22T00:49:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288264890",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "@btcdrak - Thanks. Rebased.",
      "created_at" : "2017-03-22T01:40:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-288272821",
      "id" : 288272821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-22T01:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288272821",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5931802?v=3",
         "events_url" : "https://api.github.com/users/droark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/droark/followers",
         "following_url" : "https://api.github.com/users/droark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/droark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/droark",
         "id" : 5931802,
         "login" : "droark",
         "organizations_url" : "https://api.github.com/users/droark/orgs",
         "received_events_url" : "https://api.github.com/users/droark/received_events",
         "repos_url" : "https://api.github.com/users/droark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/droark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/droark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/droark"
      }
   },
   {
      "body" : "Running this on a .bitcoin/ folder that was last used with 0.13 and was run pruned to 2000. It seems 1GB of ram is too low for this enabled as I got an out of memory error. Now on restarting I get the following after/during the \"Rescanning...\" step:\r\n\r\n    ~/.bitcoin# bitcoind: coinsbyscript.cpp:53: CCoinsByScript& CCoinsViewByScript::GetCoinsByScript(const CScript&, bool): Assertion `it != cacheCoinsByScript.end()' failed.",
      "created_at" : "2017-03-23T03:03:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-288604087",
      "id" : 288604087,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-03-23T03:03:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288604087",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/38776?v=3",
         "events_url" : "https://api.github.com/users/weex/events{/privacy}",
         "followers_url" : "https://api.github.com/users/weex/followers",
         "following_url" : "https://api.github.com/users/weex/following{/other_user}",
         "gists_url" : "https://api.github.com/users/weex/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/weex",
         "id" : 38776,
         "login" : "weex",
         "organizations_url" : "https://api.github.com/users/weex/orgs",
         "received_events_url" : "https://api.github.com/users/weex/received_events",
         "repos_url" : "https://api.github.com/users/weex/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/weex/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/weex/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/weex"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111731657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111731657"
         }
      },
      "body" : "Standard copyright line says \"The Bitcoin Core developers\".\r\n\r\nMight as well start this one off with the end year 2017.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:19:23Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111731657",
      "id" : 111731657,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 1,
      "path" : "src/coinsbyscript.cpp",
      "position" : 1,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111731657",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111731665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111731665"
         }
      },
      "body" : "Don't do this.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:19:34Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111731665",
      "id" : 111731665,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 14,
      "path" : "src/coinsbyscript.cpp",
      "position" : 14,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111731665",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111731936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111731936"
         }
      },
      "body" : "I don't think we really need a dedicated flag in the db for this. Either it exists and has a \"bestblock\" defined, or it doesn't...",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:23:15Z",
      "diff_hunk" : "@@ -1484,6 +1492,58 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n+                // Check -txoutindex\n+                pcoinsByScriptDB->ReadFlag(\"txoutindex\", fTxOutIndex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111731936",
      "id" : 111731936,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 46,
      "path" : "src/init.cpp",
      "position" : 46,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111731936",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732096"
         }
      },
      "body" : "IMO it would be better to not have overlapping chars between databases, such that they *could* be combined cleanly if desired. Therefore, I suggest using `'D'` for `DB_BEST_BLOCK` (and eliminating `DB_FLAG` here entirely).",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:25:49Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732096",
      "id" : 111732096,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 18,
      "path" : "src/coinsbyscript.cpp",
      "position" : 18,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732096",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732447"
         }
      },
      "body" : "This isn't the purpose of `CScriptID`, which is specific to P2SH addresses. Suggest having a static `ScriptIndexHash` function that returns a (possibly typedef'd) `uint160`.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:31:07Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732447",
      "id" : 111732447,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 23,
      "path" : "src/coinsbyscript.cpp",
      "position" : 23,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732447",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732620"
         }
      },
      "body" : "The name sucks. :/",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:33:54Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732620",
      "id" : 111732620,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 35,
      "path" : "src/coinsbyscript.cpp",
      "position" : 35,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732620",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732765"
         }
      },
      "body" : "Rather throw an exception here.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:36:23Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732765",
      "id" : 111732765,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 53,
      "path" : "src/coinsbyscript.cpp",
      "position" : 53,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732765",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732789"
         }
      },
      "body" : "Name also sucks, and overlaps with a fairly different usage-case.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:36:40Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111732789",
      "id" : 111732789,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 51,
      "path" : "src/coinsbyscript.cpp",
      "position" : 51,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111732789",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733071"
         }
      },
      "body" : "I don't see why this is necessary: we clear the entire cache when complete.\r\n\r\nEliminating this `erase` allows simplifying the entire loop to a normal C++11 `for`-each.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:40:43Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733071",
      "id" : 111733071,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 87,
      "path" : "src/coinsbyscript.cpp",
      "position" : 87,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733071",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733267"
         }
      },
      "body" : "This is lacking comments explaining why.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:43:41Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733267",
      "id" : 111733267,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 172,
      "path" : "src/coinsbyscript.cpp",
      "position" : 172,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733267",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733295"
         }
      },
      "body" : "Fails to delete `DB_BEST_BLOCK`",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:44:19Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                for(auto& av: v)\n+                {\n+                    const CScriptID& _hash = av;\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        for(auto& av: v)\n+        {\n+            const CScriptID& hash = av;\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733295",
      "id" : 111733295,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 204,
      "path" : "src/coinsbyscript.cpp",
      "position" : 204,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733295",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733380"
         }
      },
      "body" : "Use `size_t` and `++j`. It may also be better to do this backward:\r\n\r\n```\r\nfor (size_t j = coins.vout.size(); j--; ) {\r\n```\r\n(note `j--` in this case because we want to look at the pre-decrement value)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:45:57Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                for(auto& av: v)\n+                {\n+                    const CScriptID& _hash = av;\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        for(auto& av: v)\n+        {\n+            const CScriptID& hash = av;\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n+{\n+    LogPrintf(\"Building address index for -txoutindex. Be patient...\\n\");\n+    int64_t nTxCount = coinsIn->CountCoins();\n+\n+    std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            uint256 txhash;\n+            CCoins coins;\n+            if (!pcursor->GetKey(txhash) || !pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733380",
      "id" : 111733380,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 229,
      "path" : "src/coinsbyscript.cpp",
      "position" : 229,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733380",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733632"
         }
      },
      "body" : "Since we're doing partial writes, we should ensure `DB_BEST_BLOCK` is cleared before we begin.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:49:41Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                for(auto& av: v)\n+                {\n+                    const CScriptID& _hash = av;\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        for(auto& av: v)\n+        {\n+            const CScriptID& hash = av;\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n+{\n+    LogPrintf(\"Building address index for -txoutindex. Be patient...\\n\");\n+    int64_t nTxCount = coinsIn->CountCoins();\n+\n+    std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            uint256 txhash;\n+            CCoins coins;\n+            if (!pcursor->GetKey(txhash) || !pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)\n+            {\n+                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                const CScriptID key = CScriptID(coins.vout[j].scriptPubKey);\n+                if (!mapCoinsByScript.count(key))\n+                {\n+                    CCoinsByScript coinsByScript;\n+                    GetCoinsByScriptID(key, coinsByScript);\n+                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n+                }\n+                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n+                i++;\n+            }\n+\n+            if (mapCoinsByScript.size() >= 10000)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733632",
      "id" : 111733632,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 245,
      "path" : "src/coinsbyscript.cpp",
      "position" : 245,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733632",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733676"
         }
      },
      "body" : "Needless `erase`",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:50:40Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                for(auto& av: v)\n+                {\n+                    const CScriptID& _hash = av;\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        for(auto& av: v)\n+        {\n+            const CScriptID& hash = av;\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n+{\n+    LogPrintf(\"Building address index for -txoutindex. Be patient...\\n\");\n+    int64_t nTxCount = coinsIn->CountCoins();\n+\n+    std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            uint256 txhash;\n+            CCoins coins;\n+            if (!pcursor->GetKey(txhash) || !pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)\n+            {\n+                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                const CScriptID key = CScriptID(coins.vout[j].scriptPubKey);\n+                if (!mapCoinsByScript.count(key))\n+                {\n+                    CCoinsByScript coinsByScript;\n+                    GetCoinsByScriptID(key, coinsByScript);\n+                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n+                }\n+                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n+                i++;\n+            }\n+\n+            if (mapCoinsByScript.size() >= 10000)\n+            {\n+                CDBBatch batch(db);\n+                for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+                    if (it->second.IsEmpty())\n+                        batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+                    else\n+                        batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+                    CCoinsMapByScript::iterator itOld = it++;\n+                    mapCoinsByScript.erase(itOld);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733676",
      "id" : 111733676,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 254,
      "path" : "src/coinsbyscript.cpp",
      "position" : 254,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733676",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733681"
         }
      },
      "body" : "Needless `erase`",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:50:44Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                for(auto& av: v)\n+                {\n+                    const CScriptID& _hash = av;\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        for(auto& av: v)\n+        {\n+            const CScriptID& hash = av;\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n+{\n+    LogPrintf(\"Building address index for -txoutindex. Be patient...\\n\");\n+    int64_t nTxCount = coinsIn->CountCoins();\n+\n+    std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            uint256 txhash;\n+            CCoins coins;\n+            if (!pcursor->GetKey(txhash) || !pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)\n+            {\n+                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                const CScriptID key = CScriptID(coins.vout[j].scriptPubKey);\n+                if (!mapCoinsByScript.count(key))\n+                {\n+                    CCoinsByScript coinsByScript;\n+                    GetCoinsByScriptID(key, coinsByScript);\n+                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n+                }\n+                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n+                i++;\n+            }\n+\n+            if (mapCoinsByScript.size() >= 10000)\n+            {\n+                CDBBatch batch(db);\n+                for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+                    if (it->second.IsEmpty())\n+                        batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+                    else\n+                        batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+                    CCoinsMapByScript::iterator itOld = it++;\n+                    mapCoinsByScript.erase(itOld);\n+                }\n+                db.WriteBatch(batch);\n+                mapCoinsByScript.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!mapCoinsByScript.empty())\n+    {\n+       CDBBatch batch(db);\n+       for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+           if (it->second.IsEmpty())\n+               batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+           else\n+               batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+           CCoinsMapByScript::iterator itOld = it++;\n+           mapCoinsByScript.erase(itOld);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733681",
      "id" : 111733681,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 274,
      "path" : "src/coinsbyscript.cpp",
      "position" : 274,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733681",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733731"
         }
      },
      "body" : "`DB_BEST_BLOCK` is never written here.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:51:45Z",
      "diff_hunk" : "@@ -0,0 +1,280 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinsbyscript.h\"\n+#include \"txdb.h\"\n+#include \"hash.h\"\n+#include \"ui_interface.h\"\n+\n+#include <assert.h>\n+\n+#include <boost/thread.hpp>\n+\n+using namespace std;\n+\n+static const char DB_COINS_BYSCRIPT = 'd';\n+static const char DB_FLAG = 'F';\n+static const char DB_BEST_BLOCK = 'B';\n+\n+CCoinsViewByScript::CCoinsViewByScript(CCoinsViewByScriptDB* viewIn) : base(viewIn) { }\n+\n+bool CCoinsViewByScript::GetCoinsByScript(const CScript &script, CCoinsByScript &coins) {\n+    const CScriptID key = CScriptID(script);\n+    if (cacheCoinsByScript.count(key)) {\n+        coins = cacheCoinsByScript[key];\n+        return true;\n+    }\n+    if (base->GetCoinsByScriptID(key, coins)) {\n+        cacheCoinsByScript[key] = coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsMapByScript::iterator CCoinsViewByScript::FetchCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    const CScriptID key = CScriptID(script);\n+    CCoinsMapByScript::iterator it = cacheCoinsByScript.find(key);\n+    if (it != cacheCoinsByScript.end())\n+        return it;\n+\n+    CCoinsByScript tmp;\n+    if (!base->GetCoinsByScriptID(key, tmp))\n+    {\n+        if (fRequireExisting)\n+            return cacheCoinsByScript.end();\n+    }\n+\n+    return cacheCoinsByScript.emplace_hint(it, key, tmp);\n+}\n+\n+CCoinsByScript &CCoinsViewByScript::GetCoinsByScript(const CScript &script, bool fRequireExisting) {\n+    CCoinsMapByScript::iterator it = FetchCoinsByScript(script, fRequireExisting);\n+    assert(it != cacheCoinsByScript.end());\n+    return it->second;\n+}\n+\n+uint256 CCoinsViewByScript::GetBestBlock() const {\n+    return hashBlock;\n+}\n+\n+void CCoinsViewByScript::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewByScript::Flush() {\n+    bool fOk = base->BatchWrite(this, hashBlock);\n+    return fOk;\n+}\n+\n+CCoinsViewByScriptDB::CCoinsViewByScriptDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"coinsbyscript\", nCacheSize, fMemory, fWipe, true)\n+{\n+}\n+\n+bool CCoinsViewByScriptDB::GetCoinsByScriptID(const CScriptID &scriptID, CCoinsByScript &coins) const {\n+    return db.Read(make_pair(DB_COINS_BYSCRIPT, scriptID), coins);\n+}\n+\n+bool CCoinsViewByScriptDB::BatchWrite(CCoinsViewByScript* pcoinsViewByScriptIn, const uint256 &hashBlock) {\n+    CDBBatch batch(db);\n+    size_t count = 0;\n+    for (CCoinsMapByScript::iterator it = pcoinsViewByScriptIn->cacheCoinsByScript.begin(); it != pcoinsViewByScriptIn->cacheCoinsByScript.end();) {\n+        if (it->second.IsEmpty())\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+        else\n+            batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+        CCoinsMapByScript::iterator itOld = it++;\n+        pcoinsViewByScriptIn->cacheCoinsByScript.erase(itOld);\n+        count++;\n+    }\n+    pcoinsViewByScriptIn->cacheCoinsByScript.clear();\n+\n+    if (!hashBlock.IsNull())\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n+\n+    LogPrint(BCLog::COINDB, \"Committing %zu coin address indexes to coin database...\\n\", (unsigned int)count);\n+    return db.WriteBatch(batch);\n+}\n+\n+bool CCoinsViewByScriptDB::WriteFlag(const std::string &name, bool fValue) {\n+    return db.Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n+}\n+\n+bool CCoinsViewByScriptDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!db.Read(std::make_pair(DB_FLAG, name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n+CCoinsViewByScriptDBCursor *CCoinsViewByScriptDB::Cursor() const\n+{\n+    CCoinsViewByScriptDBCursor *i = new CCoinsViewByScriptDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n+    /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n+       only need read operations on it, use a const-cast to get around\n+       that restriction.  */\n+    i->pcursor->Seek(DB_COINS_BYSCRIPT);\n+    if (!i->pcursor->Valid())\n+        // If db empty then set this cursor invalid\n+        i->keyTmp.first = 0;\n+    else\n+        // Cache key of first record\n+        i->pcursor->GetKey(i->keyTmp);\n+    return i;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetKey(CScriptID &key) const\n+{\n+    // Return cached key\n+    if (keyTmp.first == DB_COINS_BYSCRIPT) {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CCoinsViewByScriptDBCursor::GetValue(CCoinsByScript &coins) const\n+{\n+    return pcursor->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewByScriptDBCursor::GetValueSize() const\n+{\n+    return pcursor->GetValueSize();\n+}\n+\n+bool CCoinsViewByScriptDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_COINS_BYSCRIPT;\n+}\n+\n+void CCoinsViewByScriptDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if (!pcursor->Valid() || !pcursor->GetKey(keyTmp))\n+        keyTmp.first = 0; // Invalidate cached key after last record so that Valid() and GetKey() return false\n+}\n+\n+bool CCoinsViewByScriptDB::DeleteAllCoinsByScript()\n+{\n+    std::unique_ptr<CCoinsViewByScriptDBCursor> pcursor(Cursor());\n+\n+    std::vector<CScriptID> v;\n+    int64_t i = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            CScriptID hash;\n+            if (!pcursor->GetKey(hash))\n+                break;\n+            v.push_back(hash);\n+            if (v.size() >= 10000)\n+            {\n+                i += v.size();\n+                CDBBatch batch(db);\n+                for(auto& av: v)\n+                {\n+                    const CScriptID& _hash = av;\n+                    batch.Erase(make_pair(DB_COINS_BYSCRIPT, _hash)); // delete\n+                }\n+                db.WriteBatch(batch);\n+                v.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!v.empty())\n+    {\n+        i += v.size();\n+        CDBBatch batch(db);\n+        for(auto& av: v)\n+        {\n+            const CScriptID& hash = av;\n+            batch.Erase(make_pair(DB_COINS_BYSCRIPT, hash)); // delete\n+        }\n+        db.WriteBatch(batch);\n+    }\n+    if (i > 0)\n+        LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", i);\n+\n+    return true;\n+}\n+\n+bool CCoinsViewByScriptDB::GenerateAllCoinsByScript(CCoinsViewDB* coinsIn)\n+{\n+    LogPrintf(\"Building address index for -txoutindex. Be patient...\\n\");\n+    int64_t nTxCount = coinsIn->CountCoins();\n+\n+    std::unique_ptr<CCoinsViewCursor> pcursor(coinsIn->Cursor());\n+\n+    CCoinsMapByScript mapCoinsByScript;\n+    int64_t i = 0;\n+    int64_t progress = 0;\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        try {\n+            if (progress % 1000 == 0 && nTxCount > 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)progress / (double)nTxCount) * (double)100));\n+            progress++;\n+\n+            uint256 txhash;\n+            CCoins coins;\n+            if (!pcursor->GetKey(txhash) || !pcursor->GetValue(coins))\n+                break;\n+\n+            for (unsigned int j = 0; j < coins.vout.size(); j++)\n+            {\n+                if (coins.vout[j].IsNull() || coins.vout[j].scriptPubKey.IsUnspendable())\n+                    continue;\n+\n+                const CScriptID key = CScriptID(coins.vout[j].scriptPubKey);\n+                if (!mapCoinsByScript.count(key))\n+                {\n+                    CCoinsByScript coinsByScript;\n+                    GetCoinsByScriptID(key, coinsByScript);\n+                    mapCoinsByScript.insert(make_pair(key, coinsByScript));\n+                }\n+                mapCoinsByScript[key].setCoins.insert(COutPoint(txhash, (uint32_t)j));\n+                i++;\n+            }\n+\n+            if (mapCoinsByScript.size() >= 10000)\n+            {\n+                CDBBatch batch(db);\n+                for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+                    if (it->second.IsEmpty())\n+                        batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+                    else\n+                        batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+                    CCoinsMapByScript::iterator itOld = it++;\n+                    mapCoinsByScript.erase(itOld);\n+                }\n+                db.WriteBatch(batch);\n+                mapCoinsByScript.clear();\n+            }\n+\n+            pcursor->Next();\n+        } catch (std::exception &e) {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if (!mapCoinsByScript.empty())\n+    {\n+       CDBBatch batch(db);\n+       for (CCoinsMapByScript::iterator it = mapCoinsByScript.begin(); it != mapCoinsByScript.end();) {\n+           if (it->second.IsEmpty())\n+               batch.Erase(make_pair(DB_COINS_BYSCRIPT, it->first));\n+           else\n+               batch.Write(make_pair(DB_COINS_BYSCRIPT, it->first), it->second);\n+           CCoinsMapByScript::iterator itOld = it++;\n+           mapCoinsByScript.erase(itOld);\n+       }\n+       db.WriteBatch(batch);\n+    }\n+    LogPrintf(\"Address index with %d outputs successfully built.\\n\", i);\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733731",
      "id" : 111733731,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 279,
      "path" : "src/coinsbyscript.cpp",
      "position" : 279,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733731",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733762"
         }
      },
      "body" : "(see copyright line comments earlier)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:52:25Z",
      "diff_hunk" : "@@ -0,0 +1,116 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733762",
      "id" : 111733762,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 1,
      "path" : "src/coinsbyscript.h",
      "position" : 1,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733806"
         }
      },
      "body" : "Perhaps this ought to be named `empty` like C++ STL?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:53:14Z",
      "diff_hunk" : "@@ -0,0 +1,116 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSBYSCRIPT_H\n+#define BITCOIN_COINSBYSCRIPT_H\n+\n+#include \"coins.h\"\n+#include \"dbwrapper.h\"\n+#include \"primitives/transaction.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+#include \"script/standard.h\"\n+\n+class CCoinsViewDB;\n+class CCoinsViewByScriptDB;\n+class CScript;\n+\n+class CCoinsByScript\n+{\n+public:\n+    // unspent transaction outputs\n+    std::set<COutPoint> setCoins;\n+\n+    // empty constructor\n+    CCoinsByScript() { }\n+\n+    bool IsEmpty() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733806",
      "id" : 111733806,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 28,
      "path" : "src/coinsbyscript.h",
      "position" : 28,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733806",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733829"
         }
      },
      "body" : "Why not just subclass `std::set<COutPoint>`?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:53:44Z",
      "diff_hunk" : "@@ -0,0 +1,116 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSBYSCRIPT_H\n+#define BITCOIN_COINSBYSCRIPT_H\n+\n+#include \"coins.h\"\n+#include \"dbwrapper.h\"\n+#include \"primitives/transaction.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+#include \"script/standard.h\"\n+\n+class CCoinsViewDB;\n+class CCoinsViewByScriptDB;\n+class CScript;\n+\n+class CCoinsByScript\n+{\n+public:\n+    // unspent transaction outputs\n+    std::set<COutPoint> setCoins;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733829",
      "id" : 111733829,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 23,
      "path" : "src/coinsbyscript.h",
      "position" : 23,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733829",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733866"
         }
      },
      "body" : "Why `mutable`?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:54:20Z",
      "diff_hunk" : "@@ -0,0 +1,116 @@\n+// Copyright (c) 2014-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSBYSCRIPT_H\n+#define BITCOIN_COINSBYSCRIPT_H\n+\n+#include \"coins.h\"\n+#include \"dbwrapper.h\"\n+#include \"primitives/transaction.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+#include \"script/standard.h\"\n+\n+class CCoinsViewDB;\n+class CCoinsViewByScriptDB;\n+class CScript;\n+\n+class CCoinsByScript\n+{\n+public:\n+    // unspent transaction outputs\n+    std::set<COutPoint> setCoins;\n+\n+    // empty constructor\n+    CCoinsByScript() { }\n+\n+    bool IsEmpty() const {\n+        return (setCoins.empty());\n+    }\n+\n+    void swap(CCoinsByScript &to) {\n+        to.setCoins.swap(setCoins);\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(setCoins);\n+    }\n+};\n+\n+typedef std::map<CScriptID, CCoinsByScript> CCoinsMapByScript;\n+\n+/** Adds a memory cache for coins by address */\n+class CCoinsViewByScript\n+{\n+private:\n+    CCoinsViewByScriptDB *base;\n+\n+    mutable uint256 hashBlock;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733866",
      "id" : 111733866,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 51,
      "path" : "src/coinsbyscript.h",
      "position" : 51,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733866",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733900"
         }
      },
      "body" : "(see copyright line comments)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:55:03Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733900",
      "id" : 111733900,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 1,
      "path" : "src/coinstats.cpp",
      "position" : 1,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733906"
         }
      },
      "body" : "Don't.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:55:10Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinstats.h\"\n+#include \"validation.h\"\n+\n+#include <stdint.h>\n+\n+#include <boost/thread/thread.hpp> // boost::thread::interrupt\n+\n+using namespace std;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733906",
      "id" : 111733906,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 12,
      "path" : "src/coinstats.cpp",
      "position" : 12,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733906",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733978"
         }
      },
      "body" : "(didn't review)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:56:11Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinstats.h\"\n+#include \"validation.h\"\n+\n+#include <stdint.h>\n+\n+#include <boost/thread/thread.hpp> // boost::thread::interrupt\n+\n+using namespace std;\n+\n+//! Calculate statistics about the unspent transaction output set\n+bool GetUTXOStats(CCoinsView *view, CCoinsViewByScriptDB *viewbyscriptdb, CCoinsStats &stats)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111733978",
      "id" : 111733978,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 15,
      "path" : "src/coinstats.cpp",
      "position" : 15,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111733978",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734099"
         }
      },
      "body" : "Should probably be renamed to `-utxoscriptindex`.\r\n\r\n`-txoutindex` suggests it indexes all txouts (by what?).",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:58:25Z",
      "diff_hunk" : "@@ -368,6 +373,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n+    strUsage += HelpMessageOpt(\"-txoutindex\", strprintf(_(\"Maintain an address to unspent outputs index (rpc: getutxoindex). The index is built on first use. (default: %u)\"), 0));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734099",
      "id" : 111734099,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 23,
      "path" : "src/init.cpp",
      "position" : 23,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734099",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734183"
         }
      },
      "body" : "Not really clear why we have anything to delete here, but don't we need to delete `pcoinsByScript` also?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T11:59:53Z",
      "diff_hunk" : "@@ -1432,11 +1438,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 UnloadBlockIndex();\n                 delete pcoinsTip;\n                 delete pcoinsdbview;\n+                delete pcoinsByScriptDB;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734183",
      "id" : 111734183,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 31,
      "path" : "src/init.cpp",
      "position" : 31,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734183",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734335"
         }
      },
      "body" : "We also need to build the index if it's outdated. For example, if the user ran an older version to sync. (This is fixed automatically if you replace the flag with a check that the index's best block matches that of the chainstate.)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:03:01Z",
      "diff_hunk" : "@@ -1484,6 +1492,58 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n+                // Check -txoutindex\n+                pcoinsByScriptDB->ReadFlag(\"txoutindex\", fTxOutIndex);\n+                if (IsArgSet(\"-txoutindex\"))\n+                {\n+                    if (GetBoolArg(\"-txoutindex\", false))\n+                    {\n+                        // build index\n+                        if (!fTxOutIndex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734335",
      "id" : 111734335,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 52,
      "path" : "src/init.cpp",
      "position" : 52,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734335",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734373"
         }
      },
      "body" : "(did not review)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:03:37Z",
      "diff_hunk" : "@@ -598,6 +601,109 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n+static bool rest_getutxoindex(HTTPRequest* req, const std::string& strURIPart)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734373",
      "id" : 111734373,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 28,
      "path" : "src/rest.cpp",
      "position" : 28,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734373",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734442"
         }
      },
      "body" : "Call it `\"uniquescripts\"`?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:04:35Z",
      "diff_hunk" : "@@ -876,6 +828,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n+            \"  \\\"addresses\\\": n,         (numeric) The number of addresses and scripts. Only if -txoutindex=1\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734442",
      "id" : 111734442,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 102,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 102,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734442",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734484"
         }
      },
      "body" : "Duplicates `\"txouts\"`. Remove and simply add an integrity check.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:05:24Z",
      "diff_hunk" : "@@ -876,6 +828,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n+            \"  \\\"addresses\\\": n,         (numeric) The number of addresses and scripts. Only if -txoutindex=1\\n\"\n+            \"  \\\"utxoindex\\\": n,   (numeric) The number of output transactions. Only if -txoutindex=1\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734484",
      "id" : 111734484,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 103,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 103,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734484",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734589"
         }
      },
      "body" : "The address abstraction ends before/when coins hit the UTXO set. UTXOs do not have and are not associated to addresses.\r\n\r\nRename this to `\"scripts\"`, and don't support specifying as addresses.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:06:52Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734589",
      "id" : 111734589,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 139,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 139,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734589",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734627"
         }
      },
      "body" : "Add braces",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:07:25Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. count            (numeric, optional, default=999999999) The number of outputs to return\\n\"\n+            \"4. from             (numeric, optional, default=0) The number of outputs to skip\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"version\\\" : n,              (numeric) The transaction version\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n+    if (!fTxOutIndex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734627",
      "id" : 111734627,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 178,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 178,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734627",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734677"
         }
      },
      "body" : "Max [guaranteed] value of `int` is `32767`, so this could overflow.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:08:19Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. count            (numeric, optional, default=999999999) The number of outputs to return\\n\"\n+            \"4. from             (numeric, optional, default=0) The number of outputs to skip\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"version\\\" : n,              (numeric) The transaction version\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n+    if (!fTxOutIndex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutindex parameter.\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n+\n+    UniValue vObjects(UniValue::VARR);\n+    std::vector<std::pair<int, unsigned int> > vSort;\n+    int nMinDepth = request.params[0].get_int();\n+    UniValue inputs = request.params[1].get_array();\n+\n+    int nCount = 999999999;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734677",
      "id" : 111734677,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 188,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 188,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734677",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734783"
         }
      },
      "body" : "Need to document that mempool.GetCoinsByScript must only add, not replace.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:10:25Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. count            (numeric, optional, default=999999999) The number of outputs to return\\n\"\n+            \"4. from             (numeric, optional, default=0) The number of outputs to skip\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"version\\\" : n,              (numeric) The transaction version\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n+    if (!fTxOutIndex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutindex parameter.\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n+\n+    UniValue vObjects(UniValue::VARR);\n+    std::vector<std::pair<int, unsigned int> > vSort;\n+    int nMinDepth = request.params[0].get_int();\n+    UniValue inputs = request.params[1].get_array();\n+\n+    int nCount = 999999999;\n+    if (request.params.size() > 2)\n+        nCount = request.params[2].get_int();\n+    int nFrom = 0;\n+    if (request.params.size() > 3)\n+        nFrom = request.params[3].get_int();\n+\n+    if (nMinDepth < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n+    if (nCount < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+    if (nFrom < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n+\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const UniValue& input = inputs[idx];\n+        CScript script;\n+        CBitcoinAddress address(input.get_str());\n+        if (address.IsValid()) {\n+            script = GetScriptForDestination(address.Get());\n+        } else if (IsHex(input.get_str())) {\n+            std::vector<unsigned char> data(ParseHex(input.get_str()));\n+            script = CScript(data.begin(), data.end());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n+        }\n+\n+        CCoinsByScript coinsByScript;\n+        pcoinsByScript->GetCoinsByScript(script, coinsByScript);\n+\n+        if (nMinDepth == 0)\n+            mempool.GetCoinsByScript(script, coinsByScript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734783",
      "id" : 111734783,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 219,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 219,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734783",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734825"
         }
      },
      "body" : "Why sort? Let the caller sort if they need it sorted somehow.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:11:32Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. count            (numeric, optional, default=999999999) The number of outputs to return\\n\"\n+            \"4. from             (numeric, optional, default=0) The number of outputs to skip\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"version\\\" : n,              (numeric) The transaction version\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n+    if (!fTxOutIndex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutindex parameter.\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n+\n+    UniValue vObjects(UniValue::VARR);\n+    std::vector<std::pair<int, unsigned int> > vSort;\n+    int nMinDepth = request.params[0].get_int();\n+    UniValue inputs = request.params[1].get_array();\n+\n+    int nCount = 999999999;\n+    if (request.params.size() > 2)\n+        nCount = request.params[2].get_int();\n+    int nFrom = 0;\n+    if (request.params.size() > 3)\n+        nFrom = request.params[3].get_int();\n+\n+    if (nMinDepth < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n+    if (nCount < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+    if (nFrom < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n+\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const UniValue& input = inputs[idx];\n+        CScript script;\n+        CBitcoinAddress address(input.get_str());\n+        if (address.IsValid()) {\n+            script = GetScriptForDestination(address.Get());\n+        } else if (IsHex(input.get_str())) {\n+            std::vector<unsigned char> data(ParseHex(input.get_str()));\n+            script = CScript(data.begin(), data.end());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n+        }\n+\n+        CCoinsByScript coinsByScript;\n+        pcoinsByScript->GetCoinsByScript(script, coinsByScript);\n+\n+        if (nMinDepth == 0)\n+            mempool.GetCoinsByScript(script, coinsByScript);\n+\n+        CoinsByScriptToJSON(coinsByScript, nMinDepth, vObjects, vSort, true); \n+    }\n+\n+    UniValue results(UniValue::VARR);\n+    sort(vSort.begin(), vSort.end());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734825",
      "id" : 111734825,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 225,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 225,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734825",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734846"
         }
      },
      "body" : "`size_t`",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:11:58Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -txoutindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. count            (numeric, optional, default=999999999) The number of outputs to return\\n\"\n+            \"4. from             (numeric, optional, default=0) The number of outputs to skip\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"version\\\" : n,              (numeric) The transaction version\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n+\n+    if (!fTxOutIndex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -txoutindex parameter.\");\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VARR)(UniValue::VNUM)(UniValue::VNUM));\n+\n+    UniValue vObjects(UniValue::VARR);\n+    std::vector<std::pair<int, unsigned int> > vSort;\n+    int nMinDepth = request.params[0].get_int();\n+    UniValue inputs = request.params[1].get_array();\n+\n+    int nCount = 999999999;\n+    if (request.params.size() > 2)\n+        nCount = request.params[2].get_int();\n+    int nFrom = 0;\n+    if (request.params.size() > 3)\n+        nFrom = request.params[3].get_int();\n+\n+    if (nMinDepth < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n+    if (nCount < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+    if (nFrom < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n+\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const UniValue& input = inputs[idx];\n+        CScript script;\n+        CBitcoinAddress address(input.get_str());\n+        if (address.IsValid()) {\n+            script = GetScriptForDestination(address.Get());\n+        } else if (IsHex(input.get_str())) {\n+            std::vector<unsigned char> data(ParseHex(input.get_str()));\n+            script = CScript(data.begin(), data.end());\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n+        }\n+\n+        CCoinsByScript coinsByScript;\n+        pcoinsByScript->GetCoinsByScript(script, coinsByScript);\n+\n+        if (nMinDepth == 0)\n+            mempool.GetCoinsByScript(script, coinsByScript);\n+\n+        CoinsByScriptToJSON(coinsByScript, nMinDepth, vObjects, vSort, true); \n+    }\n+\n+    UniValue results(UniValue::VARR);\n+    sort(vSort.begin(), vSort.end());\n+    for (unsigned int i = (unsigned int)nFrom; i < vSort.size(); i++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734846",
      "id" : 111734846,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 226,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 226,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734846",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734864"
         }
      },
      "body" : "Use C++11 `for`-each.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:12:18Z",
      "diff_hunk" : "@@ -122,6 +122,63 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n+void CoinsByScriptToJSON(const CCoinsByScript& coinsByScript, int nMinDepth, UniValue& vObjects, std::vector<std::pair<int, unsigned int>>& vSort, bool fIncludeHex)\n+{\n+    BOOST_FOREACH(const COutPoint &outpoint, coinsByScript.setCoins)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734864",
      "id" : 111734864,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 6,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 6,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734981"
         }
      },
      "body" : "Consider the case of a current UTXO that has been spent in the mempool. Under what conditions is the mempool ignored and that UTXO returned? Would you ever want to see it while also searching the mempool?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:14:25Z",
      "diff_hunk" : "@@ -983,6 +939,117 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] count from )\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"The list is ordered by confirmations in descending order.\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111734981",
      "id" : 111734981,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 133,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 133,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111734981",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735088"
         }
      },
      "body" : "Inconsistent behaviour for UTXOs created in mined transactions vs in the mempool. We should probably consider mempool spends the same for both mempool-created UTXOs and confirmed-tx-created UTXOs.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:15:52Z",
      "diff_hunk" : "@@ -122,6 +122,63 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n+void CoinsByScriptToJSON(const CCoinsByScript& coinsByScript, int nMinDepth, UniValue& vObjects, std::vector<std::pair<int, unsigned int>>& vSort, bool fIncludeHex)\n+{\n+    BOOST_FOREACH(const COutPoint &outpoint, coinsByScript.setCoins)\n+    {\n+        CCoins coins;\n+        if (nMinDepth == 0)\n+        {\n+            LOCK(mempool.cs);\n+            CCoinsViewMemPool view(pcoinsTip, mempool);\n+            if (!view.GetCoins(outpoint.hash, coins))\n+                continue;\n+            mempool.pruneSpent(outpoint.hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n+        }\n+        else if (!pcoinsTip->GetCoins(outpoint.hash, coins))\n+            continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735088",
      "id" : 111735088,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 18,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 18,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735088",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735183"
         }
      },
      "body" : "Rather call this `\"generated\"`",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:17:24Z",
      "diff_hunk" : "@@ -122,6 +122,63 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n+void CoinsByScriptToJSON(const CCoinsByScript& coinsByScript, int nMinDepth, UniValue& vObjects, std::vector<std::pair<int, unsigned int>>& vSort, bool fIncludeHex)\n+{\n+    BOOST_FOREACH(const COutPoint &outpoint, coinsByScript.setCoins)\n+    {\n+        CCoins coins;\n+        if (nMinDepth == 0)\n+        {\n+            LOCK(mempool.cs);\n+            CCoinsViewMemPool view(pcoinsTip, mempool);\n+            if (!view.GetCoins(outpoint.hash, coins))\n+                continue;\n+            mempool.pruneSpent(outpoint.hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n+        }\n+        else if (!pcoinsTip->GetCoins(outpoint.hash, coins))\n+            continue;\n+\n+        if (outpoint.n < coins.vout.size() && !coins.vout[outpoint.n].IsNull() && !coins.vout[outpoint.n].scriptPubKey.IsUnspendable())\n+        {\n+            // should not happen\n+            if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT && (!chainActive[coins.nHeight] || !chainActive[coins.nHeight]->phashBlock))\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+            BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+            CBlockIndex *pindex = it->second;\n+\n+            int nConfirmations = 0;\n+            if ((unsigned int)coins.nHeight != MEMPOOL_HEIGHT)\n+                nConfirmations = pindex->nHeight - coins.nHeight + 1;\n+            if (nConfirmations < nMinDepth)\n+                continue;\n+\n+            UniValue oScriptPubKey(UniValue::VOBJ);\n+            ScriptPubKeyToJSON(coins.vout[outpoint.n].scriptPubKey, oScriptPubKey, fIncludeHex);\n+\n+            UniValue o(UniValue::VOBJ);\n+            o.push_back(Pair(\"confirmations\", nConfirmations));\n+            o.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n+            o.push_back(Pair(\"vout\", (int)outpoint.n));\n+            o.push_back(Pair(\"value\", ValueFromAmount(coins.vout[outpoint.n].nValue)));\n+            o.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n+            o.push_back(Pair(\"version\", coins.nVersion));\n+            o.push_back(Pair(\"coinbase\", coins.fCoinBase));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735183",
      "id" : 111735183,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 45,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 45,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735183",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735197"
         }
      },
      "body" : "`false` is the default. No need to change all this.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:17:40Z",
      "diff_hunk" : "@@ -57,7 +57,7 @@ static CBlock BuildBlockTestCase() {\n \n BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n {\n-    CTxMemPool pool;\n+    CTxMemPool pool(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735197",
      "id" : 111735197,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 5,
      "path" : "src/test/blockencodings_tests.cpp",
      "position" : 5,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735197",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735207"
         }
      },
      "body" : "Braces",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:17:52Z",
      "diff_hunk" : "@@ -98,7 +99,8 @@ CCoinsViewCursor *CCoinsViewDB::Cursor() const\n        that restriction.  */\n     i->pcursor->Seek(DB_COINS);\n     // Cache key of first record\n-    i->pcursor->GetKey(i->keyTmp);\n+    if (!i->pcursor->Valid() || !i->pcursor->GetKey(i->keyTmp))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735207",
      "id" : 111735207,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 22,
      "path" : "src/txdb.cpp",
      "position" : 22,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735207",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735286"
         }
      },
      "body" : "Throw an exception if CTxMemPool was created without it?",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:19:22Z",
      "diff_hunk" : "@@ -370,6 +371,16 @@ unsigned int CTxMemPool::GetTransactionsUpdated() const\n     return nTransactionsUpdated;\n }\n \n+void CTxMemPool::GetCoinsByScript(const CScript& script, CCoinsByScript& coinsByScript) const\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735286",
      "id" : 111735286,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 17,
      "path" : "src/txmempool.cpp",
      "position" : 16,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735286",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735300"
         }
      },
      "body" : "Braces...",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:19:42Z",
      "diff_hunk" : "@@ -432,6 +443,11 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n+    if (fTxOutIndex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735300",
      "id" : 111735300,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 33,
      "path" : "src/txmempool.cpp",
      "position" : 32,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735300",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735440"
         }
      },
      "body" : "This should be moved to `coinsbyscript.cpp` and renamed.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:22:23Z",
      "diff_hunk" : "@@ -2051,6 +2055,62 @@ void PruneAndFlush() {\n     FlushStateToDisk(state, FLUSH_STATE_NONE);\n }\n \n+void static UpdateAddressIndex(const CTxOut& txout, const COutPoint& outpoint, bool fInsert)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735440",
      "id" : 111735440,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 76,
      "path" : "src/validation.cpp",
      "position" : 76,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735440",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735490"
         }
      },
      "body" : "This should be moved to `coinsbyscript.cpp` and renamed.",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:22:58Z",
      "diff_hunk" : "@@ -2051,6 +2055,62 @@ void PruneAndFlush() {\n     FlushStateToDisk(state, FLUSH_STATE_NONE);\n }\n \n+void static UpdateAddressIndex(const CTxOut& txout, const COutPoint& outpoint, bool fInsert)\n+{\n+    if (!txout.IsNull() && !txout.scriptPubKey.IsUnspendable())\n+    {\n+        CCoinsByScript &coinsByScript = pcoinsByScript->GetCoinsByScript(txout.scriptPubKey, !fInsert);\n+        if (fInsert)\n+            coinsByScript.setCoins.insert(outpoint);\n+        else\n+            coinsByScript.setCoins.erase(outpoint);\n+    }\n+}\n+\n+void static UpdateAddressIndex(const CBlock& block, CBlockUndo& blockundo, bool fConnect)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735490",
      "id" : 111735490,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 88,
      "path" : "src/validation.cpp",
      "position" : 88,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735490",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735761"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735761"
         }
      },
      "body" : "(didn't review tests)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:25:18Z",
      "diff_hunk" : "@@ -47,14 +47,14 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-txoutindex\"]] * 3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735761",
      "id" : 111735761,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 4,
      "path" : "test/functional/rest.py",
      "position" : 4,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735761",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735810"
         }
      },
      "body" : "(didn't review tests)",
      "commit_id" : "243b136054f22dad7791b23609463f5ac90234de",
      "created_at" : "2017-04-17T12:25:29Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#discussion_r111735810",
      "id" : 111735810,
      "original_commit_id" : "5227e68c66795be142413e3a74f5ebfb62f483a5",
      "original_position" : 1,
      "path" : "test/functional/utxoindex.py",
      "position" : 1,
      "pull_request_review_id" : 32992485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9806",
      "updated_at" : "2017-04-22T01:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111735810",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr - Thanks for the detailed feedback. I'll look over it this weekend.",
      "created_at" : "2017-04-22T01:19:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-296337337",
      "id" : 296337337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-04-22T01:19:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296337337",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5931802?v=3",
         "events_url" : "https://api.github.com/users/droark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/droark/followers",
         "following_url" : "https://api.github.com/users/droark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/droark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/droark",
         "id" : 5931802,
         "login" : "droark",
         "organizations_url" : "https://api.github.com/users/droark/orgs",
         "received_events_url" : "https://api.github.com/users/droark/received_events",
         "repos_url" : "https://api.github.com/users/droark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/droark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/droark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/droark"
      }
   },
   {
      "body" : "Thanks for preparing this @droark. Is this PR still alive?",
      "created_at" : "2017-05-25T21:01:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-304123460",
      "id" : 304123460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-05-25T21:02:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/304123460",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5836089?v=3",
         "events_url" : "https://api.github.com/users/dexX7/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dexX7/followers",
         "following_url" : "https://api.github.com/users/dexX7/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dexX7/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dexX7",
         "id" : 5836089,
         "login" : "dexX7",
         "organizations_url" : "https://api.github.com/users/dexX7/orgs",
         "received_events_url" : "https://api.github.com/users/dexX7/received_events",
         "repos_url" : "https://api.github.com/users/dexX7/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dexX7/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dexX7"
      }
   },
   {
      "body" : "@dexX7 - Thanks for checking in. Some family-related issues came up recently that I had to deal with for awhile. I'm almost done rebasing the PR and will catch up with the remaining feedback ASAP, along with some test harness changes that probably need to be folded in. The path forward looks pretty clear to me, IMO. I just need to wrap up the work.",
      "created_at" : "2017-05-30T08:06:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-304805475",
      "id" : 304805475,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-05-30T08:06:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/304805475",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5931802?v=3",
         "events_url" : "https://api.github.com/users/droark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/droark/followers",
         "following_url" : "https://api.github.com/users/droark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/droark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/droark",
         "id" : 5931802,
         "login" : "droark",
         "organizations_url" : "https://api.github.com/users/droark/orgs",
         "received_events_url" : "https://api.github.com/users/droark/received_events",
         "repos_url" : "https://api.github.com/users/droark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/droark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/droark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/droark"
      }
   },
   {
      "body" : "I still need to read more, but...\r\n\r\nRegarding searching by address , by scriptPubKey, or by COutPoint (tx_id, output_pos), I'm not sure whether I want them all or a subset of them.\r\nThe later doesn't require any further index. \r\nSearching by scriptPubKey only requires an additional scriptPubKey -> COutPoint index but not much logic.\r\nSearching by address on the other hand...there's many types of addresses and people still propose new better ones...I wonder if perhaps the translation address -> scriptPubKey (which shouldn't require an extra index on top of the scriptPubKey one) belongs to an upper layer like the wallet and/or ui that the users of this feature implement. I'm like supporting it here, but maybe script/standard needs to be extended for the address -> scriptPubKey translator (sorry to reiterate, but I don't think we want an address index, just a one way translation function [the other way is for wallets and relay policies, or higher level protocols ala coinjoin and whatnot]). \r\n\r\nThis all assumes you create a new scriptPubKey -> COutPoint index.\r\n\r\nRegarding utxo vs stxo vs txo...\r\nYou can easily serve both utxo and stxo (that is, the whole txo) by just calling GetTransaction() (in validation.o) like getrawtransaction does, without needing any consideration on whether the the output is spent or not while getting the better performance if the COutPoint happens to be in the current utxo, which is very nice.\r\nThat will just complain if you search when you are pruning or not using -txindex and thus you cannot serve certain outputs unless you do a rescan which is completely out of the question.\r\nYou probably want a couple of options -utxoscriptindex and -txoscriptindex or something of the sort.\r\nHaving -utxoscriptindex but not -txoscriptindex maybe should force the error when searching for spent txo's. Having both is just reduntant. Having -txoscriptindex implies having the full historic scriptPubKey -> COutPoint index.\r\nYou don't even need to remove the spent entries from the index if you only have -utxoscriptindex if you make sure the outputs fail when -utxoscriptindex is set but -txoscriptindex is not. In that case, garbage collecting or \"is spent reference counting\" or \"worrying about reorgs\" or \"adding a spent bool to the index\" would probably be nice additions to have since that selection could prune them and otherwise they will accumulate over running time, even if they're just entries on an index and not the outputs themselves. That seems like it could be an important distraction in the short term.\r\n\r\nSo although I'm not against gettxoutsbyaddress and I celebrate concept ACK it, but I think it would be nicer to get gettxoutsbyoutpoint and gettxoutsbyscript reviewed and merged in that order first. But I think some other people don't like chained PRs all that much, so just take it as \"if we're offering gettxoutsbyaddress, we should be able to offer gettxoutsbyoutpoint and gettxoutsbyscript 'almost for free'(tm) too\".\r\n\r\nIt may seem contradictory: I'm asking you to do more with respect to utxo/stxo, but I'm suggesting to do less with respect to addresses and properly removing things for the users that want this feature but don't want to be full archives, which is something we can optimize further later after leveraging the easy important one, which is just looking in the utxo first.\r\nThe way I see it, the utxo is just the subset of the txo that can't be pruned, we happen to cache very efficiently, so it is nice to always search there first just in case and well, people usually care less about stxo because it is already spent...but is simple to also serve it or just complain when you can't or you are not expected to, sorry to reiterate.\r\n\r\nAnyway, feel free to note the parts of my long post you like in whatever order you like best and ignore the rest. I plan to have a deeper look either way beyond this concept ack.\r\n\r\nAll the best but needs rebase.\r\n",
      "created_at" : "2017-07-07T03:34:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-313578569",
      "id" : 313578569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-07-07T03:34:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313578569",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Sorry, no, using GetTransaction doesn't leverage the utxo index we maintain...One would need to search in the utxo (with CCoinsViewCache::AccessCoin) first and then try with GetTransaction only if we want to also serve stxo, which should perhaps be left out of scope for this PR as a later improvement.",
      "created_at" : "2017-07-07T16:48:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-313734541",
      "id" : 313734541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-07-07T16:48:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313734541",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Sorry for the long post, not for being long but for being incorrect.\r\n\r\nThere's not need for a gettxobyoutpoint or similar because it already exists and is named gettxout!\r\nThat means everything I said about \"optimize later, it shouldn't be hard\" turns into \"it's already done\".\r\n\r\nOnly the slower parts were missing, which I plan to serve in #10822 which is just a draft that needs lots of testing.\r\n\r\nTo reiterate, the important parts of my previous fedback:\r\n\r\n1) I'm more than happy to extend whatever you do for utxo for txo too, ideallly almost transparently\r\n2) Don't do an address index, do a more generic script (that means binary or lower level, hex strings on rpc) to outpoint index, and once you have the outpoint you have the whole txo (unless you don't tcindex or you prune).\r\n3) Create a function to translate \"an address\" into a script so that it can be easily searched for in the outpoint -> script index. There will always be new address types your index doesn't explicitly support yet, make them support your index instead.\r\n\r\nThe PR that should help extend whatever is done for utxo to txo if you do the index: outpoint -> script; is the following:\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/10822\r\n\r\nAs said it needs testing, but there's no need to wait, let's expose utxo if we can first and then txo \"almost for free\"(tm).\r\n\r\nSorry again for invading the pr in a distractive way, but this needs rebase.\r\n",
      "created_at" : "2017-07-14T08:28:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9806#issuecomment-315302930",
      "id" : 315302930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9806",
      "updated_at" : "2017-07-14T08:28:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315302930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1008458?v=4",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   }
]
