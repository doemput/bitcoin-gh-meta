[
   {
      "body" : "Yes, makes sense to check that. utACK https://github.com/bitcoin/bitcoin/pull/9824/commits/fac3af7f1c6a1d2ec25ed93201c9dec7bf9bb7bf (also for 0.14)",
      "created_at" : "2017-02-22T10:25:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9824#issuecomment-281629257",
      "id" : 281629257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9824",
      "updated_at" : "2017-02-22T10:25:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281629257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@shyii I'm not sure what you're trying to do, but please don't abuse the code review system for sending idle messages.",
      "created_at" : "2017-02-22T11:13:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9824#issuecomment-281640387",
      "id" : 281640387,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9824",
      "updated_at" : "2017-02-22T11:13:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281640387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK. We should definitely assert the return code on shutdown.\r\n\r\nThis causes at least the following two tests to fail:\r\n\r\n- fundrawtransaction.py\r\n- rpcbind_test.py\r\n\r\nfundrawtransaction is failing because it's calling stop_nodes() on a subset of the running nodes:\r\n\r\n```py\r\n        self.nodes[1].encryptwallet(\"test\")\r\n        self.nodes.pop(1)\r\n        stop_nodes(self.nodes)\r\n```\r\nThe `encryptwallet()` RPC actually stops bitcoind. That means that node 1 is still in the util module's global `bitcoind_processes` dictionary, so a call to `stop_nodes()` hits your assert.\r\n\r\nIt can be fixed by just calling `stop_node()` for each of the nodes individually.\r\n\r\nThe failure in rpcbind_test.py is due to this:\r\n\r\n```py\r\n        try:\r\n            # connect to node through non-loopback interface\r\n            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\r\n            node.getnetworkinfo()\r\n        finally:\r\n            node = None # make sure connection will be garbage collected and closed\r\n            stop_nodes(self.nodes)\r\n```\r\n\r\nI don't think we need to wrap those calls in try/finallys since the `BitcoinTestFramework.main()` method takes care of cleaning up the nodes for us.\r\n\r\nI've pushed fixes for both of those failures to https://github.com/jnewbery/bitcoin/commit/cbebbcf010e2f7986e349b1a21121b6cdaf182c2. Feel free to squash into your commit if you're happy with the changes.\r\n\r\nGenerally, tracking `bitcoin_processes` as a global dictionary in util.py smells (any global variables in util.py smells). The nodes should be members of TestFramework, and it should be the test framework's responsibility to clean them up (and assert return codes) at the end of the test run.\r\n\r\nAnd one question on code style: I know that assert_equal() is used all over the qa test directory. Why? Why is\r\n`assert_equal(ret, 0)`\r\npreferred over\r\n`assert ret == 0, \"unexpected return code %s\" % ret`?\r\n\r\nWhy is\r\n`assert_equal(len(bitcoind_processes.values()), 0)`\r\npreferred over\r\n`assert not bitcoind_processes, \"bitcoind processes still running: %s\" % str(bitcoind_processes)`?\r\n\r\nIn generally, `assert` seems to be treated as a function throughout the qa directory instead of a statement. It would be nice if we could change that.\r\n",
      "created_at" : "2017-02-22T19:49:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9824#issuecomment-281782212",
      "id" : 281782212,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9824",
      "updated_at" : "2017-02-22T19:49:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281782212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "> In generally, assert seems to be treated as a function throughout the qa directory instead of a statement. > It would be nice if we could change that.\r\n\r\nI think the idea on the longer run is to move away from using bare assert everywhere and to something that resembles a real testing framework (maybe `unittest`). Testing frameworks provide [helper functions](https://docs.python.org/3/library/unittest.html#assert-methods) such as `assert_equal` because those can automatically print the expected and passed-in value, without having to provide a custom message everywhere.",
      "created_at" : "2017-02-22T20:28:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9824#issuecomment-281792730",
      "id" : 281792730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9824",
      "updated_at" : "2017-02-22T20:28:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281792730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Thanks for the fixups, I will include them in this pull. I will also\nadjust the code style of the second assertion.\n\nIn regard to your question:\n\nassert_equal(a, b) is the lazy way to assert equality but still have a\nsomewhat useful assert message which includes both values that are\nunequal.\n\nassert as a statement should only be used with a single variable of\ntype boolean as expression or with an additional string that provides\nfurther debug infos (such as the ones you mentioned above). I assume\nno one uses the hand crafted strings because assertions are expected\nto fire off basically never and the additional effort required to put\ninto crafting the string is not considered worthy. (In the rare case a\nassertion fires, a developer is usually required to jump into the code\nat that location anyway...)\n\nOn Wed, Feb 22, 2017 at 8:49 PM, John Newbery <notifications@github.com> wrote:\n> Concept ACK. We should definitely assert the return code on shutdown.\n>\n> This causes at least the following two tests to fail:\n>\n> fundrawtransaction.py\n> rpcbind_test.py\n>\n> fundrawtransaction is failing because it's calling stop_nodes() on a subset\n> of the running nodes:\n>\n>         self.nodes[1].encryptwallet(\"test\")\n>         self.nodes.pop(1)\n>         stop_nodes(self.nodes)\n>\n> The encryptwallet() RPC actually stops bitcoind. That means that node 1 is\n> still in the util module's global bitcoind_processes dictionary, so a call\n> to stop_nodes() hits your assert.\n>\n> It can be fixed by just calling stop_node() for each of the nodes\n> individually.\n>\n> The failure in rpcbind_test.py is due to this:\n>\n>         try:\n>             # connect to node through non-loopback interface\n>             node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)),\n> 0)\n>             node.getnetworkinfo()\n>         finally:\n>             node = None # make sure connection will be garbage collected and\n> closed\n>             stop_nodes(self.nodes)\n>\n> I don't think we need to wrap those calls in try/finallys since the\n> BitcoinTestFramework.main() method takes care of cleaning up the nodes for\n> us.\n>\n> I've pushed fixes for both of those failures to jnewbery@cbebbcf. Feel free\n> to squash into your commit if you're happy with the changes.\n>\n> Generally, tracking bitcoin_processes as a global dictionary in util.py\n> smells (any global variables in util.py smells). The nodes should be members\n> of TestFramework, and it should be the test framework's responsibility to\n> clean them up (and assert return codes) at the end of the test run.\n>\n> And one question on code style: I know that assert_equal() is used all over\n> the qa test directory. Why? Why is\n> assert_equal(ret, 0)\n> preferred over\n> assert ret == 0, \"unexpected return code %s\" % ret?\n>\n> Why is\n> assert_equal(len(bitcoind_processes.values()), 0)\n> preferred over\n> assert not bitcoind_processes, \"bitcoind processes still running: %s\" %\n> str(bitcoind_processes)?\n>\n> In generally, assert seems to be treated as a function throughout the qa\n> directory instead of a statement. It would be nice if we could change that.\n>\n> Ã¢ÂÂ\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
      "created_at" : "2017-02-22T20:31:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9824#issuecomment-281793637",
      "id" : 281793637,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9824",
      "updated_at" : "2017-02-22T20:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281793637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "@laanwj @MarcoFalke thanks. Makes sense.\r\n\r\n> assert as a statement should only be used with a single variable of\r\ntype boolean as expression or with an additional string that provides\r\nfurther debug infos\r\n\r\nSounds sensible. We're quite a long way off that though!\r\n```\r\nÃ¢ÂÂ cat qa/rpc-tests/*py | grep -c \"assert(\"\r\n364\r\n```",
      "created_at" : "2017-02-22T22:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9824#issuecomment-281831427",
      "id" : 281831427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9824",
      "updated_at" : "2017-02-22T22:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281831427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
