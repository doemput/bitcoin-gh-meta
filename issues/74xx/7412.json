{
   "assignee" : null,
   "body" : "Hi,\r\nThis is my first time posting anything to github, so go easy on me, but I'd like to help :). Since block size seems to be an important issue at the moment, I was wondering if the following would help.\r\n\r\nA potential place to save space would be to look into stop bit encoding for variable length integers that have a higher frequency of being larger than 0xfd. Stop bit encoding works by using the 8th bit of each byte as a flag that you've reached the last byte of the integer data (so 7 bits of each byte is used for the integer data). This is really nice as once you get out pass 0xfd the var_int encoding seems rather inefficient, unless you fill the entire int16, int32, or int64. For instance if the value to be encoded is 0xfe, var_int will use 3 bytes, while stop bit will only require 2 bytes. Both have a storage space of 3 bytes for full 16bit integers, 5 bytes for full 32bit integers, and 9 bytes for full 64bit integers. FIX/FAST protocol makes use of stop bit encoding for integer compression, if you'd like a reference. The nice thing about var_int is how much space it saves for values up to 0xfd, so that's why I'd think stop bit encoding would only be helpful for values which tend to normally be larger in size than 0xfd.\r\n\r\nAnother place I could imagine using a compression scheme like stop bit encoding would be for the \"lock_time\" field. I'm not sure how often this field is used, but I could imagine if it's not used very frequently we are wasting 3 extra Bytes per transaction for nothing. There also seems to be an issue once the block number is larger than 500000000. What I would purpose instead is creating a single byte called \"tx_opt\" which is used as bit flags for turning on or off fields within the transaction. Two of the option bits could be used to signal the presence of either a \"lock_block\"  field or a \"lock_time\" field. If neither flags are set then the transaction ends after the last read \"tx_out\". This saves at most 3 bytes from the transaction data when a lock_time or lock_block are not used. It also provides some flag space for further uses later on within each transaction. I was also noticing that many transactions tend to have only 1 input and 1 output, which if this is common enough, we could perhaps have a flag or two that set weather the \"tx_in count\" or \"tx_out count\" are specified (the default value if they are not included being 1).\r\n\r\nI would also recommend doing something similar with the \"sequence\" field in the \"tx_in\" format, if applicable, as this reads like it is more of an optional field than a required field so it might make more sense to have another \"tx_in_opt\" field which uses a bit flag to signal the presence of the \"sequence\" field.\r\n\r\nI hope these ideas are useful. I would like to contribute to bitcoin core more, but first I have to spend some time learning how github works.\r\n\r\nBrandon",
   "closed_at" : "2016-06-20T12:42:41Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 8,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7412/comments",
   "created_at" : "2016-01-25T05:12:39Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7412/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/7412",
   "id" : 128463544,
   "labels" : [
      {
         "color" : "ebd775",
         "name" : "Brainstorming",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "009800",
         "name" : "Consensus",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus"
      },
      {
         "color" : "981023",
         "name" : "Resource usage",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7412/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 7412,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Possibly more efficient blocks?",
   "updated_at" : "2016-06-20T12:42:53Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7412",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/8084361?v=3",
      "events_url" : "https://api.github.com/users/yuilleb/events{/privacy}",
      "followers_url" : "https://api.github.com/users/yuilleb/followers",
      "following_url" : "https://api.github.com/users/yuilleb/following{/other_user}",
      "gists_url" : "https://api.github.com/users/yuilleb/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/yuilleb",
      "id" : 8084361,
      "login" : "yuilleb",
      "organizations_url" : "https://api.github.com/users/yuilleb/orgs",
      "received_events_url" : "https://api.github.com/users/yuilleb/received_events",
      "repos_url" : "https://api.github.com/users/yuilleb/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/yuilleb/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/yuilleb/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/yuilleb"
   }
}
