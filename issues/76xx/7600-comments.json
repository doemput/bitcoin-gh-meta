[
   {
      "body" : "Does this algorithm claim to select the optimum descendant subtree for a given independent transaction?",
      "created_at" : "2016-03-03T20:19:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-191945078",
      "id" : 191945078,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-03-03T20:19:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/191945078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "Would it be possible to have a CTxMempool::check that accurately checks the ancestor-based statistics, rather than just lower bounding them to 1 level up?",
      "created_at" : "2016-03-04T21:57:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-192487265",
      "id" : 192487265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-03-04T21:57:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/192487265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Updated now that #7594 has been merged.",
      "created_at" : "2016-03-17T15:11:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197926092",
      "id" : 197926092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-03-17T15:11:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197926092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Is this still WIP?\r\n",
      "created_at" : "2016-03-17T17:28:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197987996",
      "id" : 197987996,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-03-17T17:28:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197987996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "@btcdrak: I was thinking I'd leave this marked as WIP until the other dependent PR (#7598) is merged, since I'll have to rebase this on top of whatever the final version of the refactor ends up being. \r\n\r\nI should add -- if you want to start reviewing now, please do!",
      "created_at" : "2016-03-17T17:32:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197989822",
      "id" : 197989822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-03-17T17:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197989822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar Github tasklists are maybe better for this kind of thing, and they show up as tasks even on ticket lists. https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments",
      "created_at" : "2016-03-17T17:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197994652",
      "id" : 197994652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-03-17T17:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197994652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "Rebased on the latest #7598 ",
      "created_at" : "2016-05-18T18:39:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-220119556",
      "id" : 220119556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-05-18T18:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220119556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Rebased again and built off the latest version of #7598.",
      "created_at" : "2016-06-09T14:37:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-224915073",
      "id" : 224915073,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-09T14:37:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/224915073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Very nice!\r\n\r\n> Additionally, my guess is that user behavior may not have adapted to this type of transaction selection being widely deployed, and so in the future perhaps we might expect to see larger differences. \r\n\r\nYes you would definitely expect bigger difference as this becomes available. As entities will be able to underpay transactions without risking getting dropped from the mempool. (for entities who continuously create transactions)\r\n\r\nOne of the dangers of the blocksize limit is that fees would go up, but have almost no reason/force to get it down. Things like this and RBF could really help with that. :+1: \r\n\r\nIs this algorithm also used to determine which transactions to drop? ",
      "created_at" : "2016-06-10T08:19:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225121067",
      "id" : 225121067,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-10T08:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225121067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1255252?v=3",
         "events_url" : "https://api.github.com/users/seweso/events{/privacy}",
         "followers_url" : "https://api.github.com/users/seweso/followers",
         "following_url" : "https://api.github.com/users/seweso/following{/other_user}",
         "gists_url" : "https://api.github.com/users/seweso/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/seweso",
         "id" : 1255252,
         "login" : "seweso",
         "organizations_url" : "https://api.github.com/users/seweso/orgs",
         "received_events_url" : "https://api.github.com/users/seweso/received_events",
         "repos_url" : "https://api.github.com/users/seweso/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/seweso/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/seweso/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/seweso"
      }
   },
   {
      "body" : "> Is this algorithm also used to determine which transactions to drop?\r\n\r\n@seweso  The algorithm for eviction of transactions from the mempool is unchanged.  In a sense, the transaction eviction algorithm for the mempool is already assuming we're doing something like what this PR implements for transaction selection, in that a transaction is less likely to be evicted from the mempool if its feerate with descendants is high.  But more fundamentally, mempool eviction is just a different problem than transaction selection: when selecting transactions for a block, a candidate transaction's ancestors must be included (so it's natural to sort by feerate-with-ancestors), but when considering a transaction for mempool eviction, a candidate transaction's descendants must also be removed as well (so we use `max(feerate, feerate with descendants)` as our sort order for removal).\r\n",
      "created_at" : "2016-06-11T15:43:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225370732",
      "id" : 225370732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-11T15:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225370732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Needs rebase",
      "created_at" : "2016-06-13T09:52:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225537007",
      "id" : 225537007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-13T09:52:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225537007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Rebased after #7598 has been merged.  This PR is ready for review!",
      "created_at" : "2016-06-13T14:08:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225591617",
      "id" : 225591617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-13T14:08:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225591617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2016-06-14T11:36:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225855171",
      "id" : 225855171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-14T11:36:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225855171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67012735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67012735"
         }
      },
      "body" : "~~Nit: may as well have ++iit in the for loop because it always occurs.~~\r\n\r\n```\r\nfor (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ++iit) {\r\n         // Only test txs not already in the block\r\n         if (inBlock.count(*iit)) \r\n             testSet.erase(iit);\r\n }\r\n```\r\n\r\n\r\nEdit: ignore, erasing an iterator invalidates iit.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-14T17:04:35Z",
      "diff_hunk" : "@@ -177,7 +180,44 @@ bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n     return false;\n }\n \n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+{\n+    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n+        // Only test txs not already in the block\n+        if (inBlock.count(*iit)) {\n+            testSet.erase(iit++);\n+        }\n+        else {\n+            iit++;\n+        }\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67012735",
      "id" : 67012735,
      "original_commit_id" : "157d24e2e319232cfa437f4ed37c4384f0ef9f4c",
      "original_position" : 41,
      "path" : "src/miner.cpp",
      "position" : 32,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67012735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67020156"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67020156"
         }
      },
      "body" : "nit: Can just have\r\n`return ! (nBlockSize + packageSize >= nBlockMaxSize || nBlockSigOps + packageSigOps >= MAX_BLOCK_SIGOPS)`\r\n\r\nor\r\n\r\n`return (nBlockSize + packageSize < nBlockMaxSize && nBlockSigOps + packageSigOps < MAX_BLOCK_SIGOPS)`",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-14T17:45:17Z",
      "diff_hunk" : "@@ -177,7 +180,44 @@ bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n     return false;\n }\n \n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+{\n+    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n+        // Only test txs not already in the block\n+        if (inBlock.count(*iit)) {\n+            testSet.erase(iit++);\n+        }\n+        else {\n+            iit++;\n+        }\n+    }\n+}\n+\n+bool BlockAssembler::TestPackage(uint64_t packageSize, unsigned int packageSigOps)\n+{\n+    if (nBlockSize + packageSize >= nBlockMaxSize)\n+        return false;\n+    if (nBlockSigOps + packageSigOps >= MAX_BLOCK_SIGOPS)\n+        return false;\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67020156",
      "id" : 67020156,
      "original_commit_id" : "157d24e2e319232cfa437f4ed37c4384f0ef9f4c",
      "original_position" : 50,
      "path" : "src/miner.cpp",
      "position" : 41,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67020156",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67020333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67020333"
         }
      },
      "body" : "nit: >= should really be just > because we allow up to the max sizes.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-14T17:46:09Z",
      "diff_hunk" : "@@ -177,7 +180,44 @@ bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n     return false;\n }\n \n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+{\n+    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n+        // Only test txs not already in the block\n+        if (inBlock.count(*iit)) {\n+            testSet.erase(iit++);\n+        }\n+        else {\n+            iit++;\n+        }\n+    }\n+}\n+\n+bool BlockAssembler::TestPackage(uint64_t packageSize, unsigned int packageSigOps)\n+{\n+    if (nBlockSize + packageSize >= nBlockMaxSize)\n+        return false;\n+    if (nBlockSigOps + packageSigOps >= MAX_BLOCK_SIGOPS)\n+        return false;\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67020333",
      "id" : 67020333,
      "original_commit_id" : "157d24e2e319232cfa437f4ed37c4384f0ef9f4c",
      "original_position" : 50,
      "path" : "src/miner.cpp",
      "position" : 41,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67020333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "utAck",
      "created_at" : "2016-06-14T18:24:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225971779",
      "id" : 225971779,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-14T18:24:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/225971779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67175848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67175848"
         }
      },
      "body" : "Nit: since block size and sigops have already been checked, it shouldn't be necessary to re-check and assert here.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-15T14:46:29Z",
      "diff_hunk" : "@@ -177,7 +180,44 @@ bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n     return false;\n }\n \n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+{\n+    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n+        // Only test txs not already in the block\n+        if (inBlock.count(*iit)) {\n+            testSet.erase(iit++);\n+        }\n+        else {\n+            iit++;\n+        }\n+    }\n+}\n+\n+bool BlockAssembler::TestPackage(uint64_t packageSize, unsigned int packageSigOps)\n+{\n+    if (nBlockSize + packageSize >= nBlockMaxSize)\n+        return false;\n+    if (nBlockSigOps + packageSigOps >= MAX_BLOCK_SIGOPS)\n+        return false;\n+    return true;\n+}\n \n+// Block size and sigops have already been tested.  Check that all transactions\n+// are final.\n+bool BlockAssembler::TestPackageFinality(const CTxMemPool::setEntries& package)\n+{\n+    uint64_t potentialBlockSize = nBlockSize;\n+    unsigned int potentialBlockSigOps = nBlockSigOps;\n+    BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n+        if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n+            return false;\n+        potentialBlockSize += it->GetTxSize();\n+        assert(potentialBlockSize < nBlockMaxSize);\n+        potentialBlockSigOps += it->GetSigOpCount();\n+        assert (potentialBlockSigOps < MAX_BLOCK_SIGOPS);\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67175848",
      "id" : 67175848,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 67,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67175848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67177283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67177283"
         }
      },
      "body" : "nit: modifiying -> modifying",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-15T14:53:29Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67177283",
      "id" : 67177283,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 139,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67177283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67179126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67179126"
         }
      },
      "body" : "Nit: perhaps SkipMapTxEntry could just be included here to avoid the separate method.  Alternatively, if the code would be a little too messy, failedTxs could be a local variable passed to the helper function rather than a class member variable.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-15T15:02:17Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);\n+\n+    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n+    CTxMemPool::txiter iter;\n+    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())\n+    {\n+        // First try to find a new transaction in mapTx to evaluate.\n+        if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n+                SkipMapTxEntry(mempool.mapTx.project<0>(mi))) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67179126",
      "id" : 67179126,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 148,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67179126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67179693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67179693"
         }
      },
      "body" : "mapModifiedTxs should be cleared at the end of this function.  Or it could be a local variable and passed as needed. ",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-15T15:04:45Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);\n+\n+    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n+    CTxMemPool::txiter iter;\n+    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())\n+    {\n+        // First try to find a new transaction in mapTx to evaluate.\n+        if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n+                SkipMapTxEntry(mempool.mapTx.project<0>(mi))) {\n+            ++mi;\n+            continue;\n+        }\n+\n+        // Now that mi is not stale, determine which transaction to evaluate:\n+        // the next entry from mapTx, or the best from mapModifiedTx?\n+        bool fUsingModified = false;\n+\n+        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n+        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n+            // We're out of entries in mapTx; use the entry from mapModifiedTx\n+            iter = modit->iter;\n+            fUsingModified = true;\n+        } else {\n+            // Try to compare the mapTx entry to the mapModifiedTx entry\n+            iter = mempool.mapTx.project<0>(mi);\n+            if (modit != mapModifiedTx.get<ancestor_score>().end() &&\n+                    CompareModifiedEntry()(*modit, CTxMemPoolModifiedEntry(iter))) {\n+                // The best entry in mapModifiedTx has higher score\n+                // than the one from mapTx.\n+                // Switch which transaction (package) to consider\n+                iter = modit->iter;\n+                fUsingModified = true;\n+            } else {\n+                // Either no entry in mapModifiedTx, or it's worse than mapTx.\n+                // Increment mi for the next loop iteration.\n+                ++mi;\n+            }\n+        }\n+\n+        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n+        // contain anything that is inBlock.\n+        assert(!inBlock.count(iter));\n+\n+        uint64_t packageSize = iter->GetSizeWithAncestors();\n+        CAmount packageFees = iter->GetModFeesWithAncestors();\n+        unsigned int packageSigOps = iter->GetSigOpCountWithAncestors();\n+        if (fUsingModified) {\n+            packageSize = modit->nSizeWithAncestors;\n+            packageFees = modit->nModFeesWithAncestors;\n+            packageSigOps = modit->nSigOpCountWithAncestors;\n+        }\n+\n+        if (packageFees < ::minRelayTxFee.GetFee(packageSize) && nBlockSize >= nBlockMinSize) {\n+            // Everything else we might consider has a lower fee rate\n+            return;\n+        }\n+\n+        if (!TestPackage(packageSize, packageSigOps)) {\n+            if (fUsingModified) {\n+                // Since we always look at the best entry in mapModifiedTx,\n+                // we must erase failed entries so that we can consider the\n+                // next best entry on the next loop iteration\n+                mapModifiedTx.get<ancestor_score>().erase(modit);\n+                failedTx.insert(iter);\n+            }\n+            continue;\n+        }\n+\n+        CTxMemPool::setEntries ancestors;\n+        uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n+        std::string dummy;\n+        mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+\n+        onlyUnconfirmed(ancestors);\n+        ancestors.insert(iter);\n+\n+        // Test if all tx's are Final\n+        if (!TestPackageFinality(ancestors)) {\n+            if (fUsingModified) {\n+                mapModifiedTx.get<ancestor_score>().erase(modit);\n+                failedTx.insert(iter);\n+            }\n+            continue;\n+        }\n+\n+        // Package can be added. Sort the entries in a valid order.\n+        vector<CTxMemPool::txiter> sortedEntries;\n+        SortForBlock(ancestors, iter, sortedEntries);\n+\n+        for (size_t i=0; i<sortedEntries.size(); ++i) {\n+            AddToBlock(sortedEntries[i]);\n+            // Erase from the modified set, if present\n+            mapModifiedTx.erase(sortedEntries[i]->GetTx().GetHash());\n+        }\n+\n+        // Update transactions that depend on each of these\n+        UpdatePackagesForAdded(ancestors);\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67179693",
      "id" : 67179693,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 238,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67179693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67195937"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67195937"
         }
      },
      "body" : "I guess I left these asserts in to make the logic in addPackageTxs easier to review, in that if you weren't sure whether the mapModifiedTx calculations were correct, this assertion ensures that it doesn't underestimate.  But I suppose this would be caught in TestBlockValidity anyway, so I'll remove.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-15T16:24:51Z",
      "diff_hunk" : "@@ -177,7 +180,44 @@ bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)\n     return false;\n }\n \n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+{\n+    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n+        // Only test txs not already in the block\n+        if (inBlock.count(*iit)) {\n+            testSet.erase(iit++);\n+        }\n+        else {\n+            iit++;\n+        }\n+    }\n+}\n+\n+bool BlockAssembler::TestPackage(uint64_t packageSize, unsigned int packageSigOps)\n+{\n+    if (nBlockSize + packageSize >= nBlockMaxSize)\n+        return false;\n+    if (nBlockSigOps + packageSigOps >= MAX_BLOCK_SIGOPS)\n+        return false;\n+    return true;\n+}\n \n+// Block size and sigops have already been tested.  Check that all transactions\n+// are final.\n+bool BlockAssembler::TestPackageFinality(const CTxMemPool::setEntries& package)\n+{\n+    uint64_t potentialBlockSize = nBlockSize;\n+    unsigned int potentialBlockSigOps = nBlockSigOps;\n+    BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n+        if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n+            return false;\n+        potentialBlockSize += it->GetTxSize();\n+        assert(potentialBlockSize < nBlockMaxSize);\n+        potentialBlockSigOps += it->GetSigOpCount();\n+        assert (potentialBlockSigOps < MAX_BLOCK_SIGOPS);\n+    }\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67195937",
      "id" : 67195937,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 67,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67195937",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Pushed commits addressing @mrbandrews comments.\r\n\r\nre: @JeremyRubin's nits, I'm leaving `TestPackage` alone, I think it's pretty readable in its current form, and the >= shouldn't matter for anything and is consistent with addScoreTx's behavior.\r\n\r\nI'll do another round of testing locally, similar to what I did before when I opened the pull, with the current version of the code and report back.",
      "created_at" : "2016-06-15T16:31:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226243521",
      "id" : 226243521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-15T16:31:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226243521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "I re-tested my code by simulating on data from 2016-02-23 -to 2016-02-29, comparing the default mining code in master against the mining code introduced here, by calling CreateNewBlock every 100 transactions.\r\n\r\nI looked at the fees produced in the last call to CNB before each block found by the network, and the code in this PR produced higher fee blocks in each instance (894 data points).\r\n\r\nI was also benchmarking the runtime of CNB over all invocations, and this code was negligibly faster than the old code (summing over all invocations).",
      "created_at" : "2016-06-15T21:15:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226322511",
      "id" : 226322511,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-15T21:15:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226322511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "ACK.\r\n\r\nBeyond review, I tested this on several mining nodes for about a week (in addition to prior testing I did months back); I also took nodes running this and a tight getblocktemplate loop through a number of reorg tests with debugging turned up.  Finally, rather than using sdaftuar record and replay framework, I scraped all the recent transactions out of recent blocks, reorged the chain back and put all the still-valid transactions into the mempool and confirmed it gave a valid gbt result with higher total fees than the before the patch, I tried this at a dozen different points. ",
      "created_at" : "2016-06-15T21:28:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226325742",
      "id" : 226325742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-15T21:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226325742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "ACK.\r\nCode review ACK and in my testing, though not nearly as comprehensive as sdaftuar and gmaxwell's testing, the new code yields higher fees by 1% to 15%.",
      "created_at" : "2016-06-16T15:37:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226524005",
      "id" : 226524005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-16T15:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226524005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67370905"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67370905"
         }
      },
      "body" : "If I understand it correctly, this means you can't call addPackageTxs() twice (or have another add*Tx() that also calls `UpdatePackagesForAdded(inBlock);`. That could be solved by keeping a set of things in `inBlock` that have already been counted for package updates, but I guess it's sufficient to just document that this must not be called twice.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T15:50:25Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67370905",
      "id" : 67370905,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 140,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67370905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67371518"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67371518"
         }
      },
      "body" : "Calling it twice doesn't really make sense, as addPackageTx's would fill up your block the first time.  I think if you wanted to implement custom transaction selection, you'd implement it in a function that is called before you'd call addPackageTx's to fill the rest of the block (like how priority tx's are done).\r\n\r\nI can add a comment though to make this clearer.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T15:53:55Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67371518",
      "id" : 67371518,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 140,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67371518",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67372031"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67372031"
         }
      },
      "body" : "Nit: this can move into the else branch below.\r\n\r\nEdit: nevermind, you're using it in the comparator.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T15:56:47Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);\n+\n+    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n+    CTxMemPool::txiter iter;\n+    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())\n+    {\n+        // First try to find a new transaction in mapTx to evaluate.\n+        if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n+                SkipMapTxEntry(mempool.mapTx.project<0>(mi))) {\n+            ++mi;\n+            continue;\n+        }\n+\n+        // Now that mi is not stale, determine which transaction to evaluate:\n+        // the next entry from mapTx, or the best from mapModifiedTx?\n+        bool fUsingModified = false;\n+\n+        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n+        if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n+            // We're out of entries in mapTx; use the entry from mapModifiedTx\n+            iter = modit->iter;\n+            fUsingModified = true;\n+        } else {\n+            // Try to compare the mapTx entry to the mapModifiedTx entry\n+            iter = mempool.mapTx.project<0>(mi);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67372031",
      "id" : 67372031,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 164,
      "path" : "src/miner.cpp",
      "position" : 156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67372031",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67372247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67372247"
         }
      },
      "body" : "Oh I forgot to mention: this function no longer changes global state, after I addressed @mrbandrews comments in a later commit and moved mapModifiedTx to be a local variable in addPackageTxs.  So this can be reused, though it's pretty tied to the package selection.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T15:57:56Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67372247",
      "id" : 67372247,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 140,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67372247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67373389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67373389"
         }
      },
      "body" : "Couldn't CTxMempoolModifiedEntry be indexed by its CTxMemPool::txiter entry instead? Not sure if that's comparable/hashable, though.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:03:39Z",
      "diff_hunk" : "@@ -29,6 +31,89 @@ struct CBlockTemplate\n     std::vector<int64_t> vTxSigOps;\n };\n \n+// Container for tracking updates to ancestor feerate as we include (parent)\n+// transactions in a block\n+struct CTxMemPoolModifiedEntry {\n+    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n+    {\n+        iter = entry;\n+        nSizeWithAncestors = entry->GetSizeWithAncestors();\n+        nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n+        nSigOpCountWithAncestors = entry->GetSigOpCountWithAncestors();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+    uint64_t nSizeWithAncestors;\n+    CAmount nModFeesWithAncestors;\n+    unsigned int nSigOpCountWithAncestors;\n+};\n+\n+struct modifiedentry_txid {\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolModifiedEntry &entry) const\n+    {\n+        return entry.iter->GetTx().GetHash();\n+    }\n+};\n+\n+// This matches the calculation in CompareTxMemPoolEntryByAncestorFee,\n+// except operating on CTxMemPoolModifiedEntry.\n+// TODO: refactor to avoid duplication of this logic.\n+struct CompareModifiedEntry {\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    {\n+        double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n+        double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n+        if (f1 == f2) {\n+            return CTxMemPool::CompareIteratorByHash()(a.iter, b.iter);\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n+// A comparator that sorts transactions based on number of ancestors.\n+// This is sufficient to sort an ancestor package in an order that is valid\n+// to appear in a block.\n+struct CompareTxIterByAncestorCount {\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    {\n+        if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n+            return a->GetCountWithAncestors() < b->GetCountWithAncestors();\n+        return CTxMemPool::CompareIteratorByHash()(a, b);\n+    }\n+};\n+\n+typedef boost::multi_index_container<\n+    CTxMemPoolModifiedEntry,\n+    boost::multi_index::indexed_by<\n+        boost::multi_index::ordered_unique<modifiedentry_txid>,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67373389",
      "id" : 67373389,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 68,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67373389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67373749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67373749"
         }
      },
      "body" : "The addScoreTxs method can be deleted, I think?",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:05:52Z",
      "diff_hunk" : "@@ -134,7 +135,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n                        : pblock->GetBlockTime();\n \n     addPriorityTxs();\n-    addScoreTxs();\n+    addPackageTxs();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67373749",
      "id" : 67373749,
      "original_commit_id" : "f3c65512a416cb9890a291d16204c83b5702b11e",
      "original_position" : 13,
      "path" : "src/miner.cpp",
      "position" : 13,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67373749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67374405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67374405"
         }
      },
      "body" : "ACK, fixed by the later commit.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:09:18Z",
      "diff_hunk" : "@@ -297,6 +337,171 @@ void BlockAssembler::addScoreTxs()\n     }\n }\n \n+void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded)\n+{\n+    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+        CTxMemPool::setEntries descendants;\n+        mempool.CalculateDescendants(it, descendants);\n+        // Insert all descendants (not yet in block) into the modified set\n+        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+            if (alreadyAdded.count(desc))\n+                continue;\n+            modtxiter mit = mapModifiedTx.find(desc->GetTx().GetHash());\n+            if (mit == mapModifiedTx.end()) {\n+                CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n+                modEntry.nSigOpCountWithAncestors -= it->GetSigOpCount();\n+                mapModifiedTx.insert(modEntry);\n+            } else {\n+                mapModifiedTx.modify(mit, update_for_parent_inclusion(it));\n+            }\n+        }\n+    }\n+}\n+\n+// Skip entries in mapTx that are already in a block or are present\n+// in mapModifiedTx (which implies that the mapTx ancestor state is\n+// stale due to ancestor inclusion in the block)\n+// Also skip transactions that we've already failed to add. This can happen if\n+// we consider a transaction in mapModifiedTx and it fails: we can then\n+// potentially consider it again while walking mapTx.  It's currently\n+// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n+// failedTx and avoid re-evaluation, since the re-evaluation would be using\n+// cached size/sigops/fee values that are not actually correct.\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it)\n+{\n+    assert (it != mempool.mapTx.end());\n+    if (mapModifiedTx.count(it->GetTx().GetHash()) || inBlock.count(it) || failedTx.count(it))\n+        return true;\n+    return false;\n+}\n+\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+{\n+    // Sort package by ancestor count\n+    // If a transaction A depends on transaction B, then A's ancestor count\n+    // must be greater than B's.  So this is sufficient to validly order the\n+    // transactions for block inclusion.\n+    sortedEntries.clear();\n+    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n+    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+}\n+\n+// This transaction selection algorithm orders the mempool based\n+// on feerate of a transaction including all unconfirmed ancestors.\n+// Since we don't remove transactions from the mempool as we select them\n+// for block inclusion, we need an alternate method of updating the feerate\n+// of a transaction with its not-yet-selected ancestors as we go.\n+// This is accomplished by walking the in-mempool descendants of selected\n+// transactions and storing a temporary modified state in mapModifiedTxs.\n+// Each time through the loop, we compare the best transaction in\n+// mapModifiedTxs with the next transaction in the mempool to decide what\n+// transaction package to work on next.\n+void BlockAssembler::addPackageTxs()\n+{\n+    // Start by adding all descendants of previously added txs to mapModifiedTx\n+    // and modifiying them for their already included ancestors\n+    UpdatePackagesForAdded(inBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67374405",
      "id" : 67374405,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 140,
      "path" : "src/miner.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67374405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67374602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67374602"
         }
      },
      "body" : "I don't remember anymore but I feel like I tried that in the past and failed.  If you have a patch, I will be happy to incorporate.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:10:29Z",
      "diff_hunk" : "@@ -29,6 +31,89 @@ struct CBlockTemplate\n     std::vector<int64_t> vTxSigOps;\n };\n \n+// Container for tracking updates to ancestor feerate as we include (parent)\n+// transactions in a block\n+struct CTxMemPoolModifiedEntry {\n+    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n+    {\n+        iter = entry;\n+        nSizeWithAncestors = entry->GetSizeWithAncestors();\n+        nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n+        nSigOpCountWithAncestors = entry->GetSigOpCountWithAncestors();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+    uint64_t nSizeWithAncestors;\n+    CAmount nModFeesWithAncestors;\n+    unsigned int nSigOpCountWithAncestors;\n+};\n+\n+struct modifiedentry_txid {\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolModifiedEntry &entry) const\n+    {\n+        return entry.iter->GetTx().GetHash();\n+    }\n+};\n+\n+// This matches the calculation in CompareTxMemPoolEntryByAncestorFee,\n+// except operating on CTxMemPoolModifiedEntry.\n+// TODO: refactor to avoid duplication of this logic.\n+struct CompareModifiedEntry {\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    {\n+        double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n+        double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n+        if (f1 == f2) {\n+            return CTxMemPool::CompareIteratorByHash()(a.iter, b.iter);\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n+// A comparator that sorts transactions based on number of ancestors.\n+// This is sufficient to sort an ancestor package in an order that is valid\n+// to appear in a block.\n+struct CompareTxIterByAncestorCount {\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    {\n+        if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n+            return a->GetCountWithAncestors() < b->GetCountWithAncestors();\n+        return CTxMemPool::CompareIteratorByHash()(a, b);\n+    }\n+};\n+\n+typedef boost::multi_index_container<\n+    CTxMemPoolModifiedEntry,\n+    boost::multi_index::indexed_by<\n+        boost::multi_index::ordered_unique<modifiedentry_txid>,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67374602",
      "id" : 67374602,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 68,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67374602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67375801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67375801"
         }
      },
      "body" : "I raised that question at the beginning of this pull, and no discussion has happened; I'd like to defer that to its own PR to give anyone who is clinging to the old behavior a chance to argue for keeping the code?",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:17:19Z",
      "diff_hunk" : "@@ -134,7 +135,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n                        : pblock->GetBlockTime();\n \n     addPriorityTxs();\n-    addScoreTxs();\n+    addPackageTxs();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67375801",
      "id" : 67375801,
      "original_commit_id" : "f3c65512a416cb9890a291d16204c83b5702b11e",
      "original_position" : 13,
      "path" : "src/miner.cpp",
      "position" : 13,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67375801",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67377794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67377794"
         }
      },
      "body" : "See https://github.com/sipa/bitcoin/commits/cpfp",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:25:58Z",
      "diff_hunk" : "@@ -29,6 +31,89 @@ struct CBlockTemplate\n     std::vector<int64_t> vTxSigOps;\n };\n \n+// Container for tracking updates to ancestor feerate as we include (parent)\n+// transactions in a block\n+struct CTxMemPoolModifiedEntry {\n+    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n+    {\n+        iter = entry;\n+        nSizeWithAncestors = entry->GetSizeWithAncestors();\n+        nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n+        nSigOpCountWithAncestors = entry->GetSigOpCountWithAncestors();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+    uint64_t nSizeWithAncestors;\n+    CAmount nModFeesWithAncestors;\n+    unsigned int nSigOpCountWithAncestors;\n+};\n+\n+struct modifiedentry_txid {\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolModifiedEntry &entry) const\n+    {\n+        return entry.iter->GetTx().GetHash();\n+    }\n+};\n+\n+// This matches the calculation in CompareTxMemPoolEntryByAncestorFee,\n+// except operating on CTxMemPoolModifiedEntry.\n+// TODO: refactor to avoid duplication of this logic.\n+struct CompareModifiedEntry {\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    {\n+        double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n+        double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n+        if (f1 == f2) {\n+            return CTxMemPool::CompareIteratorByHash()(a.iter, b.iter);\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n+// A comparator that sorts transactions based on number of ancestors.\n+// This is sufficient to sort an ancestor package in an order that is valid\n+// to appear in a block.\n+struct CompareTxIterByAncestorCount {\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    {\n+        if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n+            return a->GetCountWithAncestors() < b->GetCountWithAncestors();\n+        return CTxMemPool::CompareIteratorByHash()(a, b);\n+    }\n+};\n+\n+typedef boost::multi_index_container<\n+    CTxMemPoolModifiedEntry,\n+    boost::multi_index::indexed_by<\n+        boost::multi_index::ordered_unique<modifiedentry_txid>,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67377794",
      "id" : 67377794,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 68,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67377794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67378150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67378150"
         }
      },
      "body" : "Fair enough.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:27:53Z",
      "diff_hunk" : "@@ -134,7 +135,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n                        : pblock->GetBlockTime();\n \n     addPriorityTxs();\n-    addScoreTxs();\n+    addPackageTxs();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67378150",
      "id" : 67378150,
      "original_commit_id" : "f3c65512a416cb9890a291d16204c83b5702b11e",
      "original_position" : 13,
      "path" : "src/miner.cpp",
      "position" : 13,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67378150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "ACK f3c65512a416cb9890a291d16204c83b5702b11e (with tree 66fb31f4aaaf3c49ef03c93b3b8155b531359e05).\r\n\r\nUpdate: ACK b428fb2656b3cdf3021faf508eb78e6831e5a276 (with tree 2e6a8674a4e7179aea0041931d68076a442d0132).\r\n\r\nCan you squash the fixups?",
      "created_at" : "2016-06-16T16:34:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226540713",
      "id" : 226540713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-16T16:37:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226540713",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67379371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67379371"
         }
      },
      "body" : "Thanks!  Looks good.",
      "commit_id" : "29fac19c93fabfed4163ee9ffa85f9188c9ee6ac",
      "created_at" : "2016-06-16T16:34:55Z",
      "diff_hunk" : "@@ -29,6 +31,89 @@ struct CBlockTemplate\n     std::vector<int64_t> vTxSigOps;\n };\n \n+// Container for tracking updates to ancestor feerate as we include (parent)\n+// transactions in a block\n+struct CTxMemPoolModifiedEntry {\n+    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n+    {\n+        iter = entry;\n+        nSizeWithAncestors = entry->GetSizeWithAncestors();\n+        nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n+        nSigOpCountWithAncestors = entry->GetSigOpCountWithAncestors();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+    uint64_t nSizeWithAncestors;\n+    CAmount nModFeesWithAncestors;\n+    unsigned int nSigOpCountWithAncestors;\n+};\n+\n+struct modifiedentry_txid {\n+    typedef uint256 result_type;\n+    result_type operator() (const CTxMemPoolModifiedEntry &entry) const\n+    {\n+        return entry.iter->GetTx().GetHash();\n+    }\n+};\n+\n+// This matches the calculation in CompareTxMemPoolEntryByAncestorFee,\n+// except operating on CTxMemPoolModifiedEntry.\n+// TODO: refactor to avoid duplication of this logic.\n+struct CompareModifiedEntry {\n+    bool operator()(const CTxMemPoolModifiedEntry &a, const CTxMemPoolModifiedEntry &b)\n+    {\n+        double f1 = (double)a.nModFeesWithAncestors * b.nSizeWithAncestors;\n+        double f2 = (double)b.nModFeesWithAncestors * a.nSizeWithAncestors;\n+        if (f1 == f2) {\n+            return CTxMemPool::CompareIteratorByHash()(a.iter, b.iter);\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n+// A comparator that sorts transactions based on number of ancestors.\n+// This is sufficient to sort an ancestor package in an order that is valid\n+// to appear in a block.\n+struct CompareTxIterByAncestorCount {\n+    bool operator()(const CTxMemPool::txiter &a, const CTxMemPool::txiter &b)\n+    {\n+        if (a->GetCountWithAncestors() != b->GetCountWithAncestors())\n+            return a->GetCountWithAncestors() < b->GetCountWithAncestors();\n+        return CTxMemPool::CompareIteratorByHash()(a, b);\n+    }\n+};\n+\n+typedef boost::multi_index_container<\n+    CTxMemPoolModifiedEntry,\n+    boost::multi_index::indexed_by<\n+        boost::multi_index::ordered_unique<modifiedentry_txid>,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67379371",
      "id" : 67379371,
      "original_commit_id" : "0e1a2cc3fb91bba89d6cbc57b4069b3f7460b3e1",
      "original_position" : 68,
      "path" : "src/miner.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7600",
      "updated_at" : "2016-06-16T16:38:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/67379371",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Thanks, squashed.",
      "created_at" : "2016-06-16T16:38:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226541921",
      "id" : 226541921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-16T16:38:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226541921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "ReACK 29fac19c93fabfed4163ee9ffa85f9188c9ee6ac (tree 2e6a8674a4e7179aea0041931d68076a442d0132).",
      "created_at" : "2016-06-16T16:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226542544",
      "id" : 226542544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7600",
      "updated_at" : "2016-06-16T16:41:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/226542544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
