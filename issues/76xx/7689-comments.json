[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56128445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56128445"
         }
      },
      "body" : "I guess this does not break the `--disable-wallet` non BDB compile option? Its probably empty if BDB was not found.",
      "commit_id" : "34ed64a404fb6da691f67f00f47c4dd748e3e428",
      "created_at" : "2016-03-15T08:26:05Z",
      "diff_hunk" : "@@ -29,13 +29,12 @@ $(LIBLEVELDB) $(LIBMEMENV):\n endif\n \n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56128445",
      "id" : 56128445,
      "original_commit_id" : "e510fe7267faaa6549ef7bf191fb23e32273e503",
      "original_position" : 5,
      "path" : "src/Makefile.am",
      "position" : 5,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689",
      "updated_at" : "2016-05-13T08:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56128445",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Nice work!\r\nShort code review utACK. Will test soon.",
      "created_at" : "2016-03-15T08:27:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-196714786",
      "id" : 196714786,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-15T08:27:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/196714786",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Made a small change: the RijndaelSetup function now uses no modulus or division operations anymore. All tests still pass.",
      "created_at" : "2016-03-16T17:29:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-197444191",
      "id" : 197444191,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-16T17:29:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197444191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Added more comments.",
      "created_at" : "2016-03-17T00:44:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-197624230",
      "id" : 197624230,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-17T00:44:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197624230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56446590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56446590"
         }
      },
      "body" : "@jonasschnelli yep, just empty",
      "commit_id" : "34ed64a404fb6da691f67f00f47c4dd748e3e428",
      "created_at" : "2016-03-17T02:09:50Z",
      "diff_hunk" : "@@ -29,13 +29,12 @@ $(LIBLEVELDB) $(LIBMEMENV):\n endif\n \n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56446590",
      "id" : 56446590,
      "original_commit_id" : "e510fe7267faaa6549ef7bf191fb23e32273e503",
      "original_position" : 5,
      "path" : "src/Makefile.am",
      "position" : 5,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689",
      "updated_at" : "2016-05-13T08:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56446590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "Thanks @sipa for the constant-time version!",
      "created_at" : "2016-03-17T02:10:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-197654199",
      "id" : 197654199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-17T02:10:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/197654199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56751705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56751705"
         }
      },
      "body" : "A bounds assertion on nkeywords would be helpful prior to this line (e.g. at the start of the function). The loop requires that i<8 to prevent overflow on the stack, but this is only enforced in the caller. Similarly, the round count must be limited to not overflow the state.",
      "commit_id" : "34ed64a404fb6da691f67f00f47c4dd748e3e428",
      "created_at" : "2016-03-19T17:05:15Z",
      "diff_hunk" : "@@ -0,0 +1,560 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// Constant time, unoptimized, and concise AES implementation\n+// Based On:\n+//   Emilia Kasper and Peter Schwabe, Faster and Timing-Attack Resistant AES-GCM\n+//   http://www.iacr.org/archive/ches2009/57470001/57470001.pdf\n+// But using 8 16-bit integers representing a single AES state rather than 8 128-bit\n+// integers representing 8 AES states.\n+\n+#include \"crypto/aes.h\"\n+\n+#include \"crypto/common.h\"\n+\n+#include <string.h>\n+\n+namespace\n+{\n+\n+/* Slice variable slice_i contains the i'th bit of the 16 state variables in this order:\n+ *  0  1  2  3\n+ *  4  5  6  7\n+ *  8  9 10 11\n+ * 12 13 14 15\n+ */\n+\n+/** Load 4 32-bit MSB words representing columns of data into 8 sliced integers */\n+void LoadWords(uint16_t *slice, uint32_t w0, uint32_t w1, uint32_t w2, uint32_t w3) {\n+    for (int b = 0; b < 8; b++) {\n+        slice[b] = 0;\n+    }\n+    for (int c = 0; c < 4; c++) {\n+        uint32_t w = c & 2 ? (c & 1 ? w3 : w2) : (c & 1 ? w1 : w0);\n+        for (int r = 0; r < 4; r++) {\n+            uint8_t v = w >> 24;\n+            w <<= 8;\n+            for (int b = 0; b < 8; b++) {\n+                slice[b] |= (v & 1) << (r * 4 + c);\n+                v >>= 1;\n+            }\n+        }\n+    }\n+}\n+\n+/** Load 16 bytes of data into 8 sliced integers */\n+void LoadBytes(uint16_t *slice, const unsigned char* data) {\n+    LoadWords(slice, ReadBE32(data), ReadBE32(data + 4), ReadBE32(data + 8), ReadBE32(data + 12));\n+}\n+\n+/** Convert 8 sliced integers into 16 bytes of data */\n+void SaveBytes(unsigned char* data, const uint16_t *slice) {\n+    for (int c = 0; c < 4; c++) {\n+        for (int r = 0; r < 4; r++) {\n+            uint8_t v = 0;\n+            for (int b = 0; b < 8; b++) {\n+                v |= ((slice[b] >> (r * 4 + c)) & 1) << b;\n+            }\n+            *(data++) = v;\n+        }\n+    }\n+}\n+\n+\n+/* Bit-sliced SubBytes and InvSubBytes implementation.\n+ *\n+ * Based on the gates from:\n+ *   Joan Boyar and Rene Peralta, A depth-16 circuit for the AES S-box.\n+ *   https://eprint.iacr.org/2011/332.pdf\n+*/\n+void SubBytes(uint16_t *slices) {\n+    /* Load the bit slices */\n+    uint16_t U0 = slices[7], U1 = slices[6], U2 = slices[5], U3 = slices[4];\n+    uint16_t U4 = slices[3], U5 = slices[2], U6 = slices[1], U7 = slices[0];\n+\n+    /* The linear preprocessing to produce the input for the modular inversion */\n+    uint16_t T1 = U0 ^ U3;\n+    uint16_t T2 = U0 ^ U5;\n+    uint16_t T3 = U0 ^ U6;\n+    uint16_t T4 = U3 ^ U5;\n+    uint16_t T5 = U4 ^ U6;\n+    uint16_t T6 = T1 ^ T5;\n+    uint16_t T7 = U1 ^ U2;\n+    uint16_t T8 = U7 ^ T6;\n+    uint16_t T9 = U7 ^ T7;\n+    uint16_t T10 = T6 ^ T7;\n+    uint16_t T11 = U1 ^ U5;\n+    uint16_t T12 = U2 ^ U5;\n+    uint16_t T13 = T3 ^ T4;\n+    uint16_t T14 = T6 ^ T11;\n+    uint16_t T15 = T5 ^ T11;\n+    uint16_t T16 = T5 ^ T12;\n+    uint16_t T17 = T9 ^ T16;\n+    uint16_t T18 = U3 ^ U7;\n+    uint16_t T19 = T7 ^ T18;\n+    uint16_t T20 = T1 ^ T19;\n+    uint16_t T21 = U6 ^ U7;\n+    uint16_t T22 = T7 ^ T21;\n+    uint16_t T23 = T2 ^ T22;\n+    uint16_t T24 = T2 ^ T10;\n+    uint16_t T25 = T20 ^ T17;\n+    uint16_t T26 = T3 ^ T16;\n+    uint16_t T27 = T1 ^ T12;\n+    uint16_t D = U7;\n+\n+    /* The non-linear modular inversion */\n+    uint16_t M1 = T13 & T6;\n+    uint16_t M6 = T3 & T16;\n+    uint16_t M11 = T1 & T15;\n+    uint16_t M13 = (T4 & T27) ^ M11;\n+    uint16_t M15 = (T2 & T10) ^ M11;\n+    uint16_t M20 = T14 ^ M1 ^ (T23 & T8) ^ M13;\n+    uint16_t M21 = (T19 & D) ^ M1 ^ T24 ^ M15;\n+    uint16_t M22 = T26 ^ M6 ^ (T22 & T9) ^ M13;\n+    uint16_t M23 = (T20 & T17) ^ M6 ^ M15 ^ T25;\n+    uint16_t M24 = M22 ^ M23;\n+    uint16_t M25 = M22 & M20;\n+    uint16_t M27 = M20 ^ M21;\n+    uint16_t M37 = M21 ^ ((M23 ^ M25) & M27);\n+    uint16_t M38 = (M27 & M20 & M23) ^ M27 ^ M25;\n+    uint16_t M39 = M23 ^ ((M21 ^ M25) & M24);\n+    uint16_t M40 = (M24 & M21 & M22) ^ M24 ^ M25;\n+    uint16_t M41 = M38 ^ M40;\n+    uint16_t M42 = M37 ^ M39;\n+    uint16_t M43 = M37 ^ M38;\n+    uint16_t M44 = M39 ^ M40;\n+    uint16_t M45 = M42 ^ M41;\n+    uint16_t M46 = M44 & T6;\n+    uint16_t M47 = M40 & T8;\n+    uint16_t M48 = M39 & D;\n+    uint16_t M49 = M43 & T16;\n+    uint16_t M50 = M38 & T9;\n+    uint16_t M51 = M37 & T17;\n+    uint16_t M52 = M42 & T15;\n+    uint16_t M53 = M45 & T27;\n+    uint16_t M54 = M41 & T10;\n+    uint16_t M55 = M44 & T13;\n+    uint16_t M56 = M40 & T23;\n+    uint16_t M57 = M39 & T19;\n+    uint16_t M58 = M43 & T3;\n+    uint16_t M59 = M38 & T22;\n+    uint16_t M60 = M37 & T20;\n+    uint16_t M61 = M42 & T1;\n+    uint16_t M62 = M45 & T4;\n+    uint16_t M63 = M41 & T2;\n+\n+    /* The linear postprocessing */\n+    uint16_t L0 = M61 ^ M62;\n+    uint16_t L1 = M50 ^ M56;\n+    uint16_t L2 = M46 ^ M48;\n+    uint16_t L3 = M47 ^ M55;\n+    uint16_t L4 = M54 ^ M58;\n+    uint16_t L5 = M49 ^ M61;\n+    uint16_t L6 = M62 ^ L5;\n+    uint16_t L7 = M46 ^ L3;\n+    uint16_t L8 = M51 ^ M59;\n+    uint16_t L9 = M52 ^ M53;\n+    uint16_t L10 = M53 ^ L4;\n+    uint16_t L11 = M60 ^ L2;\n+    uint16_t L12 = M48 ^ M51;\n+    uint16_t L13 = M50 ^ L0;\n+    uint16_t L14 = M52 ^ M61;\n+    uint16_t L15 = M55 ^ L1;\n+    uint16_t L16 = M56 ^ L0;\n+    uint16_t L17 = M57 ^ L1;\n+    uint16_t L18 = M58 ^ L8;\n+    uint16_t L19 = M63 ^ L4;\n+    uint16_t L20 = L0 ^ L1;\n+    uint16_t L21 = L1 ^ L7;\n+    uint16_t L22 = L3 ^ L12;\n+    uint16_t L23 = L18 ^ L2;\n+    uint16_t L24 = L15 ^ L9;\n+    uint16_t L25 = L6 ^ L10;\n+    uint16_t L26 = L7 ^ L9;\n+    uint16_t L27 = L8 ^ L10;\n+    uint16_t L28 = L11 ^ L14;\n+    uint16_t L29 = L11 ^ L17;\n+    slices[7] = L6 ^ L24;\n+    slices[6] = ~(L16 ^ L26);\n+    slices[5] = ~(L19 ^ L28);\n+    slices[4] = L6 ^ L21;\n+    slices[3] = L20 ^ L22;\n+    slices[2] = L25 ^ L29;\n+    slices[1] = ~(L13 ^ L27);\n+    slices[0] = ~(L6 ^ L23);\n+}\n+\n+void InvSubBytes(uint16_t *slices) {\n+    /* Load the bit slices */\n+    uint16_t U0 = slices[7], U1 = slices[6], U2 = slices[5], U3 = slices[4];\n+    uint16_t U4 = slices[3], U5 = slices[2], U6 = slices[1], U7 = slices[0];\n+\n+    /* Undo the linear postprocessing */\n+    uint16_t T23 = U0 ^ U3;\n+    uint16_t T22 = ~(U1 ^ U3);\n+    uint16_t T2 = ~(U0 ^ U1);\n+    uint16_t T1 = U3 ^ U4;\n+    uint16_t T24 = ~(U4 ^ U7);\n+    uint16_t R5 = U6 ^ U7;\n+    uint16_t T8 = ~(U1 ^ T23);\n+    uint16_t T19 = T22 ^ R5;\n+    uint16_t T9 = ~(U7 ^ T1);\n+    uint16_t T10 = T2 ^ T24;\n+    uint16_t T13 = T2 ^ R5;\n+    uint16_t T3 = T1 ^ R5;\n+    uint16_t T25 = ~(U2 ^ T1);\n+    uint16_t R13 = U1 ^ U6;\n+    uint16_t T17 = ~(U2 ^ T19);\n+    uint16_t T20 = T24 ^ R13;\n+    uint16_t T4 = U4 ^ T8;\n+    uint16_t R17 = ~(U2 ^ U5);\n+    uint16_t R18 = ~(U5 ^ U6);\n+    uint16_t R19 = ~(U2 ^ U4);\n+    uint16_t D = U0 ^ R17;\n+    uint16_t T6 = T22 ^ R17;\n+    uint16_t T16 = R13 ^ R19;\n+    uint16_t T27 = T1 ^ R18;\n+    uint16_t T15 = T10 ^ T27;\n+    uint16_t T14 = T10 ^ R18;\n+    uint16_t T26 = T3 ^ T16;\n+\n+    /* The non-linear modular inversion (identical to the code in SubBytes) */\n+    uint16_t M1 = T13 & T6;\n+    uint16_t M6 = T3 & T16;\n+    uint16_t M11 = T1 & T15;\n+    uint16_t M13 = (T4 & T27) ^ M11;\n+    uint16_t M15 = (T2 & T10) ^ M11;\n+    uint16_t M20 = T14 ^ M1 ^ (T23 & T8) ^ M13;\n+    uint16_t M21 = (T19 & D) ^ M1 ^ T24 ^ M15;\n+    uint16_t M22 = T26 ^ M6 ^ (T22 & T9) ^ M13;\n+    uint16_t M23 = (T20 & T17) ^ M6 ^ M15 ^ T25;\n+    uint16_t M24 = M22 ^ M23;\n+    uint16_t M25 = M22 & M20;\n+    uint16_t M27 = M20 ^ M21;\n+    uint16_t M37 = M21 ^ ((M23 ^ M25) & M27);\n+    uint16_t M38 = (M27 & M20 & M23) ^ M27 ^ M25;\n+    uint16_t M39 = M23 ^ ((M21 ^ M25) & M24);\n+    uint16_t M40 = (M24 & M21 & M22) ^ M24 ^ M25;\n+    uint16_t M41 = M38 ^ M40;\n+    uint16_t M42 = M37 ^ M39;\n+    uint16_t M43 = M37 ^ M38;\n+    uint16_t M44 = M39 ^ M40;\n+    uint16_t M45 = M42 ^ M41;\n+    uint16_t M46 = M44 & T6;\n+    uint16_t M47 = M40 & T8;\n+    uint16_t M48 = M39 & D;\n+    uint16_t M49 = M43 & T16;\n+    uint16_t M50 = M38 & T9;\n+    uint16_t M51 = M37 & T17;\n+    uint16_t M52 = M42 & T15;\n+    uint16_t M53 = M45 & T27;\n+    uint16_t M54 = M41 & T10;\n+    uint16_t M55 = M44 & T13;\n+    uint16_t M56 = M40 & T23;\n+    uint16_t M57 = M39 & T19;\n+    uint16_t M58 = M43 & T3;\n+    uint16_t M59 = M38 & T22;\n+    uint16_t M60 = M37 & T20;\n+    uint16_t M61 = M42 & T1;\n+    uint16_t M62 = M45 & T4;\n+    uint16_t M63 = M41 & T2;\n+\n+    /* Undo the linear preprocessing */\n+    uint16_t P0 = M52 ^ M61;\n+    uint16_t P1 = M58 ^ M59;\n+    uint16_t P2 = M54 ^ M62;\n+    uint16_t P3 = M47 ^ M50;\n+    uint16_t P4 = M48 ^ M56;\n+    uint16_t P5 = M46 ^ M51;\n+    uint16_t P6 = M49 ^ M60;\n+    uint16_t P7 = P0 ^ P1;\n+    uint16_t P8 = M50 ^ M53;\n+    uint16_t P9 = M55 ^ M63;\n+    uint16_t P10 = M57 ^ P4;\n+    uint16_t P11 = P0 ^ P3;\n+    uint16_t P12 = M46 ^ M48;\n+    uint16_t P13 = M49 ^ M51;\n+    uint16_t P14 = M49 ^ M62;\n+    uint16_t P15 = M54 ^ M59;\n+    uint16_t P16 = M57 ^ M61;\n+    uint16_t P17 = M58 ^ P2;\n+    uint16_t P18 = M63 ^ P5;\n+    uint16_t P19 = P2 ^ P3;\n+    uint16_t P20 = P4 ^ P6;\n+    uint16_t P22 = P2 ^ P7;\n+    uint16_t P23 = P7 ^ P8;\n+    uint16_t P24 = P5 ^ P7;\n+    uint16_t P25 = P6 ^ P10;\n+    uint16_t P26 = P9 ^ P11;\n+    uint16_t P27 = P10 ^ P18;\n+    uint16_t P28 = P11 ^ P25;\n+    uint16_t P29 = P15 ^ P20;\n+    slices[7] = P13 ^ P22;\n+    slices[6] = P26 ^ P29;\n+    slices[5] = P17 ^ P28;\n+    slices[4] = P12 ^ P22;\n+    slices[3] = P23 ^ P27;\n+    slices[2] = P19 ^ P24;\n+    slices[1] = P14 ^ P23;\n+    slices[0] = P9 ^ P16;\n+}\n+\n+/* Apply the SubBytes transform on the bytes of an unsliced word */\n+uint32_t SubWord(uint32_t x) {\n+    uint16_t slices[8];\n+    /* Convert to sliced form */\n+    for (int b = 0; b < 8; b++) {\n+        slices[b] = (x & 1) | ((x >> 7) & 2) | ((x >> 14) & 4) | ((x >> 21) & 8);\n+        x >>= 1;\n+    }\n+    /* Apply the transformation in sliced form */\n+    SubBytes(slices);\n+    /* Convert back to word form */\n+    uint32_t r = 0;\n+    for (int b = 0; b < 8; b++) {\n+        r |= ((slices[b] & 1) | ((uint32_t)(slices[b] & 2)) << 7 | ((uint32_t)(slices[b] & 4)) << 14 | ((uint32_t)(slices[b] & 8)) << 21) << b;\n+    }\n+    return r;\n+}\n+\n+inline uint16_t ShiftRows_OneSlice(uint16_t slice) {\n+    return (slice & 0xF) | (slice & 0x10) << 3 | (slice & 0xE0) >> 1 | (slice & 0x300) << 2 | (slice & 0xC00) >> 2 | (slice & 0x7000) << 1 | (slice & 0x8000) >> 3;\n+}\n+\n+void ShiftRows(uint16_t* slice) {\n+    slice[0] = ShiftRows_OneSlice(slice[0]);\n+    slice[1] = ShiftRows_OneSlice(slice[1]);\n+    slice[2] = ShiftRows_OneSlice(slice[2]);\n+    slice[3] = ShiftRows_OneSlice(slice[3]);\n+    slice[4] = ShiftRows_OneSlice(slice[4]);\n+    slice[5] = ShiftRows_OneSlice(slice[5]);\n+    slice[6] = ShiftRows_OneSlice(slice[6]);\n+    slice[7] = ShiftRows_OneSlice(slice[7]);\n+}\n+\n+inline uint16_t InvShiftRows_OneSlice(uint16_t slice) {\n+    return (slice & 0xF) | (slice & 0x70) << 1 | (slice & 0x80) >> 3 | (slice & 0x300) << 2 | (slice & 0xC00) >> 2 | (slice & 0x1000) << 3 | (slice & 0xE000) >> 1;\n+}\n+\n+void InvShiftRows(uint16_t* slice) {\n+    slice[0] = InvShiftRows_OneSlice(slice[0]);\n+    slice[1] = InvShiftRows_OneSlice(slice[1]);\n+    slice[2] = InvShiftRows_OneSlice(slice[2]);\n+    slice[3] = InvShiftRows_OneSlice(slice[3]);\n+    slice[4] = InvShiftRows_OneSlice(slice[4]);\n+    slice[5] = InvShiftRows_OneSlice(slice[5]);\n+    slice[6] = InvShiftRows_OneSlice(slice[6]);\n+    slice[7] = InvShiftRows_OneSlice(slice[7]);\n+}\n+\n+#define ROT(x,b) (((x) >> ((b) * 4)) | ((x) << ((4-(b)) * 4)))\n+\n+void MixColumns(uint16_t* slices) {\n+   // b(r,c) = 02 * a(r,c) + 02 * a(r+1,c) + a(r+1,c) + a(r+2,c) + a(r+3,c)\n+\n+   uint16_t a0 = slices[0], a1 = slices[1], a2 = slices[2], a3 = slices[3];\n+   uint16_t a4 = slices[4], a5 = slices[5], a6 = slices[6], a7 = slices[7];\n+\n+   uint16_t a0_01 = a0 ^ ROT(a0,1), a0_123 = ROT(a0_01,1) ^ ROT(a0, 3);\n+   uint16_t a1_01 = a1 ^ ROT(a1,1), a1_123 = ROT(a1_01,1) ^ ROT(a1, 3);\n+   uint16_t a2_01 = a2 ^ ROT(a2,1), a2_123 = ROT(a2_01,1) ^ ROT(a2, 3);\n+   uint16_t a3_01 = a3 ^ ROT(a3,1), a3_123 = ROT(a3_01,1) ^ ROT(a3, 3);\n+   uint16_t a4_01 = a4 ^ ROT(a4,1), a4_123 = ROT(a4_01,1) ^ ROT(a4, 3);\n+   uint16_t a5_01 = a5 ^ ROT(a5,1), a5_123 = ROT(a5_01,1) ^ ROT(a5, 3);\n+   uint16_t a6_01 = a6 ^ ROT(a6,1), a6_123 = ROT(a6_01,1) ^ ROT(a6, 3);\n+   uint16_t a7_01 = a7 ^ ROT(a7,1), a7_123 = ROT(a7_01,1) ^ ROT(a7, 3);\n+\n+   slices[0] = a7_01 ^ a0_123;\n+   slices[1] = a7_01 ^ a0_01 ^ a1_123;\n+   slices[2] = a1_01 ^ a2_123;\n+   slices[3] = a7_01 ^ a2_01 ^ a3_123;\n+   slices[4] = a7_01 ^ a3_01 ^ a4_123;\n+   slices[5] = a4_01 ^ a5_123;\n+   slices[6] = a5_01 ^ a6_123;\n+   slices[7] = a6_01 ^ a7_123;\n+}\n+\n+void InvMixColumns(uint16_t* slices) {\n+    // b(r,c) = 0e * a(r,c) + 0b * a(r+1,c) + 0d * a(r+2,c) + 09 * a(r+3,c)\n+    // b(r,c) = 08 * (a(r,c) + a(r+1,c) + a(r+2,c) + a(r+3,c)) +\n+    //          04 * (a(r,c) + a(r+2,c)) +\n+    //          02 * (a(r,c) + a(r+1,c)) +\n+    //          01 * (a(r+1,c) + a(r+2,c) + a(r+3,c))\n+\n+   uint16_t a0 = slices[0], a1 = slices[1], a2 = slices[2], a3 = slices[3];\n+   uint16_t a4 = slices[4], a5 = slices[5], a6 = slices[6], a7 = slices[7];\n+\n+   uint16_t a0_01 = a0 ^ ROT(a0, 1), a0_12 = ROT(a0_01, 1), a0_123 = a0_12 ^ ROT(a0, 3), a0_0123 = a0 ^ a0_123, a0_02 = a0_01 ^ a0_12;\n+   uint16_t a1_01 = a1 ^ ROT(a1, 1), a1_12 = ROT(a1_01, 1), a1_123 = a1_12 ^ ROT(a1, 3), a1_0123 = a1 ^ a1_123, a1_02 = a1_01 ^ a1_12;\n+   uint16_t a2_01 = a2 ^ ROT(a2, 1), a2_12 = ROT(a2_01, 1), a2_123 = a2_12 ^ ROT(a2, 3), a2_0123 = a2 ^ a2_123, a2_02 = a2_01 ^ a2_12;\n+   uint16_t a3_01 = a3 ^ ROT(a3, 1), a3_12 = ROT(a3_01, 1), a3_123 = a3_12 ^ ROT(a3, 3), a3_0123 = a3 ^ a3_123, a3_02 = a3_01 ^ a3_12;\n+   uint16_t a4_01 = a4 ^ ROT(a4, 1), a4_12 = ROT(a4_01, 1), a4_123 = a4_12 ^ ROT(a4, 3), a4_0123 = a4 ^ a4_123, a4_02 = a4_01 ^ a4_12;\n+   uint16_t a5_01 = a5 ^ ROT(a5, 1), a5_12 = ROT(a5_01, 1), a5_123 = a5_12 ^ ROT(a5, 3), a5_0123 = a5 ^ a5_123, a5_02 = a5_01 ^ a5_12;\n+   uint16_t a6_01 = a6 ^ ROT(a6, 1), a6_12 = ROT(a6_01, 1), a6_123 = a6_12 ^ ROT(a6, 3), a6_0123 = a6 ^ a6_123, a6_02 = a6_01 ^ a6_12;\n+   uint16_t a7_01 = a7 ^ ROT(a7, 1), a7_12 = ROT(a7_01, 1), a7_123 = a7_12 ^ ROT(a7, 3), a7_0123 = a7 ^ a7_123, a7_02 = a7_01 ^ a7_12;\n+\n+   slices[0] = a0_123 ^ a7_01 ^ a6_02 ^ a5_0123;\n+   slices[1] = a1_123 ^ a0_01 ^ a7_12 ^ a6_02 ^ a5_0123 ^ a6_0123;\n+   slices[2] = a2_123 ^ a1_01 ^ a0_02 ^ a7_02 ^ a6_0123 ^ a7_0123;\n+   slices[3] = a3_123 ^ a2_01 ^ a7_01 ^ a1_02 ^ a6_02 ^ a0_0123 ^ a5_0123 ^ a7_0123;\n+   slices[4] = a4_123 ^ a3_01 ^ a7_12 ^ a2_02 ^ a6_02 ^ a1_0123 ^ a5_0123 ^ a6_0123;\n+   slices[5] = a5_123 ^ a4_01 ^ a3_02 ^ a7_02 ^ a2_0123 ^ a6_0123 ^ a7_0123;\n+   slices[6] = a6_123 ^ a5_01 ^ a4_02 ^ a3_0123 ^ a7_0123;\n+   slices[7] = a7_123 ^ a6_01 ^ a5_02 ^ a4_0123;\n+}\n+\n+void AddRoundKey(uint16_t* slices, const AESSlicedMatrix* rk) {\n+    for (int b = 0; b < 8; b++) {\n+        slices[b] ^= rk->slice[b];\n+    }\n+}\n+\n+/** Expand the cipher key into the key schedule. */\n+void RijndaelSetup(AESSlicedMatrix* state, const uint8_t* key, int nkeywords, int nrounds)\n+{\n+    /* The one-byte round constant */\n+    uint8_t rcon = 0x01;\n+    /* A ring buffer containing the last 8 round key words (4 are consumed in every round) */\n+    uint32_t rk[8];\n+    /* The round number */\n+    int round = 0;\n+    /* The number of the word being generated, modulo nkeywords */\n+    int pos = 0;\n+\n+    /* The first nkeywords round key words are just taken from the key directly */\n+    for (int i = 0; i < nkeywords; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56751705",
      "id" : 56751705,
      "original_commit_id" : "fc484f1390ebd380fdd82db8e9a6739adb0b00d7",
      "original_position" : 426,
      "path" : "src/crypto/aes.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689",
      "updated_at" : "2016-05-13T08:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56751705",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56764840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56764840"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "34ed64a404fb6da691f67f00f47c4dd748e3e428",
      "created_at" : "2016-03-20T13:57:48Z",
      "diff_hunk" : "@@ -0,0 +1,560 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// Constant time, unoptimized, and concise AES implementation\n+// Based On:\n+//   Emilia Kasper and Peter Schwabe, Faster and Timing-Attack Resistant AES-GCM\n+//   http://www.iacr.org/archive/ches2009/57470001/57470001.pdf\n+// But using 8 16-bit integers representing a single AES state rather than 8 128-bit\n+// integers representing 8 AES states.\n+\n+#include \"crypto/aes.h\"\n+\n+#include \"crypto/common.h\"\n+\n+#include <string.h>\n+\n+namespace\n+{\n+\n+/* Slice variable slice_i contains the i'th bit of the 16 state variables in this order:\n+ *  0  1  2  3\n+ *  4  5  6  7\n+ *  8  9 10 11\n+ * 12 13 14 15\n+ */\n+\n+/** Load 4 32-bit MSB words representing columns of data into 8 sliced integers */\n+void LoadWords(uint16_t *slice, uint32_t w0, uint32_t w1, uint32_t w2, uint32_t w3) {\n+    for (int b = 0; b < 8; b++) {\n+        slice[b] = 0;\n+    }\n+    for (int c = 0; c < 4; c++) {\n+        uint32_t w = c & 2 ? (c & 1 ? w3 : w2) : (c & 1 ? w1 : w0);\n+        for (int r = 0; r < 4; r++) {\n+            uint8_t v = w >> 24;\n+            w <<= 8;\n+            for (int b = 0; b < 8; b++) {\n+                slice[b] |= (v & 1) << (r * 4 + c);\n+                v >>= 1;\n+            }\n+        }\n+    }\n+}\n+\n+/** Load 16 bytes of data into 8 sliced integers */\n+void LoadBytes(uint16_t *slice, const unsigned char* data) {\n+    LoadWords(slice, ReadBE32(data), ReadBE32(data + 4), ReadBE32(data + 8), ReadBE32(data + 12));\n+}\n+\n+/** Convert 8 sliced integers into 16 bytes of data */\n+void SaveBytes(unsigned char* data, const uint16_t *slice) {\n+    for (int c = 0; c < 4; c++) {\n+        for (int r = 0; r < 4; r++) {\n+            uint8_t v = 0;\n+            for (int b = 0; b < 8; b++) {\n+                v |= ((slice[b] >> (r * 4 + c)) & 1) << b;\n+            }\n+            *(data++) = v;\n+        }\n+    }\n+}\n+\n+\n+/* Bit-sliced SubBytes and InvSubBytes implementation.\n+ *\n+ * Based on the gates from:\n+ *   Joan Boyar and Rene Peralta, A depth-16 circuit for the AES S-box.\n+ *   https://eprint.iacr.org/2011/332.pdf\n+*/\n+void SubBytes(uint16_t *slices) {\n+    /* Load the bit slices */\n+    uint16_t U0 = slices[7], U1 = slices[6], U2 = slices[5], U3 = slices[4];\n+    uint16_t U4 = slices[3], U5 = slices[2], U6 = slices[1], U7 = slices[0];\n+\n+    /* The linear preprocessing to produce the input for the modular inversion */\n+    uint16_t T1 = U0 ^ U3;\n+    uint16_t T2 = U0 ^ U5;\n+    uint16_t T3 = U0 ^ U6;\n+    uint16_t T4 = U3 ^ U5;\n+    uint16_t T5 = U4 ^ U6;\n+    uint16_t T6 = T1 ^ T5;\n+    uint16_t T7 = U1 ^ U2;\n+    uint16_t T8 = U7 ^ T6;\n+    uint16_t T9 = U7 ^ T7;\n+    uint16_t T10 = T6 ^ T7;\n+    uint16_t T11 = U1 ^ U5;\n+    uint16_t T12 = U2 ^ U5;\n+    uint16_t T13 = T3 ^ T4;\n+    uint16_t T14 = T6 ^ T11;\n+    uint16_t T15 = T5 ^ T11;\n+    uint16_t T16 = T5 ^ T12;\n+    uint16_t T17 = T9 ^ T16;\n+    uint16_t T18 = U3 ^ U7;\n+    uint16_t T19 = T7 ^ T18;\n+    uint16_t T20 = T1 ^ T19;\n+    uint16_t T21 = U6 ^ U7;\n+    uint16_t T22 = T7 ^ T21;\n+    uint16_t T23 = T2 ^ T22;\n+    uint16_t T24 = T2 ^ T10;\n+    uint16_t T25 = T20 ^ T17;\n+    uint16_t T26 = T3 ^ T16;\n+    uint16_t T27 = T1 ^ T12;\n+    uint16_t D = U7;\n+\n+    /* The non-linear modular inversion */\n+    uint16_t M1 = T13 & T6;\n+    uint16_t M6 = T3 & T16;\n+    uint16_t M11 = T1 & T15;\n+    uint16_t M13 = (T4 & T27) ^ M11;\n+    uint16_t M15 = (T2 & T10) ^ M11;\n+    uint16_t M20 = T14 ^ M1 ^ (T23 & T8) ^ M13;\n+    uint16_t M21 = (T19 & D) ^ M1 ^ T24 ^ M15;\n+    uint16_t M22 = T26 ^ M6 ^ (T22 & T9) ^ M13;\n+    uint16_t M23 = (T20 & T17) ^ M6 ^ M15 ^ T25;\n+    uint16_t M24 = M22 ^ M23;\n+    uint16_t M25 = M22 & M20;\n+    uint16_t M27 = M20 ^ M21;\n+    uint16_t M37 = M21 ^ ((M23 ^ M25) & M27);\n+    uint16_t M38 = (M27 & M20 & M23) ^ M27 ^ M25;\n+    uint16_t M39 = M23 ^ ((M21 ^ M25) & M24);\n+    uint16_t M40 = (M24 & M21 & M22) ^ M24 ^ M25;\n+    uint16_t M41 = M38 ^ M40;\n+    uint16_t M42 = M37 ^ M39;\n+    uint16_t M43 = M37 ^ M38;\n+    uint16_t M44 = M39 ^ M40;\n+    uint16_t M45 = M42 ^ M41;\n+    uint16_t M46 = M44 & T6;\n+    uint16_t M47 = M40 & T8;\n+    uint16_t M48 = M39 & D;\n+    uint16_t M49 = M43 & T16;\n+    uint16_t M50 = M38 & T9;\n+    uint16_t M51 = M37 & T17;\n+    uint16_t M52 = M42 & T15;\n+    uint16_t M53 = M45 & T27;\n+    uint16_t M54 = M41 & T10;\n+    uint16_t M55 = M44 & T13;\n+    uint16_t M56 = M40 & T23;\n+    uint16_t M57 = M39 & T19;\n+    uint16_t M58 = M43 & T3;\n+    uint16_t M59 = M38 & T22;\n+    uint16_t M60 = M37 & T20;\n+    uint16_t M61 = M42 & T1;\n+    uint16_t M62 = M45 & T4;\n+    uint16_t M63 = M41 & T2;\n+\n+    /* The linear postprocessing */\n+    uint16_t L0 = M61 ^ M62;\n+    uint16_t L1 = M50 ^ M56;\n+    uint16_t L2 = M46 ^ M48;\n+    uint16_t L3 = M47 ^ M55;\n+    uint16_t L4 = M54 ^ M58;\n+    uint16_t L5 = M49 ^ M61;\n+    uint16_t L6 = M62 ^ L5;\n+    uint16_t L7 = M46 ^ L3;\n+    uint16_t L8 = M51 ^ M59;\n+    uint16_t L9 = M52 ^ M53;\n+    uint16_t L10 = M53 ^ L4;\n+    uint16_t L11 = M60 ^ L2;\n+    uint16_t L12 = M48 ^ M51;\n+    uint16_t L13 = M50 ^ L0;\n+    uint16_t L14 = M52 ^ M61;\n+    uint16_t L15 = M55 ^ L1;\n+    uint16_t L16 = M56 ^ L0;\n+    uint16_t L17 = M57 ^ L1;\n+    uint16_t L18 = M58 ^ L8;\n+    uint16_t L19 = M63 ^ L4;\n+    uint16_t L20 = L0 ^ L1;\n+    uint16_t L21 = L1 ^ L7;\n+    uint16_t L22 = L3 ^ L12;\n+    uint16_t L23 = L18 ^ L2;\n+    uint16_t L24 = L15 ^ L9;\n+    uint16_t L25 = L6 ^ L10;\n+    uint16_t L26 = L7 ^ L9;\n+    uint16_t L27 = L8 ^ L10;\n+    uint16_t L28 = L11 ^ L14;\n+    uint16_t L29 = L11 ^ L17;\n+    slices[7] = L6 ^ L24;\n+    slices[6] = ~(L16 ^ L26);\n+    slices[5] = ~(L19 ^ L28);\n+    slices[4] = L6 ^ L21;\n+    slices[3] = L20 ^ L22;\n+    slices[2] = L25 ^ L29;\n+    slices[1] = ~(L13 ^ L27);\n+    slices[0] = ~(L6 ^ L23);\n+}\n+\n+void InvSubBytes(uint16_t *slices) {\n+    /* Load the bit slices */\n+    uint16_t U0 = slices[7], U1 = slices[6], U2 = slices[5], U3 = slices[4];\n+    uint16_t U4 = slices[3], U5 = slices[2], U6 = slices[1], U7 = slices[0];\n+\n+    /* Undo the linear postprocessing */\n+    uint16_t T23 = U0 ^ U3;\n+    uint16_t T22 = ~(U1 ^ U3);\n+    uint16_t T2 = ~(U0 ^ U1);\n+    uint16_t T1 = U3 ^ U4;\n+    uint16_t T24 = ~(U4 ^ U7);\n+    uint16_t R5 = U6 ^ U7;\n+    uint16_t T8 = ~(U1 ^ T23);\n+    uint16_t T19 = T22 ^ R5;\n+    uint16_t T9 = ~(U7 ^ T1);\n+    uint16_t T10 = T2 ^ T24;\n+    uint16_t T13 = T2 ^ R5;\n+    uint16_t T3 = T1 ^ R5;\n+    uint16_t T25 = ~(U2 ^ T1);\n+    uint16_t R13 = U1 ^ U6;\n+    uint16_t T17 = ~(U2 ^ T19);\n+    uint16_t T20 = T24 ^ R13;\n+    uint16_t T4 = U4 ^ T8;\n+    uint16_t R17 = ~(U2 ^ U5);\n+    uint16_t R18 = ~(U5 ^ U6);\n+    uint16_t R19 = ~(U2 ^ U4);\n+    uint16_t D = U0 ^ R17;\n+    uint16_t T6 = T22 ^ R17;\n+    uint16_t T16 = R13 ^ R19;\n+    uint16_t T27 = T1 ^ R18;\n+    uint16_t T15 = T10 ^ T27;\n+    uint16_t T14 = T10 ^ R18;\n+    uint16_t T26 = T3 ^ T16;\n+\n+    /* The non-linear modular inversion (identical to the code in SubBytes) */\n+    uint16_t M1 = T13 & T6;\n+    uint16_t M6 = T3 & T16;\n+    uint16_t M11 = T1 & T15;\n+    uint16_t M13 = (T4 & T27) ^ M11;\n+    uint16_t M15 = (T2 & T10) ^ M11;\n+    uint16_t M20 = T14 ^ M1 ^ (T23 & T8) ^ M13;\n+    uint16_t M21 = (T19 & D) ^ M1 ^ T24 ^ M15;\n+    uint16_t M22 = T26 ^ M6 ^ (T22 & T9) ^ M13;\n+    uint16_t M23 = (T20 & T17) ^ M6 ^ M15 ^ T25;\n+    uint16_t M24 = M22 ^ M23;\n+    uint16_t M25 = M22 & M20;\n+    uint16_t M27 = M20 ^ M21;\n+    uint16_t M37 = M21 ^ ((M23 ^ M25) & M27);\n+    uint16_t M38 = (M27 & M20 & M23) ^ M27 ^ M25;\n+    uint16_t M39 = M23 ^ ((M21 ^ M25) & M24);\n+    uint16_t M40 = (M24 & M21 & M22) ^ M24 ^ M25;\n+    uint16_t M41 = M38 ^ M40;\n+    uint16_t M42 = M37 ^ M39;\n+    uint16_t M43 = M37 ^ M38;\n+    uint16_t M44 = M39 ^ M40;\n+    uint16_t M45 = M42 ^ M41;\n+    uint16_t M46 = M44 & T6;\n+    uint16_t M47 = M40 & T8;\n+    uint16_t M48 = M39 & D;\n+    uint16_t M49 = M43 & T16;\n+    uint16_t M50 = M38 & T9;\n+    uint16_t M51 = M37 & T17;\n+    uint16_t M52 = M42 & T15;\n+    uint16_t M53 = M45 & T27;\n+    uint16_t M54 = M41 & T10;\n+    uint16_t M55 = M44 & T13;\n+    uint16_t M56 = M40 & T23;\n+    uint16_t M57 = M39 & T19;\n+    uint16_t M58 = M43 & T3;\n+    uint16_t M59 = M38 & T22;\n+    uint16_t M60 = M37 & T20;\n+    uint16_t M61 = M42 & T1;\n+    uint16_t M62 = M45 & T4;\n+    uint16_t M63 = M41 & T2;\n+\n+    /* Undo the linear preprocessing */\n+    uint16_t P0 = M52 ^ M61;\n+    uint16_t P1 = M58 ^ M59;\n+    uint16_t P2 = M54 ^ M62;\n+    uint16_t P3 = M47 ^ M50;\n+    uint16_t P4 = M48 ^ M56;\n+    uint16_t P5 = M46 ^ M51;\n+    uint16_t P6 = M49 ^ M60;\n+    uint16_t P7 = P0 ^ P1;\n+    uint16_t P8 = M50 ^ M53;\n+    uint16_t P9 = M55 ^ M63;\n+    uint16_t P10 = M57 ^ P4;\n+    uint16_t P11 = P0 ^ P3;\n+    uint16_t P12 = M46 ^ M48;\n+    uint16_t P13 = M49 ^ M51;\n+    uint16_t P14 = M49 ^ M62;\n+    uint16_t P15 = M54 ^ M59;\n+    uint16_t P16 = M57 ^ M61;\n+    uint16_t P17 = M58 ^ P2;\n+    uint16_t P18 = M63 ^ P5;\n+    uint16_t P19 = P2 ^ P3;\n+    uint16_t P20 = P4 ^ P6;\n+    uint16_t P22 = P2 ^ P7;\n+    uint16_t P23 = P7 ^ P8;\n+    uint16_t P24 = P5 ^ P7;\n+    uint16_t P25 = P6 ^ P10;\n+    uint16_t P26 = P9 ^ P11;\n+    uint16_t P27 = P10 ^ P18;\n+    uint16_t P28 = P11 ^ P25;\n+    uint16_t P29 = P15 ^ P20;\n+    slices[7] = P13 ^ P22;\n+    slices[6] = P26 ^ P29;\n+    slices[5] = P17 ^ P28;\n+    slices[4] = P12 ^ P22;\n+    slices[3] = P23 ^ P27;\n+    slices[2] = P19 ^ P24;\n+    slices[1] = P14 ^ P23;\n+    slices[0] = P9 ^ P16;\n+}\n+\n+/* Apply the SubBytes transform on the bytes of an unsliced word */\n+uint32_t SubWord(uint32_t x) {\n+    uint16_t slices[8];\n+    /* Convert to sliced form */\n+    for (int b = 0; b < 8; b++) {\n+        slices[b] = (x & 1) | ((x >> 7) & 2) | ((x >> 14) & 4) | ((x >> 21) & 8);\n+        x >>= 1;\n+    }\n+    /* Apply the transformation in sliced form */\n+    SubBytes(slices);\n+    /* Convert back to word form */\n+    uint32_t r = 0;\n+    for (int b = 0; b < 8; b++) {\n+        r |= ((slices[b] & 1) | ((uint32_t)(slices[b] & 2)) << 7 | ((uint32_t)(slices[b] & 4)) << 14 | ((uint32_t)(slices[b] & 8)) << 21) << b;\n+    }\n+    return r;\n+}\n+\n+inline uint16_t ShiftRows_OneSlice(uint16_t slice) {\n+    return (slice & 0xF) | (slice & 0x10) << 3 | (slice & 0xE0) >> 1 | (slice & 0x300) << 2 | (slice & 0xC00) >> 2 | (slice & 0x7000) << 1 | (slice & 0x8000) >> 3;\n+}\n+\n+void ShiftRows(uint16_t* slice) {\n+    slice[0] = ShiftRows_OneSlice(slice[0]);\n+    slice[1] = ShiftRows_OneSlice(slice[1]);\n+    slice[2] = ShiftRows_OneSlice(slice[2]);\n+    slice[3] = ShiftRows_OneSlice(slice[3]);\n+    slice[4] = ShiftRows_OneSlice(slice[4]);\n+    slice[5] = ShiftRows_OneSlice(slice[5]);\n+    slice[6] = ShiftRows_OneSlice(slice[6]);\n+    slice[7] = ShiftRows_OneSlice(slice[7]);\n+}\n+\n+inline uint16_t InvShiftRows_OneSlice(uint16_t slice) {\n+    return (slice & 0xF) | (slice & 0x70) << 1 | (slice & 0x80) >> 3 | (slice & 0x300) << 2 | (slice & 0xC00) >> 2 | (slice & 0x1000) << 3 | (slice & 0xE000) >> 1;\n+}\n+\n+void InvShiftRows(uint16_t* slice) {\n+    slice[0] = InvShiftRows_OneSlice(slice[0]);\n+    slice[1] = InvShiftRows_OneSlice(slice[1]);\n+    slice[2] = InvShiftRows_OneSlice(slice[2]);\n+    slice[3] = InvShiftRows_OneSlice(slice[3]);\n+    slice[4] = InvShiftRows_OneSlice(slice[4]);\n+    slice[5] = InvShiftRows_OneSlice(slice[5]);\n+    slice[6] = InvShiftRows_OneSlice(slice[6]);\n+    slice[7] = InvShiftRows_OneSlice(slice[7]);\n+}\n+\n+#define ROT(x,b) (((x) >> ((b) * 4)) | ((x) << ((4-(b)) * 4)))\n+\n+void MixColumns(uint16_t* slices) {\n+   // b(r,c) = 02 * a(r,c) + 02 * a(r+1,c) + a(r+1,c) + a(r+2,c) + a(r+3,c)\n+\n+   uint16_t a0 = slices[0], a1 = slices[1], a2 = slices[2], a3 = slices[3];\n+   uint16_t a4 = slices[4], a5 = slices[5], a6 = slices[6], a7 = slices[7];\n+\n+   uint16_t a0_01 = a0 ^ ROT(a0,1), a0_123 = ROT(a0_01,1) ^ ROT(a0, 3);\n+   uint16_t a1_01 = a1 ^ ROT(a1,1), a1_123 = ROT(a1_01,1) ^ ROT(a1, 3);\n+   uint16_t a2_01 = a2 ^ ROT(a2,1), a2_123 = ROT(a2_01,1) ^ ROT(a2, 3);\n+   uint16_t a3_01 = a3 ^ ROT(a3,1), a3_123 = ROT(a3_01,1) ^ ROT(a3, 3);\n+   uint16_t a4_01 = a4 ^ ROT(a4,1), a4_123 = ROT(a4_01,1) ^ ROT(a4, 3);\n+   uint16_t a5_01 = a5 ^ ROT(a5,1), a5_123 = ROT(a5_01,1) ^ ROT(a5, 3);\n+   uint16_t a6_01 = a6 ^ ROT(a6,1), a6_123 = ROT(a6_01,1) ^ ROT(a6, 3);\n+   uint16_t a7_01 = a7 ^ ROT(a7,1), a7_123 = ROT(a7_01,1) ^ ROT(a7, 3);\n+\n+   slices[0] = a7_01 ^ a0_123;\n+   slices[1] = a7_01 ^ a0_01 ^ a1_123;\n+   slices[2] = a1_01 ^ a2_123;\n+   slices[3] = a7_01 ^ a2_01 ^ a3_123;\n+   slices[4] = a7_01 ^ a3_01 ^ a4_123;\n+   slices[5] = a4_01 ^ a5_123;\n+   slices[6] = a5_01 ^ a6_123;\n+   slices[7] = a6_01 ^ a7_123;\n+}\n+\n+void InvMixColumns(uint16_t* slices) {\n+    // b(r,c) = 0e * a(r,c) + 0b * a(r+1,c) + 0d * a(r+2,c) + 09 * a(r+3,c)\n+    // b(r,c) = 08 * (a(r,c) + a(r+1,c) + a(r+2,c) + a(r+3,c)) +\n+    //          04 * (a(r,c) + a(r+2,c)) +\n+    //          02 * (a(r,c) + a(r+1,c)) +\n+    //          01 * (a(r+1,c) + a(r+2,c) + a(r+3,c))\n+\n+   uint16_t a0 = slices[0], a1 = slices[1], a2 = slices[2], a3 = slices[3];\n+   uint16_t a4 = slices[4], a5 = slices[5], a6 = slices[6], a7 = slices[7];\n+\n+   uint16_t a0_01 = a0 ^ ROT(a0, 1), a0_12 = ROT(a0_01, 1), a0_123 = a0_12 ^ ROT(a0, 3), a0_0123 = a0 ^ a0_123, a0_02 = a0_01 ^ a0_12;\n+   uint16_t a1_01 = a1 ^ ROT(a1, 1), a1_12 = ROT(a1_01, 1), a1_123 = a1_12 ^ ROT(a1, 3), a1_0123 = a1 ^ a1_123, a1_02 = a1_01 ^ a1_12;\n+   uint16_t a2_01 = a2 ^ ROT(a2, 1), a2_12 = ROT(a2_01, 1), a2_123 = a2_12 ^ ROT(a2, 3), a2_0123 = a2 ^ a2_123, a2_02 = a2_01 ^ a2_12;\n+   uint16_t a3_01 = a3 ^ ROT(a3, 1), a3_12 = ROT(a3_01, 1), a3_123 = a3_12 ^ ROT(a3, 3), a3_0123 = a3 ^ a3_123, a3_02 = a3_01 ^ a3_12;\n+   uint16_t a4_01 = a4 ^ ROT(a4, 1), a4_12 = ROT(a4_01, 1), a4_123 = a4_12 ^ ROT(a4, 3), a4_0123 = a4 ^ a4_123, a4_02 = a4_01 ^ a4_12;\n+   uint16_t a5_01 = a5 ^ ROT(a5, 1), a5_12 = ROT(a5_01, 1), a5_123 = a5_12 ^ ROT(a5, 3), a5_0123 = a5 ^ a5_123, a5_02 = a5_01 ^ a5_12;\n+   uint16_t a6_01 = a6 ^ ROT(a6, 1), a6_12 = ROT(a6_01, 1), a6_123 = a6_12 ^ ROT(a6, 3), a6_0123 = a6 ^ a6_123, a6_02 = a6_01 ^ a6_12;\n+   uint16_t a7_01 = a7 ^ ROT(a7, 1), a7_12 = ROT(a7_01, 1), a7_123 = a7_12 ^ ROT(a7, 3), a7_0123 = a7 ^ a7_123, a7_02 = a7_01 ^ a7_12;\n+\n+   slices[0] = a0_123 ^ a7_01 ^ a6_02 ^ a5_0123;\n+   slices[1] = a1_123 ^ a0_01 ^ a7_12 ^ a6_02 ^ a5_0123 ^ a6_0123;\n+   slices[2] = a2_123 ^ a1_01 ^ a0_02 ^ a7_02 ^ a6_0123 ^ a7_0123;\n+   slices[3] = a3_123 ^ a2_01 ^ a7_01 ^ a1_02 ^ a6_02 ^ a0_0123 ^ a5_0123 ^ a7_0123;\n+   slices[4] = a4_123 ^ a3_01 ^ a7_12 ^ a2_02 ^ a6_02 ^ a1_0123 ^ a5_0123 ^ a6_0123;\n+   slices[5] = a5_123 ^ a4_01 ^ a3_02 ^ a7_02 ^ a2_0123 ^ a6_0123 ^ a7_0123;\n+   slices[6] = a6_123 ^ a5_01 ^ a4_02 ^ a3_0123 ^ a7_0123;\n+   slices[7] = a7_123 ^ a6_01 ^ a5_02 ^ a4_0123;\n+}\n+\n+void AddRoundKey(uint16_t* slices, const AESSlicedMatrix* rk) {\n+    for (int b = 0; b < 8; b++) {\n+        slices[b] ^= rk->slice[b];\n+    }\n+}\n+\n+/** Expand the cipher key into the key schedule. */\n+void RijndaelSetup(AESSlicedMatrix* state, const uint8_t* key, int nkeywords, int nrounds)\n+{\n+    /* The one-byte round constant */\n+    uint8_t rcon = 0x01;\n+    /* A ring buffer containing the last 8 round key words (4 are consumed in every round) */\n+    uint32_t rk[8];\n+    /* The round number */\n+    int round = 0;\n+    /* The number of the word being generated, modulo nkeywords */\n+    int pos = 0;\n+\n+    /* The first nkeywords round key words are just taken from the key directly */\n+    for (int i = 0; i < nkeywords; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56764840",
      "id" : 56764840,
      "original_commit_id" : "fc484f1390ebd380fdd82db8e9a6739adb0b00d7",
      "original_position" : 426,
      "path" : "src/crypto/aes.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689",
      "updated_at" : "2016-05-13T08:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56764840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Tested ACK (52e05be371551a4529ec9248afebcca67fae6181).\r\nVerified test vectors, run tests on different platforms and setups.\r\nTested this PR with encrypted `wallet.dat` from master (and vice versa).\r\n\r\nNOT tested/verified constant time behavior.\r\n",
      "created_at" : "2016-03-21T12:38:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-199254006",
      "id" : 199254006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-21T12:38:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199254006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Concept NACK\r\n\r\nI don't think we should be using low-level crypto primitives code developed by us that has ~zero chance of being reviewed or used by anyone other than us. I don't care how good we think we are, thats just not a good practice.\r\n\r\nMaybe stick this in libsecp256k1 instead?",
      "created_at" : "2016-03-23T23:01:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200575780",
      "id" : 200575780,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-23T23:01:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200575780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd the \"go put it in another library\" response has a verifiable history of killing useful progress here (see also continued use of the problematic and fairly scary openssl RNG), you wouldn't provide the same complaint for random \"found on the internet\" code that was demonstratively broken. Seems misplaced.  We don't have any performance concerns for AES but in a generic library there would be performance concerns and a different construction might be called for.",
      "created_at" : "2016-03-24T05:20:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200672247",
      "id" : 200672247,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T05:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200672247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "We could also not go as far making it a separate library, but do abstract\nout the inner AES logic as a separate C file and publish that under a\ndifferent repository, together with tests.\n\n@petertodd I agree in theory that it has little chance of being reviewed\nelsewhere this way, but what about reviewers here? We have several\nreimplementations of other crypto primitives, in which bugs could have been\nintroduced. Did anyone check by comparing their code line by line with an\nalternate implementation? If not, whether it includes original design or\nnot is not very relevant.\n",
      "created_at" : "2016-03-24T07:00:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200699101",
      "id" : 200699101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T07:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200699101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I agree with @petertodd that ideally the code should be published separately from bitcoin as well.\r\n\r\nThis doesn't need to be a *generic* library. We'd like this code to be self-contained (and have a special requirement here) so using OpenSSL et al is not an option, and maintaining a new generic library is a lot of work and responsibility too.\r\n\r\nBut I can understand that some people would find a specific implementation of AES just for bitcoin core as risky. (And even though it's not used in consensus, nor anything network-facing, a bug in the wallet encryption would be a big deal.)\r\n\r\n> Did anyone check by comparing their code line by line with an alternate implementation?\r\n\r\nYes, people have done so.\r\n\r\n> Maybe stick this in libsecp256k1 instead?\r\n\r\nPlease no, that's scope creep for libsecp256k1. You're not trying to turn secp256k1 into a generic crypto library are you?",
      "created_at" : "2016-03-24T07:24:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200703423",
      "id" : 200703423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T07:46:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200703423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "There seems to be a case to make for a \"Bitcoin non-consensus crypto\" library with AES, SHA512, etc...",
      "created_at" : "2016-03-24T07:31:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200704384",
      "id" : 200704384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T07:31:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200704384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "I think we should ask the question separately from where the code is, though:\r\n\r\nCan we get any (independent, skilled) cryptographers to review this code? At least reviewing crypto code is a mostly one-time deal, after which it will (hardly) ever change.",
      "created_at" : "2016-03-24T07:53:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200715826",
      "id" : 200715826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T08:22:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200715826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I'd already suggested sipa split out and convert to C before he posted it because this have have independent interest as is probably the smallest constant time implementation of AES I've seen, or at least the smallest that doesn't have embarrassingly bad performance-- so no objection there.\r\n\r\n",
      "created_at" : "2016-03-24T08:24:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200730929",
      "id" : 200730929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T08:24:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200730929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "I'm happy to extract this PR as C code into a C89 compatible library. I have interest to use this for my SPV library project (https://github.com/libbtc/libbtc) and for a open source hardware wallet MCU codebase: https://github.com/digitalbitbox/mcu.",
      "created_at" : "2016-03-24T08:27:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200731622",
      "id" : 200731622,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-24T08:27:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200731622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "I have had this code running on 104 cores for several days, running a test that feeds random input through encode and decode with random keys and compares it to AES-NI.\r\n\r\nThe current maximum long term rate for the wallet application of this code in the current network is roughly 7 decrypts per second of roughly 48 bytes. At the current speed of my test harness it means that I have tested the equivalent of the network's maximum rate for thirty one thousand years without finding a fault.\r\n\r\nMutation testing showed very very high error correlation, meaning that any error manually introduced in the software made every execution (or nearly every execution) wrong. (So far I have not found any candidate error that didn't have this effect though automated searching, though I wouldn't be totally shocked if there were one-- it's still the case that this codebase has very high error correlation).\r\n\r\nPieter has a new version which is a straightforward port to plain C89 with some minor cleanup and some size reductions I contributed (the code size is still larger than the smallest AES implementations I can find (which aren't constant time), but not enormously so). I'll soon update my testing harness to that code and continue. I've also now reviewed the C89 version pretty extensively.",
      "created_at" : "2016-03-30T04:53:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203248250",
      "id" : 203248250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-30T04:53:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203248250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Thanks for the thorough testing and reviewing @gmaxwell!",
      "created_at" : "2016-03-30T07:23:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203286840",
      "id" : 203286840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-30T07:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203286840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2016-03-30T09:02:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203333735",
      "id" : 203333735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-30T09:02:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203333735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2016-03-30T13:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203442099",
      "id" : 203442099,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-30T13:49:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203442099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "The constant time AES core code is now factored out to a new repository; for now, it's available at  http://github.com/sipa/ctaes/\r\n\r\nThe pull request here has been updated to use a subtree of that project, with C++ wrappers around it.\r\n\r\nThe build code is very simple: ctaes does not have any configuration or own build system, so Bitcoin Core just builds it as part of its own process. I have not included ctaes's tests here for simplicity; the relevant AES C++ wrapper code does have its own tests though.\r\n",
      "created_at" : "2016-03-30T13:58:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203445191",
      "id" : 203445191,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-30T13:58:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203445191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa can you at least update to your latest code (even if not doing the subtree) just so people will not review the wrong thing?",
      "created_at" : "2016-03-31T05:03:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203753072",
      "id" : 203753072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-31T05:03:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203753072",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell Done. Not going to touch this PR or the sipa/ctaes master branch until there has been some review.",
      "created_at" : "2016-03-31T10:01:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203860040",
      "id" : 203860040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-03-31T10:01:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/203860040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Updated to latest ctaes (which includes a link to the review work by Ayo Akinyele), and rebased.\r\n\r\nI now get this error:\r\n```\r\n/usr/bin/ld: crypto/libbitcoin_crypto.a(crypto_libbitcoin_crypto_a-ctaes.o): relocation R_X86_64_PC32 against undefined symbol `__stack_chk_fail@@GLIBC_2.4' can not be used when making a shared object; recompile with -fPIC\r\n```\r\n\r\n@theuni Did I screw up the rebase?",
      "created_at" : "2016-05-11T18:18:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218544723",
      "id" : 218544723,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-11T18:18:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218544723",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa: ctaes.c doesn't get cxxflags (it gets cflags since it builds with gcc). Introducing a c source throws a wrench in our assumptions that we're building c++(11) sources. We could come up with a common set of flags shared between them, but by far the easiest fix here is just to ctaes.c --> ctaes.cpp.\r\n\r\nIf that drives you crazy, I can work on it.",
      "created_at" : "2016-05-11T23:22:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218618833",
      "id" : 218618833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-11T23:22:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218618833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@theuni Included the .c file from the .cpp wrapper for now; seems to work fine",
      "created_at" : "2016-05-12T00:09:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218626025",
      "id" : 218626025,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-12T00:09:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218626025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@theuni Ok, I'll need your help anyway :)\r\n\r\nEdit: nevermind, I did `EXTRA_DIST += src/crypto/ctaes` instead of `EXTRA_DIST += crypto/ctaes`",
      "created_at" : "2016-05-12T01:20:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218635218",
      "id" : 218635218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-13T08:24:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218635218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I think the CBC implementation should move to ctaes. It makes ctaes more useful (people shouldn't be using the raw AES block cipher without a mode of operation), and reduced custom-written crypto inside Core.",
      "created_at" : "2016-05-13T08:30:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218982670",
      "id" : 218982670,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-13T08:30:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218982670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa makes sense, sgtm. No hard feelings if you'd prefer to drop this stuff. I could port it to c and give it an api in ctaes if you'd like, though obviously the \"i tried to make it constant-time\" implementation will need a stronger guarantee :)",
      "created_at" : "2016-05-13T17:03:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219101534",
      "id" : 219101534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-13T17:03:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219101534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@theuni No need for that to be a blocker, though. We could move things to C as a follow-up.",
      "created_at" : "2016-05-13T17:07:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219102300",
      "id" : 219102300,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-13T17:07:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219102300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Ready for merging, I hope.",
      "created_at" : "2016-05-13T18:24:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219122213",
      "id" : 219122213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-13T18:24:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219122213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I didn't see any tests that explicit test for failure with invalid padding, except perhaps in the test that makes sure it behaves the same as OpenSSL. Perhaps if the CBC mode is ported to C in a later PR that could be addressed.\r\n\r\nutACK.  Good work sipa and cfields.",
      "created_at" : "2016-05-14T00:18:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219187989",
      "id" : 219187989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-14T00:18:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219187989",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r63480900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63480900"
         }
      },
      "body" : "Won't this just be optimized out?",
      "commit_id" : "34ed64a404fb6da691f67f00f47c4dd748e3e428",
      "created_at" : "2016-05-17T08:15:22Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"aes.h\"\n+#include \"crypto/common.h\"\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+extern \"C\" {\n+#include \"crypto/ctaes/ctaes.c\"\n+}\n+\n+AES128Encrypt::AES128Encrypt(const unsigned char key[16])\n+{\n+    AES128_init(&ctx, key);\n+}\n+\n+AES128Encrypt::~AES128Encrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    AES128_encrypt(&ctx, 1, ciphertext, plaintext);\n+}\n+\n+AES128Decrypt::AES128Decrypt(const unsigned char key[16])\n+{\n+    AES128_init(&ctx, key);\n+}\n+\n+AES128Decrypt::~AES128Decrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n+{\n+    AES128_decrypt(&ctx, 1, plaintext, ciphertext);\n+}\n+\n+AES256Encrypt::AES256Encrypt(const unsigned char key[32])\n+{\n+    AES256_init(&ctx, key);\n+}\n+\n+AES256Encrypt::~AES256Encrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    AES256_encrypt(&ctx, 1, ciphertext, plaintext);\n+}\n+\n+AES256Decrypt::AES256Decrypt(const unsigned char key[32])\n+{\n+    AES256_init(&ctx, key);\n+}\n+\n+AES256Decrypt::~AES256Decrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r63480900",
      "id" : 63480900,
      "original_commit_id" : "6bec172eb95e195847bb6dd6d4e62ada79c98c6d",
      "original_position" : 67,
      "path" : "src/crypto/aes.cpp",
      "position" : 67,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689",
      "updated_at" : "2016-05-17T08:15:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63480900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "For the record, the formal peer review was made of CTAES implementation correctness. The report can be found at http://bitcoin.sipa.be/ctaes/review.zip written by Ayo Akinyele.",
      "created_at" : "2016-05-17T19:39:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219830217",
      "id" : 219830217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-17T19:39:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/219830217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r63603342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63603342"
         }
      },
      "body" : "@pstratem Probably, but it doesn't hurt to leave it here. We can replace it with something stronger when we figure out what to do about OPENSSL_cleanse.",
      "commit_id" : "34ed64a404fb6da691f67f00f47c4dd748e3e428",
      "created_at" : "2016-05-17T21:01:49Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"aes.h\"\n+#include \"crypto/common.h\"\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+extern \"C\" {\n+#include \"crypto/ctaes/ctaes.c\"\n+}\n+\n+AES128Encrypt::AES128Encrypt(const unsigned char key[16])\n+{\n+    AES128_init(&ctx, key);\n+}\n+\n+AES128Encrypt::~AES128Encrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    AES128_encrypt(&ctx, 1, ciphertext, plaintext);\n+}\n+\n+AES128Decrypt::AES128Decrypt(const unsigned char key[16])\n+{\n+    AES128_init(&ctx, key);\n+}\n+\n+AES128Decrypt::~AES128Decrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n+{\n+    AES128_decrypt(&ctx, 1, plaintext, ciphertext);\n+}\n+\n+AES256Encrypt::AES256Encrypt(const unsigned char key[32])\n+{\n+    AES256_init(&ctx, key);\n+}\n+\n+AES256Encrypt::~AES256Encrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));\n+}\n+\n+void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    AES256_encrypt(&ctx, 1, ciphertext, plaintext);\n+}\n+\n+AES256Decrypt::AES256Decrypt(const unsigned char key[32])\n+{\n+    AES256_init(&ctx, key);\n+}\n+\n+AES256Decrypt::~AES256Decrypt()\n+{\n+    memset(&ctx, 0, sizeof(ctx));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#discussion_r63603342",
      "id" : 63603342,
      "original_commit_id" : "6bec172eb95e195847bb6dd6d4e62ada79c98c6d",
      "original_position" : 67,
      "path" : "src/crypto/aes.cpp",
      "position" : 67,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7689",
      "updated_at" : "2016-05-17T21:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/63603342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@theuni @jonasschnelli Feel like testing/reviewing again after the update to use ctaes?",
      "created_at" : "2016-05-25T14:17:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-221590237",
      "id" : 221590237,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-25T14:17:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/221590237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa Thanks for the reminder, I'll test/ack again today. I'm not qualified to review ctaes itself, so I'll have to defer to Ayo Akinyele's review (which appears thorough).",
      "created_at" : "2016-05-26T15:54:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-221913280",
      "id" : 221913280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-26T15:54:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/221913280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@sipa Please grab a quick build change: https://github.com/theuni/bitcoin/commit/723779c6504453cfb5ccdacf864e7e2f09bb6c32\r\n\r\nAfter that: ACK",
      "created_at" : "2016-05-27T18:38:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-222222582",
      "id" : 222222582,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-27T18:38:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/222222582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@theuni Merged in",
      "created_at" : "2016-05-27T18:54:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-222226272",
      "id" : 222226272,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-05-27T18:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/222226272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "ACK https://github.com/bitcoin/bitcoin/pull/7689/commits/723779c6504453cfb5ccdacf864e7e2f09bb6c32",
      "created_at" : "2016-06-01T16:12:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-223044079",
      "id" : 223044079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7689",
      "updated_at" : "2016-06-01T16:12:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223044079",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
