[
   {
      "body" : "The main benefits of this PR:\r\n* A `wallet.dat` backup, regardless of it's age, can be used to recover all private keys.\r\n* **Basic groundwork for detaching the private-keys from the wallet (allow signing over hardware wallets, etc.)**",
      "created_at" : "2016-01-02T16:13:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-168403059",
      "id" : 168403059,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-01-02T16:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/168403059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686227"
         }
      },
      "body" : "Nit: Is there a compelling reason to do this?",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:01:35Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class HDWalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+\n+        encrypt = True\n+        self.nodes[0].generate(1)\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+        assert_equal(walletinfo['balance'], 0)\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+\n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"muWGGSSma5s7TjHbT5fCKunkoyBaF1uy8D\");\n+        assert_equal(adr['keypath'], \"m/0'/4'\");\n+        \n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 1)\n+        \n+        #try to recover over master seed\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"mqfCLB8d4vP1BTyMo88WzjT9VJG4NWEbni\");\n+        assert_equal(adr['keypath'], \"m/0'/1'\");\n+        \n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"n4mEdLhWJgDHvsChPcttAkqQSMrndhzdAv\");\n+        assert_equal(adr['keypath'], \"m/0'/2'\");\n+\n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        print \"encrypt wallet\"\n+        self.nodes[0].encryptwallet(\"test\")\n+        bitcoind_processes[0].wait()\n+        del bitcoind_processes[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686227",
      "id" : 48686227,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 69,
      "path" : "qa/rpc-tests/hdwallet.py",
      "position" : 69,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686233"
         }
      },
      "body" : "We no longer translate every time the default changes.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:02:32Z",
      "diff_hunk" : "@@ -395,6 +395,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n+    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key derivation (HD wallets) (default: true)\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686233",
      "id" : 48686233,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686247"
         }
      },
      "body" : "Shouldn't this fail otherwise?",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:04:02Z",
      "diff_hunk" : "@@ -1465,6 +1467,40 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             // Create new keyUser and set as default key\n             RandAddSeedPerfmon();\n \n+            if (GetBoolArg(\"-usehd\", true))\n+            {\n+                // create a new seed / chain\n+                // default keypath is m/c'/k'\n+                // results in m/0'/0' for the first external key\n+                // results in m/1'/0' for the first internal key\n+                // results in m/0'/1' for the second external key\n+\n+                CHDChain chain;\n+                chain.keypathTemplate = \"m/c'\";\n+                \n+                CKey key;\n+                key.MakeNewKey(true); //generate a seed\n+                CKeyingMaterial seed = CKeyingMaterial(32);\n+                seed.assign(key.begin(), key.end());\n+\n+                if (GetArg(\"-hdseed\", \"\").size() == 64)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686247",
      "id" : 48686247,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 29,
      "path" : "src/init.cpp",
      "position" : 20,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686258"
         }
      },
      "body" : "Nit: typo",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:05:10Z",
      "diff_hunk" : "@@ -0,0 +1,258 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/hdkeystore.h\"\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/foreach.hpp>\n+\n+bool CHDKeyStore::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed)\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsCrypted())\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial emptyKey; //an empty key will tell EncryptSeed() to use the internal vMasterKey\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+\n+        mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+        return true;\n+    }\n+    mapHDMasterSeeds[chainID] = masterSeed;\n+    return true;\n+}\n+\n+bool CHDKeyStore::AddCryptedMasterSeed(const HDChainID& chainID, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+    {\n+        std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(chainID);\n+        if (it == mapHDMasterSeeds.end())\n+            return false;\n+\n+        seedOut = it->second;\n+        return true;\n+    }\n+    else\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+        if (it == mapHDCryptedMasterSeeds.end())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret = it->second;\n+        CKeyingMaterial emptyKey; //an empty key will tell DecryptSeed() to use the internal vMasterKey\n+        if (!DecryptSeed(emptyKey, vchCryptedSecret, chainID, seedOut))\n+            return false;\n+\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CHDKeyStore::EncryptSeeds(CKeyingMaterial& vMasterKeyIn)\n+{\n+    LOCK(cs_KeyStore);\n+    for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it)\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(vMasterKeyIn, it->second, it->first, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(it->first, vchCryptedSecret);\n+    }\n+    mapHDMasterSeeds.clear();\n+    if (!SetCrypted())\n+        return false;\n+\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& chainID, std::vector<unsigned char>& vchCryptedSecret) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return false;\n+\n+    std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+    if (it == mapHDCryptedMasterSeeds.end())\n+        return false;\n+\n+    vchCryptedSecret = it->second;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n+{\n+    LOCK(cs_KeyStore);\n+    chainIDs.clear();\n+\n+    if (IsCrypted())\n+    {\n+        for (std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+    else\n+    {\n+        for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool CHDKeyStore::PrivateKeyDerivation(const std::string keypath, const HDChainID& chainID, CExtKey& extKeyOut) const\n+{\n+    std::vector<std::string> pathFragments;\n+    boost::split(pathFragments, keypath, boost::is_any_of(\"/\"));\n+\n+    CExtKey extKey;\n+    CExtKey parentKey;\n+    BOOST_FOREACH(std::string fragment, pathFragments)\n+    {\n+        bool harden = false;\n+        if (*fragment.rbegin() == '\\'' || *fragment.rbegin() == 'h')\n+        {\n+            harden = true;\n+            fragment = fragment.substr(0,fragment.size()-1);\n+        }\n+\n+        if (fragment == \"m\")\n+        {\n+            CExtKey bip32MasterKey;\n+            CKeyingMaterial masterSeed;\n+\n+            // get master seed\n+            if (!GetMasterSeed(chainID, masterSeed))\n+                return false;\n+\n+            bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+            parentKey = bip32MasterKey;\n+        }\n+        else if (fragment == \"c\")\n+            return false;\n+        else\n+        {\n+            CExtKey childKey;\n+            int32_t nIndex;\n+            if (!ParseInt32(fragment,&nIndex))\n+                return false;\n+            parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+            parentKey = childKey;\n+        }\n+    }\n+    extKeyOut = parentKey;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKey(const HDChainID chainID, const std::string keypath, CKey& keyOut) const\n+{\n+    //this methode required no locking",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686258",
      "id" : 48686258,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 170,
      "path" : "src/wallet/hdkeystore.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686258",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686281"
         }
      },
      "body" : "The first arg is required",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:07:45Z",
      "diff_hunk" : "@@ -317,12 +328,13 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686281",
      "id" : 48686281,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686295"
         }
      },
      "body" : "Guess it makes sense to use a global or `DEFAULT_` here.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:09:07Z",
      "diff_hunk" : "@@ -344,7 +358,27 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n         if (strName == strAccount)\n-            ret.push_back(address.ToString());\n+        {\n+            if (GetBoolArg(\"-usehd\", true) && showDetails)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686295",
      "id" : 48686295,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 77,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "concept ACK\r\n",
      "created_at" : "2016-01-02T18:21:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-168414293",
      "id" : 168414293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-01-02T18:21:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/168414293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686430"
         }
      },
      "body" : "Encrypting the wallet does stop the process,... i think this is required.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:26:58Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class HDWalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+\n+        encrypt = True\n+        self.nodes[0].generate(1)\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+        assert_equal(walletinfo['balance'], 0)\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+\n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"muWGGSSma5s7TjHbT5fCKunkoyBaF1uy8D\");\n+        assert_equal(adr['keypath'], \"m/0'/4'\");\n+        \n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 1)\n+        \n+        #try to recover over master seed\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"mqfCLB8d4vP1BTyMo88WzjT9VJG4NWEbni\");\n+        assert_equal(adr['keypath'], \"m/0'/1'\");\n+        \n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"n4mEdLhWJgDHvsChPcttAkqQSMrndhzdAv\");\n+        assert_equal(adr['keypath'], \"m/0'/2'\");\n+\n+        adr = self.nodes[0].getnewaddress()\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        print \"encrypt wallet\"\n+        self.nodes[0].encryptwallet(\"test\")\n+        bitcoind_processes[0].wait()\n+        del bitcoind_processes[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686430",
      "id" : 48686430,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 69,
      "path" : "qa/rpc-tests/hdwallet.py",
      "position" : 69,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686433"
         }
      },
      "body" : "Yes. Good point. Will fix.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-02T18:27:30Z",
      "diff_hunk" : "@@ -1465,6 +1467,40 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             // Create new keyUser and set as default key\n             RandAddSeedPerfmon();\n \n+            if (GetBoolArg(\"-usehd\", true))\n+            {\n+                // create a new seed / chain\n+                // default keypath is m/c'/k'\n+                // results in m/0'/0' for the first external key\n+                // results in m/1'/0' for the first internal key\n+                // results in m/0'/1' for the second external key\n+\n+                CHDChain chain;\n+                chain.keypathTemplate = \"m/c'\";\n+                \n+                CKey key;\n+                key.MakeNewKey(true); //generate a seed\n+                CKeyingMaterial seed = CKeyingMaterial(32);\n+                seed.assign(key.begin(), key.end());\n+\n+                if (GetArg(\"-hdseed\", \"\").size() == 64)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r48686433",
      "id" : 48686433,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 29,
      "path" : "src/init.cpp",
      "position" : 20,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/48686433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49883811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49883811"
         }
      },
      "body" : "Typo? Achive -> Active?",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-15T18:00:20Z",
      "diff_hunk" : "@@ -133,6 +101,13 @@ class CWalletDB : public CDB\n     static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, const std::string& filename);\n \n+    /* HD functions */\n+    bool WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed);\n+    bool WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret);\n+    bool EraseHDMasterSeed(const uint256& hash);\n+    bool WriteHDChain(const CHDChain& chain);\n+    bool WriteHDAchiveChain(const uint256& hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49883811",
      "id" : 49883811,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 57,
      "path" : "src/wallet/walletdb.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49883811",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49884875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49884875"
         }
      },
      "body" : "mind crypting???",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-15T18:11:03Z",
      "diff_hunk" : "@@ -0,0 +1,156 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+class CKeyMetadata\n+{\n+public:\n+    static const int CURRENT_VERSION=2;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+    HDChainID chainID;\n+    std::string keypath;\n+\n+    CKeyMetadata()\n+    {\n+        SetNull();\n+    }\n+    CKeyMetadata(int64_t nCreateTime_)\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        if (nVersion >= 2)\n+        {\n+            READWRITE(keypath);\n+            if (keypath.size() > 0)\n+                READWRITE(chainID);\n+        }\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        keypath.clear();\n+        chainID.SetNull();\n+    }\n+};\n+\n+/** class for representing a hd chain of keys. */\n+class CHDChain\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    bool usePubCKD;\n+    int64_t nCreateTime; // 0 means unknown\n+\n+    HDChainID chainID; //hash of the masterpubkey\n+    std::string keypathTemplate; //example \"m'/44'/0'/0'/c\"\n+\n+    CHDChain()\n+    {\n+        SetNull();\n+    }\n+\n+    CHDChain(int64_t nCreateTime_)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    bool IsValid()\n+    {\n+        return (keypathTemplate.size() > 0);\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(nCreateTime);\n+        READWRITE(chainID);\n+        READWRITE(keypathTemplate);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDChain::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        chainID.SetNull();\n+        keypathTemplate.clear();\n+    }\n+};\n+\n+class CHDKeyStore : public CCryptoKeyStore\n+{\n+protected:\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of CHDChain (mind crypting)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49884875",
      "id" : 49884875,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 110,
      "path" : "src/wallet/hdkeystore.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49884875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Note to test: If encrypting wallet fails for any reason at any late stage, the wallet should retain all unencrypted data.",
      "created_at" : "2016-01-15T18:12:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-172040350",
      "id" : 172040350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-01-15T18:12:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/172040350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49885671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49885671"
         }
      },
      "body" : "Return value is ignored.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-15T18:18:18Z",
      "diff_hunk" : "@@ -954,6 +969,89 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+bool CWallet::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    if (!IsCrypted())\n+    {\n+        CHDKeyStore::AddMasterSeed(chainID, masterSeed);\n+\n+        if (!memonly && !CWalletDB(strWalletFile).WriteHDMasterSeed(chainID, masterSeed))\n+            throw runtime_error(\"AddMasterSeed(): writing master seed failed\");\n+    }\n+    else\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial emptyKey;\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(chainID, vchCryptedSecret);\n+\n+        if (!memonly && !CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainID, vchCryptedSecret))\n+            throw runtime_error(\"AddMasterSeed(): writing master seed failed\");\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::AddHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    CHDKeyStore::AddHDChain(chain);\n+    if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n+        throw runtime_error(\"AddHDChain(): writing chain failed\");\n+    return true;\n+}\n+\n+bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)\n+{\n+    EncryptSeeds(vMasterKeyIn);\n+\n+    std::vector<HDChainID> chainIds;\n+    GetAvailableChainIDs(chainIds);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49885671",
      "id" : 49885671,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 99,
      "path" : "src/wallet/wallet.cpp",
      "position" : 99,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49885671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49894964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49894964"
         }
      },
      "body" : "2 is VERSION_SUPPORT_FLAGS...",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-15T19:32:57Z",
      "diff_hunk" : "@@ -0,0 +1,156 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+class CKeyMetadata\n+{\n+public:\n+    static const int CURRENT_VERSION=2;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+    HDChainID chainID;\n+    std::string keypath;\n+\n+    CKeyMetadata()\n+    {\n+        SetNull();\n+    }\n+    CKeyMetadata(int64_t nCreateTime_)\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        if (nVersion >= 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49894964",
      "id" : 49894964,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 41,
      "path" : "src/wallet/hdkeystore.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49894964",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49900458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49900458"
         }
      },
      "body" : "showDetails ought to return Object format even when not generating from a HD key IMO.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-01-15T20:20:57Z",
      "diff_hunk" : "@@ -126,6 +130,13 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n \n+    if (GetBoolArg(\"-usehd\", true) && showDetails && pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0)\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        result.pushKV(\"address\", CBitcoinAddress(keyID).ToString());\n+        result.pushKV(\"keypath\", pwalletMain->mapKeyMetadata[keyID].keypath);\n+        return result;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r49900458",
      "id" : 49900458,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 40,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 41,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49900458",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Concept ACK ",
      "created_at" : "2016-01-22T21:10:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-174049907",
      "id" : 174049907,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-01-22T21:10:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/174049907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1024428?v=3",
         "events_url" : "https://api.github.com/users/pointbiz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pointbiz/followers",
         "following_url" : "https://api.github.com/users/pointbiz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pointbiz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pointbiz",
         "id" : 1024428,
         "login" : "pointbiz",
         "organizations_url" : "https://api.github.com/users/pointbiz/orgs",
         "received_events_url" : "https://api.github.com/users/pointbiz/received_events",
         "repos_url" : "https://api.github.com/users/pointbiz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pointbiz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pointbiz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pointbiz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r51429190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51429190"
         }
      },
      "body" : "Probably should make this clear it only happens upon first run of the wallet.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-02-01T15:12:55Z",
      "diff_hunk" : "@@ -395,6 +395,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n+    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key derivation (HD wallets) (default: true)\"));\n+    strUsage += HelpMessageOpt(\"-hdseed\", _(\"Use the given 256bit (64 char hex) as HD master seed (default: <generate random seed>)\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r51429190",
      "id" : 51429190,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51429190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r51430314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51430314"
         }
      },
      "body" : "Also, `true` is not a valid default value.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-02-01T15:22:06Z",
      "diff_hunk" : "@@ -395,6 +395,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n+    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key derivation (HD wallets) (default: true)\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r51430314",
      "id" : 51430314,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51430314",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53617049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53617049"
         }
      },
      "body" : "> 2 is VERSION_SUPPORT_FLAGS...\r\n\r\nNot in core... :) But yes. Let me use three.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-02-22T12:16:30Z",
      "diff_hunk" : "@@ -0,0 +1,156 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+class CKeyMetadata\n+{\n+public:\n+    static const int CURRENT_VERSION=2;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+    HDChainID chainID;\n+    std::string keypath;\n+\n+    CKeyMetadata()\n+    {\n+        SetNull();\n+    }\n+    CKeyMetadata(int64_t nCreateTime_)\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        if (nVersion >= 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53617049",
      "id" : 53617049,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 41,
      "path" : "src/wallet/hdkeystore.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53617049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53617298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53617298"
         }
      },
      "body" : "> showDetails ought to return Object format even when not generating from a HD key IMO.\r\n\r\nIt shouldn't (`&& pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0`).\r\n",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-02-22T12:19:46Z",
      "diff_hunk" : "@@ -126,6 +130,13 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n \n+    if (GetBoolArg(\"-usehd\", true) && showDetails && pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0)\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        result.pushKV(\"address\", CBitcoinAddress(keyID).ToString());\n+        result.pushKV(\"keypath\", pwalletMain->mapKeyMetadata[keyID].keypath);\n+        return result;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53617298",
      "id" : 53617298,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 40,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 41,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53617298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53617477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53617477"
         }
      },
      "body" : "> Probably should make this clear it only happens upon first run of the wallet.\r\n\r\nI agree, `-hdseed` as startup parameter is somehow not ideal. Not seeding the wallet at first start, would require an additional rpc command (something `generatehdwallet`, `seedwallet`, etc.).\r\n\r\nOr an additional \"`bitcoin-wallet`\" tool that could allow generating and manipulating wallet.dat files.\r\n\r\nBut because I fear lack of reviewer, I don't want to make this PR more complex for now. ",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-02-22T12:22:19Z",
      "diff_hunk" : "@@ -395,6 +395,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n+    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key derivation (HD wallets) (default: true)\"));\n+    strUsage += HelpMessageOpt(\"-hdseed\", _(\"Use the given 256bit (64 char hex) as HD master seed (default: <generate random seed>)\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53617477",
      "id" : 53617477,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53617477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53618798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53618798"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-02-22T12:38:17Z",
      "diff_hunk" : "@@ -954,6 +969,89 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+bool CWallet::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    if (!IsCrypted())\n+    {\n+        CHDKeyStore::AddMasterSeed(chainID, masterSeed);\n+\n+        if (!memonly && !CWalletDB(strWalletFile).WriteHDMasterSeed(chainID, masterSeed))\n+            throw runtime_error(\"AddMasterSeed(): writing master seed failed\");\n+    }\n+    else\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial emptyKey;\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(chainID, vchCryptedSecret);\n+\n+        if (!memonly && !CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainID, vchCryptedSecret))\n+            throw runtime_error(\"AddMasterSeed(): writing master seed failed\");\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::AddHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    CHDKeyStore::AddHDChain(chain);\n+    if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n+        throw runtime_error(\"AddHDChain(): writing chain failed\");\n+    return true;\n+}\n+\n+bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)\n+{\n+    EncryptSeeds(vMasterKeyIn);\n+\n+    std::vector<HDChainID> chainIds;\n+    GetAvailableChainIDs(chainIds);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r53618798",
      "id" : 53618798,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 99,
      "path" : "src/wallet/wallet.cpp",
      "position" : 99,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53618798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased and fixed reported nits.",
      "created_at" : "2016-02-22T12:38:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-187154838",
      "id" : 187154838,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-02-22T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/187154838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55893160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55893160"
         }
      },
      "body" : "double deletion?",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-11T21:45:20Z",
      "diff_hunk" : "@@ -1004,3 +1036,39 @@ bool CWalletDB::EraseDestData(const std::string &address, const std::string &key\n     nWalletDBUpdated++;\n     return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n+\n+bool CWalletDB::WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"hdmasterseed\"), hash), masterSeed);\n+}\n+\n+bool CWalletDB::WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    nWalletDBUpdated++;\n+    if (!Write(std::make_pair(std::string(\"hdcryptedmasterseed\"), hash), vchCryptedSecret))\n+        return false;\n+\n+    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n+    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55893160",
      "id" : 55893160,
      "original_commit_id" : "915b69dbde5d01cda9bef94bbda666ff6d92625f",
      "original_position" : 57,
      "path" : "src/wallet/walletdb.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55893160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55893620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55893620"
         }
      },
      "body" : "arg sandwich: in/out/out/in/in ",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-11T21:48:37Z",
      "diff_hunk" : "@@ -0,0 +1,256 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/hdkeystore.h\"\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/foreach.hpp>\n+\n+bool CHDKeyStore::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed)\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsCrypted())\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial emptyKey; //an empty key will tell EncryptSeed() to use the internal vMasterKey\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+\n+        mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+        return true;\n+    }\n+    mapHDMasterSeeds[chainID] = masterSeed;\n+    return true;\n+}\n+\n+bool CHDKeyStore::AddCryptedMasterSeed(const HDChainID& chainID, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+    {\n+        std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(chainID);\n+        if (it == mapHDMasterSeeds.end())\n+            return false;\n+\n+        seedOut = it->second;\n+        return true;\n+    }\n+    else\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+        if (it == mapHDCryptedMasterSeeds.end())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret = it->second;\n+        CKeyingMaterial emptyKey; //an empty key will tell DecryptSeed() to use the internal vMasterKey\n+        if (!DecryptSeed(emptyKey, vchCryptedSecret, chainID, seedOut))\n+            return false;\n+\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CHDKeyStore::EncryptSeeds(CKeyingMaterial& vMasterKeyIn)\n+{\n+    LOCK(cs_KeyStore);\n+    for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it)\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(vMasterKeyIn, it->second, it->first, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(it->first, vchCryptedSecret);\n+    }\n+    mapHDMasterSeeds.clear();\n+    if (!SetCrypted())\n+        return false;\n+\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& chainID, std::vector<unsigned char>& vchCryptedSecret) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return false;\n+\n+    std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+    if (it == mapHDCryptedMasterSeeds.end())\n+        return false;\n+\n+    vchCryptedSecret = it->second;\n+    return true;\n+}\n+\n+void CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n+{\n+    LOCK(cs_KeyStore);\n+    chainIDs.clear();\n+\n+    if (IsCrypted())\n+    {\n+        for (std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+    else\n+    {\n+        for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+}\n+\n+bool CHDKeyStore::PrivateKeyDerivation(const std::string keypath, const HDChainID& chainID, CExtKey& extKeyOut) const\n+{\n+    std::vector<std::string> pathFragments;\n+    boost::split(pathFragments, keypath, boost::is_any_of(\"/\"));\n+\n+    CExtKey extKey;\n+    CExtKey parentKey;\n+    BOOST_FOREACH(std::string fragment, pathFragments)\n+    {\n+        bool harden = false;\n+        if (*fragment.rbegin() == '\\'' || *fragment.rbegin() == 'h')\n+        {\n+            harden = true;\n+            fragment = fragment.substr(0,fragment.size()-1);\n+        }\n+\n+        if (fragment == \"m\")\n+        {\n+            CExtKey bip32MasterKey;\n+            CKeyingMaterial masterSeed;\n+\n+            // get master seed\n+            if (!GetMasterSeed(chainID, masterSeed))\n+                return false;\n+\n+            bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+            parentKey = bip32MasterKey;\n+        }\n+        else if (fragment == \"c\")\n+            return false;\n+        else\n+        {\n+            CExtKey childKey;\n+            int32_t nIndex;\n+            if (!ParseInt32(fragment,&nIndex))\n+                return false;\n+            parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+            parentKey = childKey;\n+        }\n+    }\n+    extKeyOut = parentKey;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKey(const HDChainID chainID, const std::string keypath, CKey& keyOut) const\n+{\n+    //this methode requires no locking\n+    CExtKey extKeyOut;\n+    if (!PrivateKeyDerivation(keypath, chainID, extKeyOut))\n+        return false;\n+\n+    keyOut = extKeyOut.key;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKeyAtIndex(const HDChainID chainID, CKey& keyOut, std::string& keypathOut, unsigned int nIndex, bool internal) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55893620",
      "id" : 55893620,
      "original_commit_id" : "915b69dbde5d01cda9bef94bbda666ff6d92625f",
      "original_position" : 177,
      "path" : "src/wallet/hdkeystore.cpp",
      "position" : 177,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55893620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55893741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55893741"
         }
      },
      "body" : "(nit?) technically this only returns when you have 0x80000000 keys already... clearly not a worry, but if reached should probably barf",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-11T21:49:34Z",
      "diff_hunk" : "@@ -0,0 +1,256 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/hdkeystore.h\"\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/foreach.hpp>\n+\n+bool CHDKeyStore::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed)\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsCrypted())\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial emptyKey; //an empty key will tell EncryptSeed() to use the internal vMasterKey\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+\n+        mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+        return true;\n+    }\n+    mapHDMasterSeeds[chainID] = masterSeed;\n+    return true;\n+}\n+\n+bool CHDKeyStore::AddCryptedMasterSeed(const HDChainID& chainID, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+    {\n+        std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(chainID);\n+        if (it == mapHDMasterSeeds.end())\n+            return false;\n+\n+        seedOut = it->second;\n+        return true;\n+    }\n+    else\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+        if (it == mapHDCryptedMasterSeeds.end())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret = it->second;\n+        CKeyingMaterial emptyKey; //an empty key will tell DecryptSeed() to use the internal vMasterKey\n+        if (!DecryptSeed(emptyKey, vchCryptedSecret, chainID, seedOut))\n+            return false;\n+\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CHDKeyStore::EncryptSeeds(CKeyingMaterial& vMasterKeyIn)\n+{\n+    LOCK(cs_KeyStore);\n+    for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it)\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(vMasterKeyIn, it->second, it->first, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(it->first, vchCryptedSecret);\n+    }\n+    mapHDMasterSeeds.clear();\n+    if (!SetCrypted())\n+        return false;\n+\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& chainID, std::vector<unsigned char>& vchCryptedSecret) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return false;\n+\n+    std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+    if (it == mapHDCryptedMasterSeeds.end())\n+        return false;\n+\n+    vchCryptedSecret = it->second;\n+    return true;\n+}\n+\n+void CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n+{\n+    LOCK(cs_KeyStore);\n+    chainIDs.clear();\n+\n+    if (IsCrypted())\n+    {\n+        for (std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+    else\n+    {\n+        for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+}\n+\n+bool CHDKeyStore::PrivateKeyDerivation(const std::string keypath, const HDChainID& chainID, CExtKey& extKeyOut) const\n+{\n+    std::vector<std::string> pathFragments;\n+    boost::split(pathFragments, keypath, boost::is_any_of(\"/\"));\n+\n+    CExtKey extKey;\n+    CExtKey parentKey;\n+    BOOST_FOREACH(std::string fragment, pathFragments)\n+    {\n+        bool harden = false;\n+        if (*fragment.rbegin() == '\\'' || *fragment.rbegin() == 'h')\n+        {\n+            harden = true;\n+            fragment = fragment.substr(0,fragment.size()-1);\n+        }\n+\n+        if (fragment == \"m\")\n+        {\n+            CExtKey bip32MasterKey;\n+            CKeyingMaterial masterSeed;\n+\n+            // get master seed\n+            if (!GetMasterSeed(chainID, masterSeed))\n+                return false;\n+\n+            bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+            parentKey = bip32MasterKey;\n+        }\n+        else if (fragment == \"c\")\n+            return false;\n+        else\n+        {\n+            CExtKey childKey;\n+            int32_t nIndex;\n+            if (!ParseInt32(fragment,&nIndex))\n+                return false;\n+            parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+            parentKey = childKey;\n+        }\n+    }\n+    extKeyOut = parentKey;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKey(const HDChainID chainID, const std::string keypath, CKey& keyOut) const\n+{\n+    //this methode requires no locking\n+    CExtKey extKeyOut;\n+    if (!PrivateKeyDerivation(keypath, chainID, extKeyOut))\n+        return false;\n+\n+    keyOut = extKeyOut.key;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKeyAtIndex(const HDChainID chainID, CKey& keyOut, std::string& keypathOut, unsigned int nIndex, bool internal) const\n+{\n+    CHDChain hdChain;\n+    if (!GetChain(chainID, hdChain))\n+        return false;\n+\n+    if (nIndex >= 0x80000000)\n+        throw std::runtime_error(\"CHDKeyStore::DeriveKeyAtIndex(): No more available keys!\");\n+\n+    keypathOut = hdChain.keypathTemplate;\n+    boost::replace_all(keypathOut, \"c\", itostr(internal)); //replace the chain switch index\n+\n+    keypathOut += \"/\"+itostr(nIndex)+\"'\"; //add hardened flag\n+\n+    CExtKey extKeyOut;\n+    if (!PrivateKeyDerivation(keypathOut, chainID, extKeyOut))\n+        throw std::runtime_error(\"CHDKeyStore::DeriveKeyAtIndex(): Private Key Derivation failed!\");\n+    keyOut = extKeyOut.key;\n+\n+    return true;\n+}\n+\n+unsigned int CHDKeyStore::GetNextChildIndex(const HDChainID& chainID, bool internal)\n+{\n+    std::vector<unsigned int> vIndices;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        CHDChain hdChain;\n+        if (!GetChain(chainID, hdChain))\n+            return false;\n+\n+        std::string keypathBase = hdChain.keypathTemplate;\n+        boost::replace_all(keypathBase, \"c\", itostr(internal)); //replace the chain switch index\n+\n+        //get next unused child index\n+        for (std::map<CKeyID, CKeyMetadata>::iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); ++it)\n+        {\n+            //skip non hd keys\n+            if (it->second.keypath.size() == 0)\n+                continue;\n+\n+            std::string keysBaseKeypath = it->second.keypath.substr(0, it->second.keypath.find_last_of(\"/\"));\n+            std::string childStr = it->second.keypath.substr(it->second.keypath.find_last_of(\"/\") + 1);\n+            boost::erase_all(childStr, \"'\");\n+            int32_t nChild;\n+            if(it->second.chainID == chainID &&\n+               it->second.keypath.substr(0, it->second.keypath.find_last_of(\"/\")) == keypathBase &&\n+               ParseInt32(childStr, &nChild))\n+            {\n+                vIndices.push_back(nChild);\n+            }\n+        }\n+    }\n+\n+    for (unsigned int i=0;i<0x80000000;i++)\n+        if (std::find(vIndices.begin(), vIndices.end(), i) == vIndices.end())\n+            return i;\n+\n+    return 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55893741",
      "id" : 55893741,
      "original_commit_id" : "915b69dbde5d01cda9bef94bbda666ff6d92625f",
      "original_position" : 237,
      "path" : "src/wallet/hdkeystore.cpp",
      "position" : 237,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55893741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55894444"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55894444"
         }
      },
      "body" : "I'd still prefer the user is warned that they are trying to use hd but already have a running non-hd wallet or simply be disallowed.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-11T21:54:42Z",
      "diff_hunk" : "@@ -1526,6 +1528,46 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             // Create new keyUser and set as default key\n             RandAddSeedPerfmon();\n \n+            if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55894444",
      "id" : 55894444,
      "original_commit_id" : "915b69dbde5d01cda9bef94bbda666ff6d92625f",
      "original_position" : 13,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55894444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55895424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55895424"
         }
      },
      "body" : "I'm missing the jump from 3 to 5 here.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-11T22:02:25Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class HDWalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+\n+        encrypt = True\n+        self.nodes[0].generate(1)\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+        assert_equal(walletinfo['balance'], 0)\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"muWGGSSma5s7TjHbT5fCKunkoyBaF1uy8D\");\n+        assert_equal(adr['keypath'], \"m/0'/4'\");\n+        \n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 1)\n+        \n+        #try to recover over master seed\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"mqfCLB8d4vP1BTyMo88WzjT9VJG4NWEbni\");\n+        assert_equal(adr['keypath'], \"m/0'/1'\");\n+        \n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"n4mEdLhWJgDHvsChPcttAkqQSMrndhzdAv\");\n+        assert_equal(adr['keypath'], \"m/0'/2'\");\n+\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        print \"encrypt wallet\"\n+        self.nodes[0].encryptwallet(\"test\")\n+        bitcoind_processes[0].wait()\n+        del bitcoind_processes[0]\n+\n+        self.nodes[0] = start_node(0, self.options.tmpdir, extra_args=['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'])\n+        self.nodes[0].walletpassphrase(\"test\", 100)\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"n32WRiXX6P6KFkdGV37CAbsTjLcxt4VhRY\");\n+        assert_equal(adr['keypath'], \"m/0'/5'\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55895424",
      "id" : 55895424,
      "original_commit_id" : "915b69dbde5d01cda9bef94bbda666ff6d92625f",
      "original_position" : 75,
      "path" : "qa/rpc-tests/hdwallet.py",
      "position" : 75,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55895424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55968892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55968892"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-14T08:46:13Z",
      "diff_hunk" : "@@ -1465,6 +1467,40 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             // Create new keyUser and set as default key\n             RandAddSeedPerfmon();\n \n+            if (GetBoolArg(\"-usehd\", true))\n+            {\n+                // create a new seed / chain\n+                // default keypath is m/c'/k'\n+                // results in m/0'/0' for the first external key\n+                // results in m/1'/0' for the first internal key\n+                // results in m/0'/1' for the second external key\n+\n+                CHDChain chain;\n+                chain.keypathTemplate = \"m/c'\";\n+                \n+                CKey key;\n+                key.MakeNewKey(true); //generate a seed\n+                CKeyingMaterial seed = CKeyingMaterial(32);\n+                seed.assign(key.begin(), key.end());\n+\n+                if (GetArg(\"-hdseed\", \"\").size() == 64)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55968892",
      "id" : 55968892,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 29,
      "path" : "src/init.cpp",
      "position" : 20,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55968892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55969388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55969388"
         }
      },
      "body" : "Right. This PR currently only allows to use hd when no wallet.dat file is present (wallet creation phase). IMO this could be a save start,... first release that includes HD option should probably silently offer the feature with a more or less in-prominent startup argument.\r\nBut agree, if someone passes `-usehd` while the current wallet is present and does not support HD, we should warn.",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-14T08:51:57Z",
      "diff_hunk" : "@@ -1526,6 +1528,46 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             // Create new keyUser and set as default key\n             RandAddSeedPerfmon();\n \n+            if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r55969388",
      "id" : 55969388,
      "original_commit_id" : "915b69dbde5d01cda9bef94bbda666ff6d92625f",
      "original_position" : 13,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T08:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/55969388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased and fixed some nits.",
      "created_at" : "2016-03-14T08:57:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-196210532",
      "id" : 196210532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-03-14T08:57:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/196210532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Needs rebase after the wallet refactor got merged",
      "created_at" : "2016-03-14T13:08:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-196302287",
      "id" : 196302287,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-03-14T13:08:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/196302287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r56028700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56028700"
         }
      },
      "body" : "I think @luke-jr  meant prescriptively that the output should be same format regardless. ",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-14T16:24:33Z",
      "diff_hunk" : "@@ -126,6 +130,13 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n \n+    if (GetBoolArg(\"-usehd\", true) && showDetails && pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0)\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        result.pushKV(\"address\", CBitcoinAddress(keyID).ToString());\n+        result.pushKV(\"keypath\", pwalletMain->mapKeyMetadata[keyID].keypath);\n+        return result;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r56028700",
      "id" : 56028700,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 40,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 41,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-14T16:24:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56028700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "Concept ACK.\r\n\r\nI think on-ramping users to this safely/transparently will be the most difficult part.\r\n\r\nWarning users that the flag they've set can't be properly used until a new wallet is created(or some migration happens) is a must imo. There needs to be a tool/process to help with that migration, most likely with a backup/cloning step.\r\n",
      "created_at" : "2016-03-14T17:35:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-196426461",
      "id" : 196426461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-03-14T17:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/196426461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r56115527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56115527"
         }
      },
      "body" : "Yes",
      "commit_id" : "3494217323059c13faa561d37563c48c144448ad",
      "created_at" : "2016-03-15T05:03:23Z",
      "diff_hunk" : "@@ -126,6 +130,13 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n \n+    if (GetBoolArg(\"-usehd\", true) && showDetails && pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0)\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        result.pushKV(\"address\", CBitcoinAddress(keyID).ToString());\n+        result.pushKV(\"keypath\", pwalletMain->mapKeyMetadata[keyID].keypath);\n+        return result;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#discussion_r56115527",
      "id" : 56115527,
      "original_commit_id" : "42d2a1a37bd28c0697f255a731d39be0cbb1cbe2",
      "original_position" : 40,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 41,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7273",
      "updated_at" : "2016-03-15T05:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56115527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Closing in favor of #8035.\r\nSome parts of this PR could be used to extend HD functionality if and once #8035 has been merged.",
      "created_at" : "2016-05-10T09:26:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7273#issuecomment-218105205",
      "id" : 218105205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7273",
      "updated_at" : "2016-05-10T09:26:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218105205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
