{
   "assignee" : null,
   "assignees" : [],
   "body" : "In the same vein as `copyright_header.py` (#9459)  and `basic_style.py` (#9603), this script provides a consistent way to run clang static analysis checking on the codebase.\r\n\r\n```\r\n$ contrib/devtools/clang_static_analysis.py -h\r\nusage: clang_static_analysis.py [-h] [-b BIN_PATH] [-r REPORT_PATH] [-j JOBS]\r\n                                {report,check} repository\r\n\r\nA utility for running clang static analysis on the codebase in a consistent\r\nway.\r\n\r\npositional arguments:\r\n  {report,check}        Selects the output behavior. 'report' generates a\r\n                        summary report on the issues found. 'check' compares\r\n                        the state of the repository against a standard,\r\n                        provides a return code for the shell and prints more\r\n                        specific details when issues are found.\r\n  repository            A source code repository for which the static analysis\r\n                        is to be performed upon.\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -b BIN_PATH, --bin-path BIN_PATH\r\n                        The path holding 'scan-build' and 'scan-view'\r\n                        binaries. (Uses 'scan-build' and 'scan-view' installed\r\n                        in PATH by default)\r\n  -r REPORT_PATH, --report-path REPORT_PATH\r\n                        The path for scan-build to write its report files.\r\n                        (default=/tmp/bitcoin-scan-build/)\r\n  -j JOBS, --jobs JOBS  The number of parallel jobs to run with 'make'.\r\n                        (default=6)\r\n```\r\n\r\nThe `report` subcommand is for providing a summary of the state of the checked-out branch. On current `master`, the output looks like this:\r\n```\r\n$ contrib/devtools/clang_static_analysis.py report .\r\nRunning command:     make clean\r\nRunning command:     /usr/share/clang/scan-build-3.5/scan-build -k -plist-html --keep-empty -o /tmp/bitcoin-scan-build/ make -j6\r\nstderr/stdout to:    scan_build.log\r\nThis might take a few minutes...\r\nDone.\r\nResults in:          /tmp/bitcoin-scan-build/2017-01-25-140103-6556-1\r\n\r\n--------------------------------------------------------------------------------\r\nTook 143.30 seconds to analyze with scan-build\r\nFound 3 issues:\r\n--------------------------------------------------------------------------------\r\n0: bench/bench.cpp:97:52 - Division by zero\r\n1: qt/paymentrequest.pb.cc:51:24 - Called C++ object pointer is null\r\n2: ./src/ecmult_gen_impl.h:153:5 - Value stored to 'bits' is never read\r\n--------------------------------------------------------------------------------\r\nFull details can be seen in a browser by running:\r\n    $ /usr/share/clang/scan-view-3.5/scan-view /tmp/bitcoin-scan-build/2017-01-25-140103-6556-1\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nThe results directory is kept around in the `/tmp/` location and `scan-view` gives you a full, very nice visualization of the results in your browser.\r\n\r\nThe `check` subcommand provides a bit more specific detail and returns a shell status of zero only if there aren't any issues. Like with the other scripts, this is useful for eventual inclusion as a criteria for CI acceptance. Its output looks like this:\r\n```\r\n$ contrib/devtools/clang_static_analysis.py check .\r\nRunning command:     make clean\r\nRunning command:     /usr/share/clang/scan-build-3.5/scan-build -k -plist-html --keep-empty -o /tmp/bitcoin-scan-build/ make -j6\r\nstderr/stdout to:    scan_build.log\r\nThis might take a few minutes...\r\nDone.\r\nResults in:          /tmp/bitcoin-scan-build/2017-01-25-140349-11169-1\r\n\r\n--------------------------------------------------------------------------------\r\nAn issue has been found in bench/bench.cpp:97:52\r\nType:         Division by zero\r\nDescription:  Division by zero\r\n\r\n0: bench/bench.cpp:93:5 - The value 0 is assigned to field 'count'\r\n1: bench/bench.cpp:97:52 - Division by zero\r\n--------------------------------------------------------------------------------\r\nAn issue has been found in ./src/ecmult_gen_impl.h:153:5\r\nType:         Dead assignment\r\nDescription:  Value stored to 'bits' is never read\r\n\r\n0: ./src/ecmult_gen_impl.h:153:5 - Value stored to 'bits' is never read\r\n--------------------------------------------------------------------------------\r\nAn issue has been found in qt/paymentrequest.pb.cc:51:24\r\nType:         Called C++ object pointer is null\r\nDescription:  Called C++ object pointer is null\r\n\r\n0: qt/paymentrequest.pb.cc:47:3 - 'file' initialized here\r\n1: qt/paymentrequest.pb.cc:50:3 - Assuming pointer value is null\r\n2: qt/paymentrequest.pb.cc:51:24 - Called C++ object pointer is null\r\n--------------------------------------------------------------------------------\r\nFull details can be seen in a browser by running:\r\n    $ /usr/share/clang/scan-view-3.5/scan-view /tmp/bitcoin-scan-build/2017-01-25-140349-11169-1\r\n--------------------------------------------------------------------------------\r\n*** Static analysis issues found!\r\n```\r\n\r\n\r\nTthe first issue is fixed by PR #9547, the second looks like a trivial fix in secp256k1, and the third is a clear false-positive that is fixed in clang versions 3.9.0+. This output is from a run with clang 3.5.0 and all versions I tried (all of 3.4.0 through 3.9.1) return the same two real issues and no additional false-positives.\r\n\r\nThere are additional, stricter plugins for clang's checking but this script doesn't invoke them. It is sticking to only the defaults for now. Presumably false-positives become more frequent as the strictness increases. Seeing as there doesn't appear to be anything too strange at this baseline level of checking, eventual inclusion in CI appears to be a viable idea.",
   "closed_at" : "2017-02-02T09:00:44Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 11,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9632/comments",
   "created_at" : "2017-01-25T21:53:17Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9632/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/9632",
   "id" : 203233314,
   "labels" : [
      {
         "color" : "ffffee",
         "default" : false,
         "id" : 231994551,
         "name" : "Scripts and tools",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9632/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 9632,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/9632.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9632",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/9632.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9632"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Add clang_static_analysis.py to help automate static analysis runs",
   "updated_at" : "2017-02-02T09:00:44Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9632",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/20916903?v=3",
      "events_url" : "https://api.github.com/users/isle2983/events{/privacy}",
      "followers_url" : "https://api.github.com/users/isle2983/followers",
      "following_url" : "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url" : "https://api.github.com/users/isle2983/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/isle2983",
      "id" : 20916903,
      "login" : "isle2983",
      "organizations_url" : "https://api.github.com/users/isle2983/orgs",
      "received_events_url" : "https://api.github.com/users/isle2983/received_events",
      "repos_url" : "https://api.github.com/users/isle2983/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/isle2983/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/isle2983"
   }
}
