[
   {
      "body" : "I'm not 100% sure if we want this. If we, we would need at least to updated the `listsinceblock`'s RPC help message to mention that if one requests tx's from a block outside the main-chain, that the result will also contain transactions not in the main chain.",
      "created_at" : "2017-01-24T08:01:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274734514",
      "id" : 274734514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T08:01:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274734514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli Updated the help output. I am not sure what the reasons for not wanting this are, unless you're referring to resource consumption. I think it's a rare (but important) enough case to warrant it.\r\n\r\nIt would definitely make it easier for RPC applications checking the validity of existing transactions to explicitly provide these when a reorg affects them. The only other alternative right now is to keep a list of transactions with confirmations less than some arbitrary number (100) and to loop through these every time a reorg is encountered to ensure they're actually still present.\r\n\r\nEdit: one concern of my own is whether a naive implementation would ignore the confirmations value and simply think the transaction existed in the chain, even though the opposite is the case. I wondered if maybe a different key for the returned results should be used, e.g. \"reorged\" or something. I.e. you would get `{\"transactions\": [list of txs that changed], \"reorged\": [list of txs that disappeared], \"lastblock\": <hash>}`...",
      "created_at" : "2017-01-24T08:11:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274736218",
      "id" : 274736218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T09:18:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274736218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@kallewoof: I missed the point that if you pass in an orphan block to list since, you also get the transactions upwards the chain-fork on the main chain. At first sight, I though you get only tx from the re-orged-off chain in that case.\r\n\r\nConcept ACK (and I think it would be clever to list them in an extra array element `reorged:[]`.",
      "created_at" : "2017-01-24T12:59:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274796547",
      "id" : 274796547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T12:59:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274796547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli Gotcha. I updated the OP to clarify that it's also including transactions from the fork point to the active chain tip. I also moved the off chain transactions into a new 'reorged' array. (f501acc & 461d5a3)",
      "created_at" : "2017-01-24T13:24:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-274801494",
      "id" : 274801494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-24T13:24:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/274801494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97649800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97649800"
         }
      },
      "body" : "I think it would be helpful to add a comment about -depth here. I was staring at this a long time to figure out how it worked. Comment could say: \"Pass -depth as minDepth to prevent any filtering in ListTransactions. (Works because tx can only conflict with transactions after pindex, so GetDepthInMainChain will always return at least (1-depth)).\"",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-24T21:03:46Z",
      "diff_hunk" : "@@ -1729,6 +1730,25 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             ListTransactions(tx, \"*\", 0, true, transactions, filter);\n     }\n \n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    while (paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx)\n+        {\n+            if (pwalletMain->mapWallet.count(tx->GetHash()))\n+            {\n+                ListTransactions(pwalletMain->mapWallet[tx->GetHash()], \"*\", -depth, true, transactions, filter);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97649800",
      "id" : 97649800,
      "original_commit_id" : "fff58755318c5654d510eb5a5b3482a296eff7e7",
      "original_position" : 36,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97649800",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652282"
         }
      },
      "body" : "Would s/back to the fork point/from blockhash back to the fork point/ to clarify, because it sounds to me like this is referring to transactions between the active tip and the fork point (making the rest of the sentence confusing).",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-24T21:14:15Z",
      "diff_hunk" : "@@ -1641,7 +1641,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     if (request.fHelp)\n         throw runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet back to the fork point are included, as well as those from \\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652282",
      "id" : 97652282,
      "original_commit_id" : "0c3d1f56f38f7a6cc7fb248804c8c88e53da9c6e",
      "original_position" : 6,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652282",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652701"
         }
      },
      "body" : "Need documentation update to accompany this.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-24T21:16:20Z",
      "diff_hunk" : "@@ -1756,6 +1757,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"transactions\", transactions));\n+    ret.push_back(Pair(\"reorged\", reorged));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97652701",
      "id" : 97652701,
      "original_commit_id" : "f501acc7b313c309d327546736da5461ea483127",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97652701",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97654691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97654691"
         }
      },
      "body" : "Really sending from node 1  here (even if key originally comes from node 2)",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-24T21:26:03Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97654691",
      "id" : 97654691,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 56,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97654691",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97655014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97655014"
         }
      },
      "body" : "unused variable",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-24T21:27:38Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        tmp = self.nodes[0].gettransaction(txid1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97655014",
      "id" : 97655014,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 91,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97655014",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97656509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97656509"
         }
      },
      "body" : "Maybe condense this block to a single line, and add a check for txid2 (untested)\r\n\r\n```\r\nassert_equal(any(tx['txid'] == txid1 for tx in lsbres['reorged']), True)\r\nassert_equal(any(tx['txid'] == txid2 for tx in lsbres['transactions']), True)\r\n```",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-24T21:34:54Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        tmp = self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97656509",
      "id" : 97656509,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 95,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18266370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97656509",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97709529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97709529"
         }
      },
      "body" : "@ryanofsky Ahh, nice! I didn't know about `any()`.\r\n\r\nSince txid2 is not related to nodes[0], it will not list it anywhere so that second assert_equal will not be true.\r\n\r\nThanks for all the feedback! I believe everything you suggested is in 9caa0ec & 131df5a.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-25T04:56:54Z",
      "diff_hunk" : "@@ -76,5 +76,98 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx0 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx1 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx0 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[2] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(7)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        tmp = self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97709529",
      "id" : 97709529,
      "original_commit_id" : "461d5a37a3d83edbeedb701ed207bc14412dee0d",
      "original_position" : 95,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18326657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97709529",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97799838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97799838"
         }
      },
      "body" : "Maybe change tx0 and tx1 to tx1 and tx2 to match code. Also code is generating 6 and 7 blocks instead of 3 and 4, so maybe that could be changed to match the example.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-25T15:18:07Z",
      "diff_hunk" : "@@ -76,5 +76,93 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx0]   bb1 [tx1]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97799838",
      "id" : 97799838,
      "original_commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "original_position" : 20,
      "path" : "qa/rpc-tests/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 18420780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97799838",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97802387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97802387"
         }
      },
      "body" : "Would remove parentheses since (at minimum -depth) is the important part. Also, technically I believe the minimum is 1-depth. Maybe:\r\n\r\n```\r\n// Use -depth as minDepth parameter to ListTransactions to prevent incoming\r\n// transactions from being filtered. These transactions have negative\r\n// confirmations, but always greater than -depth.\r\n```\r\n",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-25T15:28:02Z",
      "diff_hunk" : "@@ -1729,11 +1735,34 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             ListTransactions(tx, \"*\", 0, true, transactions, filter);\n     }\n \n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue reorged(UniValue::VARR);\n+    while (paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx)\n+        {\n+            if (pwalletMain->mapWallet.count(tx->GetHash()))\n+            {\n+                // Use -depth as minDepth parameter to ListTransactions, as these transactions have\n+                // negative (at minimum -depth) confirmations.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r97802387",
      "id" : 97802387,
      "original_commit_id" : "131df5adebca61733ff3a29705140799c16a6294",
      "original_position" : 61,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18423488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97802387",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@ryanofsky Thanks for all the feedback! Updated.",
      "created_at" : "2017-01-25T22:47:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-275257452",
      "id" : 275257452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-25T22:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/275257452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Concept ACK.",
      "created_at" : "2017-01-26T07:19:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-275322827",
      "id" : 275322827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-26T07:19:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/275322827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r98338381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/98338381"
         }
      },
      "body" : "I dont believe this prevents listing transactions which were on both sides of the fork? I'm pretty sure we dont want to list such transactions in a \"reorged\" list.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-01-28T20:09:46Z",
      "diff_hunk" : "@@ -1729,11 +1735,35 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             ListTransactions(tx, \"*\", 0, true, transactions, filter);\n     }\n \n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue reorged(UniValue::VARR);\n+    while (paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx)\n+        {\n+            if (pwalletMain->mapWallet.count(tx->GetHash()))\n+            {\n+                // Use -depth as minDepth parameter to ListTransactions to prevent incoming\n+                // transactions from being filtered. These transactions have negative\n+                // confirmations, but always greater than -depth.\n+                ListTransactions(pwalletMain->mapWallet[tx->GetHash()], \"*\", -depth, true, reorged, filter);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r98338381",
      "id" : 98338381,
      "original_commit_id" : "d92496cd4d044a248b69e8df4037860221eecc4b",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 18980178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/98338381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt I guess it comes down to what the user expects. I personally expected listsinceblock to show me anything I needed to keep an updated score of what's going on since the given block. In that sense, not showing a transaction vanishing would probably be considered a bug.\r\n\r\nRegarding showing an existing transaction in both reorged and transactions, I patched this by ensuring that any tx shown from the main chain is skipped over in the reorged list. See the new `test_double_send` test.",
      "created_at" : "2017-01-30T01:59:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-275965701",
      "id" : 275965701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-30T01:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/275965701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "I agree with Matt, this isn't a bugfix, it's feature :) \r\n\r\nI think I'm in favor of adding this. I would be more supportive of naming them `replaced` rather than reorged if I understand the semantics properly. Strictly speaking, I'd say a reorged txn is any transaction that was between the old tip and the fork point?\r\n\r\nI would also think maybe making this information available with a default false parameter may be a good idea to introduce less changes for current users/legacy code.",
      "created_at" : "2017-01-30T08:45:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-276006681",
      "id" : 276006681,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-30T08:45:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/276006681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "@JeremyRubin Changed as you said, except setting default of `include_replaced` to `true` as I think that will be the most useful case.",
      "created_at" : "2017-01-30T09:05:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-276010275",
      "id" : 276010275,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-30T09:05:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/276010275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Moving milestone to 0.15 as this was re-classified as a feature and the feature freeze is long past.",
      "created_at" : "2017-01-30T11:32:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-276040284",
      "id" : 276040284,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-01-30T11:32:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/276040284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99217146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99217146"
         }
      },
      "body" : "Not sure this needs to be optional...?",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-02T20:53:33Z",
      "diff_hunk" : "@@ -1640,12 +1657,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_replaced )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet from blockhash back to the fork point are included in the \\\"replaced\\\" array.\\n\"\n+            \"In addition, transactions from the fork point up to the tip of the active chain are included in \\\"transactions\\\".\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n             \"2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n             \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\"\n+            \"4. include_replaced:        (bool, optional, default=true) Show transactions that were replaced due to a reorg in the \\\"replaced\\\" array\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99217146",
      "id" : 99217146,
      "original_commit_id" : "a7d1e2a37d3573e2a4ed9e9a7edb2e510ad24266",
      "original_position" : 66,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 19887655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99217146",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99218487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99218487"
         }
      },
      "body" : "Why do we need `ListTransactions`'s return value? If it doesn't get inserted here, it won't later-on either, right?",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-02T21:00:08Z",
      "diff_hunk" : "@@ -1717,23 +1741,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_replaced = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_replaced)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99218487",
      "id" : 99218487,
      "original_commit_id" : "a7d1e2a37d3573e2a4ed9e9a7edb2e510ad24266",
      "original_position" : 119,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 19887655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99218487",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99218671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99218671"
         }
      },
      "body" : "IMO this PR doesn't need to modify `ListTransactions`, and this ought to be move to a separate PR.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-02T21:01:06Z",
      "diff_hunk" : "@@ -1334,12 +1334,26 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+/**\n+ * List transactions based on the given criteria. If the criteria applied in\n+ * reference to being sent or received (if the ret UniValue array was appended\n+ * to), the function returns true, otherwise false is returned.\n+ *\n+ * @param  wtx        The wallet transaction.\n+ * @param  strAccount The account, if any, or \"*\" for all.\n+ * @param  nMinDepth  The minimum confirmation depth.\n+ * @param  fLong      Whether to include the JSON version of the transaction.\n+ * @param  ret        The UniValue into which the result is stored.\n+ * @param  filter     The \"is mine\" filter bool.\n+ * @return            true if appends were made to ret, false otherwise.\n+ */\n+bool ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99218671",
      "id" : 99218671,
      "original_commit_id" : "a7d1e2a37d3573e2a4ed9e9a7edb2e510ad24266",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 19887655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99218671",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99221063"
         }
      },
      "body" : "For the case where tx0 is in reorged and main chain both (see `test_double_send`), both versions of the transaction will appear in the results (once in 'transactions' and once in 'replaced'). To prevent that, I check if `ListTransactions` appended to the transactions array -- if it did, I need to not include in replaced.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-02T21:13:14Z",
      "diff_hunk" : "@@ -1334,12 +1334,26 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+/**\n+ * List transactions based on the given criteria. If the criteria applied in\n+ * reference to being sent or received (if the ret UniValue array was appended\n+ * to), the function returns true, otherwise false is returned.\n+ *\n+ * @param  wtx        The wallet transaction.\n+ * @param  strAccount The account, if any, or \"*\" for all.\n+ * @param  nMinDepth  The minimum confirmation depth.\n+ * @param  fLong      Whether to include the JSON version of the transaction.\n+ * @param  ret        The UniValue into which the result is stored.\n+ * @param  filter     The \"is mine\" filter bool.\n+ * @return            true if appends were made to ret, false otherwise.\n+ */\n+bool ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221063",
      "id" : 99221063,
      "original_commit_id" : "a7d1e2a37d3573e2a4ed9e9a7edb2e510ad24266",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 19891711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99221063",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99221347"
         }
      },
      "body" : "Me neither. It was mostly suggested as a way for legacy code to cope better, but only really crappy legacy code (that would break when a new key was added to an existing dictionary) would be affected I guess.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-02T21:14:38Z",
      "diff_hunk" : "@@ -1640,12 +1657,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_replaced )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet from blockhash back to the fork point are included in the \\\"replaced\\\" array.\\n\"\n+            \"In addition, transactions from the fork point up to the tip of the active chain are included in \\\"transactions\\\".\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n             \"2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n             \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\"\n+            \"4. include_replaced:        (bool, optional, default=true) Show transactions that were replaced due to a reorg in the \\\"replaced\\\" array\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221347",
      "id" : 99221347,
      "original_commit_id" : "a7d1e2a37d3573e2a4ed9e9a7edb2e510ad24266",
      "original_position" : 66,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 19892012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99221347",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99221465"
         }
      },
      "body" : "See above case with a tx being sent on both chains.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-02T21:15:07Z",
      "diff_hunk" : "@@ -1717,23 +1741,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_replaced = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_replaced)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r99221465",
      "id" : 99221465,
      "original_commit_id" : "a7d1e2a37d3573e2a4ed9e9a7edb2e510ad24266",
      "original_position" : 119,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 19892117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/99221465",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "It occurs to me that the key `\"replaced\"` may not be ideal, since there is no guarantee these transactions are now conflicted and won't get re-mined. Perhaps `\"removed\"`?",
      "created_at" : "2017-02-10T07:45:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-278878727",
      "id" : 278878727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-10T07:45:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278878727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "I tried to find actual cases where this happened, but had a hard time finding a case that wasn't the cause of a double spend. It would require that the transaction is NOT in the mempool of the node, or it would appear as normal in `transactions`. There may be a case I haven't thought of though, so you may be right, `removed` is a safer bet for sure.",
      "created_at" : "2017-02-10T08:22:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-278884664",
      "id" : 278884664,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-10T08:53:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278884664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100496476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100496476"
         }
      },
      "body" : "\"replaced\"",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-10T09:18:18Z",
      "diff_hunk" : "@@ -1654,12 +1671,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_replaced )\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100496476",
      "id" : 100496476,
      "original_commit_id" : "464f557da97cd61642874158a36a836aa48f6dbc",
      "original_position" : 58,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 21205336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100496476",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100496490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100496490"
         }
      },
      "body" : "\"replaced\"",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-10T09:18:25Z",
      "diff_hunk" : "@@ -1654,12 +1671,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_replaced )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet from blockhash back to the fork point are included in the \\\"replaced\\\" array.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100496490",
      "id" : 100496490,
      "original_commit_id" : "464f557da97cd61642874158a36a836aa48f6dbc",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 21205336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100496490",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100543111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100543111"
         }
      },
      "body" : "Done",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-10T14:20:49Z",
      "diff_hunk" : "@@ -1654,12 +1671,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_replaced )\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100543111",
      "id" : 100543111,
      "original_commit_id" : "464f557da97cd61642874158a36a836aa48f6dbc",
      "original_position" : 58,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 21255282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100543111",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100543125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100543125"
         }
      },
      "body" : "Done",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-10T14:20:53Z",
      "diff_hunk" : "@@ -1654,12 +1671,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_replaced )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet from blockhash back to the fork point are included in the \\\"replaced\\\" array.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r100543125",
      "id" : 100543125,
      "original_commit_id" : "464f557da97cd61642874158a36a836aa48f6dbc",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 21255298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100543125",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@luke-jr Sorry about sloppiness, I thought I got all of them in the initial two squashme's.",
      "created_at" : "2017-02-10T14:21:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-278952897",
      "id" : 278952897,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-10T14:21:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278952897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "utACK ad57cefb6583ab669d8da21d0bf808e2d38ef04a.\r\n\r\nComparing against previously ACKed 461d5a37a3d83edbeedb701ed207bc14412dee0d, the both-sides dedup code and the new API tweaks and comments looked good.",
      "created_at" : "2017-02-23T21:57:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282134568",
      "id" : 282134568,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-23T21:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282134568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102971565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102971565"
         }
      },
      "body" : "Maybe instead of this and the next line,\r\n\"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\r\n\"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\"",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T16:05:06Z",
      "diff_hunk" : "@@ -1654,12 +1671,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_removed )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet from blockhash back to the fork point are included in the \\\"removed\\\" array.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102971565",
      "id" : 102971565,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23747466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102971565",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102975099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102975099"
         }
      },
      "body" : "Hmm, not sure how I feel about this. For pruning nodes, it may be more useful to return a partial list and a message indicating the results are incomplete rather than throw wholesale.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T16:20:47Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102975099",
      "id" : 102975099,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23747466,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102975099",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102991590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102991590"
         }
      },
      "body" : "Makes sense. Changed.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T17:36:09Z",
      "diff_hunk" : "@@ -1654,12 +1671,15 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n-            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_removed )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+            \"If \\\"blockhash\\\" is no longer a part of the main chain, all transactions affecting the node wallet from blockhash back to the fork point are included in the \\\"removed\\\" array.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102991590",
      "id" : 102991590,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 60,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23768813,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102991590",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102994237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102994237"
         }
      },
      "body" : "Isn't that slightly dangerous? I mean, if people don't realize the node only has a subset of all blocks in some cases, they might miss the \"partial\" flag and never realize they potentially missed something. Even if it's their own node. Someone could even time an attack based on that.\r\n\r\nTo take a step back, the situation here is that some software which uses listsinceblock believes the chain is on one chain when it is on another one. Presuming this fork is long, the node ends up pruning beyond the fork point. And/or, the node ends up pruning out the alt chain that was deactivated. It feels like the caller (requester) should blow up at this point and either require manual assistance, or fall back to scanning over all unsafe tx's, effectively \"resetting\" to the current chain tip.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T17:49:59Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102994237",
      "id" : 102994237,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23771633,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102994237",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102995601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102995601"
         }
      },
      "body" : "True. I'm not sure what the right answer here is...clearly we dont want it to be so easy to miss transactions, but on the other hand, it sucks to not have the option here. A different approach might be to iterate over mapWallet and find all transactions which have a hash of a disconnected block, which I believe is correct as long as the block was, at some point, on the active chain, though might not be if the user is calling listsinceblock on a block that was never the active chain.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T17:56:39Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102995601",
      "id" : 102995601,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23773056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102995601",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102999126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102999126"
         }
      },
      "body" : "Hm.. It almost feels like I can just get the block headers by iterating `altchainindex` up to the fork point and put those in a set and find the removed transactions in the initial mapWallet iteration. That way there's no need to read in the blocks at all and can get rid of `listed` as well. Will try that, thanks for the nudge!",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T18:14:51Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r102999126",
      "id" : 102999126,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23776768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102999126",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103012427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103012427"
         }
      },
      "body" : "Yea, I was heasitant to recommend doing it alone because I'm not confident about how safe it is to make sure the wallet's data is always right, will have to think more and review once you have it coded :).",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T19:17:45Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103012427",
      "id" : 103012427,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23790621,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103012427",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103015587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103015587"
         }
      },
      "body" : "It seems reasonable, but I'm a bit stuck on how to get the block hash for a tx that is not in the main chain. It seems like CMerkleTx's blockHash uint256 is only set if in the main chain...",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T19:32:21Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103015587",
      "id" : 103015587,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23793840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103015587",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103039369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103039369"
         }
      },
      "body" : "Oh, sorry, you're right...hashBlock is always something in the main chain (so you would only be able to print conflicted transactions and not transactions which went back to 0conf).",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T21:43:15Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103039369",
      "id" : 103039369,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23818845,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103039369",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103052921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103052921"
         }
      },
      "body" : "Options:\r\nÃ¢ÂÂ . Try to respect the path taken which requires the blocks as removed transactions do not track the block they were in, meaning if a node prunes out the block, the operation fails.\r\nÃ¢ÂÂ¡. Ignore the path and simply show all removed transactions between the fork point and the chain tip, which requires NO loading of blocks (faster), but means the caller will get irrelevant removed transactions in reorgs it was never aware of to begin with.\r\n\r\nPros and cons with Ã¢ÂÂ :\r\n1. Pro: Caller gets exactly what they need to update their view of the chain state, and is not confused by irrelevant stuff.\r\n2. Con: Slower due to block read requirement.\r\n3. Con: Fails if blocks involved in the reorg were pruned out.\r\n\r\nPros and cons with Ã¢ÂÂ¡:\r\n1. Pro: Faster due to no block read.\r\n2. Pro: Works fine even if involved blocks were pruned.\r\n3. Con: Does not distinguish between the various forks involved.\r\n",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T23:12:05Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103052921",
      "id" : 103052921,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23833050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103052921",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103053978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103053978"
         }
      },
      "body" : "There is a second con to Ã¢ÂÂ¡ - it cannot list transactions which went from confirmed to 0-conf, as they now have a hashBlock of null, which I think is somewhat of a blocker to using that approach. Another option is to have an optional parameter (default to off) which allows you to get partial-removed-data.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-24T23:21:42Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103053978",
      "id" : 103053978,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23834140,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103053978",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103066570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103066570"
         }
      },
      "body" : "A 0-conf tx will be in the mempool right? Presuming it is, it will in fact be in the transactions array (I think).\r\n\r\nThe allow partial parameter makes sense to me. I think I'll do that for starters until we make a decision (which may be another PR).",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-25T01:56:06Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103066570",
      "id" : 103066570,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23846700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103066570",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103067420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103067420"
         }
      },
      "body" : "That isnt a guarantee, because mempool may be limited.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-25T02:16:06Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103067420",
      "id" : 103067420,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23847514,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103067420",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt I didn't think about that. \r\n\r\nBut would the wallet actually do that to its own transaction? Throw out of mempool I mean. ",
      "created_at" : "2017-02-25T02:55:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282454740",
      "id" : 282454740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-25T02:55:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282454740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "s/wallet/node/",
      "created_at" : "2017-02-25T02:56:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282454782",
      "id" : 282454782,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-25T02:56:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282454782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "The wallet doesn't control the mempool, and the mempool behaves\nindependently. Anything else would be a privacy leak, as the mempool is\nobservable through the P2P network.\n",
      "created_at" : "2017-02-25T02:58:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282454883",
      "id" : 282454883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-25T02:58:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282454883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "IMO if the stale block is pruned, throwing an exception is the right thing to do. The caller should be able to figure out its own rewinding back to the last common block.\r\n\r\n(P.S. Perhaps the tests here should cover the case where there are three potential-chains involved?)",
      "created_at" : "2017-02-25T03:40:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282457011",
      "id" : 282457011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-25T03:40:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282457011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103069994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103069994"
         }
      },
      "body" : "No `else for` please.\r\n\r\n```C++\r\n} else {\r\n    for (const CTransactionRef& tx : block.vtx) {\r\n```",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-02-25T03:43:57Z",
      "diff_hunk" : "@@ -1734,23 +1762,62 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+    bool allow_partial = (request.params.size() > 4 && request.params[4].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    bool partial = false;\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            partial = true;\n+            if (!allow_partial)\n+            {\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+            }\n+        }\n+        else for (const CTransactionRef& tx : block.vtx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r103069994",
      "id" : 103069994,
      "original_commit_id" : "82184f9ac720a5218d228fea000d6ebb8027fb69",
      "original_position" : 152,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 23849818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103069994",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Good point about testing 3 chains. Will add a test like that.",
      "created_at" : "2017-02-25T17:13:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282497572",
      "id" : 282497572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-25T17:13:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282497572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "I just realized the split network feature in the QA framework only supports one split (2 chains) right now. I think I'll make a separate PR to extend that functionality and add more tests for 3+ chains after this is merged.",
      "created_at" : "2017-02-25T18:06:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282501295",
      "id" : 282501295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-25T18:06:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282501295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Squashed commits. Unsquashed branch preserved at https://github.com/kallewoof/bitcoin/tree/listsinceblock-include-lost-txs-unsquashed for comparison.",
      "created_at" : "2017-02-26T01:10:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282524695",
      "id" : 282524695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-26T01:10:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282524695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "> I just realized the split network feature in the QA framework only\nsupports one split (2 chains) right now. I think I'll make a separate PR to\nextend that functionality and add more tests for 3+ chains after this is\nmerged.\n\nYes, please. Also make sure the extended functionality does not depend on\nthe number of nodes in regtest being exactly 4.\n\nOn Sun, Feb 26, 2017 at 2:10 AM, kallewoof <notifications@github.com> wrote:\n\n> Squashed commits. Unsquashed branch preserved at\n> https://github.com/kallewoof/bitcoin/tree/listsinceblock-\n> include-lost-txs-unsquashed for comparison.\n>\n> Ã¢ÂÂ\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282524695>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AGGmv98uWx_PRJaQ16WpuPIQGTvhEo8Wks5rgNEBgaJpZM4Lr4lC>\n> .\n>\n",
      "created_at" : "2017-02-26T12:09:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282551531",
      "id" : 282551531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-26T12:09:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282551531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "@MarcoFalke See #9872.",
      "created_at" : "2017-02-27T05:24:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282631102",
      "id" : 282631102,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-27T05:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282631102",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Concept ACK. Agree with @luke-jr in throwing the exception.",
      "created_at" : "2017-02-27T20:43:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-282846791",
      "id" : 282846791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-02-27T20:43:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282846791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Rebased.",
      "created_at" : "2017-03-22T19:37:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-288514848",
      "id" : 288514848,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-03-22T19:37:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288514848",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111197184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111197184"
         }
      },
      "body" : "Is it possible to use the sendtoaddress RPC here instead of {create,sign,send}rawtransaction? The rawtransaction RPCs force you to explicitly do things like set change addresses and make assumptions about fee rates, that could break this test in future.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:24:35Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111197184",
      "id" : 111197184,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 66,
      "path" : "test/functional/listsinceblock.py",
      "position" : 90,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111197184",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111197723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111197723"
         }
      },
      "body" : "Please don't use `print()` calls in test cases. Either remove the line entirely, or add a `self.log.debug()` call if you think this information will be useful for debugging in future.\r\n\r\nThere are several other instances of this below. I won't add additional review comments.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:26:49Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111197723",
      "id" : 111197723,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 84,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111197723",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111198285"
         }
      },
      "body" : "nit: no need for an assert_equal(True, True) here. Instead:\r\n```python\r\nassert any(tx['txid'] == txid1 for tx in lsbres['removed']), \"txid1 not found in listsinceblock removed list\"\r\n```",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:29:17Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198285",
      "id" : 111198285,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 95,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111198285",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111198874"
         }
      },
      "body" : "again, no need to assert_equal(False, False). Instead:\r\n```python\r\nassert 'removed' not in lsbres2\r\n```\r\nIn general, we use assert_equal when comparing two variables because it prints the values of those variables, ie assert_equal(x, y) will print the values of x and y if they're not equal, but assert x == y will not print the values of x and y. If you're asserting the truthiness of one variable, you can just assert on that explicitly.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:31:49Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)\n+        assert_equal('removed' in lsbres2, False)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198874",
      "id" : 111198874,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 99,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111198874",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111198985"
         }
      },
      "body" : "Great docstrings :+1: ",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:32:17Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)\n+        assert_equal('removed' in lsbres2, False)\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is not included in 'removed' because it was not removed.\n+        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+           3 (aa1, aa2, aa3).\n+        '''",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111198985",
      "id" : 111198985,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 124,
      "path" : "test/functional/listsinceblock.py",
      "position" : 145,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111198985",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111199231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111199231"
         }
      },
      "body" : "as above for assert_equal(False, False). There are more instances of this below. I won't add additional comments.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:33:09Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)\n+        assert_equal('removed' in lsbres2, False)\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is not included in 'removed' because it was not removed.\n+        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+           3 (aa1, aa2, aa3).\n+        '''\n+\n+        assert_equal(self.is_network_split, False)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111199231",
      "id" : 111199231,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 126,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111199231",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111199997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111199997"
         }
      },
      "body" : "If you're expecting this to work, can you assert on the returned value?",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:36:32Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111199997",
      "id" : 111199997,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 91,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111199997",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111200323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111200323"
         }
      },
      "body" : "nit: I'd prefer `run_test()` to appear at the top of the test case, with the sub-tests below. When I come to read a test-case, it flows better for me if run test (which is called first) appears at the top.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:38:08Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)\n+        assert_equal('removed' in lsbres2, False)\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is not included in 'removed' because it was not removed.\n+        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+           3 (aa1, aa2, aa3).\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # create and sign a transaction\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        signedtxres = self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n+        assert_equal(signedtxres['complete'], True)\n+\n+        signedtx = signedtxres['hex']\n+\n+        # send from nodes[1]; this will end up in aa1\n+        txid1 = self.nodes[1].sendrawtransaction(signedtx)\n+\n+        # generate bb1-bb2 on right side\n+        self.nodes[2].generate(2)\n+\n+        # send from nodes[2]; this will end up in bb3\n+        txid2 = self.nodes[2].sendrawtransaction(signedtx)\n+\n+        assert_equal(txid1, txid2)\n+        print('txid =', txid1)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(2)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1 in transactions\n+        # but not in removed\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['transactions']), True)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), False)\n+\n+        # find transaction and ensure confirmations is valid\n+        for tx in lsbres['transactions']:\n+            if tx['txid'] == txid1:\n+                assert_equal(tx['confirmations'], 2)\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111200323",
      "id" : 111200323,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 186,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111200323",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111201429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111201429"
         }
      },
      "body" : "nit: it'd be nice to test this branch in the functional test, both with and without the partial flag.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:42:19Z",
      "diff_hunk" : "@@ -1792,22 +1821,64 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+    bool allow_partial = (request.params.size() > 4 && request.params[4].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(pairWtx.first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    bool partial = false;\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111201429",
      "id" : 111201429,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 144,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111201429",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111202013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111202013"
         }
      },
      "body" : ":+1: comments!",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-12T16:44:20Z",
      "diff_hunk" : "@@ -1397,12 +1397,27 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+/**\n+ * List transactions based on the given criteria. If the criteria applied in\n+ * reference to being sent or received (if the ret UniValue array was appended\n+ * to), the function returns true, otherwise false is returned.\n+ *\n+ * @param  pwallet    The wallet.\n+ * @param  wtx        The wallet transaction.\n+ * @param  strAccount The account, if any, or \"*\" for all.\n+ * @param  nMinDepth  The minimum confirmation depth.\n+ * @param  fLong      Whether to include the JSON version of the transaction.\n+ * @param  ret        The UniValue into which the result is stored.\n+ * @param  filter     The \"is mine\" filter bool.\n+ * @return            true if appends were made to ret, false otherwise.\n+ */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111202013",
      "id" : 111202013,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 32425779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111202013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "I've only reviewed the test code. It's a shame that this makes the listsinceblock test runtime increase (from 32s to 72s on recent travis runs), although #10198 and  #10082 will help with that.\r\n\r\nOne design comment: I'm not convinced it's a good idea to *not* including duplicate transactions in the `removed` array. I think that could be a trap for users. My expectation would be that I could periodically run this RPC to get the list of transactions since last time I ran the command (by passing in the `lastblock` value from the previous call). I'd expect to be able to keep a set of transactions, adding the `transactions` array to my set and subtracting the `removed` array. If you don't include the duplicate transactions in the `removed` array, then the user might end up with more than one instance of a transaction in their set.\r\n\r\nObviously the user should look out for duplicates and not add them to their set, but if they're doing something daft like keying off the blockhash and txid, then they'll get into this inconsistent state.\r\n\r\nI don't think that's enough to block this PR, but I think it's considering.",
      "created_at" : "2017-04-12T17:28:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-293650568",
      "id" : 293650568,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-12T17:28:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293650568",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111298627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111298627"
         }
      },
      "body" : "Unfortunately `sendtoaddress` doesn't let me choose the UTXO so I don't think I can use it here.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-13T02:10:14Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111298627",
      "id" : 111298627,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 66,
      "path" : "test/functional/listsinceblock.py",
      "position" : 90,
      "pull_request_review_id" : 32534069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111298627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111298694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111298694"
         }
      },
      "body" : "Removed all `print()`s. They seemed vaguely useful but not enough to warrant keeping them around long term.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-13T02:11:09Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111298694",
      "id" : 111298694,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 84,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32534135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111298694",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111299791"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111299791"
         }
      },
      "body" : "If the transaction cannot be gotten, an exception is raised (I swapped the txid out for a random hex below):\r\n```\r\n2017-04-13 02:22:05.191000 TestFramework (ERROR): JSONRPC error\r\nTraceback (most recent call last):\r\n  File \"/Users/karljohan-alm/workspace/bitcoin-kw/test/functional/test_framework/test_framework.py\", line 148, in main\r\n    self.run_test()\r\n  File \"./listsinceblock.py\", line 250, in run_test\r\n    self.test_double_spend()\r\n  File \"./listsinceblock.py\", line 155, in test_double_spend\r\n    self.nodes[0].gettransaction(\"000000000009f75870f0ebe6f317af6928e3a74c676a60a0f11d3eab51c88ff3\")\r\n  File \"/Users/karljohan-alm/workspace/bitcoin-kw/test/functional/test_framework/coverage.py\", line 46, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"/Users/karljohan-alm/workspace/bitcoin-kw/test/functional/test_framework/authproxy.py\", line 153, in __call__\r\n    raise JSONRPCException(response['error'])\r\ntest_framework.authproxy.JSONRPCException: Invalid or non-wallet transaction id (-5)\r\n2017-04-13 02:22:05.193000 TestFramework (INFO): Stopping nodes\r\n2017-04-13 02:22:14.337000 TestFramework (WARNING): Not cleaning up dir /var/folders/b8/znqr8hj918772gfmd875gzgdd3ypz1/T/test5fli8q5i/13217\r\n2017-04-13 02:22:14.337000 TestFramework (ERROR): Test failed. Test logging available at /var/folders/b8/znqr8hj918772gfmd875gzgdd3ypz1/T/test5fli8q5i/13217/test_framework.log\r\n```\r\nAsserting on the returned value is thus not necessary but I'm adding a comment indicating this.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-13T02:23:36Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111299791",
      "id" : 111299791,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 91,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32535244,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111299791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111300106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111300106"
         }
      },
      "body" : "Good idea. Changing.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-13T02:27:02Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)\n+        assert_equal('removed' in lsbres2, False)\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is not included in 'removed' because it was not removed.\n+        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+           3 (aa1, aa2, aa3).\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # create and sign a transaction\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        signedtxres = self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n+        assert_equal(signedtxres['complete'], True)\n+\n+        signedtx = signedtxres['hex']\n+\n+        # send from nodes[1]; this will end up in aa1\n+        txid1 = self.nodes[1].sendrawtransaction(signedtx)\n+\n+        # generate bb1-bb2 on right side\n+        self.nodes[2].generate(2)\n+\n+        # send from nodes[2]; this will end up in bb3\n+        txid2 = self.nodes[2].sendrawtransaction(signedtx)\n+\n+        assert_equal(txid1, txid2)\n+        print('txid =', txid1)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(2)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1 in transactions\n+        # but not in removed\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['transactions']), True)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), False)\n+\n+        # find transaction and ensure confirmations is valid\n+        for tx in lsbres['transactions']:\n+            if tx['txid'] == txid1:\n+                assert_equal(tx['confirmations'], 2)\n+\n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111300106",
      "id" : 111300106,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 186,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 32535541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111300106",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@jnewbery Thanks a lot for the review! I've addressed most of your concerns, except for the nit about testing allow_partial flag.\r\n\r\nRegarding duplicates in `removed`, I'm neutral personally. Allowing duplicates decreases the code size, so I'm all for the switch personally. (Clarification: I changed the code to allow duplicates.)\r\n\r\nUnsquashed (https://github.com/kallewoof/bitcoin/commit/8871340d2aeb5e2e7888430eee0ed358c67c3030 is previous head): https://github.com/kallewoof/bitcoin/tree/listsinceblock-include-lost-txs-unsquashed\r\n- https://github.com/kallewoof/bitcoin/commit/c7adf4aee94c5663826af4b277bca632e4f5cf31 addresses nits\r\n- https://github.com/kallewoof/bitcoin/commit/12831108c0abdc088814a3c3d65c5e75387f05b0 and https://github.com/kallewoof/bitcoin/commit/2475789299304366c86f790fb05de27edea679b6 (test tweak) fixes duplicates; if people oppose this change I can drop these commits easily enough\r\n",
      "created_at" : "2017-04-13T02:49:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-293763145",
      "id" : 293763145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-13T02:57:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293763145",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Do you plan to remove the `allow_partial` so it always throws an exception?",
      "created_at" : "2017-04-17T13:41:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294487572",
      "id" : 294487572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-17T13:41:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294487572",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr I would love to, personally. I wasn't sure if it was the agreed approach, in the end, but more people have agreed about throwing than not, so I'm going to remove it for now.\r\n\r\nEdit: I removed the allow_partial functionality. (The unsquashed results are in the same spot (https://github.com/kallewoof/bitcoin/tree/listsinceblock-include-lost-txs-unsquashed) but since the end result was dropping of commits with some conflict fixes the unsquashed tree still has the allow_partial related commits.)",
      "created_at" : "2017-04-17T13:59:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294490501",
      "id" : 294490501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-17T14:25:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294490501",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111747206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111747206"
         }
      },
      "body" : "@TheBlueMatt I took the liberty to remove he allow_partial flag as I've seen more support for always throwing than for having the flag and only throwing sometimes. The unsquashed tree has everything in it still so it'd be no effort to resurrect this, if you or someone felt strongly enough about it.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-17T14:15:20Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111747206",
      "id" : 111747206,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 33009440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111747206",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111748657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111748657"
         }
      },
      "body" : "I somehow skipped over this one. Fixed in squashed, unsquashed commit is https://github.com/kallewoof/bitcoin/commit/72ec1eaeda81c63a3e22fe0985ec02537082c9eb",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-17T14:24:51Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert_equal(any(tx['txid'] == txid1 for tx in lsbres['removed']), True)\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)\n+        assert_equal('removed' in lsbres2, False)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r111748657",
      "id" : 111748657,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 99,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33010968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/111748657",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Thanks @kallewoof - I don't really mind too much either way. If I were coding this from scratch, I would prefer to show duplicates in removed, but I'm happy to go along with the consensus and since you've already put in the code to hide duplicates, that's also fine.",
      "created_at" : "2017-04-17T14:24:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294495122",
      "id" : 294495122,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-17T14:24:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294495122",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery Duplicates **are** shown in `removed` now. What I removed was a different feature, where a user could pass in an 'allow partial' flag which would prevent the node from throwing an exception if a block couldn't be read (useful for pruned nodes), but several people preferred always throwing.",
      "created_at" : "2017-04-17T14:40:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-294498691",
      "id" : 294498691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-17T14:40:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294498691",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Realized I had missed one `assert_equal(x, false) -> assert not x`.\r\n\r\n[Unsquashed history](https://github.com/kallewoof/bitcoin/commits/listsinceblock-include-lost-txs-unsquashed):\r\n* Mar 23: [1](https://github.com/kallewoof/bitcoin/commit/1a1398a11d9c4ddb1c1dfcff3251e6ecaa161f41) Ã¢ÂÂ [2](https://github.com/kallewoof/bitcoin/commit/f7405744c45cb7ea614b1896c2ac437374130803) Ã¢ÂÂ [3Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/bdd743275d3141abbd3ed21843903df1a6891daa) Ã¢ÂÂ [~~4Ã¢ÂÂ±1~~](https://github.com/kallewoof/bitcoin/commit/021e90136174e6acd77f86c030e593740a407fd0) Ã¢ÂÂ [~~5Ã¢ÂÂ±1~~](https://github.com/kallewoof/bitcoin/commit/f959f77ddbe8355a6636adff40c3e3e0620e052b) Ã¢ÂÂ [6Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/53322778ea82db4cd4c8ac64758e55b24f1f7c38) Ã¢ÂÂ [7Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/8871340d2aeb5e2e7888430eee0ed358c67c3030) \r\n* Apr 13: Ã¢ÂÂ [8Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/c7adf4aee94c5663826af4b277bca632e4f5cf31) Ã¢ÂÂ [9Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/12831108c0abdc088814a3c3d65c5e75387f05b0) Ã¢ÂÂ [10Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/2475789299304366c86f790fb05de27edea679b6) Ã¢ÂÂ [11Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/501dbfeabe83c902c0aa677a15681932e2e1bfed)\r\n* Apr 17: Ã¢ÂÂ [12Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/72ec1eaeda81c63a3e22fe0985ec02537082c9eb)\r\n* Apr 20: Ã¢ÂÂ [13Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/55acfddc1271cd9dee596a80cfd88caac97dac41)\r\n",
      "created_at" : "2017-04-20T03:35:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-295567028",
      "id" : 295567028,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-20T03:59:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295567028",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112462030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112462030"
         }
      },
      "body" : "When adding RPCs or arguments, good advice is to treat null arguments the same as missing arguments: https://github.com/bitcoin/bitcoin/pull/10143#discussion_r112140887\r\n\r\nI think that means this line would become:\r\n\r\n`bool include_removed = (request.params.size() < 4 || request.params[3].isNull() || request.params[3].get_bool());`",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-20T14:07:13Z",
      "diff_hunk" : "@@ -1792,6 +1810,8 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112462030",
      "id" : 112462030,
      "original_commit_id" : "a8c56bf7b765910fb049373655c2823c7f8b6971",
      "original_position" : 74,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 33778509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112462030",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112467036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112467036"
         }
      },
      "body" : "This comment is fine. Alternatively you could assert something like:\r\n\r\n```python\r\nassert self.nodes[0].gettransaction(txid1)['txid'] == txid1, \"gettransaction failed to find txid1 not found\"\r\n```",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-20T14:26:13Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112467036",
      "id" : 112467036,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 91,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33778509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112467036",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112469961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112469961"
         }
      },
      "body" : "Now that you've split this into sub-tests, can you move the lines:\r\n\r\n```python\r\nself.nodes[2].generate(101)\r\nself.sync_all()\r\n```\r\n\r\ninto the `run_test()` function before calling `test_reorg()`. It's best if sub-tests have no shared state between them. You should be able to re-order or skip tests without breaking them, and generating the chain in `test_reorg()` breaks that assumption.\r\n\r\nWe want sub-tests to be as independent as possible so if they break it's easier to debug where the problem is.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-20T14:37:37Z",
      "diff_hunk" : "@@ -14,7 +14,12 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 4\n \n-    def run_test (self):\n+    def run_test(self):\n+        self.test_reorg()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112469961",
      "id" : 112469961,
      "original_commit_id" : "a8c56bf7b765910fb049373655c2823c7f8b6971",
      "original_position" : 6,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33778509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112469961",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112470339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112470339"
         }
      },
      "body" : "`txid2` is unused so you don't need to assign it here.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-20T14:39:14Z",
      "diff_hunk" : "@@ -75,7 +80,176 @@ def run_test (self):\n             if tx['txid'] == senttx:\n                 found = True\n                 break\n-        assert_equal(found, True)\n+        assert found\n+\n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert not self.is_network_split\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert self.is_network_split\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112470339",
      "id" : 112470339,
      "original_commit_id" : "a8c56bf7b765910fb049373655c2823c7f8b6971",
      "original_position" : 92,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33778509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112470339",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112471059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112471059"
         }
      },
      "body" : "consider using named arguments here so it's clear to the reader what the arguments are for (you can also omit the optional `target_confirmations` and `include_watchonly` arguments)",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-20T14:41:53Z",
      "diff_hunk" : "@@ -75,7 +80,176 @@ def run_test (self):\n             if tx['txid'] == senttx:\n                 found = True\n                 break\n-        assert_equal(found, True)\n+        assert found\n+\n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert not self.is_network_split\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert self.is_network_split\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1; if it does not, an exception is\n+        # raised, so the returned value does not need verification\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert any(tx['txid'] == txid1 for tx in lsbres['removed'])\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(lastblockhash, 1, False, False)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112471059",
      "id" : 112471059,
      "original_commit_id" : "a8c56bf7b765910fb049373655c2823c7f8b6971",
      "original_position" : 113,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33778509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112471059",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112473044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112473044"
         }
      },
      "body" : "These variables might warrant their own comments now, since it's not immediately obvious what they're doing:\r\n\r\npindex - transactions from this block onwards should be included in the result. If the specified block was not in the main chain, pindex is the block where the chain forked\r\npaltindex - used to count back from the specified block to the fork point to collect transactions for the removed array.\r\n\r\nYou can probably come up with better wording.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-20T14:48:50Z",
      "diff_hunk" : "@@ -1756,7 +1773,8 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const CBlockIndex *pindex = NULL;\n+    const CBlockIndex* pindex = NULL;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112473044",
      "id" : 112473044,
      "original_commit_id" : "a8c56bf7b765910fb049373655c2823c7f8b6971",
      "original_position" : 56,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 33778509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112473044",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112590340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112590340"
         }
      },
      "body" : "Done - but some tweaking is necessary to make them truly independent of order (e.g. instead of asserting on getbalance()s, should just grab balance and compare). Will not do that work in this PR, but will try to address it asap unless someone else gets to it before me.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-21T00:54:16Z",
      "diff_hunk" : "@@ -14,7 +14,12 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 4\n \n-    def run_test (self):\n+    def run_test(self):\n+        self.test_reorg()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112590340",
      "id" : 112590340,
      "original_commit_id" : "a8c56bf7b765910fb049373655c2823c7f8b6971",
      "original_position" : 6,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33917925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112590340",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112590637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112590637"
         }
      },
      "body" : "Ohh, I didn't realize assert also captured exceptions. Thanks, changed.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-04-21T00:57:02Z",
      "diff_hunk" : "@@ -77,5 +77,183 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+        assert_equal(self.is_network_split, True)\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+        print('txid1 =', txid1)\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        txid2 = self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+        print('txid2 =', txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+        print('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r112590637",
      "id" : 112590637,
      "original_commit_id" : "104095b7db49c322b5f5808ac4e4483316690436",
      "original_position" : 91,
      "path" : "test/functional/listsinceblock.py",
      "position" : null,
      "pull_request_review_id" : 33918223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112590637",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@jnewbery Thanks for feedback! I think I addressed all of the stuff you mentioned. Compare [14Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/fc23dfaa37845327f383d890b83ff63b6ac9bb73) & [15Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/b7dd458485fdbceddbd5776a0fbeeee825aa70c1).\r\n\r\n[[...]](https://github.com/kallewoof/bitcoin/commits/listsinceblock-include-lost-txs-unsquashed):\r\n* Apr 20: Ã¢ÂÂ [13Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/55acfddc1271cd9dee596a80cfd88caac97dac41)\r\n* Apr 21: Ã¢ÂÂ [14Ã¢ÂÂ±1](https://github.com/kallewoof/bitcoin/commit/fc23dfaa37845327f383d890b83ff63b6ac9bb73) Ã¢ÂÂ [15Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/b7dd458485fdbceddbd5776a0fbeeee825aa70c1)",
      "created_at" : "2017-04-21T01:27:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-296003302",
      "id" : 296003302,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-21T01:27:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296003302",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Looks good. ReACK https://github.com/bitcoin/bitcoin/pull/9622/commits/4578a21bc29768e11f56be600b141d81447db7a6",
      "created_at" : "2017-04-28T19:00:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-298080559",
      "id" : 298080559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-04-28T19:00:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298080559",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Rebased due to conflicts.\r\n\r\nEdit: removed some irrelevant asserts that started causing errors in tests. (Not sure why a clean chain with generate(101) would yield 5100 BTC instead of 50, but no matter.)",
      "created_at" : "2017-05-08T04:45:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-299771851",
      "id" : 299771851,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-05-08T05:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299771851",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "> Edit: removed some irrelevant asserts that started causing errors in tests. (Not sure why a clean chain with generate(101) would yield 5100 BTC instead of 50, but no matter.)\r\n\r\nLooks like you've reintroduced the lines:\r\n```python\r\n        self.nodes[2].generate(101)\r\n        self.sync_all()\r\n```\r\ninto the `test_reorg()` function, which means you're now generating 202 blocks (so node 2 now has 102 spendable coinbases = 5100 BTC).\r\n\r\nI think this is just a bad rebase.",
      "created_at" : "2017-05-15T18:18:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-301559797",
      "id" : 301559797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-05-15T18:18:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301559797",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "@jnewbery Ahh, thanks. Yeah, that is obviously it. I am just going to remove the double generate in test_reorg.\r\n\r\n[[...]](https://github.com/kallewoof/bitcoin/commits/listsinceblock-include-lost-txs-unsquashed):\r\n* May 16: Ã¢ÂÂ [16Ã¢ÂÂ±2](https://github.com/kallewoof/bitcoin/commit/954d3572269bbb273b3f1e01089b464d79337af6)\r\n",
      "created_at" : "2017-05-16T00:42:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-301643087",
      "id" : 301643087,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-05-16T00:43:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301643087",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127093329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127093329"
         }
      },
      "body" : "Nit: the `request.params.size() > 0` check is superfluous with this, as the `operator[]` will always return a null UniValue if out of range. (and several other places)",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-12T22:57:22Z",
      "diff_hunk" : "@@ -1727,19 +1744,20 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const CBlockIndex *pindex = NULL;\n+    const CBlockIndex* pindex = NULL;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    const CBlockIndex* paltindex = NULL; // Block index of the specified block, even if it's in a deactivated chain.\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (request.params.size() > 0)\n+    if (request.params.size() > 0 && !request.params[0].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127093329",
      "id" : 127093329,
      "original_commit_id" : "fb17746c45e9f84d7b09d391802ae3d9e3fa2a1e",
      "original_position" : 64,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 49642555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127093329",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127093370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127093370"
         }
      },
      "body" : "Nit: braces on the same line (and many other places).",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-12T22:57:40Z",
      "diff_hunk" : "@@ -1774,11 +1794,35 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n     }\n \n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127093370",
      "id" : 127093370,
      "original_commit_id" : "fb17746c45e9f84d7b09d391802ae3d9e3fa2a1e",
      "original_position" : 108,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 49642555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127093370",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127094098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127094098"
         }
      },
      "body" : "I agree with (1), and not having `allow_partial`. We may want to document that this feature stops working with pruning.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-12T23:03:03Z",
      "diff_hunk" : "@@ -1731,23 +1755,55 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params.size() < 4 || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n+    std::set<uint256> listed;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+        {\n+            if (ListTransactions(tx, \"*\", 0, true, transactions, filter) && include_removed)\n+            {\n+                listed.insert(it->first);\n+            }\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex)\n+    {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus()))\n+        {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127094098",
      "id" : 127094098,
      "original_commit_id" : "ad57cefb6583ab669d8da21d0bf808e2d38ef04a",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 49642555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127094098",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK 5d352044ca7f29f992b4de46d461bccc86326ba1 with a few nits. I did not review the tests.",
      "created_at" : "2017-07-12T23:05:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-314922672",
      "id" : 314922672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-12T23:05:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314922672",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127110195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127110195"
         }
      },
      "body" : "Oh, I didn't know that. That makes things cleaner, thanks.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-13T01:25:03Z",
      "diff_hunk" : "@@ -1727,19 +1744,20 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const CBlockIndex *pindex = NULL;\n+    const CBlockIndex* pindex = NULL;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    const CBlockIndex* paltindex = NULL; // Block index of the specified block, even if it's in a deactivated chain.\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (request.params.size() > 0)\n+    if (request.params.size() > 0 && !request.params[0].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127110195",
      "id" : 127110195,
      "original_commit_id" : "fb17746c45e9f84d7b09d391802ae3d9e3fa2a1e",
      "original_position" : 64,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 49660129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-13T01:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127110195",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@sipa Thanks for the review. I've addressed your nits in https://github.com/kallewoof/bitcoin/commit/3a10e7c49108dde97d999f46bbb36ce905887a0e",
      "created_at" : "2017-07-13T01:34:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-314944327",
      "id" : 314944327,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-13T01:34:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314944327",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521359"
         }
      },
      "body" : "Hmm, technically -depth isnt sufficient here. In the rare case of a reorg-to-lower-block-height this would be insufficient. You already got the block from the chain, just call it - 1000000000 or so.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-14T18:31:41Z",
      "diff_hunk" : "@@ -1795,35 +1811,57 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (request.params.size() > 1)\n-    {\n+    if (!request.params[1].isNull()) {\n         target_confirms = request.params[1].get_int();\n \n-        if (target_confirms < 1)\n+        if (target_confirms < 1) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n+        }\n     }\n \n-    if (request.params.size() > 2 && request.params[2].get_bool())\n-    {\n+    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     UniValue transactions(UniValue::VARR);\n \n     for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n-        if (depth == -1 || tx.GetDepthInMainChain() < depth)\n+        if (depth == -1 || tx.GetDepthInMainChain() < depth) {\n             ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && paltindex && paltindex != pindex) {\n+        CBlock block;\n+        if (!ReadBlockFromDisk(block, paltindex, Params().GetConsensus())) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx) {\n+            if (pwallet->mapWallet.count(tx->GetHash()) > 0) {\n+                // Use -depth as minDepth parameter to ListTransactions to prevent incoming\n+                // transactions from being filtered. These transactions have negative\n+                // confirmations, but always greater than -depth.\n+                ListTransactions(pwallet, pwallet->mapWallet[tx->GetHash()], \"*\", -depth, true, removed, filter);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521359",
      "id" : 127521359,
      "original_commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "original_position" : 131,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 131,
      "pull_request_review_id" : 50120225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-14T18:43:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521359",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521439"
         }
      },
      "body" : "Can we add something to note that transactions which were re-added are included here anyway, and may have, at that point, positive confirmations value in this array?",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-14T18:32:12Z",
      "diff_hunk" : "@@ -1761,7 +1776,10 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n             \"    \\\"label\\\" : \\\"label\\\"       (string) A comment for the address/transaction, if any\\n\"\n             \"    \\\"to\\\": \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n-             \"  ],\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"removed\\\": [\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521439",
      "id" : 127521439,
      "original_commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "original_position" : 48,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 48,
      "pull_request_review_id" : 50120225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-14T18:43:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521439",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521824"
         }
      },
      "body" : "This is wrong (and the check and later comment contradict this).",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-14T18:34:08Z",
      "diff_hunk" : "@@ -73,7 +73,171 @@ def run_test (self):\n             if tx['txid'] == senttx:\n                 found = True\n                 break\n-        assert_equal(found, True)\n+        assert found\n+\n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+\n+        self.join_network()\n+\n+        self.sync_all()\n+\n+        # gettransaction should work for txid1\n+        assert self.nodes[0].gettransaction(txid1)['txid'] == txid1, \"gettransaction failed to find txid1\"\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert any(tx['txid'] == txid1 for tx in lsbres['removed'])\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(blockhash=lastblockhash, include_removed=False)\n+        assert 'removed' not in lsbres2\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is not included in 'removed' because it was not removed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521824",
      "id" : 127521824,
      "original_commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "original_position" : 142,
      "path" : "test/functional/listsinceblock.py",
      "position" : 142,
      "pull_request_review_id" : 50120225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-14T18:43:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521824",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521882"
         }
      },
      "body" : "Can you duplicate this loop for \"removed\", noting that the tx listed in \"removed\" should *also* have a confirmations of 2.",
      "commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "created_at" : "2017-07-14T18:34:31Z",
      "diff_hunk" : "@@ -73,7 +73,171 @@ def run_test (self):\n             if tx['txid'] == senttx:\n                 found = True\n                 break\n-        assert_equal(found, True)\n+        assert found\n+\n+    def test_double_spend(self):\n+        '''\n+        This tests the case where the same UTXO is spent twice on two separate\n+        blocks as part of a reorg.\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1 [tx2]\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3\n+                     |\n+                    bb4\n+\n+        Problematic case:\n+\n+        1. User 1 receives BTC in tx1 from utxo1 in block aa1.\n+        2. User 2 receives BTC in tx2 from utxo1 (same) in block bb1\n+        3. User 1 sees 2 confirmations at block aa3.\n+        4. Reorg into bb chain.\n+        5. User 1 asks `listsinceblock aa3` and does not see that tx1 is now\n+           invalidated.\n+\n+        Currently the solution to this is to detect that a reorg'd block is\n+        asked for in listsinceblock, and to iterate back over existing blocks up\n+        until the fork point, and to include all transactions that relate to the\n+        node wallet.\n+        '''\n+\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+\n+        # share utxo between nodes[1] and nodes[2]\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        self.nodes[1].importprivkey(privkey)\n+\n+        # send from nodes[1] using utxo to nodes[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[1].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        txid1 = self.nodes[1].sendrawtransaction(\n+            self.nodes[1].signrawtransaction(\n+                self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n+\n+        # send from nodes[2] using utxo to nodes[3]\n+        recipientDict2 = {\n+            self.nodes[3].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        self.nodes[2].sendrawtransaction(\n+            self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(4)\n+\n+        self.join_network()\n+\n+        self.sync_all()\n+\n+        # gettransaction should work for txid1\n+        assert self.nodes[0].gettransaction(txid1)['txid'] == txid1, \"gettransaction failed to find txid1\"\n+\n+        # listsinceblock(lastblockhash) should now include txid1, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert any(tx['txid'] == txid1 for tx in lsbres['removed'])\n+\n+        # but it should not include 'removed' if include_removed=false\n+        lsbres2 = self.nodes[0].listsinceblock(blockhash=lastblockhash, include_removed=False)\n+        assert 'removed' not in lsbres2\n+\n+    def test_double_send(self):\n+        '''\n+        This tests the case where the same transaction is submitted twice on two\n+        separate blocks as part of a reorg. The former will vanish and the\n+        latter will appear as the true transaction (with confirmations dropping\n+        as a result).\n+\n+             ab0\n+          /       \\\n+        aa1 [tx1]   bb1\n+         |           |\n+        aa2         bb2\n+         |           |\n+        aa3         bb3 [tx1]\n+                     |\n+                    bb4\n+\n+        Asserted:\n+\n+        1. tx1 is listed in listsinceblock.\n+        2. It is not included in 'removed' because it was not removed.\n+        3. It is listed with a confirmations count of 2 (bb3, bb4), not\n+           3 (aa1, aa2, aa3).\n+        '''\n+\n+        self.sync_all()\n+\n+        # Split network into two\n+        self.split_network()\n+\n+        # create and sign a transaction\n+        utxos = self.nodes[2].listunspent()\n+        utxo = utxos[0]\n+        change = '%.8f' % (float(utxo['amount']) - 1.0003)\n+        recipientDict = {\n+            self.nodes[0].getnewaddress(): 1,\n+            self.nodes[2].getnewaddress(): change,\n+        }\n+        utxoDicts = [{\n+            'txid': utxo['txid'],\n+            'vout': utxo['vout'],\n+        }]\n+        signedtxres = self.nodes[2].signrawtransaction(\n+                self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n+        assert signedtxres['complete']\n+\n+        signedtx = signedtxres['hex']\n+\n+        # send from nodes[1]; this will end up in aa1\n+        txid1 = self.nodes[1].sendrawtransaction(signedtx)\n+\n+        # generate bb1-bb2 on right side\n+        self.nodes[2].generate(2)\n+\n+        # send from nodes[2]; this will end up in bb3\n+        txid2 = self.nodes[2].sendrawtransaction(signedtx)\n+\n+        assert_equal(txid1, txid2)\n+\n+        # generate on both sides\n+        lastblockhash = self.nodes[1].generate(3)[2]\n+        self.nodes[2].generate(2)\n+\n+        self.join_network()\n+\n+        self.sync_all()\n+\n+        # gettransaction should work for txid1\n+        self.nodes[0].gettransaction(txid1)\n+\n+        # listsinceblock(lastblockhash) should now include txid1 in transactions\n+        # as well as in removed\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        assert any(tx['txid'] == txid1 for tx in lsbres['transactions'])\n+        assert any(tx['txid'] == txid1 for tx in lsbres['removed'])\n+\n+        # find transaction and ensure confirmations is valid\n+        for tx in lsbres['transactions']:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#discussion_r127521882",
      "id" : 127521882,
      "original_commit_id" : "0d457c7b274a66d66d59725f5fe1ee1cef5b6391",
      "original_position" : 199,
      "path" : "test/functional/listsinceblock.py",
      "position" : 199,
      "pull_request_review_id" : 50120225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9622",
      "updated_at" : "2017-07-14T18:43:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/127521882",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt Thanks for the review! I've addressed all of your nits, I believe. The unsquashed changes are in https://github.com/kallewoof/bitcoin/commit/5166d0e4f819ab4b430103fa350f8f882f1b1e2f and https://github.com/kallewoof/bitcoin/commit/299c00c56b4361c46a2dd9cc2fa4d4beb8bc2250.\r\n",
      "created_at" : "2017-07-18T04:33:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-315955470",
      "id" : 315955470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-18T04:33:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315955470",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "I think this maybe missed 15, sadly. Its a nice change, but not a bugfix.",
      "created_at" : "2017-07-18T21:36:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316205231",
      "id" : 316205231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-18T21:36:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316205231",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "That's disheartening, but ah well.",
      "created_at" : "2017-07-19T02:12:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316252215",
      "id" : 316252215,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-19T02:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316252215",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "utACK d6115c21a790e139bb45ec6dee421a976bc21eaf. Yea, Core has been in a near-constant state of growing pains for some time it seems. Recently its grown active enough to be just beyond the ability of any individual to keep up with everything, and so things occasionally move slower than they should :(. Anyway, up to @laanwj, this isnt a bugfix, but its pretty clean so maybe he's still willing to pull it for 15.",
      "created_at" : "2017-07-19T20:42:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316510975",
      "id" : 316510975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-19T20:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316510975",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "I'd say let's just push it to 16 milestone. I'll be noisy about it this time. :)",
      "created_at" : "2017-07-19T23:12:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316546764",
      "id" : 316546764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-19T23:12:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316546764",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "Heh, yes, if things have been sitting for a while definitely be noisy!\n\nOn July 19, 2017 7:12:08 PM EDT, kallewoof <notifications@github.com> wrote:\n>I'd say let's just push it to 16 milestone. I'll be noisy about it this\n>time. :)\n",
      "created_at" : "2017-07-19T23:18:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316548081",
      "id" : 316548081,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-19T23:18:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316548081",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Needs rebase.\r\n\r\n> I'd say let's just push it to 16 milestone. I'll be noisy about it this time. :)\r\n\r\nUp to you, though given how long this has been open and how much interest and review this has I don't have a particular problem with merging this into 0.15 still.",
      "created_at" : "2017-07-20T15:06:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316732680",
      "id" : 316732680,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-20T15:06:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316732680",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj Rebased. And I'd *love* to have this in 15, personally. I just don't wanna rush anything for the sake of the PR being old.",
      "created_at" : "2017-07-21T02:01:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-316880837",
      "id" : 316880837,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-21T02:01:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316880837",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "utACK",
      "created_at" : "2017-07-21T17:11:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9622#issuecomment-317058639",
      "id" : 317058639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9622",
      "updated_at" : "2017-07-21T17:11:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317058639",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
