{
   "assignee" : null,
   "assignees" : [],
   "body" : "I observed that block propagation didn't work as I expected in testing with InvalidateBlock.\r\n\r\nLet's say we have two nodes connected and synced.  Then we use one to mine 20 blocks and sync the nodes.  Then we invalidate the first of those blocks via rpc call to each node.\r\n\r\nIf we then mine 19 blocks on that same node that generated the initial 20, those blocks won't all propagate to the other node (the first 16 will make it, because of the call to getdata on processing each inv, which occurs until we've maxed out the number of blocks in flight to that peer).  A specific test that fails is pasted below.\r\n\r\nI believe what is happening is that the CNodeState variable pindexBestKnownBlock is stuck pointing at an invalid but more-work chain, and consequently the block download logic believes it doesn't have a peer from which to download the blocks on the new headers chain.  \r\n\r\nI'm not sure what the best way to fix this is, maybe we could clear the pindexBestKnownBlock variables if they're pointing to now-invalid blocks before returning from InvalidateBlock, or perhaps we could check the validity of pindexBestKnownBlock when we are comparing it in UpdateBlockAvailability?  Both those approaches do appear to fix this test, but I'm not quite familiar enough with this logic to know whether either of those potential solutions makes sense.\r\n\r\n```\r\n#!/usr/bin/env python2\r\n# Copyright (c) 2014 The Bitcoin Core developers\r\n# Distributed under the MIT software license, see the accompanying\r\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n\r\n#\r\n# Test invalidateblock\r\n#\r\n\r\nfrom test_framework import BitcoinTestFramework\r\nfrom bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\r\nfrom util import *\r\nimport os\r\nimport shutil\r\n\r\nclass InvalidateBlockTest(BitcoinTestFramework):\r\n\r\n    def setup_network(self):\r\n        self.nodes = []\r\n        self.nodes.append(start_node(0, self.options.tmpdir, ['-debug', '-whitelist=127.0.0.1']))\r\n        self.nodes.append(start_node(1, self.options.tmpdir, ['-debug', '-whitelist=127.0.0.1']))\r\n        connect_nodes(self.nodes[1], 0)\r\n        self.is_network_split = False\r\n        self.sync_all()\r\n\r\n    def run_test(self):\r\n        self.nodes[0].setgenerate(True, 1) # Leave IBD\r\n        self.sync_all()\r\n\r\n        cnt = self.nodes[0].getblockcount()\r\n\r\n        node1blocks = self.nodes[1].setgenerate(True, 18)\r\n\r\n        self.sync_all()\r\n        if (self.nodes[0].getblockcount() != cnt + 18):\r\n            raise AssertionError(\"Failed to sync initial blocks\")\r\n        \r\n        self.nodes[0].invalidateblock(node1blocks[0])\r\n        self.nodes[1].invalidateblock(node1blocks[0])\r\n\r\n        if (self.nodes[0].getblockcount() != cnt):\r\n            raise AssertionError(\"Failed to invalidate initial blocks\")\r\n\r\n        self.nodes[1].setgenerate(True, 17)\r\n\r\n        print \"All blocks generated, trying to sync\"\r\n        self.sync_all()\r\n        if (self.nodes[0].getblockcount() != cnt + 17):\r\n            raise AssertionError(\"Failed to sync shorter but valid chain\")\r\n\r\nif __name__ == '__main__':\r\n    InvalidateBlockTest().main()\r\n```",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5806/comments",
   "created_at" : "2015-02-19T19:31:37Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5806/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/5806",
   "id" : 58256720,
   "labels" : [
      {
         "color" : "006b75",
         "name" : "P2P",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      },
      {
         "color" : "d4c5f9",
         "name" : "Tests",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5806/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 5806,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Block download can stall after call to InvalidateBlock()",
   "updated_at" : "2016-09-11T16:58:33Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5806",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
      "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sdaftuar/followers",
      "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sdaftuar",
      "id" : 7463573,
      "login" : "sdaftuar",
      "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
      "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
      "repos_url" : "https://api.github.com/users/sdaftuar/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sdaftuar"
   }
}
