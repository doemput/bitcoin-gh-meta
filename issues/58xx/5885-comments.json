[
   {
      "body" : "I'm happy about this approach.\r\n\r\nWe've seen operating system RNG's fail silently in really frightening ways several times over the last few years,  a belt-and-suspenders approach where silent failure at least gets a best effort bit of entropy-snake-oil (or maybe not so snakeoil: after going and writing a bunch of entropy collecting code I'm more impressed with the performance than I expected) seems to be a clear improvement.  OpenSSL's (and libressl's) system entropy randomness generator is also pretty scary (it can fail silently back to snakeoil entropy much weaker than what this code does).\r\n\r\nWe'll want to take good care to make sure GetOSEntropy is portable and safe.  Maybe we should introduce a startup time test to get GetOSEntropy that just checks that it's not outputting a constant. I wouldn't expect an _actual_ OS failure to do that, but e.g. if some massive screwup has replaced /dev/urandom with a file (easier than you might think...) it could be helpful.\r\n\r\nRight now this code has no fork safety.  A fork() will end up with a clone of the pool state. That StrongRandom always goes to the OS helps add confidence that total doom is unlikely, but we might want to deal with this case even though we never fork just in case someone adds something that forks later and doesn't think about it.  A PID vs last_pid test in the random calls that triggers a GetSystemRand(slow=0) would I think be all that it would take.\r\n\r\nBeyond the nits I am adding the only big obvious gaps were that there is no facility to roll entropy from the pool forward across restarts. We should probably GetStrongRandom() on clean shutdown and write out a entropy file that gets fed back in at startup.  Perhaps system rand can take an argument, and thats how the config environment could also be passed in?\r\n\r\nThere are plenty of missed opportunities to collect extra entropy (e.g. from UI events; UPNP real-IP, other hosts provided ping nonces) that don't fit into line level patches, as those files aren't even touched.",
      "created_at" : "2015-03-12T20:50:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-78611027",
      "id" : 78611027,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-12T20:52:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/78611027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Concept ACK, although as discussed I'd prefer it as a subtree'd external library like secp256k1 and leveldb - so that other (wallet) software which needs a good random source can use it too, and it receives more testing and review than an internal module in Bitcoin Core.",
      "created_at" : "2015-03-13T12:21:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-78947335",
      "id" : 78947335,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-13T12:21:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/78947335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Good idea.  I thought about this when implementing random numbers for the ping nonce.  They don't need to be cryptographically secure, just random enough to serve their purpose.  At the time, thought about calling the OpenSSL insecure rand, but its API was not orthogonal to secure rand, unfortunately.  It had side effects I wasn't happy with, so just stuck with the regular OpenSSL secure rand, even though I wasn't happy about it needlessly consuming the entropy pool, which is a somewhat precious resource.  Would it be worth changing the ping nonce to use insecure rand instead, or keep it secure and await this fine new implementation?\r\n",
      "created_at" : "2015-03-15T08:58:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-80925946",
      "id" : 80925946,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-15T08:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/80925946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4563817?v=3",
         "events_url" : "https://api.github.com/users/Krellan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Krellan/followers",
         "following_url" : "https://api.github.com/users/Krellan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Krellan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Krellan",
         "id" : 4563817,
         "login" : "Krellan",
         "organizations_url" : "https://api.github.com/users/Krellan/orgs",
         "received_events_url" : "https://api.github.com/users/Krellan/received_events",
         "repos_url" : "https://api.github.com/users/Krellan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Krellan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Krellan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Krellan"
      }
   },
   {
      "body" : "@Krellan There is nothing \"consumed\" in the entropy pool. ",
      "created_at" : "2015-03-15T09:04:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-80927318",
      "id" : 80927318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-15T09:04:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/80927318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@Krellan After this pull the insecure random is certainly good enough to use for ping nonces.",
      "created_at" : "2015-03-18T12:14:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-82942767",
      "id" : 82942767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-18T12:14:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/82942767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Running the Fortuna implementation's output through http://csrc.nist.gov/groups/ST/toolkit/rng/documentation_software.html would be spiffy. Or maybe the Python port of that:  http://gerhardt.ch/random.php\r\n\r\n",
      "created_at" : "2015-03-18T19:02:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-83122968",
      "id" : 83122968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-18T19:02:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/83122968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "@sipa Very nice work.\r\n\r\nTaking advantage of the aes classes introduced here, I've added cbc functionality on top to replace our usage of openssl for wallet encryption/decryption and passphrase usage. See here: https://github.com/theuni/bitcoin/commits/aes-keys. This is a WIP; it still needs loads more testing.\r\n\r\nI'll submit a PR to discuss that after this is merged, but in the meantime you may want https://github.com/theuni/bitcoin/commit/a22fcf2d2835d4f50e357ca0125d55b54a0ccb15 and https://github.com/theuni/bitcoin/commit/a4d109e33cc247430054fe1a81bdc668456338c8.\r\n\r\nI'm not sure if my test failures were due to other local changes or not, but either way I don't think it would hurt.\r\n\r\nSide-node: I think that (along with the fortuna stuff here, @laanwj's libevent stuff, and libsecp256k1) is the last of the openssl stuff that needed to be re-implemented.",
      "created_at" : "2015-03-20T05:52:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-83921828",
      "id" : 83921828,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-03-20T05:56:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/83921828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "This sounds good, but I have to play devils advocate here. The problems with OS randomness on Android was caused by exactly this kind of logic:   \"we can do better than the kernel with a spiffy userspace RNG\". And then they screwed it up.\r\n\r\nNow, I trust sipa and gmaxwell to not screw things up. I am much less sure about the faceless unknowable individuals who will come later in the years after sipa has moved on, or who will patch Bitcoin as it gets packaged into distributions, etc. I do not trust them.\r\n\r\nI especially do not trust that crypto code that is Windows specific will be well tested and will never break, given the extreme bias towards Linux and Mac that exists in the Bitcoin developer community.\r\n\r\nIf there is no Bitcoin Core RNG, then people will not be tempted to \"improve\" it and break it in the process. If there is, they will.\r\n\r\nRandomness theory says we cannot beat the kernel. The kernel has all the sources of entropy available to it that a userspace app does, plus more that we don't have access to. Kernel RNGs are also rare and carefully monitored: I trust the Linux, Darwin and Windows kernel teams a lot more than I trust userspace RNG developers. Kernels are unlikely to ship in a broken state. So, reading from /dev/urandom or CryptoAPI should be all that is required. Why add more complexity on top?\r\n\r\nI am especially unkeen on things like \"let's mix in the current time or the value of CPUID\", because mixing in uselessly low value pieces of entropy is how both the Debian and Android randomness flaws evaded detection for so long - the output *looked* random but only had ~16 bits of entropy in it from the PID counter. Everything else broke but the PID kept the illusion alive for longer than should have been possible.\r\n\r\nSo - why go further than /dev/urandom?",
      "created_at" : "2015-04-10T11:24:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91521871",
      "id" : 91521871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T11:24:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91521871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=3",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "body" : "The primary reason is because the kernel has repeatedly screwed it up too on various systems, both due to OS bugs (e.g. recent Netbsd and Freebsd examples) and because of things like running in virtual machines where the environment was just too deterministic.  These are not hypothetical problems, but have been observed in practice and recently too.\r\n\r\n> Kernels are unlikely to ship in a broken state.\r\n\r\nKernels have shipped in a broken state, and they've been \"broken in the field\" by poor use, like use in a VPS that denied them adequate access to randomness; by hypervisor checkpoint and restore, and by other issue.\r\n\r\n> or who will patch Bitcoin as it gets packaged into distributions, etc. I do not trust them\r\n\r\nI don't trust distributors either, (though I do trust future contributions as much as ourselves, all bets are off if they're malicious or even more foolish than we are). It is obvious that the utmost care is required in structuring things not just so its correct, but so that the result is easy to audit, testable, and hard to break; for sure. This includes the above comment about incorporating the system RNG in key generation in the final step in a transparent and hard to break way. If someone wants to twiddle the rest, then great. The potential for harm is bounded when whatever gets done is just getting xored with /dev/urandom.  \r\n\r\n(Though unlike OpenSSL we would not consider using undefined behavior ... almost guaranteeing the result would get broken, if not by a helpful packager than by a future spec compliant compiler)\r\n\r\n\"Just use /dev/random\" is also fraught with peril on its own, it requires a file descriptor, if one isn't available you cannot get to the device. It's also slow and if you use the blocking form it will reliably block on Linux systems which are often entropy starved (due to a campaign of removing low quality entropy sources in the kernel in the last that Linux hasn't yet recovered from); the blocking is fine for our highly critical long term key generation, but other places where we might need non-determinism it isn't really. If the non-blocking /dev/urandom is used, you are exposed to getting non-random bits even when the kernel knows better (e.g. near bootup time).   There is no escaping peril, we can only seek to understand and control the risks.\r\n\r\n> the output looked random but\r\n\r\nSadly this problem also exists with the kernel itself.  Our setup must be such that if the kernel fails in a detectable way, we fail. Regardless; all the rest is for the cases where the kernel has failed undetectably.\r\n\r\n> Randomness theory says we cannot beat the kernel\r\n\r\nI'm not aware of any such theory. What I am aware of is that we have entirely different constraints; when the kernel RNGs have failed none of them have managed to still emit output which was machine specific, though its not hard to do so in userspace.  In some abstract sense the kernel has access to more data, but operates under different constraints and so we know it doesn't actually make use of that data (at least in Linux and the BSDs; the windows source is not generally available, so I don't know what it does internally).  As another example, we're also able to use a huge amount of hardening; so even if the kernel has failed in an undetectable way and there is only a moderate amount of non-determinism from other sources there is a chance that the user will be secure regardless. Likewise, we can roll state forward between runs, so even if the system state is only intermittently random the user can be practically secure; something else that is not generally available in the kernel.\r\n\r\nFor some time it looked like Linux /dev/u?random was going to be replaced with rdrand, and I think our users wouldn't have appreciated that. I think it's fair to say that when we're generating keys our demands as we're creating long term keys for public use which thousands to millions of dollars can be immediately lost if they're insecure, is unlike 99.999% of the kernel random use.\r\n\r\nLikewise, if our ability to read OS entropy silently breaks on windows then those users are in trouble regardless of what else we've done. So we must assure we don't, and that we detect and fail if we do if detection is even possible. This is true regardless of whatever else we're doing.\r\n\r\nWe also know from the Bitcoin space (web wallet entropy failures) that users still lose (lots) money if the randomness returned is the same as other users. So, trying to make undetectable failures more user transparent is already known to not really work.\r\n\r\nA further consideration is that OpenSSL already does this, and so it would be arguably unwise in the \"what were you thinking??!?? sense to replace it something with more known total failure modes. The OpenSSL implementation is inherently more fragile than anything we'd consider using (including silent failure when it knows the OS rng is failing for it); OpenSSL's \"more secure fork\" LibreSSL replaces the code but also includes a similar fallback. Both do this in OS specific code, so it's not likely they're defending against unknown operating systems.\r\n",
      "created_at" : "2015-04-10T14:34:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91576653",
      "id" : 91576653,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T14:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91576653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Minor aside: in Linux there is a getrandom() syscall to avoid the problems with fd exhaustion, or /dev/urandom being a regular file. The non-blocking variant is fine of course, it's just an iterated hash over the entropy pool: http://man7.org/linux/man-pages/man2/getrandom.2.html\r\n\r\nI guess this boils down to which you consider to be more fragile: Bitcoin Core or the users kernel. Combining them so both have to fail simultaneously sounds good, but that was the theory behind all the other RNGs and that failed, so it seems harder to pull off than I would have expected.\r\n\r\nRegardless, my playing of devil's advocate has come to an end, so carry on :)",
      "created_at" : "2015-04-10T14:54:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91583339",
      "id" : 91583339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T14:54:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91583339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=3",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "body" : "thanks, I hope that when we're up to having something worth merging you'll scrutinize the heck out of the implementation for its future riskyness. :)    (WRT blocking; the issue there is that the non-blocking will give non-entropy when the kernel isn't seeded yet; though getrandom has a mode that will handle that)",
      "created_at" : "2015-04-10T15:53:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91599010",
      "id" : 91599010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T15:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91599010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@mikehearn That's the kind of argument I've given to not make this part of Bitcoin Core, but make it a library like secp256k1 (can be subtree'ed). If the code is shared with other software - e.g. wallets, or other crypto software that doesn't want to depend on OpenSSL - that needs a secure Random Number Generator, more eyes will be on the source code and it will be tested more, and this initiative will also help other projects.",
      "created_at" : "2015-04-10T19:57:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91665224",
      "id" : 91665224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T19:57:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91665224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "(FWIW, I think sipa and I were onboard with that)",
      "created_at" : "2015-04-10T23:15:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91713927",
      "id" : 91713927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T23:15:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91713927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "/me is onboard too.\r\n\r\nFWIW, you probably want to non-block + fail if entropy is absent.\r\n",
      "created_at" : "2015-04-10T23:22:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91714839",
      "id" : 91714839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-10T23:22:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91714839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "All very reasonable comments here.\r\n\r\nI agree with making this available separately (though the API needs some rethinking). There is definitely a fair amount of complexity here, which - assuming the OS randomness works fine - is totally irrelevant. The whole point of course is belt-and-suspenders: what if somehow the OS randomness is not fine. For that reason, I also agree the result should be trivially correct assuming OS randomness is fine (i.e., for queries that require strong randomness, we should do a call to the OS, and mix in our own randomness afterwards). And yes, if the OS randomness call fails, the entire request should fail. We shouldn't knowingly reduce security - it's only intended to protect against unknown failure.",
      "created_at" : "2015-04-11T08:32:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91795132",
      "id" : 91795132,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-11T08:32:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91795132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "You want to add extra assurance for your entropy source because constant testing for poor entropy is a horrible path to go down.  You can never distinguish good randomness from properly secured bad randomness (eg attacker replaces your /dev/random with stream cipher output for which only they have the key).  This is code that needs (and I am sure will get) plenty of attention and auditing.\r\n\r\nAs for justifications, there is a tendency for the OS to silently break things or fail in spectacular ways. RDRAND has been the sole source of randomness multiple times, contrary to popular opinion.\r\nhttp://comments.gmane.org/gmane.comp.security.cryptography.randombit/4689\r\nJust xoring in more stuff isn't the answer. djb points out attack scenarios with a malicious entropy source:\r\nhttp://blog.cr.yp.to/20140205-entropy.html\r\n\r\nEC is brittle when it comes to poor randomness.  While using deterministic modes is clearly the preferred answer, entropy for key generation is still needed and providing a sane interface to a decent library is a major improvement to the entire bitcoin ecosystem.\r\nhttp://blog.cryptographyengineering.com/2012/03/surviving-bad-rng.html\r\n\r\nAlso, heroku instance under syn scan (not syn flood, just a port scan):\r\nhttps://gist.github.com/jwilkins/5997306\r\nhttps://gist.github.com/jwilkins/5997296\r\n\r\nThis is an excellent (though java focused) guide to RNG concepts, part 3's discussion of degrees of freedom is particularly valuable for people in the bitcoin space:\r\nhttp://blog.uncommons.org/2008/04/03/a-java-programmers-guide-to-random-numbers-part-1-beyond-javautilrandom/\r\nhttp://blog.uncommons.org/2008/04/06/a-java-programmers-guide-to-random-numbers-part-2-not-just-coins-and-dice/\r\nhttp://blog.uncommons.org/2008/04/10/a-java-programmers-guide-to-random-numbers-part-3-seeding/",
      "created_at" : "2015-04-17T16:27:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94021388",
      "id" : 94021388,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-17T16:37:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94021388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1087?v=3",
         "events_url" : "https://api.github.com/users/jwilkins/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jwilkins/followers",
         "following_url" : "https://api.github.com/users/jwilkins/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jwilkins/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jwilkins",
         "id" : 1087,
         "login" : "jwilkins",
         "organizations_url" : "https://api.github.com/users/jwilkins/orgs",
         "received_events_url" : "https://api.github.com/users/jwilkins/received_events",
         "repos_url" : "https://api.github.com/users/jwilkins/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jwilkins/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jwilkins/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jwilkins"
      }
   },
   {
      "body" : "Forgot to point out http://en.wikipedia.org/wiki/Blum_Blum_Shub",
      "created_at" : "2015-04-17T16:52:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94026005",
      "id" : 94026005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-17T16:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94026005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1087?v=3",
         "events_url" : "https://api.github.com/users/jwilkins/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jwilkins/followers",
         "following_url" : "https://api.github.com/users/jwilkins/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jwilkins/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jwilkins",
         "id" : 1087,
         "login" : "jwilkins",
         "organizations_url" : "https://api.github.com/users/jwilkins/orgs",
         "received_events_url" : "https://api.github.com/users/jwilkins/received_events",
         "repos_url" : "https://api.github.com/users/jwilkins/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jwilkins/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jwilkins/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jwilkins"
      }
   },
   {
      "body" : "On the points raised by DJB, (FWIW, I'm familiar with that post; and it influenced our work. I'm also familiar with it in another way: on account of that post the \"watch that basket\" argument is the go-to trope in the IETF used to argue against any non-TLS crypto)\r\n\r\nFortuna itself designed to be robust against malicious inputs.  If we assume the kernel is maliciously observing our process (e.g. to give us bad randomness that xor cancels the next fortuna output) we're kind of all bets off there-- simply because it could more directly undermine our behavior.  We _could_ combine them with a cryptographic hash instead,  which would be more secure against malicious input, I'm just wary about having any avoidable complexity in that one part, because its the one part that requires the most careful review.\r\n\r\nBack on DJB's post, before anyone takes up that argument...\r\n\r\n> But if the attacker sees the RNG state that was used to generate your long-term SSL keys, long-term PGP keys, etc., then what exactly are we gaining by coming up with unpredictable random numbers in the future? \r\n\r\nThe security of _future_ keys.  Sometimes there aren't any future keys, and indeed, additional inputs are not helpful, sometimes (as is the case for us) they are.\r\n\r\nImagine, someone manages to heartbleed out the state of your RNG. Thats bad, but its even worse if it forever predicts your output.\r\n\r\nThe argument he gives applies more broadly then some might think, by that argument you'd generate a random state once and store it on disk, and just use that state... but this is clearly crazy because it's obvious that the data on disk has a different security exposure than data elsewhere. The same is otherwise true.   We do already avoid using 'new randomness' where it makes sense to avoid it because it can't buy us anything-- e.g. in signing.\r\n\r\nAnother place where forward secure randomness is helpful is against process replay.  Consider the OpenSSL state cloning bug on fork() on android:  Processes were launched by forking(), the new tasks got a copy of the rng state and replayed randomness. If they each independently had been adding additional (even low entropy, like the address of their stack) randomness then the problem would have been avoided or reduced (e.g. if it didn't reliably add before the copy was used).  The same can also play out with process and VM snapshotting: if you only have a deterministic state, someone might resume an old copy without realizing the consequences, then use it to do different things.\r\n",
      "created_at" : "2015-04-18T17:53:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94187417",
      "id" : 94187417,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-18T17:53:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94187417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> Processes were launched by forking(), the new tasks got a copy of the rng state and replayed randomness. If they each independently had been adding additional (even low entropy, like the address of their stack) randomness then the problem would have been avoided \r\n\r\nI have to disagree with this. I think it's the opposite. Android *was* mixing in additional low entropy (the pid counter) and this is why the bug made it into production. If wallets had been making the exact same sequence of random numbers across process restarts then that would have been noticed almost immediately, as it'd have shown up in the UI and other such things. By mixing in the pid they ensured that the outputs only cycled occasionally - long after the apps had been shipped to production and money was stolen.\r\n\r\nThe Android bug was especially catastrophic because the mixin of the persisted operating system entropy happened *after* the zygote process started, so all you had to do to compromise thousands of wallets was buy a phone, measure the initial randomness for every possible PID and you're done. That's why I insisted on a simultaneous crash rollout of the fix: if anyone had realised the true nature of the bug, the Bitcoin ledger could have been hopelessly corrupted by theft to an extent that it'd have set the project back by years.\r\n\r\nThis is why this kind of RNG work is so dangerous. The history of industrial randomness is a long story of programmers thinking that *they* would be better than all the other schlubs, that *their* RNG would be simple and elegant and give better performance or robustness. After all, how hard can a RNG possibly be? And then they discover they made some impossible to detect mistake, or someone else patched their code, and it all came unravelled.",
      "created_at" : "2015-04-19T14:48:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94284329",
      "id" : 94284329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-04-19T14:48:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94284329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=3",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "body" : "The problem is people unfamiliar with the research thinking they know better.  Not the case here, gmaxwell and sipa are very knowledgable and prudent.  It is only with an abundance of caution that they are suggesting this and inviting extensive external review as we have all repeatedly observed the underlying layers fail. ",
      "created_at" : "2015-06-04T20:14:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-109035206",
      "id" : 109035206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-06-04T20:14:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/109035206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1087?v=3",
         "events_url" : "https://api.github.com/users/jwilkins/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jwilkins/followers",
         "following_url" : "https://api.github.com/users/jwilkins/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jwilkins/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jwilkins",
         "id" : 1087,
         "login" : "jwilkins",
         "organizations_url" : "https://api.github.com/users/jwilkins/orgs",
         "received_events_url" : "https://api.github.com/users/jwilkins/received_events",
         "repos_url" : "https://api.github.com/users/jwilkins/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jwilkins/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jwilkins/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jwilkins"
      }
   },
   {
      "body" : "Re-reviewing this, @laanwj probably has the right approach.\r\n\r\nI think this is probably easier to roll out into bitcoin via a libsecp256k1-like separate library.\r\n",
      "created_at" : "2015-09-15T18:08:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-140486195",
      "id" : 140486195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-09-15T18:08:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140486195",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Agree.\n",
      "created_at" : "2015-09-15T18:09:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-140486447",
      "id" : 140486447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-09-15T18:09:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140486447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "OK, closing.  Let's re-open this same Pull Request (to preserve the history) when libspiffyrng git subtree appears.\r\n",
      "created_at" : "2015-09-15T18:19:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-140489027",
      "id" : 140489027,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-09-15T18:19:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140489027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Slated for 0.13 (with the goal of getting rid of OpenSSL dependency by then), opened #7162 to track this",
      "created_at" : "2015-12-03T11:55:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-161609639",
      "id" : 161609639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5885",
      "updated_at" : "2015-12-03T11:55:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/161609639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
