[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10055#discussion_r107524282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10055"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107524282"
         }
      },
      "body" : "This whole block of code except the sleep is duplicated from wait_for_bitcoind_start. It would be good to factor out the common code into a function to avoid duplication.",
      "commit_id" : "7a27d9f5a98f2b85366d889d75102c5c28292188",
      "created_at" : "2017-03-22T20:32:36Z",
      "diff_hunk" : "@@ -307,26 +308,63 @@ def initialize_chain_clean(test_dir, num_nodes):\n     for i in range(num_nodes):\n         datadir=initialize_datadir(test_dir, i)\n \n+def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    \"\"\"Start multiple bitcoinds and return RPC connections to them.\n+\n+    This function uses an asyncio event loop to start the bitcoind nodes in parallel to speed\n+    up test execution.\"\"\"\n+    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n+    if binary is None: binary = [ None for _ in range(num_nodes) ]\n+    rpcs = []\n+    if num_nodes > 0:\n+        try:\n+            loop = asyncio.get_event_loop()\n+            tasks = [asyncio.ensure_future(start_node_async(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i])) for i in range(num_nodes)]\n+            loop.run_until_complete(asyncio.wait(tasks))\n+            rpcs = [task.result() for task in tasks]\n+        except: # If one node failed to start, stop the others\n+            stop_nodes(rpcs)\n+            raise\n+    return rpcs\n \n def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-    \"\"\"\n-    Start a bitcoind and return RPC connection to it\n-    \"\"\"\n+    \"\"\"Start a single bitcoind node and return an RPC connection to it.\"\"\"\n+    loop = asyncio.get_event_loop()\n+    task = asyncio.ensure_future(start_node_async(i, dirname, extra_args, rpchost, timewait, binary, stderr))\n+    loop.run_until_complete(task)\n+    return task.result()\n+\n+async def start_node_async(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+    \"\"\"An asynchronous co-routine that starts a bitcoind node and returns an RPC connection to it.\"\"\"\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n     args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-    logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+    logger.debug(\"initialize_chain: bitcoind %d started, waiting for RPC to come up\" % i)\n     url = rpc_url(i, rpchost)\n-    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n-    logger.debug(\"initialize_chain: RPC successfully started\")\n+\n+    while True:\n+        if bitcoind_processes[i].poll() is not None:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10055#discussion_r107524282",
      "id" : 107524282,
      "original_commit_id" : "3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
      "original_position" : 56,
      "path" : "test/functional/test_framework/util.py",
      "position" : 56,
      "pull_request_review_id" : 28502946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10055",
      "updated_at" : "2017-03-22T20:56:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107524282",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I think it is good to keep python 3.4 as minimum version for now. Especially, since we plan to run the functional tests on `make check`.",
      "created_at" : "2017-03-22T21:41:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10055#issuecomment-288548839",
      "id" : 288548839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10055",
      "updated_at" : "2017-03-22T21:41:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288548839",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
