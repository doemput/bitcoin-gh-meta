[
   {
      "body" : "Nice! Concept ACK",
      "created_at" : "2017-03-17T09:37:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287308512",
      "id" : 287308512,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-17T09:37:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287308512",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@jnewbery Good stuff! Just a minor nit - consider running `flake8` on `combine_logs.py` and fix the warnings to bring it in line with PEP-8 :-)\r\n\r\nThese are the warnings:\r\n```\r\n      1  B901 blind except: statement\r\n      1  E221 multiple spaces before operator\r\n      1  E231 missing whitespace after ','\r\n     10  E251 unexpected spaces around keyword / parameter equals\r\n      5  E261 at least two spaces before inline comment\r\n      6  E262 inline comment should start with '# '\r\n      3  E302 expected 2 blank lines, found 1\r\n     12  E501 line too long (Ã¢ÂÂ¦ > 79 characters)\r\n      1  E701 multiple statements on one line (colon)\r\n      1  E999 SyntaxError: invalid syntax\r\n```",
      "created_at" : "2017-03-17T10:20:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287317623",
      "id" : 287317623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-17T10:20:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287317623",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7826565?v=3",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "body" : "Thanks @practicalswift . I've addressed the flake8 warnings except:\r\n\r\n```\r\n4     E302 expected 2 blank lines, found 1\r\n1     E305 expected 2 blank lines after class or function definition, found 1\r\n15    E501 line too long (80 > 79 characters)\r\n```\r\n\r\nwhich I don't care about.",
      "created_at" : "2017-03-17T14:24:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287367784",
      "id" : 287367784,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-17T14:24:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287367784",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Indeed. Really nice!",
      "created_at" : "2017-03-17T18:28:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287435451",
      "id" : 287435451,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-17T18:28:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287435451",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Awesome! Can we get travis to use this when it dumps failed debug logs (I believe its via test_framework.py).",
      "created_at" : "2017-03-17T22:22:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287485997",
      "id" : 287485997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-17T22:22:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287485997",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt that's definitely possible. I'd envision travis pushing the html logs to S3 or similar and printing a link in its build log.\r\n\r\nBut first things first: this needs a bit of review. Once it's merged we can look at integrating it into our build process.",
      "created_at" : "2017-03-17T22:42:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287489102",
      "id" : 287489102,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-17T22:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287489102",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Tested double-rainbow ACK\r\n\r\n![screenshot from 2017-03-19 10-44-05](https://cloud.githubusercontent.com/assets/6399679/24079796/1af91bf4-0c91-11e7-8f70-4a86276da6c2.png)\r\n\r\n",
      "created_at" : "2017-03-19T09:45:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287605178",
      "id" : 287605178,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-19T09:45:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287605178",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106804479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106804479"
         }
      },
      "body" : "reners -> renders",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-19T11:44:45Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and reners them as text or html.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106804479",
      "id" : 106804479,
      "original_commit_id" : "9775207f245c56783d53d74e1613ed17c06b7897",
      "original_position" : 21,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 27745863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106804479",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106804489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106804489"
         }
      },
      "body" : "color -> Color",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-19T11:45:08Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and reners them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"color output requires posix terminal colors.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106804489",
      "id" : 106804489,
      "original_commit_id" : "9775207f245c56783d53d74e1613ed17c06b7897",
      "original_position" : 29,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 27745863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106804489",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106804515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106804515"
         }
      },
      "body" : "This new dependency should be mentioned somewhere.",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-19T11:47:14Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and reners them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0;0m\"   # WHITE\n+\n+        for event in log_events:\n+            print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, event.event, colors[\"reset\"]))\n+\n+    else:\n+        try:\n+            import jinja2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106804515",
      "id" : 106804515,
      "original_commit_id" : "9775207f245c56783d53d74e1613ed17c06b7897",
      "original_position" : 102,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 27745863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106804515",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106916727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106916727"
         }
      },
      "body" : "It's mentioned in the --help message:\r\n\r\n> parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\r\n\r\nAs it's only required when `--html` is provided and not by default I'd say that is enough.\r\n",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-20T14:37:45Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and reners them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0;0m\"   # WHITE\n+\n+        for event in log_events:\n+            print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, event.event, colors[\"reset\"]))\n+\n+    else:\n+        try:\n+            import jinja2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106916727",
      "id" : 106916727,
      "original_commit_id" : "9775207f245c56783d53d74e1613ed17c06b7897",
      "original_position" : 102,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 27860586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106916727",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106919695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106919695"
         }
      },
      "body" : "I agree. HTML rendering is not expected to be the mainline use case. If you do want to render as HTML, the documentation is exactly where it should be, at the point of use (and with instructions on how to resolve the problem):\r\n\r\n```python\r\n        try:\r\n            import jinja2\r\n        except ImportError:\r\n            print(\"jinja2 not found. Try `pip install jinja2`\")\r\n            sys.exit(1)\r\n```",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-20T14:47:41Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and reners them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0;0m\"   # WHITE\n+\n+        for event in log_events:\n+            print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, event.event, colors[\"reset\"]))\n+\n+    else:\n+        try:\n+            import jinja2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106919695",
      "id" : 106919695,
      "original_commit_id" : "9775207f245c56783d53d74e1613ed17c06b7897",
      "original_position" : 102,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 27863639,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106919695",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Thanks for the review @paveljanik . Nits addressed in https://github.com/bitcoin/bitcoin/pull/10017/commits/af802c8b45f6fa913dcc0442a48343cb75a521e5.",
      "created_at" : "2017-03-20T14:48:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-287782225",
      "id" : 287782225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-20T14:48:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287782225",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106920139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106920139"
         }
      },
      "body" : "Yes.",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-20T14:49:12Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and reners them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0;0m\"   # WHITE\n+\n+        for event in log_events:\n+            print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, event.event, colors[\"reset\"]))\n+\n+    else:\n+        try:\n+            import jinja2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r106920139",
      "id" : 106920139,
      "original_commit_id" : "9775207f245c56783d53d74e1613ed17c06b7897",
      "original_position" : 102,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 27864093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/106920139",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107125968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107125968"
         }
      },
      "body" : "Nit: `\\033[0m` suffices, and the WHITE comment should probably go as the reset-color depends on the terminal settings.",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-21T11:01:06Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"Color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0;0m\"   # WHITE",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107125968",
      "id" : 107125968,
      "original_commit_id" : "af802c8b45f6fa913dcc0442a48343cb75a521e5",
      "original_position" : 95,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 28077784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107125968",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107131372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107131372"
         }
      },
      "body" : "Not a bug in this tool, but I noticed a divergence with the sorting of messages: logging from the test framework is in local time, logging from the nodes is in UTC. This causes, in Europe, all the test messages to sink to the end. I think all logging should be UTC.",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-21T11:30:41Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"Color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107131372",
      "id" : 107131372,
      "original_commit_id" : "af802c8b45f6fa913dcc0442a48343cb75a521e5",
      "original_position" : 83,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 28077784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:06:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107131372",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "The script needs to be moved for #9956",
      "created_at" : "2017-03-21T12:51:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-288068523",
      "id" : 288068523,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-21T12:51:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288068523",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107163137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107163137"
         }
      },
      "body" : "Yes, you're right - all logging should be in UTC. I've pushed a commit which makes the functional test framework log in UTC. Can you retest with the latest tip?",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-21T14:07:31Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"Color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107163137",
      "id" : 107163137,
      "original_commit_id" : "af802c8b45f6fa913dcc0442a48343cb75a521e5",
      "original_position" : 83,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 28117808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:07:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107163137",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107163184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107163184"
         }
      },
      "body" : "Thanks - fixed",
      "commit_id" : "de1c9ad3e3e764c2399f775d9eac99847594d02f",
      "created_at" : "2017-03-21T14:07:43Z",
      "diff_hunk" : "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n+\n+This streams the combined log output to stdout. Use combine_logs.py > outputfile\n+to write to an outputfile.\"\"\"\n+\n+import argparse\n+from collections import defaultdict, namedtuple\n+import glob\n+import heapq\n+import os\n+import re\n+import sys\n+\n+# Matches on the date format at the start of the log event\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+\n+LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n+\n+def main():\n+    \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    if args.color and os.name != 'posix':\n+        print(\"Color output requires posix terminal colors.\")\n+        sys.exit(1)\n+\n+    if args.html and args.color:\n+        print(\"Only one out of --color or --html should be specified\")\n+        sys.exit(1)\n+\n+    # There should only be one unknown argument - the path of the temporary test directory\n+    if len(unknown_args) != 1:\n+        print(\"Unexpected arguments\" + str(unknown_args))\n+        sys.exit(1)\n+\n+    log_events = read_logs(unknown_args[0])\n+\n+    print_logs(log_events, color=args.color, html=args.html)\n+\n+def read_logs(tmp_dir):\n+    \"\"\"Reads log files.\n+\n+    Delegates to generator function get_log_events() to provide individual log events\n+    for each of the input log files.\"\"\"\n+\n+    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    for i, logfile in enumerate(glob.glob(\"%s/node*/regtest/debug.log\" % tmp_dir)):\n+        files.append((\"node%d\" % i, logfile))\n+\n+    return heapq.merge(*[get_log_events(source, f) for source, f in files])\n+\n+def get_log_events(source, logfile):\n+    \"\"\"Generator function that returns individual log events.\n+\n+    Log events may be split over multiple lines. We use the timestamp\n+    regex match as the marker for a new log event.\"\"\"\n+    try:\n+        with open(logfile, 'r') as infile:\n+            event = ''\n+            timestamp = ''\n+            for line in infile:\n+                # skip blank lines\n+                if line == '\\n':\n+                    continue\n+                # if this line has a timestamp, it's the start of a new log event.\n+                time_match = TIMESTAMP_PATTERN.match(line)\n+                if time_match:\n+                    if event:\n+                        yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+                    event = line\n+                    timestamp = time_match.group()\n+                # if it doesn't have a timestamp, it's a continuation line of the previous log.\n+                else:\n+                    event += \"\\n\" + line\n+            # Flush the final event\n+            yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n+    except FileNotFoundError:\n+        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+\n+def print_logs(log_events, color=False, html=False):\n+    \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    if not html:\n+        colors = defaultdict(lambda: '')\n+        if color:\n+            colors[\"test\"] = \"\\033[0;36m\"   # CYAN\n+            colors[\"node0\"] = \"\\033[0;34m\"  # BLUE\n+            colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n+            colors[\"node2\"] = \"\\033[0;31m\"  # RED\n+            colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+            colors[\"reset\"] = \"\\033[0;0m\"   # WHITE",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107163184",
      "id" : 107163184,
      "original_commit_id" : "af802c8b45f6fa913dcc0442a48343cb75a521e5",
      "original_position" : 95,
      "path" : "qa/pull-tester/combine_logs.py",
      "position" : null,
      "pull_request_review_id" : 28117856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10017",
      "updated_at" : "2017-03-21T14:07:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/107163184",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "I've rebased and moved the script to /test/functional, addressed @laanwj's nit https://github.com/bitcoin/bitcoin/pull/10017#discussion_r107131372 and updated logging in the functional test framework to always log in UTC.",
      "created_at" : "2017-03-21T14:08:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-288089308",
      "id" : 288089308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-21T14:08:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288089308",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "fixup commits squashed https://github.com/jnewbery/bitcoin/tree/pr10017.1 -> https://github.com/jnewbery/bitcoin/tree/pr10017.2",
      "created_at" : "2017-03-21T21:31:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-288225382",
      "id" : 288225382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-21T21:31:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288225382",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Re-tested, looks good to me now, everything is in the right order. I think this can turn out to be really useful in debugging synchronization issues. Removing the [POC] tag.",
      "created_at" : "2017-03-22T11:21:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10017#issuecomment-288369463",
      "id" : 288369463,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10017",
      "updated_at" : "2017-03-22T11:21:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/288369463",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
