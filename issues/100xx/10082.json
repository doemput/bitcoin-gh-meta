{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "__This PR is too large for review and will need continually rebasing. This PR tracks the individual tasks to introduce a TestNode class. The individual commits are in separate PRs__\r\n\r\nTasks:\r\n\r\n- [x] #10171 Add initialize chain / start node / stop node methods to TestFramework. Initially these are wrapper methods which call into the functions in util.py (not disruptive - only touches test_framework files)\r\n- [x] #10359 Update individual test cases to call `TestFramework.start_node()` etc (disruptive - touches all test cases, so will require rebases for open PRs)\r\n- [x] #10556 Change TestFramework start/stop methods to contain the logic and remove the functions from util.py. Also move the stateful port and coverage functions into TestFramework (not disruptive - only touches test_framework files)\r\n- [x] #10711 Add the TestNode class (not disruptive - only touches test_framework files)\r\n- [ ] #11182 Add p2p connections into the TestNode class (not disruptive - only touches test_framework files)\r\n- [ ] #11182 Update individual test cases to use TestNode class (marginally disruptive - does not need to be done all at once)\r\n\r\nThis PR adds a TestNode class to the test_framework.py module. The goals for this are:\r\n\r\n1. Present a clean interface to the test writer\r\n\r\nThe test writer should be able to set up a desired network topology and not have to think too hard about how to start bitcoind instances and setup RPC/P2P connections to them.\r\n\r\nTo create a node with an RPC and a P2P connection, tests currently look something like this:\r\n\r\n```python\r\n        self.nodes = []\r\n        self.nodes.append(start_node(0, self.options.tmpdir))\r\n        node0 = SingleNodeConnCB()\r\n        connections = []\r\n        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\r\n        node0.add_connection(connections[0])\r\n        NetworkThread().start()  # Start up network handling in another thread\r\n        node0.wait_for_verack()\r\n```\r\n\r\nAfter this PR, that should be more like this:\r\n\r\n```python\r\n        self.num_nodes = 1\r\n        self.start_nodes()\r\n        self.nodes[0].add_p2p_connection()\r\n```\r\n\r\nthe tester now has a TestNode instance `self.nodes[0]` which he/she can use to send RPC commands, send P2P messages and register callbacks for received P2P messages.\r\n\r\n2. Remove global state from utils.py\r\n\r\nThere are currently several global state variables in utils.py (COVERAGE_DIR, PortSeed and bitcoind_processes). Having global state variables in the utils module is bad practice and makes importing from utils quite brittle. It also makes it difficult to add functionality to the test framework without inadvertently breaking something.",
   "closed_at" : "2017-09-05T19:28:18Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 4,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10082/comments",
   "created_at" : "2017-03-26T04:53:39Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10082/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/10082",
   "id" : 217027444,
   "labels" : [
      {
         "color" : "d4c5f9",
         "default" : false,
         "id" : 62963516,
         "name" : "Tests",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10082/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 10082,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/10082.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10082",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/10082.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10082"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "[tests] Demostration/concept: Add a TestNode class to test_Framework.py",
   "updated_at" : "2017-09-05T19:28:18Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10082",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
      "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jnewbery/followers",
      "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jnewbery",
      "id" : 1063656,
      "login" : "jnewbery",
      "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
      "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
      "repos_url" : "https://api.github.com/users/jnewbery/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jnewbery"
   }
}
