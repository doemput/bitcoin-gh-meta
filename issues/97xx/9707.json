{
   "assignee" : null,
   "assignees" : [],
   "body" : "RPC interface testing should include failure test cases (ie where we call an RPC with parameters that we expect to fail). The failure test cases should follow this pattern:\r\n\r\n```python\r\ntry:\r\n    nodes.rpcfunction(paramters,...) \r\nexcept JSONRPCException as exp: #(1) must only catch JSONRPCExceptions\r\n    assert_equal(exp.error[\"code\"], EXPECTED_ERROR_CODE)  #(2) must verify error code\r\n    assert_equal(exp.error[\"message\"], \"Expected error message\")  #(3) must verify error message\r\nelse:\r\n    assert(False) #(4) must fail the test if no JSONRPCException raised\r\n```\r\n\r\nUnfortunately, many of the test cases in `qa/rpc-tests` get this pattern wrong and don't actually test what they're supposed to.\r\n\r\nExhibit A:\r\n\r\n```python\r\n        try:\r\n            self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\r\n        except JSONRPCException as e:\r\n            assert(\"Invalid address\" not in e.error['message'])\r\n            assert(\"ProcessNewBlock, block not accepted\" not in e.error['message'])\r\n            assert(\"Couldn't create new block\" not in e.error['message'])\r\n```\r\n\r\nThe call to `generatetoaddress()` actually succeeds here, but there isn't an `else:` clause so the test continues (and none of the code in the `except:` branch is executing)\r\n\r\nExhibit B:\r\n\r\n```python\r\n        try:\r\n            tmpl = self.nodes[0].getblocktemplate({})\r\n            assert(len(tmpl['transactions']) == 1)  # Doesn't include witness tx\r\n            assert(tmpl['sigoplimit'] == 20000)\r\n            assert(tmpl['transactions'][0]['hash'] == txid)\r\n            assert(tmpl['transactions'][0]['sigops'] == 2)\r\n            assert(('!segwit' in tmpl['rules']) or ('segwit' not in tmpl['rules']))\r\n        except JSONRPCException:\r\n            # This is an acceptable outcome\r\n            pass\r\n```\r\n\r\nThe call to `getblocktemplate()` is raising an exception. Apparently `This is an acceptable outcome`, but there's no explanation why. None of the asserts in the `try:` branch are being executed. There's also no checking of the error code/message of the JSONRPCException.\r\n\r\nExhibit C:\r\n\r\n```python\r\nassert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\r\n#there must be a expection because the unconfirmed wallettx0 must be gone by now\r\n```\r\n\r\nThis is using the helper function `assert_raises()` and the comment explains that the call should fail because the unconfirmed transaction is gone. There's no testing of the error message or code. In fact, `gettransaction()` is failing because it's being called with an array `[txid3]` instead of a string `txid3`.\r\n\r\nThis PR improves the `assert_raises_jsonrpc()` to verify error cause and error message and improves the commenting of that function. Future PRs will go over all the qa tests, remove the various broken implementations of this pattern and replace them with calls to `assert_raises_jsonrpc()`.\r\n\r\nThis should also prevent the same bugs from being introduced in future because it should now be easier to get this right (by calling `assert_raises_jsonrpc()`) than get it wrong (by trying to reimplement the pattern and failing)",
   "closed_at" : "2017-02-10T17:03:58Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 12,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9707/comments",
   "created_at" : "2017-02-07T15:22:21Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9707/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/9707",
   "id" : 205919718,
   "labels" : [
      {
         "color" : "E6F6D6",
         "default" : false,
         "id" : 135961,
         "name" : "Refactoring",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      },
      {
         "color" : "d4c5f9",
         "default" : false,
         "id" : 62963516,
         "name" : "Tests",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9707/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 9707,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/9707.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9707",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/9707.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9707"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Fix RPC failure testing",
   "updated_at" : "2017-02-10T17:42:39Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9707",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=3",
      "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jnewbery/followers",
      "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jnewbery",
      "id" : 1063656,
      "login" : "jnewbery",
      "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
      "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
      "repos_url" : "https://api.github.com/users/jnewbery/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jnewbery"
   }
}
