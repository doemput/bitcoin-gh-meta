[
   {
      "body" : "utACK 64aa36e",
      "created_at" : "2017-02-13T20:00:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279505134",
      "id" : 279505134,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-13T20:00:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279505134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "Why would you make non-reference and non-pointer variables const?\r\n\r\nPlease first add this and the rationale to *doc/developer-notes.md*. I don't see a point of doing this out of the blue, sorry.",
      "created_at" : "2017-02-14T12:22:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279693551",
      "id" : 279693551,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-14T12:22:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279693551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I find it useful when reading code if anything that can be const'd is const'd.\r\n\r\nto quote S.O.:\r\n\r\n> The const qualifier prevents code inside the function from modifying the parameter itself. When a function is larger than trivial size, such an assurance helps you to quickly read and understand a function. If you know that the value of side won't change, then you don't have to worry about keeping track of its value over time as you read. Under some circumstances, this might even help the compiler generate better code.\r\n\r\n> A non-trivial number of people do this as a matter of course, considering it generally good style.\r\n\r\nhttp://stackoverflow.com/questions/8714250/isnt-const-redundant-when-passing-by-value\r\n\r\nThere is no harm to making this change, and at best, there is the gain that the above sorts of bug won't later be introduced. Also, in theory such an annotation could help the optimizer better inline such a function.\r\n",
      "created_at" : "2017-02-14T12:33:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279695784",
      "id" : 279695784,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-14T12:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279695784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=3",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "body" : "I agree. However we don't follow everything that is \"generally considered good style\" by random people on the internet in this project. We most notably don't do this structurally anywhere else, so why start in the bloom filter code specifically?\r\n\r\nIf you want to introduce this rule, that's fine, I have no reason to be against it, but that needs to be discussed first in a PR adding that recommendation to the developer guide, then merged. Then you can start changing existing code to do that.",
      "created_at" : "2017-02-14T13:41:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279709646",
      "id" : 279709646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-14T13:41:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279709646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "utACK 64aa36e . Although as @laanwj points out, we're not doing this anywhere and we shouldn't go crazy trying to change it everywhere at once. If we prefer not to do this for whatever reason, I have no strong opinion.\r\n",
      "created_at" : "2017-02-14T17:09:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279770687",
      "id" : 279770687,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-14T17:09:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279770687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Thanks for the discussion. It's true that this standard isn't enforced anywhere else, so i can see how it seems out of the blue. A recent project of mine used bloom filters and so I was interested to check out bitcoin's filter and thought it wouldn't hurt to apply some of the standards i used which I thought were helpful. \r\n\r\nI agree, it is kind of random so I'll look more into if I can find a more reasonable argument for the change and then make an attempt on the developer notes. ",
      "created_at" : "2017-02-15T04:55:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279917020",
      "id" : 279917020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-15T04:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279917020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14208428?v=3",
         "events_url" : "https://api.github.com/users/rohundhar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rohundhar/followers",
         "following_url" : "https://api.github.com/users/rohundhar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rohundhar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rohundhar",
         "id" : 14208428,
         "login" : "rohundhar",
         "organizations_url" : "https://api.github.com/users/rohundhar/orgs",
         "received_events_url" : "https://api.github.com/users/rohundhar/received_events",
         "repos_url" : "https://api.github.com/users/rohundhar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rohundhar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rohundhar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rohundhar"
      }
   },
   {
      "body" : "I agree that making things const that can be made const is a good idea, taking the virality property as mentioned in [Google's C++ styleguide (Use of const)](https://google.github.io/styleguide/cppguide.html#Use_of_const) into appropriate consideration.\r\n\r\nI also agree that the developer guidelines should include this direction.",
      "created_at" : "2017-02-15T11:18:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279984787",
      "id" : 279984787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-15T11:20:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279984787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "One thing I don't like about making by-value parameters const is that something that is private and internal to the function - how their copy of the parameter is handled - needs to be specified on the interface, even though it makes no difference to the ABI. That's a minor problem though and if it's done consistently everywhere I have no problem with it.\r\n\r\nEdit: something else that we need to be clarify in the coding style is the use of \"override\". E.g. I had to add a few in #9764 to prevent gcc from complaining: it doesn't like when it's used inconsistently within a class.",
      "created_at" : "2017-02-15T12:37:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-279999932",
      "id" : 279999932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-15T12:56:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/279999932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I didn't even know \"override\" existed. As for how parameters are handled, I'm of the opinion that function/method parameters should *never* be changed ever, unless they are explicitly marked as \"output parameters\", even for primitive types like ints and such, where it doesn't matter.\r\n\r\nThe primary reason is that it's much easier to read code where the input parameters always stay the same no matter what. I even prefer the following\r\n```C++\r\nvoid foo(const int inX) {\r\n   int x = inX ?: computeStartingX();\r\n   // ...\r\n}\r\n```\r\nover\r\n```C++\r\nvoid foo(int x) {\r\n   if (!x) x = computeStartingX();\r\n   // ...\r\n}\r\n```\r\nwhich is one of the few \"ugly\" cases with this approach.",
      "created_at" : "2017-02-16T02:14:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9750#issuecomment-280208963",
      "id" : 280208963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9750",
      "updated_at" : "2017-02-16T02:14:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/280208963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=3",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   }
]
