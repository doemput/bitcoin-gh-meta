[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92137093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92137093"
         }
      },
      "body" : "nit: no wildcard import here.",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-13T10:20:26Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92137093",
      "id" : 92137093,
      "original_commit_id" : "6bbbe2c52fa4ac31117fcfe051911420538d6c99",
      "original_position" : 7,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 12645206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92137093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92158698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92158698"
         }
      },
      "body" : "Removed",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-13T12:29:45Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92158698",
      "id" : 92158698,
      "original_commit_id" : "6bbbe2c52fa4ac31117fcfe051911420538d6c99",
      "original_position" : 7,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 12667404,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92158698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92601633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92601633"
         }
      },
      "body" : "```py\r\nfrom decimal import Decimal\r\n```\r\n\r\nwould be cleaner",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T12:43:05Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92601633",
      "id" : 92601633,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 8,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13119819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92601633",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92611343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611343"
         }
      },
      "body" : "You don't have to be too strict about not exceeding 80 chars. I think 120 is preferred, but there does not seem to be a strict rule, so meh.",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T13:48:31Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92611343",
      "id" : 92611343,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 78,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13119819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611343",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92611767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611767"
         }
      },
      "body" : "This probably does not change during the loop, so maybe cache it?",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T13:50:59Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92611767",
      "id" : 92611767,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 128,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13119819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92612226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92612226"
         }
      },
      "body" : "Assert that the transaction pool is empty, after each generate?",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T13:53:45Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n+            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n+            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n+            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\n+                \"hex\"])\n+            spend_txids.append(spend_txid)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92612226",
      "id" : 92612226,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 138,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13119819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92612226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630886"
         }
      },
      "body" : "Fixed.",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T15:28:12Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630886",
      "id" : 92630886,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 8,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13150369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630896"
         }
      },
      "body" : "Thanks, I was just using [yapf](https://github.com/google/yapf), but I increased the column width.",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T15:28:15Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630896",
      "id" : 92630896,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 78,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13150380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:28:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630907"
         }
      },
      "body" : "Done.",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T15:28:17Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630907",
      "id" : 92630907,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 128,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13150393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:28:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630914"
         }
      },
      "body" : "Done.",
      "commit_id" : "d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at" : "2016-12-15T15:28:19Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n+            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n+            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n+            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\n+                \"hex\"])\n+            spend_txids.append(spend_txid)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630914",
      "id" : 92630914,
      "original_commit_id" : "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "original_position" : 138,
      "path" : "qa/rpc-tests/import-rescan.py",
      "position" : null,
      "pull_request_review_id" : 13150400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
      "updated_at" : "2016-12-15T15:28:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Thanks, LGTM \r\nutACK d8c0b9f",
      "created_at" : "2016-12-15T16:05:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9331#issuecomment-267366118",
      "id" : 267366118,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9331",
      "updated_at" : "2016-12-15T16:05:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267366118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
