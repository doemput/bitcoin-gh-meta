[
   {
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/9308/commits/03ffa4cfff29d8273859edb030bc0eb823b26e7b, thanks for adding tests for this important system\r\n",
      "created_at" : "2016-12-14T09:29:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-266985899",
      "id" : 266985899,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
      "updated_at" : "2016-12-14T09:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266985899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93085954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954"
         }
      },
      "body" : "Maybe loop over possibilities for base values",
      "commit_id" : "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "created_at" : "2016-12-19T18:06:30Z",
      "diff_hunk" : "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93085954",
      "id" : 93085954,
      "original_commit_id" : "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "original_position" : 220,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 13607529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
      "updated_at" : "2016-12-19T20:04:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93103417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417"
         }
      },
      "body" : "Maybe try a loop of these tests with Child Flags not DIRTY as well",
      "commit_id" : "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "created_at" : "2016-12-19T19:36:03Z",
      "diff_hunk" : "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyNewCoins(TXID, coinbase));\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+{\n+    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+     * writing a modification to the coin, and then checking the resulting\n+     * entry in the cache after the modification. Verify behavior with the\n+     * with the ModifyNewCoin coinbase argument set to false, and to true.\n+     *\n+     *                  Cache   Write   Result  Cache        Result     Coinbase\n+     *                  Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyNewCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   , false);\n+    CheckModifyNewCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+}\n+\n+void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(ABSENT, parent_value, parent_flags);\n+    WriteCoinsViewEntry(test.cache, child_value, child_flags);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_write)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93103417",
      "id" : 93103417,
      "original_commit_id" : "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "original_position" : 291,
      "path" : "src/test/coins_tests.cpp",
      "position" : 309,
      "pull_request_review_id" : 13625355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
      "updated_at" : "2016-12-19T20:04:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "ACK (left a couple of comments to slightly increase test coverage)\r\n",
      "created_at" : "2016-12-19T19:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-268057323",
      "id" : 268057323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
      "updated_at" : "2016-12-19T19:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/268057323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618"
         }
      },
      "body" : "Added.",
      "commit_id" : "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "created_at" : "2016-12-19T20:09:42Z",
      "diff_hunk" : "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109618",
      "id" : 93109618,
      "original_commit_id" : "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "original_position" : 220,
      "path" : "src/test/coins_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 13631701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
      "updated_at" : "2016-12-19T20:09:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642"
         }
      },
      "body" : "Added.",
      "commit_id" : "07df40babb0231b2e8a2f42341805b4bbcc4e284",
      "created_at" : "2016-12-19T20:09:49Z",
      "diff_hunk" : "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyNewCoins(TXID, coinbase));\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+{\n+    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+     * writing a modification to the coin, and then checking the resulting\n+     * entry in the cache after the modification. Verify behavior with the\n+     * with the ModifyNewCoin coinbase argument set to false, and to true.\n+     *\n+     *                  Cache   Write   Result  Cache        Result     Coinbase\n+     *                  Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyNewCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   , false);\n+    CheckModifyNewCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+}\n+\n+void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(ABSENT, parent_value, parent_flags);\n+    WriteCoinsViewEntry(test.cache, child_value, child_flags);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_write)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109642",
      "id" : 93109642,
      "original_commit_id" : "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
      "original_position" : 291,
      "path" : "src/test/coins_tests.cpp",
      "position" : 309,
      "pull_request_review_id" : 13631723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
      "updated_at" : "2016-12-19T20:09:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@ryanofsky What about this warning?\r\n```\r\ntest/coins_tests.cpp:432:19: warning: unused variable 'DIRTY_FLAGS' [-Wunused-const-variable]\r\n```\r\n\r\nDo you plan to use it or can it be removed?\r\n",
      "created_at" : "2016-12-27T10:43:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-269309163",
      "id" : 269309163,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
      "updated_at" : "2016-12-27T10:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269309163",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "I do have some debug code using it, which I might make a PR from later, but its better to remove for now since it's causing this warning. Created to #9435 to remove.",
      "created_at" : "2016-12-27T12:42:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-269321047",
      "id" : 269321047,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
      "updated_at" : "2016-12-27T12:42:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269321047",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
