[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8916#discussion_r83289320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8916"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83289320"
         }
      },
      "body" : "```\r\nAssertion failed: [6, 7, 8, 9, 10] != [0]\r\n```\r\non travis",
      "commit_id" : "9777fe12722ddab7b1b17df11077d448c7a25006",
      "created_at" : "2016-10-13T19:07:27Z",
      "diff_hunk" : "@@ -314,57 +366,63 @@ def test_compactblock_construction(self):\n                 # Already checked prefilled transactions above\n                 header_and_shortids.prefilled_txn.pop(0)\n             else:\n-                shortid = calculate_shortid(k0, k1, block.vtx[index].sha256)\n+                tx_hash = block.vtx[index].sha256\n+                if version == 2:\n+                    tx_hash = block.vtx[index].calc_sha256(True)\n+                shortid = calculate_shortid(k0, k1, tx_hash)\n                 assert_equal(shortid, header_and_shortids.shortids[0])\n                 header_and_shortids.shortids.pop(0)\n             index += 1\n \n     # Test that bitcoind requests compact blocks when we announce new blocks\n     # via header or inv, and that responding to getblocktxn causes the block\n     # to be successfully reconstructed.\n-    def test_compactblock_requests(self):\n-        print(\"Testing compactblock requests... \")\n-\n+    # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n+    # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n+    # any cb-version-1-supporting peer.\n+    def test_compactblock_requests(self, node, test_node):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip()\n+            block = self.build_block_on_tip(node)\n             with mininode_lock:\n-                self.test_node.last_getdata = None\n+                test_node.last_getdata = None\n \n             if announce == \"inv\":\n-                self.test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+                test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n             else:\n-                self.test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=30)\n+                test_node.send_header_for_blocks([block])\n+            success = wait_until(lambda: test_node.last_getdata is not None, timeout=30)\n             assert(success)\n-            assert_equal(len(self.test_node.last_getdata.inv), 1)\n-            assert_equal(self.test_node.last_getdata.inv[0].type, 4)\n-            assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+            assert_equal(len(test_node.last_getdata.inv), 1)\n+            assert_equal(test_node.last_getdata.inv[0].type, 4)\n+            assert_equal(test_node.last_getdata.inv[0].hash, block.sha256)\n \n             # Send back a compactblock message that omits the coinbase\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n-            comp_block.shortids = [1]  # this is useless, and wrong\n-            self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+            [k0, k1] = comp_block.get_siphash_keys()\n+            comp_block.shortids = [\n+                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n+            test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+            assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n             with mininode_lock:\n-                assert(self.test_node.last_getblocktxn is not None)\n-                absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+                assert(test_node.last_getblocktxn is not None)\n+                absolute_indexes = test_node.last_getblocktxn.block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8916#discussion_r83289320",
      "id" : 83289320,
      "original_commit_id" : "bcf3806f4cb9dad1424c78f458b5398a927161e8",
      "original_position" : 383,
      "path" : "qa/rpc-tests/p2p-compactblocks.py",
      "position" : 396,
      "pull_request_review_id" : 4143579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8916",
      "updated_at" : "2016-10-17T12:20:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83289320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/8916#discussion_r83298887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8916"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83298887"
         }
      },
      "body" : "Looks to be a bug in the test where the block manufactured in the test is of a too-low version, due to soft-fork activations in the regtest chain.  Only seems to manifest itself in the 0.13 branch because we hardcoded the soft-fork activation points in master to be at block heights that are slightly higher than the test, I believe.\r\n\r\nQuick fix would be to explicitly set the block versions generated in this test to be version 4, I think, haven't tried yet...",
      "commit_id" : "9777fe12722ddab7b1b17df11077d448c7a25006",
      "created_at" : "2016-10-13T20:00:01Z",
      "diff_hunk" : "@@ -314,57 +366,63 @@ def test_compactblock_construction(self):\n                 # Already checked prefilled transactions above\n                 header_and_shortids.prefilled_txn.pop(0)\n             else:\n-                shortid = calculate_shortid(k0, k1, block.vtx[index].sha256)\n+                tx_hash = block.vtx[index].sha256\n+                if version == 2:\n+                    tx_hash = block.vtx[index].calc_sha256(True)\n+                shortid = calculate_shortid(k0, k1, tx_hash)\n                 assert_equal(shortid, header_and_shortids.shortids[0])\n                 header_and_shortids.shortids.pop(0)\n             index += 1\n \n     # Test that bitcoind requests compact blocks when we announce new blocks\n     # via header or inv, and that responding to getblocktxn causes the block\n     # to be successfully reconstructed.\n-    def test_compactblock_requests(self):\n-        print(\"Testing compactblock requests... \")\n-\n+    # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n+    # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n+    # any cb-version-1-supporting peer.\n+    def test_compactblock_requests(self, node, test_node):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip()\n+            block = self.build_block_on_tip(node)\n             with mininode_lock:\n-                self.test_node.last_getdata = None\n+                test_node.last_getdata = None\n \n             if announce == \"inv\":\n-                self.test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+                test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n             else:\n-                self.test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=30)\n+                test_node.send_header_for_blocks([block])\n+            success = wait_until(lambda: test_node.last_getdata is not None, timeout=30)\n             assert(success)\n-            assert_equal(len(self.test_node.last_getdata.inv), 1)\n-            assert_equal(self.test_node.last_getdata.inv[0].type, 4)\n-            assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+            assert_equal(len(test_node.last_getdata.inv), 1)\n+            assert_equal(test_node.last_getdata.inv[0].type, 4)\n+            assert_equal(test_node.last_getdata.inv[0].hash, block.sha256)\n \n             # Send back a compactblock message that omits the coinbase\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n-            comp_block.shortids = [1]  # this is useless, and wrong\n-            self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+            [k0, k1] = comp_block.get_siphash_keys()\n+            comp_block.shortids = [\n+                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n+            test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+            assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n             with mininode_lock:\n-                assert(self.test_node.last_getblocktxn is not None)\n-                absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+                assert(test_node.last_getblocktxn is not None)\n+                absolute_indexes = test_node.last_getblocktxn.block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8916#discussion_r83298887",
      "id" : 83298887,
      "original_commit_id" : "bcf3806f4cb9dad1424c78f458b5398a927161e8",
      "original_position" : 383,
      "path" : "qa/rpc-tests/p2p-compactblocks.py",
      "position" : 396,
      "pull_request_review_id" : 4152761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/8916",
      "updated_at" : "2016-10-17T12:20:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83298887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "#8922 (built on the now-merged #8904) should fix the above test failures.",
      "created_at" : "2016-10-16T14:29:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8916#issuecomment-254050199",
      "id" : 254050199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8916",
      "updated_at" : "2016-10-16T14:29:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/254050199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "Added #8922 and #8499 - all applied cleanly except 9260085377e89e666d0cb95b462261d7e3a9c82f in the tests which also imported faaec1377c6975a7c427bac958b67a0aba9e1694 (trivial cleanup though)",
      "created_at" : "2016-10-17T12:23:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/8916#issuecomment-254192453",
      "id" : 254192453,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8916",
      "updated_at" : "2016-10-17T12:23:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/254192453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
