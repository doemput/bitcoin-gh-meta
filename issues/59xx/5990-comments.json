[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124205"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124205"
         }
      },
      "body" : "Would a ``!pwalletMain`` help with a NULL pointer here?",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-04-10T06:15:45Z",
      "diff_hunk" : "@@ -1111,141 +1053,23 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (fDisableWallet) {\n+    if (CWallet::IsDisabled()) {\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    } // (!fDisableWallet)\n+        pwalletMain = new CWallet();\n+        \n+        std::string warningString, errorString;\n+        \n+        if(!pwalletMain->LoadWallet(warningString, errorString))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124205",
      "id" : 28124205,
      "original_commit_id" : "4e5c56ebade15e2018a0bb1e4c5fc4b4c61760eb",
      "original_position" : 298,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124307"
         }
      },
      "body" : "Nit: Missing new-line :).",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-04-10T06:18:56Z",
      "diff_hunk" : "@@ -908,6 +911,100 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+bool CWallet::IsDisabled()\n+{\n+    return GetBoolArg(\"-disablewallet\", false);\n+}\n+\n+void CWallet::MapParameters(string& warningString, string& errorString)\n+{\n+    if (mapArgs.count(\"-mintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            CWallet::minTxFee = CFeeRate(n);\n+        else\n+        {\n+            errorString += strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]);\n+            return;\n+        }\n+        \n+    }\n+    if (mapArgs.count(\"-paytxfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n+            errorString += strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]); return;\n+        if (nFeePerK > nHighTransactionFeeWarning)\n+            warningString += _(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"); return;\n+        payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < ::minRelayTxFee)\n+            errorString += strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                     mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()); return;\n+    }\n+    if (mapArgs.count(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n+            errorString += strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]); return;\n+        if (nMaxFee > nHighTransactionMaxFeeWarning)\n+            warningString += _(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"); return;\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+             errorString += strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"), mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()); return;\n+    }\n+    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);\n+    bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);\n+    fSendFreeTransactions = GetArg(\"-sendfreetransactions\", false);\n+}\n+\n+std::string CWallet::GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", \"wallet.dat\");\n+}\n+\n+void CWallet::SanityCheck(string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+        errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n+}\n+\n+void CWallet::LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+void CWallet::LogInfos() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124307",
      "id" : 28124307,
      "original_commit_id" : "4e5c56ebade15e2018a0bb1e4c5fc4b4c61760eb",
      "original_position" : 81,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124326"
         }
      },
      "body" : "I always wanted this to change into ``No wallet support compiled in!``, what do you think?",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-04-10T06:19:50Z",
      "diff_hunk" : "@@ -1111,141 +1053,23 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (fDisableWallet) {\n+    if (CWallet::IsDisabled()) {\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    } // (!fDisableWallet)\n+        pwalletMain = new CWallet();\n+        \n+        std::string warningString, errorString;\n+        \n+        if(!pwalletMain->LoadWallet(warningString, errorString))\n+            return false;\n+        \n+        if (!warningString.empty())\n+            InitWarning(warningString);\n+        if (!errorString.empty())\n+            return InitError(errorString);\n+    }\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet compiled in!\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124326",
      "id" : 28124326,
      "original_commit_id" : "4e5c56ebade15e2018a0bb1e4c5fc4b4c61760eb",
      "original_position" : 307,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124326",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124454"
         }
      },
      "body" : "It's within a `if (CWallet::IsDisabled())` else control structure. pwalletMain can't be NULL there. But i assume it won't hurt adding a `!pwalletMain`",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-04-10T06:23:34Z",
      "diff_hunk" : "@@ -1111,141 +1053,23 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (fDisableWallet) {\n+    if (CWallet::IsDisabled()) {\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    } // (!fDisableWallet)\n+        pwalletMain = new CWallet();\n+        \n+        std::string warningString, errorString;\n+        \n+        if(!pwalletMain->LoadWallet(warningString, errorString))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124454",
      "id" : 28124454,
      "original_commit_id" : "4e5c56ebade15e2018a0bb1e4c5fc4b4c61760eb",
      "original_position" : 298,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124516"
         }
      },
      "body" : "I'd like to keep the log output in the PR as exact as possible to allow log file comparison between this PR and the master. But your string is def. better. Why not open a PR @ trivial?",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-04-10T06:26:08Z",
      "diff_hunk" : "@@ -1111,141 +1053,23 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (fDisableWallet) {\n+    if (CWallet::IsDisabled()) {\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    } // (!fDisableWallet)\n+        pwalletMain = new CWallet();\n+        \n+        std::string warningString, errorString;\n+        \n+        if(!pwalletMain->LoadWallet(warningString, errorString))\n+            return false;\n+        \n+        if (!warningString.empty())\n+            InitWarning(warningString);\n+        if (!errorString.empty())\n+            return InitError(errorString);\n+    }\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet compiled in!\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124516",
      "id" : 28124516,
      "original_commit_id" : "4e5c56ebade15e2018a0bb1e4c5fc4b4c61760eb",
      "original_position" : 307,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124516",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124537"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124537"
         }
      },
      "body" : "I deleted my comment after discovering the declaration, sorry ;).",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-04-10T06:27:04Z",
      "diff_hunk" : "@@ -908,6 +911,100 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+bool CWallet::IsDisabled()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r28124537",
      "id" : 28124537,
      "original_commit_id" : "4e5c56ebade15e2018a0bb1e4c5fc4b4c61760eb",
      "original_position" : 17,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124537",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "ditto previous PR - code movement in separate commit\r\n\r\nconcept ACK\r\n",
      "created_at" : "2015-04-12T15:36:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-92082054",
      "id" : 92082054,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-04-12T15:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/92082054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Here the moved code did need some adaption. I was trying to make more smaller commits. This was not possible with the fact that every commit should also passes travis (and result in a proper compilable bitcoind/qt)",
      "created_at" : "2015-04-12T16:01:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-92083499",
      "id" : 92083499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-04-12T16:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/92083499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "fair enough\r\n",
      "created_at" : "2015-04-12T16:07:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-92084010",
      "id" : 92084010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-04-12T16:07:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/92084010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Rebased.\r\n\r\nI'm not sure if i should include another commit which would then completely decouple the wallet over signaling to allow multiple wallet devices:\r\nhttps://github.com/jonasschnelli/bitcoin/commit/15ccf479f190786d0fc97a0253bfdbd080074ff1#diff-e74648dfe36ec1841b222ca921ad61c0\r\n\r\nWith this commit it would be a useful groundwork for ZMQ and a wallet rewriting without breaking the current wallet.",
      "created_at" : "2015-04-29T12:37:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-97414206",
      "id" : 97414206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-04-29T12:37:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97414206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased.",
      "created_at" : "2015-05-08T09:34:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-100173179",
      "id" : 100173179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-05-08T09:34:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/100173179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Added another commit on top.\r\n\r\nThis would decouple the wallet from the core and would allow to have multiple wallets (validation devices) over signaling.\r\n\r\nTogether with https://github.com/bitcoin/bitcoin/pull/5994 it would basically remove (almost) all wallet #ifdefs. The goal is to just have one wallet #ifdef at the point where we register for signals.\r\n\r\nIMO this is a massiv step forward of core/wallet separation.",
      "created_at" : "2015-05-08T09:57:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-100178912",
      "id" : 100178912,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-05-08T09:57:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/100178912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased",
      "created_at" : "2015-06-15T12:53:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-112057572",
      "id" : 112057572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-06-15T12:53:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112057572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32416984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32416984"
         }
      },
      "body" : "Why are we using .count here and not e.g. GetArg()?",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-06-15T13:07:17Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n+}\n+\n+bool IsDisabled()\n+{\n+    return GetBoolArg(\"-disablewallet\", false);\n+}\n+\n+void LoadAsModule(std::string& warningString, std::string& errorString, bool& stopInit)\n+{\n+    if (IsDisabled()) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+    } else {\n+        uiInterface.InitMessage(_(\"Loading wallet...\"));\n+        pwalletMain = new CWallet(GetWalletFile());\n+        \n+        if (!pwalletMain->LoadWallet(warningString, errorString))\n+            stopInit = true;\n+    }\n+}\n+\n+void Verify(std::string& warningString, std::string& errorString, bool &stopInit)\n+{\n+    if (IsDisabled())\n+        return;\n+    \n+    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    \n+    const std::string walletFile = GetWalletFile();\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    \n+    if (!pwalletMain->Verify(walletFile, warningString, errorString))\n+        stopInit = true;\n+}\n+\n+void MapParameters(std::string& warningString, std::string& errorString)\n+{\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-mintxfee\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32416984",
      "id" : 32416984,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 139,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32416984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417098"
         }
      },
      "body" : "Nit: Unneeded newline",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-06-15T13:08:42Z",
      "diff_hunk" : "@@ -702,9 +702,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n+    //! Dump wallet infos to log\n+    static void LogInfos();\n+    static void LogGeneralInfos();\n+\n     //! Verify the wallet database and perform salvage if required\n     static bool Verify(const std::string& walletFile, std::string& warningString, std::string& errorString);\n     \n+    static void StartWalletTasks(boost::thread_group& threadGroup);\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417098",
      "id" : 32417098,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 21,
      "path" : "src/wallet/wallet.h",
      "position" : 21,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417116"
         }
      },
      "body" : "This code has been moved 1:1 (better review capabilities).",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-06-15T13:08:58Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n+}\n+\n+bool IsDisabled()\n+{\n+    return GetBoolArg(\"-disablewallet\", false);\n+}\n+\n+void LoadAsModule(std::string& warningString, std::string& errorString, bool& stopInit)\n+{\n+    if (IsDisabled()) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+    } else {\n+        uiInterface.InitMessage(_(\"Loading wallet...\"));\n+        pwalletMain = new CWallet(GetWalletFile());\n+        \n+        if (!pwalletMain->LoadWallet(warningString, errorString))\n+            stopInit = true;\n+    }\n+}\n+\n+void Verify(std::string& warningString, std::string& errorString, bool &stopInit)\n+{\n+    if (IsDisabled())\n+        return;\n+    \n+    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    \n+    const std::string walletFile = GetWalletFile();\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    \n+    if (!pwalletMain->Verify(walletFile, warningString, errorString))\n+        stopInit = true;\n+}\n+\n+void MapParameters(std::string& warningString, std::string& errorString)\n+{\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-mintxfee\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417116",
      "id" : 32417116,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 139,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417155"
         }
      },
      "body" : "Nit: Missing indentation",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-06-15T13:09:29Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417155",
      "id" : 32417155,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 89,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 89,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "Travis issue seems to be non-related to this PR (race condition)",
      "created_at" : "2015-06-15T13:09:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-112064286",
      "id" : 112064286,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-06-15T13:09:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112064286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417361"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417361"
         }
      },
      "body" : "Not that it would matter that much, but how about using a static variable, that would allow to use ``GetWalletFile()`` without the need to store it into another std::string when using the function, which happens quite a few times.",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-06-15T13:11:35Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417361",
      "id" : 32417361,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 24,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 24,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417361",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417403"
         }
      },
      "body" : "Oops. Merge issue. This is even more than a \"nit\". Will fix.",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-06-15T13:12:06Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r32417403",
      "id" : 32417403,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 89,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 89,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-06-19T19:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32417403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Rebased this PR.\r\nThis PR is required to support two (or more) wallet implementations. This PR would allow to selective compile-in a potential 2nd wallet code.",
      "created_at" : "2015-06-16T18:38:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-112524096",
      "id" : 112524096,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-06-16T18:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112524096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "ut ACK - this seems a reasonable refactor to merge soonish even considering my comments on bitcoin-dev about refactoring - @jonasschnelli seems like the main person working on improving CoreWallet right now, so downstream developer breakage seems unlikely.\r\n",
      "created_at" : "2015-09-15T18:24:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-140490109",
      "id" : 140490109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-09-15T18:24:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140490109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "This would be a major step in decoupling the wallet from the core (codebase and not process decoupling). I'm ready to continue, but would like to get some concept ACK because this PR is itself relatively \"heavy\" and requires rebases all the time because it moves code away from `init.cpp` where often changes happen.",
      "created_at" : "2015-09-15T18:33:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-140492372",
      "id" : 140492372,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-09-15T18:33:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140492372",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565887"
         }
      },
      "body" : "NIT: Add a newline before this and before the next step?",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:11:27Z",
      "diff_hunk" : "@@ -940,25 +856,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     int64_t nStart;\n \n-    // ********************************************************* Step 5: verify wallet database integrity\n-#ifdef ENABLE_WALLET\n-    if (!fDisableWallet) {\n-        LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n-        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n-\n-        std::string warningString;\n-        std::string errorString;\n-\n-        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n-            return false;\n-\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-            return InitError(warningString);\n-\n-    } // (!fDisableWallet)\n-#endif // ENABLE_WALLET\n+    // ********************************************************* Step 5: verify integrity of connected devices\n+    warningString.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565887",
      "id" : 39565887,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 250,
      "path" : "src/init.cpp",
      "position" : 250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:11:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565924"
         }
      },
      "body" : "Nit: Missing indentation",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:11:43Z",
      "diff_hunk" : "@@ -940,25 +856,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     int64_t nStart;\n \n-    // ********************************************************* Step 5: verify wallet database integrity\n-#ifdef ENABLE_WALLET\n-    if (!fDisableWallet) {\n-        LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n-        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n-\n-        std::string warningString;\n-        std::string errorString;\n-\n-        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n-            return false;\n-\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-            return InitError(warningString);\n-\n-    } // (!fDisableWallet)\n-#endif // ENABLE_WALLET\n+    // ********************************************************* Step 5: verify integrity of connected devices\n+    warningString.clear();\n+    errorString.clear();\n+    bool stopInit = false;\n+    GetMainSignals().VerifyIntegrity(warningString, errorString, stopInit);\n+    if (stopInit)\n+        return false;\n+    \n+    if (!warningString.empty())\n+    InitWarning(warningString);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565924",
      "id" : 39565924,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 258,
      "path" : "src/init.cpp",
      "position" : 258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565931"
         }
      },
      "body" : "Nit: Missing indentation",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:11:49Z",
      "diff_hunk" : "@@ -940,25 +856,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     int64_t nStart;\n \n-    // ********************************************************* Step 5: verify wallet database integrity\n-#ifdef ENABLE_WALLET\n-    if (!fDisableWallet) {\n-        LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n-        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n-\n-        std::string warningString;\n-        std::string errorString;\n-\n-        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n-            return false;\n-\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-            return InitError(warningString);\n-\n-    } // (!fDisableWallet)\n-#endif // ENABLE_WALLET\n+    // ********************************************************* Step 5: verify integrity of connected devices\n+    warningString.clear();\n+    errorString.clear();\n+    bool stopInit = false;\n+    GetMainSignals().VerifyIntegrity(warningString, errorString, stopInit);\n+    if (stopInit)\n+        return false;\n+    \n+    if (!warningString.empty())\n+    InitWarning(warningString);\n+    if (!errorString.empty())\n+    return InitError(errorString);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565931",
      "id" : 39565931,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 260,
      "path" : "src/init.cpp",
      "position" : 260,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:11:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565994"
         }
      },
      "body" : "Nit: Same as with step 5.",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:12:22Z",
      "diff_hunk" : "@@ -1227,159 +1136,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    // ********************************************************* Step 8: load wallet\n-#ifdef ENABLE_WALLET\n-    if (fDisableWallet) {\n-        pwalletMain = NULL;\n-        LogPrintf(\"Wallet disabled!\\n\");\n-    } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n-        uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            //We can't rescan beyond non-pruned blocks, stop and throw an error\n-            //this might happen if a user uses a old wallet within a pruned node\n-            // or if he ran -disablewallet for a longer time, then decided to re-enable\n-            if (fPruneMode)\n-            {\n-                CBlockIndex *block = chainActive.Tip();\n-                while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-                    block = block->pprev;\n-\n-                if (pindexRescan != block)\n-                    return InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n-            }\n-\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    } // (!fDisableWallet)\n-#else // ENABLE_WALLET\n-    LogPrintf(\"No wallet support compiled in!\\n\");\n-#endif // !ENABLE_WALLET\n+    // ********************************************************* Step 8: load wallets/modules",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39565994",
      "id" : 39565994,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 421,
      "path" : "src/init.cpp",
      "position" : 421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:12:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39565994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566133"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566133"
         }
      },
      "body" : "legacywallet.h includes wallet.h",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:13:31Z",
      "diff_hunk" : "@@ -31,6 +31,7 @@\n #include \"util.h\"\n \n #ifdef ENABLE_WALLET\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566133",
      "id" : 39566133,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 5,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 5,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:13:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566152"
         }
      },
      "body" : "legacywallet.h includes wallet.h... true for all other places below",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:13:41Z",
      "diff_hunk" : "@@ -13,6 +13,7 @@\n #include \"base58.h\"\n #include \"init.h\"\n #include \"main.h\" // For strMessageMagic\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566152",
      "id" : 39566152,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 5,
      "path" : "src/qt/signverifymessagedialog.cpp",
      "position" : 5,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566363"
         }
      },
      "body" : "Nit: 2015 ;)",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:15:19Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566363",
      "id" : 39566363,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 2,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 2,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:15:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566544"
         }
      },
      "body" : "Still needs fixing :).",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:16:50Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566544",
      "id" : 39566544,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 89,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 89,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:16:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566646"
         }
      },
      "body" : "Could be a one-line check?",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:17:43Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n+}\n+\n+bool IsDisabled()\n+{\n+    return GetBoolArg(\"-disablewallet\", false);\n+}\n+\n+void LoadAsModule(std::string& warningString, std::string& errorString, bool& stopInit)\n+{\n+    if (IsDisabled()) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+    } else {\n+        uiInterface.InitMessage(_(\"Loading wallet...\"));\n+        pwalletMain = new CWallet(GetWalletFile());\n+        \n+        if (!pwalletMain->LoadWallet(warningString, errorString))\n+            stopInit = true;\n+    }\n+}\n+\n+void Verify(std::string& warningString, std::string& errorString, bool &stopInit)\n+{\n+    if (IsDisabled())\n+        return;\n+    \n+    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    \n+    const std::string walletFile = GetWalletFile();\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    \n+    if (!pwalletMain->Verify(walletFile, warningString, errorString))\n+        stopInit = true;\n+}\n+\n+void MapParameters(std::string& warningString, std::string& errorString)\n+{\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566646",
      "id" : 39566646,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 135,
      "path" : "src/wallet/legacywallet.cpp",
      "position" : 135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:17:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566722"
         }
      },
      "body" : "Needs to be BITCOIN_WALLET_LEGACYWALLET_H, also for header end comment.",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:18:17Z",
      "diff_hunk" : "@@ -0,0 +1,20 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_LEGACYWALLET_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566722",
      "id" : 39566722,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 6,
      "path" : "src/wallet/legacywallet.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566873"
         }
      },
      "body" : "Could return as const.",
      "commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "created_at" : "2015-09-15T21:19:33Z",
      "diff_hunk" : "@@ -0,0 +1,20 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_LEGACYWALLET_H\n+#define BITCOIN_LEGACYWALLET_H\n+\n+#include \"wallet/wallet.h\"\n+\n+extern CWallet* pwalletMain;\n+\n+namespace CLegacyWalletModule {\n+    void RegisterSignals();\n+    void UnregisterSignals();\n+    \n+    std::string GetWalletFile();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#discussion_r39566873",
      "id" : 39566873,
      "original_commit_id" : "fb5b746fce742218ae5d6f285c2936a50897c5db",
      "original_position" : 17,
      "path" : "src/wallet/legacywallet.h",
      "position" : 17,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5990",
      "updated_at" : "2015-09-15T21:19:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/39566873",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "concept ACK,  will review some point soon",
      "created_at" : "2015-09-16T07:00:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-140648948",
      "id" : 140648948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-10-21T22:17:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/140648948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "light utACK,  will review again after rebase @jonasschnelli ",
      "created_at" : "2015-10-21T22:16:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-150040345",
      "id" : 150040345,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-10-21T22:17:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150040345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "Needs rebase.",
      "created_at" : "2015-11-28T21:28:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-160336915",
      "id" : 160336915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2015-11-28T21:28:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160336915",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Is this pull still relevant with recent wallet/init.cpp changes? If so needs rebase, otherwise let's close",
      "created_at" : "2016-04-15T14:19:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-210480043",
      "id" : 210480043,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2016-04-15T14:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/210480043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Right. Closing. #7691 (merged) did contain most of this changes (a slightly different concept though).",
      "created_at" : "2016-04-15T16:34:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5990#issuecomment-210533990",
      "id" : 210533990,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5990",
      "updated_at" : "2016-04-15T16:34:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/210533990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
