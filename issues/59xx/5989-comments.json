[
   {
      "body" : "Any possibility to use the timer stuff being added in #5964 ?\r\n",
      "created_at" : "2015-04-09T21:02:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-91355456",
      "id" : 91355456,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-09T21:02:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91355456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "@jgarzik maybe later, porting wont be difficult",
      "created_at" : "2015-04-10T03:38:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-91418767",
      "id" : 91418767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-10T03:38:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91418767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28124119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124119"
         }
      },
      "body" : "Could that magic number be defined somehwere as constant? IMHO it's used quite often in this pull.",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-10T06:13:18Z",
      "diff_hunk" : "@@ -4529,31 +4516,24 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!lockMain)\n             return true;\n \n-        // Address refresh broadcast\n-        static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n-        {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-            {\n-                // Periodically clear setAddrKnown to allow refresh broadcasts\n-                if (nLastRebroadcast)\n-                    pnode->setAddrKnown.clear();\n-\n-                // Rebroadcast our address\n-                AdvertizeLocal(pnode);\n-            }\n-            if (!vNodes.empty())\n-                nLastRebroadcast = GetTime();\n-        }\n-\n         //\n         // Message: addr\n         //\n-        if (fSendTrickle)\n-        {\n+\n+        if (pto->nNextLocalAddrSend < GetTime()) {\n+            AdvertizeLocal(pto);\n+            pto->nNextLocalAddrSend = GetTime() + GetRand(24 * 60 * 60);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28124119",
      "id" : 28124119,
      "original_commit_id" : "2abc256a8277722889c8d796ab78fa5fb4a6affb",
      "original_position" : 59,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28124119",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28180845"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28180845"
         }
      },
      "body" : "At a later date in a different PR",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-10T21:11:47Z",
      "diff_hunk" : "@@ -4529,31 +4516,24 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!lockMain)\n             return true;\n \n-        // Address refresh broadcast\n-        static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n-        {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-            {\n-                // Periodically clear setAddrKnown to allow refresh broadcasts\n-                if (nLastRebroadcast)\n-                    pnode->setAddrKnown.clear();\n-\n-                // Rebroadcast our address\n-                AdvertizeLocal(pnode);\n-            }\n-            if (!vNodes.empty())\n-                nLastRebroadcast = GetTime();\n-        }\n-\n         //\n         // Message: addr\n         //\n-        if (fSendTrickle)\n-        {\n+\n+        if (pto->nNextLocalAddrSend < GetTime()) {\n+            AdvertizeLocal(pto);\n+            pto->nNextLocalAddrSend = GetTime() + GetRand(24 * 60 * 60);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28180845",
      "id" : 28180845,
      "original_commit_id" : "2abc256a8277722889c8d796ab78fa5fb4a6affb",
      "original_position" : 59,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28180845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28193784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28193784"
         }
      },
      "body" : "In a random walk, it is hard to efficiently avoid processing the same element twice. If shuffling is slow, create an array of indexes, and shuffle that. Also, where does std::random_shuffle() get its randomness?\r\n\r\nSuggested code:\r\n```\r\nstd::vector<int> vRandInv;\r\nvRandInv.resize(pto->vInventoryToSend.size());\r\nfor (int i = 0; i < pto->vRandInv.size(); i++) vRandInv[i] = i;\r\nfor (int i = 0; i < pto->vRandInv.size(); i++) std::swap(vRandInv[i], vRandInv[i + GetRand(vRandInv.size() - i]);\r\n\r\nfor (int i = 0; i < pto->vRandInv.size(); i++) {\r\n    const CInv& inv = pto->vInventoryToSend[vRandInv[i]];\r\n\r\n    ...\r\n```\r\n",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-11T09:41:43Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28193784",
      "id" : 28193784,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 112,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28193784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28193804"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28193804"
         }
      },
      "body" : "You already have an initialized nNowMicros variable. No need to request the current time again?",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-11T09:45:27Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient\n+            std::random_shuffle(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end());\n+\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend) {\n+                switch(inv.type) {\n+                    case MSG_BLOCK:\n+                    case MSG_FILTERED_BLOCK:\n                     {\n-                        vInvWait.push_back(inv);\n-                        continue;\n+                        // Aggressively push MSG_BLOCK/MSG_FILTERED_BLOCK\n+                        if (pto->setInventoryKnown.insert(inv).second) {\n+                            vInv.push_back(inv);\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n+                        break;\n                     }\n-                }\n+                    case MSG_TX:\n+                    {\n+                        if (pto->nNextInvSend < nNowMicros || pto->fWhitelisted) {\n+                            if (pto->setInventoryKnown.insert(inv).second) {\n+                                vInv.push_back(inv);\n+                                if (vInv.size() >= 1000) {\n+                                    pto->PushMessage(\"inv\", vInv);\n+                                    vInv.clear();\n+                                }\n+                            }\n+                        }\n+                        else\n+                            vInvWait.push_back(inv);\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n-                {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n+                        break;\n+                    }\n+                    default:\n                     {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n+                        vInv.push_back(inv);\n+                        if (vInv.size() >= 1000) {\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n                     }\n                 }\n             }\n+\n             pto->vInventoryToSend = vInvWait;\n         }\n+\n         if (!vInv.empty())\n             pto->PushMessage(\"inv\", vInv);\n \n+        if (pto->nNextInvSend < nNowMicros)\n+            pto->nNextInvSend = nNowMicros + GetRand(10 * 1000000);\n+\n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        nNowMicros = GetTimeMicros();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28193804",
      "id" : 28193804,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 177,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28193804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28193842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28193842"
         }
      },
      "body" : "Maybe it is more efficient to keep a separate vInventoryToSend for MSG_BLOCK and MSG_FILTERED_BLOCK, and only shuffle/process the normal one when nNextInvSend is exceeded.",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-11T09:54:44Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient\n+            std::random_shuffle(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end());\n+\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend) {\n+                switch(inv.type) {\n+                    case MSG_BLOCK:\n+                    case MSG_FILTERED_BLOCK:\n                     {\n-                        vInvWait.push_back(inv);\n-                        continue;\n+                        // Aggressively push MSG_BLOCK/MSG_FILTERED_BLOCK",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28193842",
      "id" : 28193842,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 122,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28193842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Concept ACK. I love getting rid of the vSendTrickle logic...",
      "created_at" : "2015-04-11T09:55:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-91811198",
      "id" : 91811198,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-11T09:55:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91811198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28195448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28195448"
         }
      },
      "body" : "There's a certain amount of error from caching the value.\r\n\r\nThe value is updated twice to reduce this error.\r\n",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-11T14:41:12Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient\n+            std::random_shuffle(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end());\n+\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend) {\n+                switch(inv.type) {\n+                    case MSG_BLOCK:\n+                    case MSG_FILTERED_BLOCK:\n                     {\n-                        vInvWait.push_back(inv);\n-                        continue;\n+                        // Aggressively push MSG_BLOCK/MSG_FILTERED_BLOCK\n+                        if (pto->setInventoryKnown.insert(inv).second) {\n+                            vInv.push_back(inv);\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n+                        break;\n                     }\n-                }\n+                    case MSG_TX:\n+                    {\n+                        if (pto->nNextInvSend < nNowMicros || pto->fWhitelisted) {\n+                            if (pto->setInventoryKnown.insert(inv).second) {\n+                                vInv.push_back(inv);\n+                                if (vInv.size() >= 1000) {\n+                                    pto->PushMessage(\"inv\", vInv);\n+                                    vInv.clear();\n+                                }\n+                            }\n+                        }\n+                        else\n+                            vInvWait.push_back(inv);\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n-                {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n+                        break;\n+                    }\n+                    default:\n                     {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n+                        vInv.push_back(inv);\n+                        if (vInv.size() >= 1000) {\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n                     }\n                 }\n             }\n+\n             pto->vInventoryToSend = vInvWait;\n         }\n+\n         if (!vInv.empty())\n             pto->PushMessage(\"inv\", vInv);\n \n+        if (pto->nNextInvSend < nNowMicros)\n+            pto->nNextInvSend = nNowMicros + GetRand(10 * 1000000);\n+\n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        nNowMicros = GetTimeMicros();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28195448",
      "id" : 28195448,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 177,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28195448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28892524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28892524"
         }
      },
      "body" : "If the difference in time between them is more than a few milliseconds, we have different problems :)",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-22T16:57:20Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient\n+            std::random_shuffle(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end());\n+\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend) {\n+                switch(inv.type) {\n+                    case MSG_BLOCK:\n+                    case MSG_FILTERED_BLOCK:\n                     {\n-                        vInvWait.push_back(inv);\n-                        continue;\n+                        // Aggressively push MSG_BLOCK/MSG_FILTERED_BLOCK\n+                        if (pto->setInventoryKnown.insert(inv).second) {\n+                            vInv.push_back(inv);\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n+                        break;\n                     }\n-                }\n+                    case MSG_TX:\n+                    {\n+                        if (pto->nNextInvSend < nNowMicros || pto->fWhitelisted) {\n+                            if (pto->setInventoryKnown.insert(inv).second) {\n+                                vInv.push_back(inv);\n+                                if (vInv.size() >= 1000) {\n+                                    pto->PushMessage(\"inv\", vInv);\n+                                    vInv.clear();\n+                                }\n+                            }\n+                        }\n+                        else\n+                            vInvWait.push_back(inv);\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n-                {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n+                        break;\n+                    }\n+                    default:\n                     {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n+                        vInv.push_back(inv);\n+                        if (vInv.size() >= 1000) {\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n                     }\n                 }\n             }\n+\n             pto->vInventoryToSend = vInvWait;\n         }\n+\n         if (!vInv.empty())\n             pto->PushMessage(\"inv\", vInv);\n \n+        if (pto->nNextInvSend < nNowMicros)\n+            pto->nNextInvSend = nNowMicros + GetRand(10 * 1000000);\n+\n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        nNowMicros = GetTimeMicros();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28892524",
      "id" : 28892524,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 177,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28892524",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28897696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28897696"
         }
      },
      "body" : "I want to avoid changing the logic of anything im not explicitly touching.",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-22T17:54:22Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient\n+            std::random_shuffle(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end());\n+\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend) {\n+                switch(inv.type) {\n+                    case MSG_BLOCK:\n+                    case MSG_FILTERED_BLOCK:\n                     {\n-                        vInvWait.push_back(inv);\n-                        continue;\n+                        // Aggressively push MSG_BLOCK/MSG_FILTERED_BLOCK\n+                        if (pto->setInventoryKnown.insert(inv).second) {\n+                            vInv.push_back(inv);\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n+                        break;\n                     }\n-                }\n+                    case MSG_TX:\n+                    {\n+                        if (pto->nNextInvSend < nNowMicros || pto->fWhitelisted) {\n+                            if (pto->setInventoryKnown.insert(inv).second) {\n+                                vInv.push_back(inv);\n+                                if (vInv.size() >= 1000) {\n+                                    pto->PushMessage(\"inv\", vInv);\n+                                    vInv.clear();\n+                                }\n+                            }\n+                        }\n+                        else\n+                            vInvWait.push_back(inv);\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n-                {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n+                        break;\n+                    }\n+                    default:\n                     {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n+                        vInv.push_back(inv);\n+                        if (vInv.size() >= 1000) {\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n                     }\n                 }\n             }\n+\n             pto->vInventoryToSend = vInvWait;\n         }\n+\n         if (!vInv.empty())\n             pto->PushMessage(\"inv\", vInv);\n \n+        if (pto->nNextInvSend < nNowMicros)\n+            pto->nNextInvSend = nNowMicros + GetRand(10 * 1000000);\n+\n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        nNowMicros = GetTimeMicros();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28897696",
      "id" : 28897696,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 177,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28897696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28897797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28897797"
         }
      },
      "body" : "Fair enough.",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-22T17:55:19Z",
      "diff_hunk" : "@@ -4619,54 +4600,72 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+        vector<CInv> vInv, vInvWait;\n+        nNowMicros = GetTimeMicros();\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n+        vInv.reserve(1000);\n+        \n+        if (pto->nNextInvSend < nNowMicros)\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n \n-                    if (fTrickleWait)\n+        {\n+            LOCK(pto->cs_inventory);\n+            \n+            // TODO it would be sufficient to walk vInventoryToSend randomly, shuffling is relatively inefficient\n+            std::random_shuffle(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end());\n+\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend) {\n+                switch(inv.type) {\n+                    case MSG_BLOCK:\n+                    case MSG_FILTERED_BLOCK:\n                     {\n-                        vInvWait.push_back(inv);\n-                        continue;\n+                        // Aggressively push MSG_BLOCK/MSG_FILTERED_BLOCK\n+                        if (pto->setInventoryKnown.insert(inv).second) {\n+                            vInv.push_back(inv);\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n+                        break;\n                     }\n-                }\n+                    case MSG_TX:\n+                    {\n+                        if (pto->nNextInvSend < nNowMicros || pto->fWhitelisted) {\n+                            if (pto->setInventoryKnown.insert(inv).second) {\n+                                vInv.push_back(inv);\n+                                if (vInv.size() >= 1000) {\n+                                    pto->PushMessage(\"inv\", vInv);\n+                                    vInv.clear();\n+                                }\n+                            }\n+                        }\n+                        else\n+                            vInvWait.push_back(inv);\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n-                {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n+                        break;\n+                    }\n+                    default:\n                     {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n+                        vInv.push_back(inv);\n+                        if (vInv.size() >= 1000) {\n+                            pto->PushMessage(\"inv\", vInv);\n+                            vInv.clear();\n+                        }\n                     }\n                 }\n             }\n+\n             pto->vInventoryToSend = vInvWait;\n         }\n+\n         if (!vInv.empty())\n             pto->PushMessage(\"inv\", vInv);\n \n+        if (pto->nNextInvSend < nNowMicros)\n+            pto->nNextInvSend = nNowMicros + GetRand(10 * 1000000);\n+\n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        nNowMicros = GetTimeMicros();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r28897797",
      "id" : 28897797,
      "original_commit_id" : "85efde3c61885f5a5050c9630f17c72ec9df9c16",
      "original_position" : 177,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-22T18:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/28897797",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I'm with @jgarzik: this could be much cleaner built on top of #5964. All of the pnode->nNext* variables could go away; just schedule a task that takes a NodeId and Does The Right Thing at some (random) time in the future.\r\n\r\n(the tasks would lock cs_vNodes and do the NodeId to CNode* lookup... probably don't need to optimize that lookup, looping through even a 1,000-peer vector isn't a significant amount of CPU time).\r\n",
      "created_at" : "2015-04-24T15:18:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-95964175",
      "id" : 95964175,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-24T15:18:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/95964175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Unsure. I don't think running the scheduled operations makes sense if there\nis nothing else to do for a node, and there almost always is, at which time\nwe already hold the necessary locks.\n\nSmall benefit, small cost.\n",
      "created_at" : "2015-04-24T15:29:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-95967446",
      "id" : 95967446,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-24T15:29:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/95967446",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa : benefit would be clearer logic. I find the \"set a variable here, test it over there and then do something\" hard to review/follow.\r\n",
      "created_at" : "2015-04-24T17:18:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-95998172",
      "id" : 95998172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-24T17:18:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/95998172",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "@gavinandresen As I said to @jgarzik it's easy enough to back port this logic into CSchedule.\r\n\r\nI would rather not tie the two PR's together.",
      "created_at" : "2015-04-24T17:55:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-96012620",
      "id" : 96012620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-24T17:55:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/96012620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r29104543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/29104543"
         }
      },
      "body" : "Integer overflow on this line. You probably want to cast to int64_t first.",
      "commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "created_at" : "2015-04-25T22:04:37Z",
      "diff_hunk" : "@@ -4553,31 +4540,25 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!lockMain)\n             return true;\n \n-        // Address refresh broadcast\n-        static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n-        {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-            {\n-                // Periodically clear setAddrKnown to allow refresh broadcasts\n-                if (nLastRebroadcast)\n-                    pnode->setAddrKnown.clear();\n-\n-                // Rebroadcast our address\n-                AdvertizeLocal(pnode);\n-            }\n-            if (!vNodes.empty())\n-                nLastRebroadcast = GetTime();\n-        }\n-\n         //\n         // Message: addr\n         //\n-        if (fSendTrickle)\n-        {\n+\n+        int64_t nNowMicros = GetTimeMicros();\n+        if (pto->nNextLocalAddrSend < nNowMicros) {\n+            AdvertizeLocal(pto);\n+            pto->nNextLocalAddrSend = nNowMicros + GetRand(24 * 60 * 60 * 1000000);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#discussion_r29104543",
      "id" : 29104543,
      "original_commit_id" : "d807bdcbc5c42fd7c654656dba957f6113023de2",
      "original_position" : 60,
      "path" : "src/main.cpp",
      "position" : 60,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5989",
      "updated_at" : "2015-04-25T22:04:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/29104543",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@gavinandresen Yes, that's the small benefit. The small cost is extra locking/work. Not opposed to it, but it's not as clear an advantage as replacing the several pieces of code we had that were already using their own thread. This one doesn't need it.",
      "created_at" : "2015-04-25T22:06:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-96286291",
      "id" : 96286291,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-25T22:06:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/96286291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Can you fix the integer overflow, and perhaps rebase on top of #6066?",
      "created_at" : "2015-04-27T13:07:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-96643520",
      "id" : 96643520,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-04-27T13:07:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/96643520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Rebase please?",
      "created_at" : "2015-05-05T13:25:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-99076924",
      "id" : 99076924,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-05-05T13:25:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/99076924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Needs rebase, and fixing the integer overflow.",
      "created_at" : "2015-06-14T14:16:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-111829865",
      "id" : 111829865,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-06-14T14:16:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/111829865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Did a rebase and fix: https://github.com/sipa/bitcoin/commits/trickle_fix",
      "created_at" : "2015-06-14T14:38:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-111835675",
      "id" : 111835675,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-06-14T14:38:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/111835675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@pstratem ping",
      "created_at" : "2015-07-09T20:57:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-120141993",
      "id" : 120141993,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-07-09T20:57:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120141993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa pong",
      "created_at" : "2015-07-09T20:58:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-120142203",
      "id" : 120142203,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-07-09T20:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120142203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "setAddrKnown was replaced with a CRollingBloomFilter d81cff32e50fe5f686f985d0af2e74219f328ed0\r\n\r\nGiven this it seems reasonable to slowly unset bits of the bloomfilter rather than clearing the filter entirely every 24 hours.\r\n\r\nThoughts?",
      "created_at" : "2015-07-12T23:17:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-120772064",
      "id" : 120772064,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-07-12T23:17:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120772064",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "Scratch that. There's no need to clear the filter explicitly with the rolling bloom filter.",
      "created_at" : "2015-07-13T00:44:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-120776749",
      "id" : 120776749,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-07-13T00:44:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120776749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   },
   {
      "body" : "@pstratem rebase/close?",
      "created_at" : "2015-10-30T08:52:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-152462865",
      "id" : 152462865,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-10-30T08:52:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/152462865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "rebase please...\n",
      "created_at" : "2015-10-30T15:49:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-152562747",
      "id" : 152562747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-10-30T15:49:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/152562747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "See #7125.",
      "created_at" : "2015-11-28T15:09:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-160309049",
      "id" : 160309049,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-11-28T15:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160309049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "we have better ideas on how to achieve the properties of the trickle logic (such as mempool sync at random interval)",
      "created_at" : "2015-12-08T01:08:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5989#issuecomment-162721410",
      "id" : 162721410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5989",
      "updated_at" : "2015-12-08T01:08:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162721410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/620611?v=3",
         "events_url" : "https://api.github.com/users/pstratem/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pstratem/followers",
         "following_url" : "https://api.github.com/users/pstratem/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pstratem/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pstratem",
         "id" : 620611,
         "login" : "pstratem",
         "organizations_url" : "https://api.github.com/users/pstratem/orgs",
         "received_events_url" : "https://api.github.com/users/pstratem/received_events",
         "repos_url" : "https://api.github.com/users/pstratem/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pstratem/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pstratem"
      }
   }
]
