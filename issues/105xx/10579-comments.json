[
   {
      "body" : "Incorrect scripted diff.",
      "created_at" : "2017-06-13T01:15:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-307978482",
      "id" : 307978482,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-06-13T01:15:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307978482",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I'm not entirely sure if this is a good long term strategy.\r\n`signrawtransactionwithwallet` seems okay(ish) but I don't see a reason to pass around a private key (though RPC, TCP into the same process that runs the p2p/validation/node).\r\n\r\nWhere are the differences between`bitcoin-tx`'s `sign` command and the here proposed `signrawtransactionwithkey`?\r\nWouldn't it make more sense to focus on `bitcoin-tx` for (offline) rawtx signing?",
      "created_at" : "2017-06-13T08:50:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-308050369",
      "id" : 308050369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-06-13T08:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308050369",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli `signrawtransactionwithkey` will lookup the UTXOs in order to sign whereas `bitcoin-tx`'s `sign' command requires you to supply them. This is much easier to use.",
      "created_at" : "2017-06-13T18:23:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-308205250",
      "id" : 308205250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-06-13T18:23:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308205250",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "This has missed the 0.15 feature freeze, moving to 0.16.",
      "created_at" : "2017-07-18T15:21:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-316098940",
      "id" : 316098940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-07-18T15:21:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/316098940",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "needs rebase",
      "created_at" : "2017-08-15T14:33:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-322485304",
      "id" : 322485304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-08-15T14:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322485304",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "rebased",
      "created_at" : "2017-08-15T21:33:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-322596167",
      "id" : 322596167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-08-15T21:33:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322596167",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135879865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135879865"
         }
      },
      "author_association" : "MEMBER",
      "body" : "supernit: 1 usually comes before 2 :)",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T18:49:14Z",
      "diff_hunk" : "@@ -95,6 +95,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 3, \"replaceable\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135879865",
      "id" : 135879865,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 6,
      "path" : "src/rpc/client.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135879865",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135882595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135882595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should be in the first commit (6fded798a77e8a754fa9455afd3328aee0842274)",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T18:59:22Z",
      "diff_hunk" : "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   rpc/register.h \\\n+  rpc/rawtransaction.h \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135882595",
      "id" : 135882595,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 4,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135882595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135882930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135882930"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you make this change before the scripted diff commit (to not break git bisect). You could change the args to be named args while you're doing that.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:00:29Z",
      "diff_hunk" : "@@ -74,7 +74,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135882930",
      "id" : 135882930,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 5,
      "path" : "test/functional/txn_clone.py",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135882930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135883148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135883148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no need for `assert_equal(thing, True)`. Just use `assert thing`",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:01:26Z",
      "diff_hunk" : "@@ -34,7 +34,17 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, inputs, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n+\n+        # 1) The transaction has a complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert_equal(rawTxSigned['complete'], True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135883148",
      "id" : 135883148,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 9,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135883148",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135883282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135883282"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just use `assert not thing`",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:01:59Z",
      "diff_hunk" : "@@ -110,6 +120,32 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+\n+        # 3) The transaction has no complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert_equal(rawTxSigned['complete'], False)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135883282",
      "id" : 135883282,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 28,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135883282",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135883686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135883686"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove these tests before the first commit.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:03:45Z",
      "diff_hunk" : "@@ -67,14 +67,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_EQUAL(find_value(r.get_obj(), \"locktime\").get_int(), 0);\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135883686",
      "id" : 135883686,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 4,
      "path" : "src/test/rpc_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135883686",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135884802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135884802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have a slight personal preference for `walletsignrawtransaction`. 4 keystrokes saved :)",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:08:40Z",
      "diff_hunk" : "@@ -22,4 +23,6 @@ std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135884802",
      "id" : 135884802,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 12,
      "path" : "src/wallet/rpcwallet.h",
      "position" : 12,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135884802",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135885885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135885885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: alignment",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:13:41Z",
      "diff_hunk" : "@@ -3147,6 +3216,7 @@ static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"rawtransactions\",    \"signrawtransactionwithwallet\",       &signrawtransactionwithwallet,       false, {\"hexstring\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135885885",
      "id" : 135885885,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 87,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135885885",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135886688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135886688"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this should be \"wallet\" category.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:17:12Z",
      "diff_hunk" : "@@ -3147,6 +3216,7 @@ static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"rawtransactions\",    \"signrawtransactionwithwallet\",       &signrawtransactionwithwallet,       false, {\"hexstring\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135886688",
      "id" : 135886688,
      "in_reply_to_id" : 135885885,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 87,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135886688",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135887363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135887363"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: braces for if statements please",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:20:20Z",
      "diff_hunk" : "@@ -2947,6 +2948,74 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135887363",
      "id" : 135887363,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 73,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135887363",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135887663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135887663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: alignment",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:21:34Z",
      "diff_hunk" : "@@ -970,7 +1047,8 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  true,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     true, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} },\n+    { \"rawtransactions\",    \"signrawtransactionwithkey\", &signrawtransactionwithkey, true, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135887663",
      "id" : 135887663,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 379,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135887663",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135888410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135888410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This function is called by `signrawtransactionwithwallet` which calls `LOCK2(cs_main, pwallet->cs_wallet);`. Is it ok to call `LOCK(main)` on top of that?\r\n\r\nIf not, you'll need to move this `LOCK(main)` into the calling `signrawtransactionwithkey()` function.\r\n\r\nIf it's ok to call locks this way, then you can change this for `LOCK2(cs_main, mempool.cs)`",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:24:52Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135888410",
      "id" : 135888410,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 96,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135888410",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135889367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135889367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think `request.params.size() > 2` is required. Univalue does the bounds checking for you.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:29:09Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest newRequest;\n+    newRequest.id = request.id;\n+    newRequest.params.setArray();\n+\n+    // For signing with private keys\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135889367",
      "id" : 135889367,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 346,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135889367",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135889913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135889913"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should become an `else`, and remove the `else` below (if we drop down that far then we've failed and should throw the `\"No private keys available.\"` error",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:31:41Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest newRequest;\n+    newRequest.id = request.id;\n+    newRequest.params.setArray();\n+\n+    // For signing with private keys\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        newRequest.params.push_back(request.params[0]);\n+        newRequest.params.push_back(request.params[2]);\n+        newRequest.params.push_back(request.params[1]);\n+        newRequest.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(newRequest);\n+    }\n+    // Otherwise sign with the wallet\n+#ifdef ENABLE_WALLET\n+    else if (request.params[2].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135889913",
      "id" : 135889913,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 355,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135889913",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135890226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135890226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "suggestion: add comment here to say that order of `prevtxs` and `privkeys` is reversed in `signrawtranactionwithkey`",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:33:01Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest newRequest;\n+    newRequest.id = request.id;\n+    newRequest.params.setArray();\n+\n+    // For signing with private keys\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        newRequest.params.push_back(request.params[0]);\n+        newRequest.params.push_back(request.params[2]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135890226",
      "id" : 135890226,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 348,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135890226",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135890426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135890426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "suggestion: add a comment here to say that `signrawtransactionwithwallet` doesn't take a `privkeys` parameter.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:33:59Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest newRequest;\n+    newRequest.id = request.id;\n+    newRequest.params.setArray();\n+\n+    // For signing with private keys\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        newRequest.params.push_back(request.params[0]);\n+        newRequest.params.push_back(request.params[2]);\n+        newRequest.params.push_back(request.params[1]);\n+        newRequest.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(newRequest);\n+    }\n+    // Otherwise sign with the wallet\n+#ifdef ENABLE_WALLET\n+    else if (request.params[2].isNull()) {\n+        newRequest.params.push_back(request.params[0]);\n+        newRequest.params.push_back(request.params[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135890426",
      "id" : 135890426,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 357,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135890426",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135892384"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135892384"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps hide this RPC behind a deprecated command line argument (similar to #11031)",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:43:13Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135892384",
      "id" : 135892384,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 273,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135892384",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135892924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135892924"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I know these are moves, but there's so few of them that you might as well add braces to the `if`s.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:45:32Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135892924",
      "id" : 135892924,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 253,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135892924",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135893062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135893062"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: use snake_case for variables in new functions.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T19:46:22Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest newRequest;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135893062",
      "id" : 135893062,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 341,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135893062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135896071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135896071"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: new function parameters should be snake_case",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T20:00:25Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135896071",
      "id" : 135896071,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 16,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59343998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135896071",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135906574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135906574"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery for me it's more \"Sort please\" :trollface: ",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T20:44:39Z",
      "diff_hunk" : "@@ -95,6 +95,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 3, \"replaceable\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135906574",
      "id" : 135906574,
      "in_reply_to_id" : 135879865,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 6,
      "path" : "src/rpc/client.cpp",
      "position" : null,
      "pull_request_review_id" : 59374969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135906574",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135906646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135906646"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "... and sorted.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T20:45:00Z",
      "diff_hunk" : "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   rpc/register.h \\\n+  rpc/rawtransaction.h \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135906646",
      "id" : 135906646,
      "in_reply_to_id" : 135882595,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 4,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : 59375053,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135906646",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135908679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135908679"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove key asserts since below you assert the value, which fail in case the key is not defined? cc @jnewbery.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T20:53:03Z",
      "diff_hunk" : "@@ -34,6 +34,16 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n+\n+        # 1) The transaction has a complete set of signatures\n+        assert 'complete' in rawTxSigned",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135908679",
      "id" : 135908679,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 16,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59377396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135908679",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911034"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing comment.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:02:27Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911034",
      "id" : 135911034,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 13,
      "path" : "src/rpc/rawtransaction.h",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911034",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911188"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Unknown types below: `CMutableTransaction` and `UniValue`.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:03:13Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911188",
      "id" : 135911188,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.h",
      "position" : 8,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911188",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911272"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sort.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:03:37Z",
      "diff_hunk" : "@@ -18,6 +18,7 @@\n #include \"policy/rbf.h\"\n #include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n+#include \"rpc/rawtransaction.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911272",
      "id" : 135911272,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911272",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911788"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove newline.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:05:52Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911788",
      "id" : 135911788,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 193,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911788",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911931"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`++idx`.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:06:29Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135911931",
      "id" : 135911931,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 258,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135911931",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135912359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135912359"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Braces.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:08:18Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135912359",
      "id" : 135912359,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 265,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135912359",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135912367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135912367"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Take the opportunity to kill `fGood`:\r\n```cpp\r\nif (!vchSecret.SetString(k.get_str())) {\r\n```",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:08:19Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135912367",
      "id" : 135912367,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 262,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135912367",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135912984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135912984"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\nelse {\r\n```",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:11:04Z",
      "diff_hunk" : "@@ -888,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(k.get_str());\n+        if (!fGood)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        keystore.AddKey(key);\n+    }\n+\n+    return signtransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest newRequest;\n+    newRequest.id = request.id;\n+    newRequest.params.setArray();\n+\n+    // For signing with private keys\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        newRequest.params.push_back(request.params[0]);\n+        newRequest.params.push_back(request.params[2]);\n+        newRequest.params.push_back(request.params[1]);\n+        newRequest.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(newRequest);\n+    }\n+    // Otherwise sign with the wallet\n+#ifdef ENABLE_WALLET\n+    else if (request.params[2].isNull()) {\n+        newRequest.params.push_back(request.params[0]);\n+        newRequest.params.push_back(request.params[1]);\n+        newRequest.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(newRequest);\n+    }\n+#endif\n+    else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135912984",
      "id" : 135912984,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 362,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135912984",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135913237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135913237"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ops, align this and above lines? Ã°ÂÂÂ ",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T21:12:05Z",
      "diff_hunk" : "@@ -970,7 +1047,8 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  true,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     true, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135913237",
      "id" : 135913237,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 378,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59380104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135913237",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135933097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135933097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "since `cs_main` isn't necessary in `signrawtransactionwithwallet`, I've removed it.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T22:57:16Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135933097",
      "id" : 135933097,
      "in_reply_to_id" : 135888410,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 96,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59405205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135933097",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135934464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135934464"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Huh?",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T23:06:33Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135934464",
      "id" : 135934464,
      "in_reply_to_id" : 135911034,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 13,
      "path" : "src/rpc/rawtransaction.h",
      "position" : null,
      "pull_request_review_id" : 59406711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135934464",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135935489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135935489"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\n#endif // BITCOIN_RPC_RAWTRANSACTION_H\r\n```",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T23:13:48Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135935489",
      "id" : 135935489,
      "in_reply_to_id" : 135911034,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 13,
      "path" : "src/rpc/rawtransaction.h",
      "position" : null,
      "pull_request_review_id" : 59407844,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135935489",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135937275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135937275"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually it is needed, but locking twice in the same thread is fine since it is a `recursive_mutex`.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-29T23:27:50Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135937275",
      "id" : 135937275,
      "in_reply_to_id" : 135888410,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 96,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59409916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135937275",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and addressed many comments",
      "created_at" : "2017-08-29T23:52:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-325837065",
      "id" : 325837065,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-08-29T23:52:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/325837065",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135978660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135978660"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Whitespace issue causing the scripted diff to fail",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-30T06:17:31Z",
      "diff_hunk" : "@@ -154,5 +154,4 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(\"from0\", 0), -(tx1[\"amount\"] + tx2[\"amount\"]))\n \n if __name__ == '__main__':\n-    TxnMallTest().main()\n-\n+    TxnMallTest().main()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135978660",
      "id" : 135978660,
      "original_commit_id" : "4f64ef9064c5eef788c7f5dbeb0bbe8a0e09d1c8",
      "original_position" : 15,
      "path" : "test/functional/txn_clone.py",
      "position" : null,
      "pull_request_review_id" : 59454124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135978660",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135978785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135978785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right. The line below should raise KeyError in that case.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-30T06:18:35Z",
      "diff_hunk" : "@@ -34,6 +34,16 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n+\n+        # 1) The transaction has a complete set of signatures\n+        assert 'complete' in rawTxSigned",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r135978785",
      "id" : 135978785,
      "in_reply_to_id" : 135908679,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 16,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59454124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/135978785",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136074693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136074693"
         }
      },
      "author_association" : "MEMBER",
      "body" : "As above, you don't need to test presence of these keys if you're going to test the values below. Recommend you flip `# 5` and `# 6` sections, and only test presence of keys where you haven't tested the values.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-30T13:56:14Z",
      "diff_hunk" : "@@ -85,11 +95,37 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n+\n+        # 3) The transaction has no complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert not rawTxSigned['complete']\n+\n+        # 4) Two script verification errors occurred\n+        assert 'errors' in rawTxSigned\n+        assert_equal(len(rawTxSigned['errors']), 2)\n+\n+        # 5) Script verification errors have certain properties\n+        assert 'txid' in rawTxSigned['errors'][0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136074693",
      "id" : 136074693,
      "original_commit_id" : "4f64ef9064c5eef788c7f5dbeb0bbe8a0e09d1c8",
      "original_position" : 47,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59562359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136074693",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136076584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136076584"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing comment\r\n```cpp\r\n#endif // BITCOIN_RPC_RAWTRANSACTION_H\r\n```",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-30T14:02:58Z",
      "diff_hunk" : "@@ -0,0 +1,13 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue sign_transaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136076584",
      "id" : 136076584,
      "original_commit_id" : "4f64ef9064c5eef788c7f5dbeb0bbe8a0e09d1c8",
      "original_position" : 13,
      "path" : "src/rpc/rawtransaction.h",
      "position" : null,
      "pull_request_review_id" : 59564622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136076584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136164192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136164192"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These were copied from a previously existing test.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-30T19:17:12Z",
      "diff_hunk" : "@@ -85,11 +95,37 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n+\n+        # 3) The transaction has no complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert not rawTxSigned['complete']\n+\n+        # 4) Two script verification errors occurred\n+        assert 'errors' in rawTxSigned\n+        assert_equal(len(rawTxSigned['errors']), 2)\n+\n+        # 5) Script verification errors have certain properties\n+        assert 'txid' in rawTxSigned['errors'][0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136164192",
      "id" : 136164192,
      "in_reply_to_id" : 136074693,
      "original_commit_id" : "4f64ef9064c5eef788c7f5dbeb0bbe8a0e09d1c8",
      "original_position" : 47,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59665184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136164192",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136358020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136358020"
         }
      },
      "author_association" : "MEMBER",
      "body" : "looking at this some more, I don't think `cs_main` is required here. You could turn this back into `LOCK(mempool.cs)` and change the lock in `signrawtransactionwithwallet` to `LOCK(pwallet->cs_wallet)`",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T14:53:40Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136358020",
      "id" : 136358020,
      "in_reply_to_id" : 135888410,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 96,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59885422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136358020",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136358763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136358763"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jnewbery that's what I originally thought. Then when I removed it I got a bunch of `AssertLockHeld` problems that went away after I added it back in.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T14:56:19Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136358763",
      "id" : 136358763,
      "in_reply_to_id" : 135888410,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 96,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59886316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136358763",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136379434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136379434"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're right. Suhas points out to me that `pcoinsTip` requires `cs_main`. This should be left as `LOCK2(cs_main, mempool.cs)`",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:10:30Z",
      "diff_hunk" : "@@ -641,86 +641,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue signtransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136379434",
      "id" : 136379434,
      "in_reply_to_id" : 135888410,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 96,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59910990,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136379434",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ok, I don't think there's any need to copy bad patterns, but I'm not too concerned either way.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:17:11Z",
      "diff_hunk" : "@@ -85,11 +95,37 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n+\n+        # 3) The transaction has no complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert not rawTxSigned['complete']\n+\n+        # 4) Two script verification errors occurred\n+        assert 'errors' in rawTxSigned\n+        assert_equal(len(rawTxSigned['errors']), 2)\n+\n+        # 5) Script verification errors have certain properties\n+        assert 'txid' in rawTxSigned['errors'][0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381105",
      "id" : 136381105,
      "in_reply_to_id" : 136074693,
      "original_commit_id" : "4f64ef9064c5eef788c7f5dbeb0bbe8a0e09d1c8",
      "original_position" : 47,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59912897,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381105",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Still not addressed in f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:17:45Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381249",
      "id" : 136381249,
      "in_reply_to_id" : 135911188,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.h",
      "position" : 8,
      "pull_request_review_id" : 59913066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381249",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381668"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381668"
         }
      },
      "author_association" : "MEMBER",
      "body" : "suggest you move this lock down to immediately before the call to `sign_transaction()`. No need to hold the lock if the parameters are invalid and we're just going to throw.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:19:19Z",
      "diff_hunk" : "@@ -2962,6 +2963,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381668",
      "id" : 136381668,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 69,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 69,
      "pull_request_review_id" : 59913066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381668",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "alignment",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:19:27Z",
      "diff_hunk" : "@@ -3162,6 +3232,7 @@ static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",       &signrawtransactionwithwallet,       false, {\"hexstring\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136381692",
      "id" : 136381692,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 88,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59913066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136381692",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136382170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136382170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this is required (we can never get this far since we throw two lines above.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:21:32Z",
      "diff_hunk" : "@@ -885,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return sign_transaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+\n+    return NullUniValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136382170",
      "id" : 136382170,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 396,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59913066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136382170",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136383156"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136383156"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree with @jnewbery.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T16:25:50Z",
      "diff_hunk" : "@@ -85,11 +95,37 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n+\n+        # 3) The transaction has no complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert not rawTxSigned['complete']\n+\n+        # 4) Two script verification errors occurred\n+        assert 'errors' in rawTxSigned\n+        assert_equal(len(rawTxSigned['errors']), 2)\n+\n+        # 5) Script verification errors have certain properties\n+        assert 'txid' in rawTxSigned['errors'][0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136383156",
      "id" : 136383156,
      "in_reply_to_id" : 136074693,
      "original_commit_id" : "4f64ef9064c5eef788c7f5dbeb0bbe8a0e09d1c8",
      "original_position" : 47,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 59915347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136383156",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136392563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136392563"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Aligning this is annoying to do",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T17:06:16Z",
      "diff_hunk" : "@@ -3162,6 +3232,7 @@ static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",       &signrawtransactionwithwallet,       false, {\"hexstring\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136392563",
      "id" : 136392563,
      "in_reply_to_id" : 136381692,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 88,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59926425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136392563",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136395976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136395976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why? Can be done in a whitespace only commit at the end if you're worried about the diff",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T17:20:47Z",
      "diff_hunk" : "@@ -3162,6 +3232,7 @@ static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",       &signrawtransactionwithwallet,       false, {\"hexstring\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136395976",
      "id" : 136395976,
      "in_reply_to_id" : 136381692,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 88,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59930323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136395976",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402310"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T17:46:41Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402310",
      "id" : 136402310,
      "in_reply_to_id" : 135911188,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.h",
      "position" : 8,
      "pull_request_review_id" : 59937626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402310",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402352"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T17:46:48Z",
      "diff_hunk" : "@@ -2962,6 +2963,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402352",
      "id" : 136402352,
      "in_reply_to_id" : 136381668,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 69,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 69,
      "pull_request_review_id" : 59937671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402352",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402379"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T17:46:53Z",
      "diff_hunk" : "@@ -3162,6 +3232,7 @@ static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",       &signrawtransactionwithwallet,       false, {\"hexstring\",\"prevtxs\",\"sighashtype\"} },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402379",
      "id" : 136402379,
      "in_reply_to_id" : 136381692,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 88,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 59937689,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402379",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402391"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-08-31T17:46:57Z",
      "diff_hunk" : "@@ -885,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return sign_transaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+\n+    return NullUniValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r136402391",
      "id" : 136402391,
      "in_reply_to_id" : 136382170,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 396,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 59937708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/136402391",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r137127335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137127335"
         }
      },
      "author_association" : "OWNER",
      "body" : "This change line and a few others aren't supposed to happen in a scripted diff.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-05T22:05:53Z",
      "diff_hunk" : "@@ -45,11 +45,11 @@ def run_test(self):\n         # Coins are sent to node1_address\n         node1_address = self.nodes[1].getnewaddress(\"from0\")\n \n-        # Send tx1, and another transaction tx2 that won't be cloned ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r137127335",
      "id" : 137127335,
      "original_commit_id" : "f36d6828224169427cea971d1bf28d3c23c85903",
      "original_position" : 4,
      "path" : "test/functional/txn_clone.py",
      "position" : null,
      "pull_request_review_id" : 60754893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137127335",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r137142886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137142886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-05T23:53:14Z",
      "diff_hunk" : "@@ -45,11 +45,11 @@ def run_test(self):\n         # Coins are sent to node1_address\n         node1_address = self.nodes[1].getnewaddress(\"from0\")\n \n-        # Send tx1, and another transaction tx2 that won't be cloned ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r137142886",
      "id" : 137142886,
      "in_reply_to_id" : 137127335,
      "original_commit_id" : "f36d6828224169427cea971d1bf28d3c23c85903",
      "original_position" : 4,
      "path" : "test/functional/txn_clone.py",
      "position" : null,
      "pull_request_review_id" : 60772116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/137142886",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased onto #11031 and put `signrawtransaction` behind `IsDeprecatedRPCEnabled`.",
      "created_at" : "2017-09-26T20:36:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332327847",
      "id" : 332327847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-26T20:36:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332327847",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't know why travis is failing here ",
      "created_at" : "2017-09-27T02:45:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332393092",
      "id" : 332393092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T02:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332393092",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141237221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141237221"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Whitespace above this line seems to be causing the travis failure.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T03:29:16Z",
      "diff_hunk" : "@@ -893,6 +793,190 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141237221",
      "id" : 141237221,
      "original_commit_id" : "f786efcc73a13dd90738211a7a4ffbc605fdba78",
      "original_position" : 221,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 221,
      "pull_request_review_id" : 65419373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141237221",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 Looks like the whitespace linter. Commented inline.\r\n```\r\ndiff --git a/src/rpc/rawtransaction.cpp b/src/rpc/rawtransaction.cpp\r\n@@ -895,0 +796,184 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\r\n+\r\n^---- failure generated from contrib/devtools/lint-whitespace.sh\r\n```",
      "created_at" : "2017-09-27T03:29:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332398680",
      "id" : 332398680,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T03:31:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332398680",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake I figured that much. I think I found the line with the error and it is definitely not the one which the linter points to. That error message is super unhelpful.",
      "created_at" : "2017-09-27T03:40:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332400013",
      "id" : 332400013,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T03:40:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332400013",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 is that the first time you've seen the linter masking/hiding another error? We definitely don't want a situation where the linter ends up being ignored because it's triggering miscellaneously (the whitespace here wasn't touched or introduced), when in actual fact it's hiding errors.",
      "created_at" : "2017-09-27T06:49:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332425964",
      "id" : 332425964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T14:18:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332425964",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141352906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141352906"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`signrawtransactionwithwallet` doesn't handle private keys, so I don't think it needs to be included here.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T14:04:42Z",
      "diff_hunk" : "@@ -72,6 +72,8 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithwallet\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141352906",
      "id" : 141352906,
      "original_commit_id" : "ac4f38574465f4061212279e4064d8178e605c9a",
      "original_position" : 4,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : null,
      "pull_request_review_id" : 65553442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141352906",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141353927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141353927"
         }
      },
      "author_association" : "MEMBER",
      "body" : "still not removed in ac4f385",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T14:07:57Z",
      "diff_hunk" : "@@ -885,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return sign_transaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+\n+    return NullUniValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141353927",
      "id" : 141353927,
      "in_reply_to_id" : 136382170,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 396,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 65553442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141353927",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake Yes.",
      "created_at" : "2017-09-27T14:17:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332535845",
      "id" : 332535845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T14:17:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332535845",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141364604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141364604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Test transaction signing using the signrawtransactionwithkey and signrawtransactionwithwallet RPCs.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T14:40:47Z",
      "diff_hunk" : "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141364604",
      "id" : 141364604,
      "original_commit_id" : "ac4f38574465f4061212279e4064d8178e605c9a",
      "original_position" : 5,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 65553442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141364604",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141367625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141367625"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think you need to repeat all these tests twice. Just add something like the following to the end of each section:\r\n\r\n```python\r\nrawTxSignedWithKey = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\r\nassert_equal(rawTxSigned, rawTxSignedWithKey)\r\n```",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T14:49:31Z",
      "diff_hunk" : "@@ -33,11 +34,19 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141367625",
      "id" : 141367625,
      "original_commit_id" : "ac4f38574465f4061212279e4064d8178e605c9a",
      "original_position" : 21,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 65553442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141367625",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378585"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought I did that already.. Should be done now.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T15:23:16Z",
      "diff_hunk" : "@@ -885,6 +786,185 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return sign_transaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+\n+    return NullUniValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378585",
      "id" : 141378585,
      "in_reply_to_id" : 136382170,
      "original_commit_id" : "f5a3e0d4a3b4b359714b7d380d7784b7ca0524c0",
      "original_position" : 396,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 65583438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378585",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378621"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T15:23:23Z",
      "diff_hunk" : "@@ -72,6 +72,8 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithwallet\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378621",
      "id" : 141378621,
      "in_reply_to_id" : 141352906,
      "original_commit_id" : "ac4f38574465f4061212279e4064d8178e605c9a",
      "original_position" : 4,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : null,
      "pull_request_review_id" : 65583478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378621",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T15:23:27Z",
      "diff_hunk" : "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378635",
      "id" : 141378635,
      "in_reply_to_id" : 141364604,
      "original_commit_id" : "ac4f38574465f4061212279e4064d8178e605c9a",
      "original_position" : 5,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 65583501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378635",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378667"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378667"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-27T15:23:32Z",
      "diff_hunk" : "@@ -33,11 +34,19 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141378667",
      "id" : 141378667,
      "in_reply_to_id" : 141367625,
      "original_commit_id" : "ac4f38574465f4061212279e4064d8178e605c9a",
      "original_position" : 21,
      "path" : "test/functional/signrawtransactions.py",
      "position" : null,
      "pull_request_review_id" : 65583537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141378667",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased to master. Addressed @jnewbery's comments.",
      "created_at" : "2017-09-27T15:24:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332558793",
      "id" : 332558793,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T15:24:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332558793",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "scripted-diff failure",
      "created_at" : "2017-09-27T20:42:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332649085",
      "id" : 332649085,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T20:42:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332649085",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> scripted-diff failure\r\n\r\nDoesn't look like it...",
      "created_at" : "2017-09-27T23:11:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332681312",
      "id" : 332681312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T23:11:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332681312",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Doesn't look like it...\r\n\r\nSorry, I must've been seeing a cached result.",
      "created_at" : "2017-09-27T23:31:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332684559",
      "id" : 332684559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-27T23:31:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332684559",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141560637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141560637"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Still missing?",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T08:52:44Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141560637",
      "id" : 141560637,
      "in_reply_to_id" : 135911188,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.h",
      "position" : 8,
      "pull_request_review_id" : 65791235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141560637",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141563937"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141563937"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, fix alignment.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T09:06:35Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141563937",
      "id" : 141563937,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 243,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 65791235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141563937",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141563999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141563999"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, fix alignment.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T09:06:48Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141563999",
      "id" : 141563999,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 246,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 330,
      "pull_request_review_id" : 65791235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141563999",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141564431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141564431"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\nconst UniValue& keys = ...\r\n```",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T09:08:42Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141564431",
      "id" : 141564431,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 287,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 65791235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141564431",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141564662"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141564662"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fix alignment.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T09:09:47Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return sign_transaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141564662",
      "id" : 141564662,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 327,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 327,
      "pull_request_review_id" : 65791235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141564662",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141564703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141564703"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fix alignment.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T09:09:57Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return sign_transaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141564703",
      "id" : 141564703,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 330,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 330,
      "pull_request_review_id" : 65791235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141564703",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141670782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141670782"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm. It must have gotten lost somewhere.",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T16:34:52Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141670782",
      "id" : 141670782,
      "in_reply_to_id" : 135911188,
      "original_commit_id" : "744c9a6a14a301cfed3bf5b418f5c2b66e97b651",
      "original_position" : 8,
      "path" : "src/rpc/rawtransaction.h",
      "position" : 8,
      "pull_request_review_id" : 65922401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:34:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141670782",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141671433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141671433"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Alignment fixed ",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T16:37:29Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141671433",
      "id" : 141671433,
      "in_reply_to_id" : 141563937,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 243,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 65923153,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141671433",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141671456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141671456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T16:37:35Z",
      "diff_hunk" : "@@ -893,6 +793,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\"\\n\" + request.params.write() + \"\\n\"\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"     (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    UniValue keys = request.params[1].get_array();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#discussion_r141671456",
      "id" : 141671456,
      "in_reply_to_id" : 141564431,
      "original_commit_id" : "a7c824076becd5a6d071dd016fdb9a540ec5d8eb",
      "original_position" : 287,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 65923176,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10579",
      "updated_at" : "2017-09-28T16:37:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141671456",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 03ca3abb6963bbf621337f2de59407b6dfb6c8f0",
      "created_at" : "2017-09-28T18:01:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-332916577",
      "id" : 332916577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-28T18:01:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332916577",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2017-09-29T18:36:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-333204933",
      "id" : 333204933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-09-29T18:36:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333204933",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "n'th rebase",
      "created_at" : "2017-10-19T03:33:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10579#issuecomment-337790194",
      "id" : 337790194,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10579",
      "updated_at" : "2017-10-19T03:33:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/337790194",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
