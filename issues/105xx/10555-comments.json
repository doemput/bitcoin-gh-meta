[
   {
      "body" : "~utACK~\r\nTested ACK c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
      "created_at" : "2017-06-08T18:53:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#issuecomment-307194772",
      "id" : 307194772,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10555",
      "updated_at" : "2017-06-08T20:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307194772",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Oops. Accidentally squashed two commits together in my last fixup. I've divided this PR back into the correct number of commits.\r\n\r\nhttps://github.com/jnewbery/bitcoin/tree/pr10555.1 == https://github.com/jnewbery/bitcoin/tree/pr10555.2",
      "created_at" : "2017-06-08T19:24:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#issuecomment-307202645",
      "id" : 307202645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10555",
      "updated_at" : "2017-06-08T19:24:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307202645",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121265105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121265105"
         }
      },
      "body" : "when test failed this won't be called and the process will hang, might be good to call this in finally block",
      "commit_id" : "0a4912e46aecef6f04c6287508020ec60424ed24",
      "created_at" : "2017-06-10T19:54:37Z",
      "diff_hunk" : "@@ -38,72 +52,71 @@ def setup_nodes(self):\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        ip_address = \"tcp://127.0.0.1:28332\"\n+        self.zmqSubSocket.connect(ip_address)\n+        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n-        self.sync_all()\n-\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.log.info(\"listen...\")\n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for tx\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for block\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n-        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n         blockcount = 0\n-        for x in range(0,n*2):\n-            msg = self.zmqSubSocket.recv_multipart()\n+        for x in range(n * 2):\n+            msg = wait_for_multipart(self.zmqSubSocket)\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount+1)\n+                assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n \n-        for x in range(0,n):\n-            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+        for x in range(n):\n+            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n \n-        #test tx from a second node\n+        self.log.info(\"Wait for tx from second node\")\n+        # test tx from a second node\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n         # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n-        hashZMQ = \"\"\n-        if topic == b\"hashtx\":\n-            hashZMQ = bytes_to_hex_str(body)\n-            msgSequence = struct.unpack('<I', msg[-1])[-1]\n-            assert_equal(msgSequence, blockcount+1)\n+        assert_equal(topic, b\"hashtx\")\n+        hashZMQ = bytes_to_hex_str(body)\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount + 1)\n \n-        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n \n+        # Destroy the zmq context\n+        self.zmqContext.destroy(linger=None)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121265105",
      "id" : 121265105,
      "original_commit_id" : "c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
      "original_position" : 145,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 43304838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
      "updated_at" : "2017-06-12T13:17:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121265105",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/2715638?v=3",
         "events_url" : "https://api.github.com/users/somdoron/events{/privacy}",
         "followers_url" : "https://api.github.com/users/somdoron/followers",
         "following_url" : "https://api.github.com/users/somdoron/following{/other_user}",
         "gists_url" : "https://api.github.com/users/somdoron/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/somdoron",
         "id" : 2715638,
         "login" : "somdoron",
         "organizations_url" : "https://api.github.com/users/somdoron/orgs",
         "received_events_url" : "https://api.github.com/users/somdoron/received_events",
         "repos_url" : "https://api.github.com/users/somdoron/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/somdoron/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/somdoron/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/somdoron"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121293568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121293568"
         }
      },
      "body" : "Good point @somdoron. Added a fixup commit 72a54cce9ebc3ee1efd69c5d16b11ca54c25783a. Can you take a look and let me know what you think. If you're happy I'll squash with the previous commit.",
      "commit_id" : "0a4912e46aecef6f04c6287508020ec60424ed24",
      "created_at" : "2017-06-11T22:46:06Z",
      "diff_hunk" : "@@ -38,72 +52,71 @@ def setup_nodes(self):\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        ip_address = \"tcp://127.0.0.1:28332\"\n+        self.zmqSubSocket.connect(ip_address)\n+        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n-        self.sync_all()\n-\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.log.info(\"listen...\")\n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for tx\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for block\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n-        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n         blockcount = 0\n-        for x in range(0,n*2):\n-            msg = self.zmqSubSocket.recv_multipart()\n+        for x in range(n * 2):\n+            msg = wait_for_multipart(self.zmqSubSocket)\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount+1)\n+                assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n \n-        for x in range(0,n):\n-            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+        for x in range(n):\n+            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n \n-        #test tx from a second node\n+        self.log.info(\"Wait for tx from second node\")\n+        # test tx from a second node\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n         # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n-        hashZMQ = \"\"\n-        if topic == b\"hashtx\":\n-            hashZMQ = bytes_to_hex_str(body)\n-            msgSequence = struct.unpack('<I', msg[-1])[-1]\n-            assert_equal(msgSequence, blockcount+1)\n+        assert_equal(topic, b\"hashtx\")\n+        hashZMQ = bytes_to_hex_str(body)\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount + 1)\n \n-        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n \n+        # Destroy the zmq context\n+        self.zmqContext.destroy(linger=None)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121293568",
      "id" : 121293568,
      "original_commit_id" : "c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
      "original_position" : 145,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 43330871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
      "updated_at" : "2017-06-12T13:17:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121293568",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317344"
         }
      },
      "body" : "looks good",
      "commit_id" : "0a4912e46aecef6f04c6287508020ec60424ed24",
      "created_at" : "2017-06-12T06:27:33Z",
      "diff_hunk" : "@@ -38,72 +52,71 @@ def setup_nodes(self):\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        ip_address = \"tcp://127.0.0.1:28332\"\n+        self.zmqSubSocket.connect(ip_address)\n+        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n-        self.sync_all()\n-\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        self.log.info(\"listen...\")\n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for tx\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashtx\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n-        msg = self.zmqSubSocket.recv_multipart()\n+        self.log.info(\"Wait for block\")\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n-        assert_equal(msgSequence, 0) #must be sequence 0 on hashblock\n+        assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n \n-        assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n         blockcount = 0\n-        for x in range(0,n*2):\n-            msg = self.zmqSubSocket.recv_multipart()\n+        for x in range(n * 2):\n+            msg = wait_for_multipart(self.zmqSubSocket)\n             topic = msg[0]\n             body = msg[1]\n             if topic == b\"hashblock\":\n                 zmqHashes.append(bytes_to_hex_str(body))\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n-                assert_equal(msgSequence, blockcount+1)\n+                assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n \n-        for x in range(0,n):\n-            assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n+        for x in range(n):\n+            assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n \n-        #test tx from a second node\n+        self.log.info(\"Wait for tx from second node\")\n+        # test tx from a second node\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n         # now we should receive a zmq msg because the tx was broadcast\n-        msg = self.zmqSubSocket.recv_multipart()\n+        msg = wait_for_multipart(self.zmqSubSocket)\n         topic = msg[0]\n         body = msg[1]\n-        hashZMQ = \"\"\n-        if topic == b\"hashtx\":\n-            hashZMQ = bytes_to_hex_str(body)\n-            msgSequence = struct.unpack('<I', msg[-1])[-1]\n-            assert_equal(msgSequence, blockcount+1)\n+        assert_equal(topic, b\"hashtx\")\n+        hashZMQ = bytes_to_hex_str(body)\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount + 1)\n \n-        assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n \n+        # Destroy the zmq context\n+        self.zmqContext.destroy(linger=None)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317344",
      "id" : 121317344,
      "original_commit_id" : "c4f6b7f2bc540c368e2ba1a5ab332432b0e93889",
      "original_position" : 145,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 43354708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
      "updated_at" : "2017-06-12T13:17:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317344",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/2715638?v=3",
         "events_url" : "https://api.github.com/users/somdoron/events{/privacy}",
         "followers_url" : "https://api.github.com/users/somdoron/followers",
         "following_url" : "https://api.github.com/users/somdoron/following{/other_user}",
         "gists_url" : "https://api.github.com/users/somdoron/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/somdoron",
         "id" : 2715638,
         "login" : "somdoron",
         "organizations_url" : "https://api.github.com/users/somdoron/orgs",
         "received_events_url" : "https://api.github.com/users/somdoron/received_events",
         "repos_url" : "https://api.github.com/users/somdoron/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/somdoron/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/somdoron/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/somdoron"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317876"
         }
      },
      "body" : "You can also call socket.SET(zmq.RCVTIMEO, 60000) when creating the socket instead of the NOBLOCK and the loop. It will raise zmq.error.Again when time is over",
      "commit_id" : "0a4912e46aecef6f04c6287508020ec60424ed24",
      "created_at" : "2017-06-12T06:32:37Z",
      "diff_hunk" : "@@ -6,29 +6,43 @@\n import configparser\n import os\n import struct\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import *\n+from test_framework.util import (assert_equal,\n+                                 bytes_to_hex_str,\n+                                 )\n+\n+def wait_for_multipart(socket, timeout=60):\n+    interval = 0.1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121317876",
      "id" : 121317876,
      "original_commit_id" : "a2106d8ae3dc18d83328268c96cbfa1626eb7f20",
      "original_position" : 13,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 43355257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
      "updated_at" : "2017-06-12T13:17:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121317876",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/2715638?v=3",
         "events_url" : "https://api.github.com/users/somdoron/events{/privacy}",
         "followers_url" : "https://api.github.com/users/somdoron/followers",
         "following_url" : "https://api.github.com/users/somdoron/following{/other_user}",
         "gists_url" : "https://api.github.com/users/somdoron/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/somdoron",
         "id" : 2715638,
         "login" : "somdoron",
         "organizations_url" : "https://api.github.com/users/somdoron/orgs",
         "received_events_url" : "https://api.github.com/users/somdoron/received_events",
         "repos_url" : "https://api.github.com/users/somdoron/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/somdoron/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/somdoron/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/somdoron"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121388807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121388807"
         }
      },
      "body" : "Thanks! I didn't know about `zmq.RCVTIMEO`. Updated to use that instead of the timeout loop in https://github.com/bitcoin/bitcoin/pull/10555/commits/b1bac1cb7ea1560b46ff758864660a21a228ed67",
      "commit_id" : "0a4912e46aecef6f04c6287508020ec60424ed24",
      "created_at" : "2017-06-12T13:16:41Z",
      "diff_hunk" : "@@ -6,29 +6,43 @@\n import configparser\n import os\n import struct\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import *\n+from test_framework.util import (assert_equal,\n+                                 bytes_to_hex_str,\n+                                 )\n+\n+def wait_for_multipart(socket, timeout=60):\n+    interval = 0.1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#discussion_r121388807",
      "id" : 121388807,
      "original_commit_id" : "a2106d8ae3dc18d83328268c96cbfa1626eb7f20",
      "original_position" : 13,
      "path" : "test/functional/zmq_test.py",
      "position" : null,
      "pull_request_review_id" : 43432129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10555",
      "updated_at" : "2017-06-12T13:17:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121388807",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Concept ACK 0a4912e46aecef6f04c6287508020ec60424ed24",
      "created_at" : "2017-06-18T12:00:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10555#issuecomment-309273361",
      "id" : 309273361,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10555",
      "updated_at" : "2017-06-18T12:00:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309273361",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
