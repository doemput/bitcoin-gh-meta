{
   "assignee" : null,
   "assignees" : [],
   "body" : "Just writing this idea down, to get comments on it and let it materialize before we actually have time to implement it.\n\nCurrently, there is very weak separation of concerns between net.cpp, protocol.cpp and main.cpp. I believe there are 4 separate ones distinguishable:\n- Management of I/O between sockets and buffers, and peer management (mostly net.cpp).\n- Definition of the actual P2P messages, their (de)serialization, and perhaps some basic sanity checking on them (protocol.cpp, net.cpp and main.cpp).\n- Processing and interaction of P2P messages with the validation engine (datastructures mostly in net, code mostly in main).\n- Actual validation (main).\n\nI'd very much like to see these as separate modules with well-defined responsibilities:\n1) The \"peer interaction\" layer, which manages connections and network buffers, and does not expose any internal CNode data structure. It only allows writing to and reading from NodeId's, and management of the set of peers.\n2) The bitcoin P2P layer, which uses serialize.h and core.h to serialize/deserialize p2p messages. It probably has methods for sending any type of P2P message to peers, and signals for processing every incoming message type.\n3) The core validation engine (which manages the block tree, chain state, ..., but nothing peer-related). This has probably methods for processing a block or a transaction or a header (ProcessBlock, AcceptToMemoryPool, ...), and signals for notifying higher layers about blocks being connected/disconnected (probably with a distinction between internal changes, and public ones - the latter only trigger after a full succesful reorganization).\n4) The core-p2p glue, which depends both on main and the p2p layer, and maintains per-peer (indexed by NodeId) data relevant to interaction (almost all of CNode's current fields).\n\nFor example:\n- The set of banned IPs is in 1.\n- The definition of the message block and computation of the checksum is in 2.\n- Logic for connecting and disconnecting blocks is in 3.\n- Per-peer DoS scores are in 4.\n- IsInitialBlockDownload is in 4.\n\nOpen questions:\n- Join 1 and 2? In Bitcoin's context they are unlikely to be swapped without swapping the other. However:\n  - There could be different implementations of 1 for deeply different types of communication backend (from a local file, over freenet, from a satellite receiver, ...).\n  - There could be a bitcoin protocol v2, mostly rewritten from scratch, that can still be relayed over different types of networks.\n- Thread management. Where is the \"controller\" thread? If it is in 4, it means that other modules can not as easily plug into 2, as they become dependent on having a 4 present. On the other hand, making 2 the controller itself removes the knowledge about locking requirements in 4 from it.\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3465/comments",
   "created_at" : "2013-12-27T01:16:44Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3465/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/3465",
   "id" : 24804873,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "id" : 64584,
         "name" : "Brainstorming",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "ededed",
         "default" : false,
         "id" : 151070,
         "name" : "Priority Low",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Priority%20Low"
      },
      {
         "color" : "E6F6D6",
         "default" : false,
         "id" : 135961,
         "name" : "Refactoring",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3465/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 3465,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "[RFC] Post-0.9 network/protocol/main refactor",
   "updated_at" : "2017-01-23T17:26:08Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3465",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
      "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sipa/followers",
      "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sipa",
      "id" : 548488,
      "login" : "sipa",
      "organizations_url" : "https://api.github.com/users/sipa/orgs",
      "received_events_url" : "https://api.github.com/users/sipa/received_events",
      "repos_url" : "https://api.github.com/users/sipa/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sipa"
   }
}
