[
   {
      "body" : "> immediately resolve the problem, due to the wallet not rebroadcasting the transaction immediately (even to itself) for (I think) privacy reasons.\r\n\r\nIt resolves it shortly.  Why do you think immediate is required?\r\n\r\nYou change makes it impossible to have the wallet simply queue transactions in long chains for sending when it becomes possible.\r\n",
      "created_at" : "2017-08-10T05:51:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-321457458",
      "id" : 321457458,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-10T05:51:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321457458",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Shortly is several minutes, which isn't really acceptable in some cases.\r\n\r\nThe code does indeed prevent you from adding one additional transaction to an existing chain, but that's all you get from the current system. You don't get those UTXOs for further chaining as they are cloaked, as noted above. You would get the exact same results by adding 1 to the max chain length.",
      "created_at" : "2017-08-10T05:59:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-321458619",
      "id" : 321458619,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-10T06:07:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321458619",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "@kallewoof trying to reword, correct me if wrong.\r\n\r\nCurrently situation:\r\nImagine that the unconf chain limit is 3 transactions and you have 1 UTXO\r\n\r\n```\r\nsendtoaddress abc 10 #TX1 OK\r\nsendtoaddress abc 10 #TX2 OK\r\nsendtoaddress abc 10 #TX3 OK\r\n\r\nsendtoaddress abc 10 #TX4 OK  (but mempool rejected by chain-too-long)\r\n```\r\n\r\nTX4 is still added to the wallet and will be rebroadcasted later.\r\nNote that now, `getbalance` will returns 0, whatever the amount of the initial UTXO.\r\n\r\n```\r\nsendtoaddress abc 10 #TX5 BOOM insufficient funds\r\n```\r\nTX5 will not be rebroadcasted later.\r\n\r\nWith @kallewoof PR we have:\r\n\r\n```\r\nsendtoaddress abc 10 #TX1 OK\r\nsendtoaddress abc 10 #TX2 OK\r\nsendtoaddress abc 10 #TX3 OK\r\n\r\nsendtoaddress abc 10 #TX4 BOOM chain-too-long\r\n``` \r\n\r\nWith TX4 not rebroadcasted by the wallet later, and `getbalance` does not returns 0.\r\n\r\nI think it makes lots of sense. The current situation only save into the wallet one transaction on top of the longest chain, and the downside is that the user see his balance to 0 when he still have funds. The current situation is also counter intuitive: why TX4 get queue by the wallet for later broadcast, but not TX5 ?\r\n\r\nConcept ACK for me.",
      "created_at" : "2017-08-10T06:44:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-321465726",
      "id" : 321465726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-10T06:47:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321465726",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Yes, the core issue is that a transaction that did not make it into the mempool but stayed in the wallet is invisible to the wallet code until it is put into the mempool at some undetermined later time.\r\n\r\nPerhaps the better approach here is to make an additional coin view on top of the mempool called wallet view or something, which *would* include these to-be-mempooled transactions.\r\n\r\nThis would allow for arbitrary length tx chains, presuming the wallet code for rebroadcasting is able to deal with ordering, and presuming users will not be thrown off by transactions taking a lot longer to get into the blockchain (100 txs would at minimum take ~5 blocks, as only 20 or so txs in one chain would be accepted at a time).\r\n",
      "created_at" : "2017-08-10T06:55:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-321467613",
      "id" : 321467613,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-10T06:55:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321467613",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "I am also wondering how very-long-chaining will affect existing UTXOs. ~~~Presuming the coin select picks indiscriminately (which does NOT seem to be the case, but I can't pinpoint why), having a long chain and sending more would \"lock up\" more and more UTXOs into that chain, locking more and more of your funds into an ever growing chain of transactions that have to go into the blockchain.~~~\r\n\r\nEdited: coin select tries to avoid long-chain outputs if possible. Users will still lock up additional UTXOs if they have many smaller UTXOs and the locked-up one is large enough to be required to fund a new transaction.\r\n\r\nThe more I think about it, the more I lean towards not allowing chains that are longer than what would go into the mempool, period. I.e. what this PR does.",
      "created_at" : "2017-08-10T06:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-321468079",
      "id" : 321468079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-10T07:26:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321468079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "body" : "> change makes it impossible to have the wallet simply queue transactions in long chains for sending when it becomes possible.\r\n\r\nI agree with @gmaxwell; I believe there are use cases which prompted supporting the current behavior of allowing transactions to be queued up (for instance, if you have lots and lots of utxos, and your transactions are not in a hurry, then it may be fine to have some of them fail to get added to the mempool and become unavailable for further spending). \r\n\r\nI also think that in the future we may want to build more wallet features around the idea of, say, starting with a low fee (which may not make it into the mempool) and then auto-fee-bumping according to some schedule until it gets confirmed.  So I wouldn't want to preclude these kinds of strategies.\r\n\r\nAs an aside -- with this patch, don't we risk clogging up a user's wallet if they are trying to send in a loop and bump into this behavior?  Like if they get an error and just try again, hoping to get different inputs -- but if they don't have enough utxo's they get the same result, a transaction eating up space in their wallet which has been abandoned.  That seems like a bad outcome as well....  I'm not sure if a problem like this is unique to this approach but I'm generally wary of promoting more use of `AbandonTransaction()`; in general I feel like that should be for emergencies only.  I think to implement something like this behavior it would make more sense to add a way to remove a transaction from the wallet.\r\n",
      "created_at" : "2017-08-11T16:55:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-321864839",
      "id" : 321864839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-11T16:55:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321864839",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar \r\n> I believe there are use cases which prompted supporting the current behavior of allowing transactions to be queued up (for instance, if you have lots and lots of utxos, and your transactions are not in a hurry, then it may be fine to have some of them fail to get added to the mempool and become unavailable for further spending).\r\n\r\nI'm (still) confused about this statement, as the current behavior will only let you queue up one extra transaction, as if you increased mempool chain limit by 1. Beyond that, the UTXOs are hidden from the user when selecting coins, and the user will simply not be able to add to the chain anymore.\r\n\r\n> I also think that in the future we may want to build more wallet features around the idea of, say, starting with a low fee (which may not make it into the mempool) and then auto-fee-bumping according to some schedule until it gets confirmed. So I wouldn't want to preclude these kinds of strategies.\r\n\r\nIf it's so low it doesn't make it into the mempool, what is the purpose of the transaction existing at all? It will never make it into the mempool as is, so you could just as well abandon it in favor of the higher-fee variant that comes along later. Again, I may be missing some subtlety here.\r\n\r\nEdit: I had missed one subtlety: that abandoned transactions are kept in the wallet. It would make more sense to discard completely in these cases, but not sure if that's possible.",
      "created_at" : "2017-08-15T03:44:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11019#issuecomment-322369914",
      "id" : 322369914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11019",
      "updated_at" : "2017-08-15T03:52:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322369914",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   }
]
