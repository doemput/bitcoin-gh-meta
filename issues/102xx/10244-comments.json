[
   {
      "body" : "ClientModel and WalletModel were already meant as abstraction layer for accessing the core from the GUI. What is your rationale for adding another layer?",
      "created_at" : "2017-04-20T19:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295875877",
      "id" : 295875877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T19:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295875877",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> ClientModel and WalletModel were already meant as abstraction layer for accessing the core from the GUI. What is your rationale for adding another layer?\r\n\r\nClientModel and WalletModel might have been intended to be an abstraction layer, but they are not functioning like one. There are libbitcoin functions and global variables accessed all over Qt code right now. With this change, all of these calls (there are around 200 of them) are stripped out of Qt code and moved into a one file: [src/ipc/local/interfaces.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/local/interfaces.cpp).",
      "created_at" : "2017-04-20T19:47:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295877901",
      "id" : 295877901,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T19:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295877901",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I once did a similar thing,.. but stopped at some point and now I know why.\r\nIt's an impressive code change and I kinda like a central point (your interfaces.cpp) where communication between the node, the wallet and the GUI happens.\r\n\r\nI also agree with @laanwj that the clientmodel (node) and the walletmodal (wallet) are originally though to be that layer.\r\nThough, there are many violations AFAIK.\r\n\r\nWhat would be the downsides of using the exiting layers (clientmodel / walletmodel) better?",
      "created_at" : "2017-04-20T19:48:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295878426",
      "id" : 295878426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T19:48:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295878426",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> What would be the downsides of using the exiting layers (clientmodel / walletmodel) better?\r\n\r\nIf you look at the `ClientModel` class, you can see it is doing a lot more work than the `ipc::local::Node` class is. Similarly with `WalletModel` and `ipc::local::Wallet.` The ipc classes are just simple shims around low-level node and wallet functionality, while Qt objects implement higher level logic specific to our current GUI. I think `ClientModel` and `WalletModel` classes are still useful after this change. They will just have 1 job instead of 2. Instead of serving as both abstraction layers and MVC model classes, they will serve only as MVC model classes.\r\n\r\nAlso, and in more concrete terms, the reason these interfaces live outside the src/qt directory is that with #10102, they need to be accessed not only by `bitcoin-qt` but also by `bitcoind` (specifically inside the `StartServer` function in [src/ipc/server.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc/src/ipc/server.cpp) which is called here: https://github.com/ryanofsky/bitcoin/commit/ab0afba3a44255b3eec80f4eebe45a851ae23927#diff-6e30027c2045842fe842430d98d099fb",
      "created_at" : "2017-04-20T20:10:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295887270",
      "id" : 295887270,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-20T20:11:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295887270",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "The general IPC interface makes sense to me. The main problem I see for any type of low latency IPC/RPC is the missing asynchronity.\r\nTake `getWalletTxDetails`. This IPC call may take 2-3 seconds depending on the communication protocol and database you are using. Ideally the GUI is design to handle it asynchronous (like an RPC call) otherwise this will lead to GUI thread freezes. Not sure if this would be solvable as a generic part in the IPC layer of if the wallet/GUI logic must handle it.",
      "created_at" : "2017-04-21T11:09:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296163518",
      "id" : 296163518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:09:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296163518",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> The main problem I see for any type of low latency IPC/RPC is the missing asynchronity.\r\n\r\nNot sure if you saw the comments about this in the other pr starting here: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610\r\n\r\nThese changes are orthogonal to event processing / blocking issues in the UI. If UI blocked before, it will still block after these changes, if UI didn't block before, it won't start blocking now because of these changes. If remote calls are too slow because of socket/serialization overhead, we can process UI events in the background while they are being made. There are many ways to accomplish this, with one possible way described in that comment above. If anything, having calls get funnelled through an IPC framework makes it easier, not harder to add more asynchronicity.",
      "created_at" : "2017-04-21T11:32:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296167489",
      "id" : 296167489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296167489",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Also would point out that Node and Wallet interfaces in [ipc/interfaces.h](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/interfaces.h) were mainly designed with goal of changing existing Qt code as little as possible. They aren't in any way set in stone, and I would expect them to evolve over time. Probably some calls will get consolidated, others will get broken up, calls that currently return big chunks of data will be made streaming, etc.",
      "created_at" : "2017-04-21T11:50:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296170668",
      "id" : 296170668,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:50:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296170668",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Thinking again and discussing this with @sipa / @laanwj, I think we should use the existing client-/walletmodal as node/wallet abstraction (including a possible IPC abstraction).\r\n\r\nWhat's missing in the first place are better asynchronous messaging between the GUI and the wallet/node.\r\n\r\nIMO using a thread with queue for general node/wallet communication (and eventual additional threads for procedures that usually take longer) seems after a low hanging fruit with direct benefits.\r\n\r\nUsing QT slots/signals for all(most?) communication would be required anyways and would be beneficial even without IPC and therefor should be done first.",
      "created_at" : "2017-04-21T11:51:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296170774",
      "id" : 296170774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T11:52:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296170774",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> What's missing in the first place are better asynchronous messaging between the GUI and the wallet/node.\r\n\r\nAgain I think this is (and should be) an independent issue, but if you want to flesh out some more concrete suggestions and I would be happy to hear them.\r\n\r\n> IMO using a thread with queue for general node/wallet communication (and eventual additional threads for procedures that usually take longer) seems after a low hanging fruit with direct benefits.\r\n\r\nThis is exactly what the change I was suggesting in https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610 does.",
      "created_at" : "2017-04-21T12:00:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296172416",
      "id" : 296172416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T12:01:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296172416",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "> Using QT slots/signals for all(most?) communication would be required anyways and would be beneficial even without IPC and therefor should be done first.\r\n\r\nThis was my point too. Making the GUI asynchronous would avoid ever hard-freezing the GUI. Modern operating systems assume that an application has crashed if its GUI thread is unresponsive. This is a priority for improving user experience. For example: Currently, if e.g. a transaction is sent while the cs_main lock is held the entire thing hangs for a moment. Ideally it would display a modal dialog with a status, or progress animation instead. There are similar issues at startup.\r\n\r\nSure, this is only partially related to IPC work: When the GUI already would communicate with Qt signals and slots with the core backend (similar to how RPCConsole and RPCThread communicate, for example), it could be mostly oblivious whether this backend exists in-process or communicates over a pipe.\r\n\r\nAlthough it's laudable that you're working on this, it looks to me that what you are doing currently is simply replicating what we do now but replacing direct core calls with IPC calls. The drawback is that it calcifies some things that shouldn't have been designed that way in the first place (e.g. into multiple abstraction layers), making it harder to improve later.\r\n",
      "created_at" : "2017-04-21T12:10:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296174182",
      "id" : 296174182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T12:10:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296174182",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> The drawback is that it calcifies some things\r\n\r\nCould you be more concrete about this? I don't see how it is true. Direct calls before are still direct calls now. If we want to follow the RPCConsole / RPCExecutor model in other parts of Qt code, I don't see how any of the changes I've made for IPC make this more difficult.",
      "created_at" : "2017-04-21T12:59:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296183743",
      "id" : 296183743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T12:59:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296183743",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "I had a look at discussion in IRC (https://botbot.me/freenode/bitcoin-core-dev/msg/84348426/)\r\n\r\nWith respect, what I think you guys are missing on the `WalletModel`/`ClientModel` topic is that the `ipc::local::WalletImpl` and `ipc::local::NodeImpl` classes in [ipc/local/interfaces.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/local/interfaces.cpp) are only **temporarily** being created and invoked within the `bitcoin-qt` process. In the next PR they are created and run in the `bitcoind` process instead of `bitcoin-qt`. That's the reason these classes do not reside in the `src/qt` directory and one reason why they don't really substitute for the `WalletModel`/`ClientModel` classes. See my previous comment for details and a code pointer: https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295887270. \r\n\r\nHowever, I do see that it is kind of silly to have cases where Qt code calls a `WalletModel`/`ClientModel` method that merely forwards to a `WalletImpl`/`NodeImpl` method. I can easily clear this up by inlining these `WalletModel`/`ClientModel` methods, which would make the classes more lean.\r\n\r\nAlso, if this PR will be too difficult to review because of its size (https://botbot.me/freenode/bitcoin-core-dev/msg/84348447/), I can easily decompose it into smaller PRs that could be gradually merged. It is already broken up into separate commits, and many of the individual commits could be further broken up (right now they try to group together related changes).",
      "created_at" : "2017-04-21T13:32:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296191498",
      "id" : 296191498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-04-21T13:32:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296191498",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "@laanwj and @jonasschnelli can you let me know if you still see issues with this approach?\r\n\r\nOn the Qt model class issue, I pulled out a bunch of model methods that were just wrapping IPC calls so it should be clearer what actual work [walletmodel.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/qt/walletmodel.cpp) and [clientmodel.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/qt/clientmodel.cpp) are doing. I also added a little blurb to the [IPC README](https://github.com/ryanofsky/bitcoin/tree/pr/ipc-local/src/ipc#does-having-an-ipc-layer-make-qt-model-classes-redundant) describing what the distinction between Qt model classes and the IPC interface classes is supposed to be.\r\n\r\nOn the asynchronous GUI issue, I created #10504 for more discussion, but think that issue is mostly unrelated to the changes in this PR, except as far as some changes here might potentially make it easier to identify blocking calls and make them asynchronous.\r\n",
      "created_at" : "2017-06-01T19:00:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-305588012",
      "id" : 305588012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-06-01T19:00:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305588012",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "body" : "Concept ACK on the approach, moving things to interfaces instead of global calls is usually good as it makes it easier to see what the interface to the core is.\r\n",
      "created_at" : "2017-06-15T13:38:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-308731640",
      "id" : 308731640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-06-15T13:38:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308731640",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Concept ACK.\r\nI think we could try to rebase and get this in once 0.15 has been split off",
      "created_at" : "2017-06-15T13:58:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-308738280",
      "id" : 308738280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10244",
      "updated_at" : "2017-06-15T13:58:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308738280",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
