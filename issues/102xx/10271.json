{
   "assignee" : null,
   "assignees" : [],
   "body" : "Following discussion on IRC about replacing Boost usage for detecting available system cores, I've opened this to collect some benchmarks + further discussion.\r\n\r\nThe current method for detecting available cores was introduced in #6361.\r\n\r\nRecap of the IRC chat:\r\n```\r\n21:14:08 fanquake: Since we seem to be giving Boost removal a good shot for 0.15, does anyone have suggestions for replacing GetNumCores?\r\n21:14:26 fanquake: There is std::thread::hardware_concurrency(), but that seems to count virtual cores, which I don't think we want.\r\n21:14:51 BlueMatt: fanquake: I doubt we'll do boost removal for 0.15\r\n21:14:58 BlueMatt: shit like BOOST_FOREACH, sure\r\n21:15:07 BlueMatt: but all of boost? doubtful, there are still things we need\r\n21:16:36 fanquake: Yea sorry, not the whole lot, but we can remove a decent chunk. Just looking into what else needs to be done to replace some of the less involved Boost usage.\r\n21:16:43 BlueMatt: fair\r\n21:17:14 wumpus: yes, it makes sense to plan ahead a bit, without immediately doing it\r\n21:18:12 wumpus: right, don't count virtual cores, that used to be the case but it makes no sense for our usage\r\n21:19:15 wumpus: it'd create a swarm of threads overwhelming any machine with hyperthreading (+accompanying thread stack overhead), for script validation, and there was no gain at all for that\r\n21:20:03 sipa: BlueMatt: don't worry, there is no hurry\r\n21:59:10 morcos: wumpus: i don't think that is correct\r\n21:59:24 morcos: suppose you have 4 cores (8 virtual cores)\r\n21:59:24 wumpus: fanquake: indeed seems that std has no equivalent to physical_concurrency, on any standard. That's annoying as it is non-trivial to implement\r\n21:59:35 morcos: i think running par=8 (if it let you) would be notably faster\r\n21:59:59 morcos: jeremyrubin and i discussed this at length a while back... i think i commented about it on irc at the time\r\n22:00:21 wumpus: morcos: I think the conclusion at the time was that it made no difference, but sure would make sense to benchmark\r\n22:00:39 morcos: perhaps historical testing on the virtual vs actual cores was polluted by concurrency issues that have now improved\r\n22:00:47 wumpus: I think there are not more ALUs, so there is not really a point in having more threads\r\n22:01:40 wumpus: hyperthreads are basically just a stored register state right?\r\n22:02:23 sipa: wumpus: yes but it helps the scheduler\r\n22:02:27 wumpus: in which case the only speedup using \"number of cores\" threads would give you is, possibly, excluding other software from running on the cores on the same time\r\n22:02:37 morcos: well this is where i get out of my depth\r\n22:02:50 sipa: if one of the threads is waiting on a read from ram, the other can use the arithmetic unit for example\r\n22:02:54 morcos: wumpus: i'm pretty sure though that the speed up is considerably more than what you might expect from that\r\n22:02:59 wumpus: sipa: ok, I back down, I didn't want to argue this at all\r\n22:03:35 morcos: the reason i haven't tested it myself, is the machine i usually use has 16 cores... so not easy due to remaining concurrency issues to get much more speedup\r\n22:03:36 wumpus: I'm fine with restoring it to number of virtual threads if that's faster\r\n22:03:54 morcos: we should have somene with 4 cores (and Ã¯Â¿Â¼ actually test it though, i agree\r\n22:03:58 sipa: i would expect (but we should benchmark...) that if 8 scriot validation threads instead of 4 on a quadcore hyperthreading is not faster, it's due to lock contention\r\n22:04:20 morcos: sipa: yeah thats my point, i think lock contention isn't that bad with 8 now\r\n22:04:22 wumpus: on 64-bit systems the additional thread overhead wouldn't be important at least\r\n22:04:23 gmaxwell: I previously benchmarked, a long time ago, it was faster.\r\n22:04:33 gmaxwell: (to use the HT core count)\r\n22:04:44 wumpus: why was this changed at all then?\r\n22:04:47 wumpus: I'm confused\r\n22:05:04 sipa: good question!\r\n22:05:06 gmaxwell: I had no idea we changed it.\r\n22:05:25 wumpus: sigh Ã¯Â¿Â¼\r\n22:05:54 gmaxwell: What PR changed it?\r\n22:06:51 gmaxwell: In any case, on 32-bit it's probably a good tradeoff... the extra ram overhead is worth avoiding.\r\n22:07:22 wumpus: https://github.com/bitcoin/bitcoin/pull/6361\r\n22:07:28 gmaxwell: PR 6461 btw.\r\n22:07:37 gmaxwell: er lol at least you got it right.\r\n22:07:45 wumpus: the complaint was that systems became unsuably slow when using that many thread\r\n22:07:51 wumpus: so at least I got one thing right, woohoo\r\n22:07:55 sipa: seems i even acked it!\r\n22:07:57 BlueMatt: wumpus: there are more alus\r\n22:08:38 BlueMatt: but we need to improve lock contention first\r\n22:08:40 morcos: anywya, i think in the past the lock contention made 8 threads regardless of cores a bit dicey.. now that is much better (although more still to be done)\r\n22:09:01 BlueMatt: or we can just merge #10192, thats fee\r\n22:09:04 gribble: https://github.com/bitcoin/bitcoin/issues/10192 | Cache full script execution results in addition to signatures by TheBlueMatt ÃÂ· Pull Request #10192 ÃÂ· bitcoin/bitcoin ÃÂ· GitHub\r\n22:09:11 BlueMatt: s/fee/free/\r\n22:09:21 morcos: no, we do not need to improve lock contention first.   but we should probably do that before we increase the max beyond 16\r\n22:09:26 BlueMatt: then we can toss concurrency issues out the window and get more speedup anyway\r\n22:09:35 gmaxwell: wumpus: yea, well in QT I thought we also diminished the count by 1 or something?  but yes, if the motivation was to reduce how heavily the machine was used, thats fair.\r\n22:09:56 sipa: the benefit of using HT cores is certainly not a factor 2\r\n22:09:58 wumpus: gmaxwell: for the default I think this makes a lot of sense, yes\r\n22:10:10 gmaxwell: morcos: right now on my 24/28 physical core hosts going beyond 16 still reduces performance.\r\n22:10:11 wumpus: gmaxwell: do we also restrict the maximum par using this? that'd make less sense\r\n22:10:51 wumpus: if someone *wants* to use the virtual cores they should be able to by setting -par=\r\n22:10:51 sipa: *flies to US*\r\n22:10:52 BlueMatt: sipa: sure, but the shared cache helps us get more out of it than some others, as morcos points out\r\n22:11:30 BlueMatt: (because it means our thread contention issues are less)\r\n22:12:05 morcos: gmaxwell: yeah i've been bogged down in fee estimation as well (and the rest of life) for a while now.. otherwise i would have put more effort into jeremy's checkqueue\r\n22:12:36 BlueMatt: morcos: heh, well now you can do other stuff while the rest of us get bogged down in understanding fee estimation enough to review it Ã¯Â¿Â¼\r\n22:12:37 wumpus: [to answer my own question: no, the limit for par is MAX_SCRIPTCHECK_THREADS, or 16]\r\n22:12:54 morcos: but to me optimizing for more than 16 cores is pretty valuable as miners could use beefy machines and be less concerned by block validation time\r\n22:14:38 BlueMatt: morcos: i think you may be surprised by the number of mining pools that are on VPSes that do not have 16 cores Ã¯Â¿Â¼\r\n22:15:34 gmaxwell: I assume right now most of the time block validation is bogged in the parts that are not as concurrent. simple because caching makes the concurrent parts so fast. (and soon to hopefully increase with bluematt's patch)\r\n22:17:55 gmaxwell: improving sha2 speed, or transaction malloc overhead are probably bigger wins now for connection at the tip than parallelism beyond 16 (though I'd like that too).\r\n22:18:21 BlueMatt: sha2 speed is big\r\n22:18:27 morcos: yeah lots of things to do actually... \r\n22:18:57 gmaxwell: BlueMatt: might be a tiny bit less big if we didn't hash the block header 8 times for every block. Ã¯Â¿Â¼ \r\n22:21:27 BlueMatt: ehh, probably, but I'm less rushed there\r\n22:21:43 BlueMatt: my new cache thing is about to add a bunch of hashing\r\n22:21:50 BlueMatt: 1 sha round per tx\r\n22:22:25 BlueMatt: and sigcache is obviously a ton\r\n```",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10271/comments",
   "created_at" : "2017-04-25T01:40:21Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10271/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/10271",
   "id" : 223995660,
   "labels" : [
      {
         "color" : "5319e7",
         "default" : false,
         "id" : 241832923,
         "name" : "Utils and libraries",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils%20and%20libraries"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10271/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 10271,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/10271.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10271",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/10271.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10271"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Use std::thread::hardware_concurrency, instead of Boost, to determine available cores",
   "updated_at" : "2017-04-25T05:26:16Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10271",
   "user" : {
      "avatar_url" : "https://avatars1.githubusercontent.com/u/863730?v=3",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   }
}
