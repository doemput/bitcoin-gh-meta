[
   {
      "body" : "This seems entirely unrelated to #10065 or address reuse...",
      "created_at" : "2017-04-19T16:54:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295342918",
      "id" : 295342918,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T16:54:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295342918",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Not sure if this is the right direction... \r\nI agree with @luke-jr, blocking \"addresses\" from coin selection seems to be a different thing the \"address reuse\".\r\n\r\n@jet0: can you explain what kind of a use case your PR does allow/solve?",
      "created_at" : "2017-04-19T17:07:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295347969",
      "id" : 295347969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T17:07:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295347969",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "doing something like automatically freezing addresses once used would be interesting; but we'd need to have an extra 'frozen balance' displayed everywhere.",
      "created_at" : "2017-04-19T17:20:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295353146",
      "id" : 295353146,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T17:20:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295353146",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@jonasschnelli , all - perhaps the title of this commit is wrong (it does not prevent reuse globally) - I was trying to solve the issue in #10065 and would like to get @RHavar 's opinion on this approach, since his use case was:\r\nPeople send tiny amounts to well known addresses in his wallet.\r\nThe coin selection mechanism continually spends those outputs, tainting most outgoing transactions.\r\nHe was looking for a (persistent) way to exclude certain well known addresses from the coin selection algorithm.\r\n(RPC calls to display amounts/addresses TBD if the overall idea works).\r\n> An advanced wallet feature should be the ability to disable all address reuse. The attack this is designed to stop is if I know that the address 1BPmZt3kjnFffANNs6MCBBBKRYwRGGrXQZ is part of Alice's wallet, it shouldn't be possible to continually pepper it with dust and learn more about her as her wallet automatically keeps spend-linking it with her other outgoing transactions.",
      "created_at" : "2017-04-19T18:25:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295378501",
      "id" : 295378501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T18:25:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295378501",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/27317396?v=3",
         "events_url" : "https://api.github.com/users/jet0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jet0/followers",
         "following_url" : "https://api.github.com/users/jet0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jet0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jet0",
         "id" : 27317396,
         "login" : "jet0",
         "organizations_url" : "https://api.github.com/users/jet0/orgs",
         "received_events_url" : "https://api.github.com/users/jet0/received_events",
         "repos_url" : "https://api.github.com/users/jet0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jet0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jet0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jet0"
      }
   },
   {
      "body" : "@jet0  I'm not sure if this right granularity to disable address reuse. For instance, let's say I request someone sends me money to address X and they do so.\r\n\r\nI can't immediately use `freezeaddress` because doing so would stop me spending the coins. I'd have to wait until the coins left address X and then freeze it. But that's rather annoying to do, and leaves open the reuse problem until I've spent all the money.\r\n\r\nAlso I don't think using the configuration is appropriate for a list of frozen addresses. It's highly dynamic and often huge (I personally have half a million addresses I'd like to freeze).\r\n\r\n---\r\n\r\nI think a better way of solving the problem would be to extend the locked outputs. I think making them persistent would be a good first step (it's rather annoying that locked outputs aren't already persistent). And then the configuration option to disable address reuse could automatically lock any outputs you got, if the associated address has already been used.\r\n\r\n\r\n\r\n",
      "created_at" : "2017-04-19T18:58:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295391631",
      "id" : 295391631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T18:58:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295391631",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "> ... tainting most outgoing transaction`\r\n\r\nYes. This is a problem.\r\n\r\nBut is blacklisting addresses from coin-selection a valid solution? I would prefer if I could block certain UTXOs by txid/vout. Wouldn't blocking addresses lead to the problem that I cannot distinguish between taint-inputs and a real inputs (both could be sent to the same address)?\r\n\r\nBoth is already solvable:\r\n-> lockunspent (just lock the taint utxo)\r\n-> Qt coin controll\r\n\r\nBut your approach may be useful. But I'd recommend to add it as RPC command rather then a startup argument (otherwise you need to restart Core in order to get this thing working).",
      "created_at" : "2017-04-19T19:02:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295393015",
      "id" : 295393015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T19:02:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295393015",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> Wouldn't blocking addresses lead to the problem that I cannot distinguish between taint-inputs and a real inputs\r\n\r\nI believe the only time one needs to worry about taint inputs is after a spend from that address happens, so long as the spends make sure to spend all (non-dust) coins paid to that address so far.  \r\n\r\nWhat we should prefer doing is when we spend any coin connected to an address we should spend all (or all non-dust) coins for that address.  Then any new(/remaining) coins should be considered tainted, and ideally spent via coinjoins or given away as donations.",
      "created_at" : "2017-04-19T19:16:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295398692",
      "id" : 295398692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T19:16:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295398692",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> I believe the only time one needs to worry about taint inputs is after a spend from that address happens, so long as the spends make sure to spend all (non-dust) coins paid to that address so far.\r\n\r\nThat's a good point, but from a pragmatic point of view I think it's not worth it. It comes at a terrible cost to coin selection (instead of picking from a set of outputs, it's going to have to pick from a set of sets). And coin selection in core is already one of the weakest parts, I don't favor making it any harder to deal with.\r\n\r\nAnd keep in mind that if we're trying to prevent someone dusting the wallet that dust (even when it's standard) is a *lot* more expensive to spend than it contains.  (As dust is based on the tiny relayfee, but the wallet typically uses a feerate of >100x more than that when creating transactions).\r\n\r\nSo I think for simplicity, it makes a lot more sense to just lock the output immediately instead of delaying it at the cost of putting fancy logic in the coin selection as well.\r\n\r\n\r\n",
      "created_at" : "2017-04-19T19:29:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295403437",
      "id" : 295403437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T19:33:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295403437",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "> And then the configuration option to disable address reuse could automatically lock any outputs you got, if the associated address has already been used.\r\n\r\n@RHavar - to clarify - \"associated address has already been used\" - do you mean to automatically lock all (new or existing) outputs for an address that matches any in the already locked set?",
      "created_at" : "2017-04-19T19:53:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295412658",
      "id" : 295412658,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T19:58:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295412658",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/27317396?v=3",
         "events_url" : "https://api.github.com/users/jet0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jet0/followers",
         "following_url" : "https://api.github.com/users/jet0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jet0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jet0",
         "id" : 27317396,
         "login" : "jet0",
         "organizations_url" : "https://api.github.com/users/jet0/orgs",
         "received_events_url" : "https://api.github.com/users/jet0/received_events",
         "repos_url" : "https://api.github.com/users/jet0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jet0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jet0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jet0"
      }
   },
   {
      "body" : "@jonasschnelli what would you recommend the feature looks like?\r\n> But your approach may be useful. But I'd recommend to add it as RPC command rather then a startup argument (otherwise you need to restart Core in order to get this thing working).\r\n\r\nA set of RPC commands to freeze/unfreeze a wallet address from being used in coin selection (similar to the IsFrozenCoin() I have)?",
      "created_at" : "2017-04-19T19:56:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295413631",
      "id" : 295413631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T19:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295413631",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/27317396?v=3",
         "events_url" : "https://api.github.com/users/jet0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jet0/followers",
         "following_url" : "https://api.github.com/users/jet0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jet0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jet0",
         "id" : 27317396,
         "login" : "jet0",
         "organizations_url" : "https://api.github.com/users/jet0/orgs",
         "received_events_url" : "https://api.github.com/users/jet0/received_events",
         "repos_url" : "https://api.github.com/users/jet0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jet0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jet0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jet0"
      }
   },
   {
      "body" : "> @RHavar - to clarify - \"associated address has already been used\" - do you mean to automatically lock all (new or existing) outputs for an address that matches any in the already locked set?\r\n\r\nI mean if you're running with `-dont-allow-address-reuse` when the wallet sees a new inbound output, it checks to see if that address has already previously been used. If it's been used, it locks the output (so it's not spendable).\r\n\r\nMaybe other people will disagree with that approach, but it seems the simplest to implement. ",
      "created_at" : "2017-04-19T20:01:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295416078",
      "id" : 295416078,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T20:01:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295416078",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "> it checks to see if that address has already previously been used\r\n\r\nHow do you define \"previously been used\"? I don't understand its relationship with \"lockunspent\" feature in your comments.\r\n(1) funds were received to it, or (2) its funds were spent, or (3) that some or all of its txouts are locked via lockunspent RPC or (4) something else?\r\nOn the other hand - if we are working with persistent lockunspent outputs -- it sounds simple to automatically lock all other outputs with the associated address (via a config option).",
      "created_at" : "2017-04-19T20:24:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295425495",
      "id" : 295425495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T20:24:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295425495",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/27317396?v=3",
         "events_url" : "https://api.github.com/users/jet0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jet0/followers",
         "following_url" : "https://api.github.com/users/jet0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jet0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jet0",
         "id" : 27317396,
         "login" : "jet0",
         "organizations_url" : "https://api.github.com/users/jet0/orgs",
         "received_events_url" : "https://api.github.com/users/jet0/received_events",
         "repos_url" : "https://api.github.com/users/jet0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jet0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jet0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jet0"
      }
   },
   {
      "body" : "> How do you define \"previously been used\"? I don't understand its relationship with \"lockunspent\" feature in your comments.\r\n(1) funds were received to it, or (2) its funds were spent, or (3) that some or all of its txouts are locked via lockunspent RPC or (4) something else?\r\n\r\nI mean (1). If you're getting money to a previously used address (i.e. You've previously received money to this address before) it would just lock it, so it doesn't get automatically spent.\r\n",
      "created_at" : "2017-04-19T20:27:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295426426",
      "id" : 295426426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T20:29:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295426426",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "@RHavar I think I understand now - in your original request you were not intending to execute a bunch of \"lockunspent\" calls or \"freezeaddress\" with specific txouts or addresses in mind, but wanted a system-wide switch to 'spend once from each address'. I.e. no manual txout or address selection, correct?",
      "created_at" : "2017-04-19T21:02:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295440933",
      "id" : 295440933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T21:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295440933",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/27317396?v=3",
         "events_url" : "https://api.github.com/users/jet0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jet0/followers",
         "following_url" : "https://api.github.com/users/jet0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jet0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jet0",
         "id" : 27317396,
         "login" : "jet0",
         "organizations_url" : "https://api.github.com/users/jet0/orgs",
         "received_events_url" : "https://api.github.com/users/jet0/received_events",
         "repos_url" : "https://api.github.com/users/jet0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jet0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jet0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jet0"
      }
   },
   {
      "body" : "@jet0 yeah, ideally it would just be an option that I enable and the wallet does all the hard work for me =)\r\n\r\nI mean, if there was an rpcinterface  `freezeaddress` I'd happily use it.  But it's more of a pain in the ass than I'd like (especially if I had to first make sure there was no money left in it). ",
      "created_at" : "2017-04-19T21:28:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295450998",
      "id" : 295450998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T21:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295450998",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "> That's a good point, but from a pragmatic point of view I think it's not worth it. It comes at a terrible cost to coin selection (instead of picking from a set of outputs, it's going to have to pick from a set of sets). \r\n\r\nWith due respect, I think you're handwaving here -- and that isn't a way to accomplish anything.  Doing anything less then treating all spendable coins paid to an address as a single unit is a guaranteed privacy failure... and I don't believe this would add_any_ complexity to coin selection-- the \"coin\" you select over is just the effect of spending the whole group... though it would make corner cases where we mishandle dust payments a bit more obvious, but those need to be addressed regardless.\r\n\r\n>  And coin selection in core is already one of the weakest parts,\r\n\r\nCan you suggest _ANY_ piece of software that does better?   (A lot of other things do provably worse, see e.g. the study published at the last scaling bitcoin...)\r\n\r\n> And keep in mind that if we're trying to prevent someone dusting the wallet that dust (even when it's standard) is a lot more expensive to spend than it contains.\r\n\r\nNot considering outputs which have a marginal size greater than their fee-rate cost is pretty trivial (one loc), and independently interesting. \r\n\r\n> So I think for simplicity, it makes a lot more sense to just lock the output immediately instead of delaying it at the cost of putting fancy logic in the coin selection as well.\r\n\r\nYou mean to 'lock' subsequent payments after you've had a first?  This would create a trivial attack if widely used-- I see payments to new address and I quickly pay dust.   Now the actual payment is 'locked' and all you'll spend is the dust.\r\n\r\nThis vulnerability is avoided if the horizon for locking is immediately prior to spending, since an attacker cannot race that.  I think it would also turn the feature from an exotic and difficult to support thing to something we could reasonably make a default, at least once there were the right UI features for handling the held balance.\r\n\r\n\r\n \r\n\r\n\r\n",
      "created_at" : "2017-04-19T23:38:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295494511",
      "id" : 295494511,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-19T23:39:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295494511",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> and I don't believe this would add _any_ complexity to coin selection-- the \"coin\" you select over is just the effect of spending the whole group\r\n\r\nWell, that's only because the current algorithm is naive and doesn't even consider the size of the transaction. But if it's smarter, then there's a different cost to adding different amounts of inputs (i.e. adding two 5 BTC inputs is going to cost more than adding 10 BTC input).\r\n\r\nAlso how do you propose it handles an address that also has uneconomical to spend outputs?\r\n\r\n> Can you suggest ANY piece of software that does better? (A lot of other things do provably worse, see e.g. the study published at the last scaling bitcoin...)\r\n\r\nI haven't seen the study. But core's just tries to minimize the amount of the change output, which strikes me as a little bizarre and a privacy nightmare (>99% of the time, the change is trivially identifiable). It also conflates utxo consolidation with coin selection (which I agree is what most normal users wallet want), and it routinely adds inputs that cost more to spend than they add.\r\n\r\nBut anyway, I've been able to save well *over* 70% on transaction fees with a [trivial patch to core](https://github.com/RHavar/bitcoin/commit/6452fbc751f5ee6ac4ab38855bf9c3654caf6dfe) and a utxo consolidation cron job, which translates to over a thousand dollars a month.  Not that it is suitable for normal users, but it clearly shows bitcoin's coin selection is not nearly \"optimal\" and that one size doesn't fit all. \r\n\r\nThat said, you make a convincing case about avoiding the attack vector. I just hope it's not one of those cases where the perfect solution is so much work that no one bothers doing it, while they would've been happy doing the good one. =)\r\n\r\n",
      "created_at" : "2017-04-20T00:03:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295502056",
      "id" : 295502056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-20T00:03:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295502056",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "Oh by no means do I think the behavior is anywhere near optimal, but to me it sounded you were opposing fixing it in favor of more special purpose options. The amount of configurables is already a major burden in improving the software already.  Damn, I really wish your answer had been \"I think X does it perfectly.\" :P\r\n\r\n> But core's just tries to minimize the amount of the change output, \r\n\r\nHeh. If it just did that it would be a lot simpler.   Instead its actual objective probably takes a page of text to explain.    The main goal, such as it is, is best understood as privacy optimizing under a strong assumption that addresses are not reused-- this assumption is just outright wrong, but if you look at it in that light its behavior makes more sense. It tries to move as little of your coins at a time as it can to avoid linking the payments.   Beyond that, it tries to make change outputs (if there is change) large enough to be meaningfully useful in the future. (0.01 btc-ish is the current target).\r\n\r\nI think It's far too hesitant to throw a bit of dust away when doing so would really improve the result (e.g. avoiding a change output at all)...   Maybe the upcoming improvements in the fee estimator will make it easier to come up with a reliable estimate of \"effectively dust\" rather than just using the relay fee.\r\n\r\n> But if it's smarter, then there's a different cost to adding different amounts of inputs (i.e. adding two 5 BTC inputs is going to cost more than adding 10 BTC input)\r\n\r\nDepends on what fees are now relative to the future, absent other information (like knowing you're going to make consolidation transactions during lower feerate times) it's probably generally the case that we should prefer to spend coins eagerly at least when doing so won't gum up privacy-- simply because generally we expect fees to not be lower in the future; but right now it's not eager because it assumes all addresses are independent.\r\n\r\nMore eager policies are also good for the long term because w/ aggregation in the future it will be cheaper to spend more inputs at a time, even ignoring the commons benefit.\r\n\r\n> Also how do you propose it handles an address that also has uneconomical to spend outputs?\r\n\r\nSpend a small amount of them anyways (I doubt many users would mind being a little civically minded-- and paying a tiny bit more in their transactions to remove dust, especially if they're break-even to spend vs a loss), and if there are many ignore them like received after the fact coins-- so that they don't become attractive attack vector.\r\n\r\nE.g. specific implementation would be to go through the available scriptpubkeys (or taint groups, though that functionality is less useful now that coinjoin obfuscates them somewhat)  which haven't been marked frozen and gather up all their economical to spend outputs, plus up to one or two extra outputs which aren't economical from that spk and treat it as a single input for the purpose of the rest of the selection.  Then when a transaction is sent, mark all the involved SPKs as frozen (probably need a better term than frozen, since it sounds like a third party adverse action rather than a privacy feature). \r\n\r\n",
      "created_at" : "2017-04-20T00:33:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295511818",
      "id" : 295511818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-20T00:33:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295511818",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : ">  It tries to move as little of your coins at a time as it can to avoid linking the payments.\r\n\r\nI am familiar with the coin selection algorithm, and don't understand how you come to this conclusion. \r\n\r\nThe algorithm is a little tricky, because it's kind of two unrelated algorithms but it basically is:\r\n\r\nStage 1: If sending N, and you have an input of exactly N ... use that.\r\nStage 2: If the sum of all inputs < N  is greater than N, pick from them randomly until you you're >= N.\r\nStage 3: Otherwise, go to ApproximateBestSubset  and do a partial-ish randomish selection from biggest to smallest with the goal of picking the subset that that has the least amount of change.\r\n\r\nI really struggle seeing how this is \"trying to move as little of your coins at a time\", when Stage 2 almost does the exact opposite. ",
      "created_at" : "2017-04-20T00:55:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295519981",
      "id" : 295519981,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-20T00:56:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295519981",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/9326759?v=3",
         "events_url" : "https://api.github.com/users/RHavar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RHavar/followers",
         "following_url" : "https://api.github.com/users/RHavar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RHavar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RHavar",
         "id" : 9326759,
         "login" : "RHavar",
         "organizations_url" : "https://api.github.com/users/RHavar/orgs",
         "received_events_url" : "https://api.github.com/users/RHavar/received_events",
         "repos_url" : "https://api.github.com/users/RHavar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RHavar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RHavar"
      }
   },
   {
      "body" : "Sorry for the long discussion - I'd like to bring this to some closure.\r\nI think @jonasschnelli had some use for \"freezeaddress\" type functionality, perhaps with RPC calls instead of the config - I will deliver that if it can be quantified. Comments please. :)\r\n@RHavar - is there a minimum subset of manual lockunspent + some automation for new txouts appearing you'd like to see? (The deluxe/ideal research GMaxwell & yourself are going over is bigger than I can do now). We can take the detailed discussion offline if you prefer.",
      "created_at" : "2017-04-20T14:43:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-295762782",
      "id" : 295762782,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-04-20T14:43:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295762782",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/27317396?v=3",
         "events_url" : "https://api.github.com/users/jet0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jet0/followers",
         "following_url" : "https://api.github.com/users/jet0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jet0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jet0",
         "id" : 27317396,
         "login" : "jet0",
         "organizations_url" : "https://api.github.com/users/jet0/orgs",
         "received_events_url" : "https://api.github.com/users/jet0/received_events",
         "repos_url" : "https://api.github.com/users/jet0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jet0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jet0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jet0"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "This seems to have reached an impasse, closing for now, feel free to tag me to reopen it when there is more agreement that this specific change is a good idea.",
      "created_at" : "2017-10-04T12:58:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10233#issuecomment-334146741",
      "id" : 334146741,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10233",
      "updated_at" : "2017-10-04T12:58:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/334146741",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
