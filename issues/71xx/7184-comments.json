[
   {
      "body" : "wow I like that, the changes are very small to review. I'll add the tests later tonight or tomorrow..",
      "created_at" : "2015-12-08T03:16:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162746828",
      "id" : 162746828,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T03:45:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162746828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "@NicolasDorier oh good, i was mostly holding off on the tests because i wanted to see if people liked this approach.\r\n\r\nWhat do you mean about IsFinalTx?  I think the changes to make that aware of MTP are already merged, so it wasn't necessary for me to change it further.\r\n\r\n\r\n",
      "created_at" : "2015-12-08T03:25:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162747941",
      "id" : 162747941,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T03:25:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162747941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r46963687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46963687"
         }
      },
      "body" : "Like the symmetry, but the name here is now a bit out-dated and possibly misleading since we have two types of finality.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-08T15:07:32Z",
      "diff_hunk" : "@@ -341,7 +341,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r46963687",
      "id" : 46963687,
      "original_commit_id" : "d08dfced592661359e5261f28a58f7178e8b55c7",
      "original_position" : 2,
      "path" : "src/main.h",
      "position" : 2,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46963687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r46966223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46966223"
         }
      },
      "body" : "Agreed.  I was going for minimal changes to existing consensus code, but if people like I'd be happy to rename that.  Perhaps `LocktimeLock()` and `CheckLocktimeLock()`\r\n\r\nI'd also like to take out the way CheckFinalTx is called with default -1 in the wallet code, but I could save that for another pull.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-08T15:25:26Z",
      "diff_hunk" : "@@ -341,7 +341,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r46966223",
      "id" : 46966223,
      "original_commit_id" : "d08dfced592661359e5261f28a58f7178e8b55c7",
      "original_position" : 2,
      "path" : "src/main.h",
      "position" : 2,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46966223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "I am trying another approach before building on yours, which would solve the removeForReorg and CNB problem without changing any code in #6312. (https://github.com/NicolasDorier/bitcoin/compare/b13f47535cc2...0fb1092ed53f now building)\r\n\r\nI removed my comment about IsFinalTx, I was surprised not seeing the flag passed to it. But it seems client are held responsible for calculating the right blocktime. This led to code duplication, #6312 fixed that.\r\n\r\nI like the idea of having 2 methods : CheckLockTime and CheckSequenceLockTime though, but I wonder if it will really be useful since there will be no case where we want to call one and not the other.",
      "created_at" : "2015-12-08T15:56:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162925968",
      "id" : 162925968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T15:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162925968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "added unit tests",
      "created_at" : "2015-12-08T16:01:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162927637",
      "id" : 162927637,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T16:01:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162927637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@NicolasDorier One reason I like the approach in this PR is that the sequence-lock check is done separately from the nLockTime check -- locktime can be evaluated for all transactions in a block at the time a block is received (eg in `ContextualCheckBlock`), whereas sequence locks can only be evaluated when all inputs heights' are available (eg during `ConnectBlock`).\r\n\r\nFrom a design perspective, it seems to me that having the consensus checks operate in the smallest logical units ought to limit the need for future refactorings (which I think is a good design goal for consensus code).",
      "created_at" : "2015-12-08T16:05:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162929355",
      "id" : 162929355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T16:05:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162929355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Ok, it makes sense. I'm kind of worried though about having the block of CheckLockTime responsible for calculating the blocktime each time, this is code duplication easy to get wrong. (I think that when I fixed it in #6312, there was indeed some parts which could break if the block evaluated was the genesis with MTP enabled)\r\n\r\nWhat about having a CCBlockIndex::GetCutoffTime(flag) method ?",
      "created_at" : "2015-12-08T16:07:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162930532",
      "id" : 162930532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T16:08:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162930532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "It does not solve the perf problem though, CheckSequenceLock need to be called during reorg. (Did https://github.com/NicolasDorier/bitcoin/compare/9e8c7be9bc94...8670ce84fd01 it takes time for me to compile, I don't have a linux at hand, doing it by pushing/waiting travis) ",
      "created_at" : "2015-12-08T16:23:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-162934900",
      "id" : 162934900,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T16:50:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/162934900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Here is another version of this that assumes BIP68 includes MTP already: https://github.com/morcos/bitcoin/commit/ba957d5407ecc3d1f320893f47cfc7181a0a0878",
      "created_at" : "2015-12-08T20:40:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163011742",
      "id" : 163011742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T20:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/163011742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@morcos Since we plan to roll out BIP113 and BIP68 together it really makes sense that BIP68 assumes MTP. I think that is a must and it simplifies things.",
      "created_at" : "2015-12-08T21:17:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163020637",
      "id" : 163020637,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T21:17:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/163020637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "NACK This wastes a lot of previous review effort by not building on top of #6312.",
      "created_at" : "2015-12-08T21:51:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163029513",
      "id" : 163029513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-08T21:51:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/163029513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "OK I fixed my comment about -1 and switched to the version where BIP 68 is defined to use MTP.\r\n\r\nIf it is helpful for anyone to see what this PR looks like as a change from #6312, you can see that here:\r\nhttps://github.com/maaku/bitcoin/compare/sequencenumbers...morcos:7184onorig6312\r\n",
      "created_at" : "2015-12-09T02:51:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163089533",
      "id" : 163089533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-09T02:51:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/163089533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "> If it is helpful for anyone to see what this PR looks like as a change from #6312, you can see that here: maaku@sequencenumbers...morcos:7184onorig6312\r\n\r\nThank you, it is certainly useful, at least for me.\r\nWhy not use that branch here directly (like @sdaftuar and @NicolasDorier are doing with their solutions) instead? Later maybe you can squash some of the commits if this replaces #6312 .\r\nI don't understand why you insist in doing it in a new single commit with your name in it instead.\r\n",
      "created_at" : "2015-12-09T06:19:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-163122207",
      "id" : 163122207,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2015-12-09T06:19:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/163122207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47233948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47233948"
         }
      },
      "body" : "The comments here are slightly confusing to me because of missing context.  The above is a consensus rule for all transactions, while the ones below only apply as policy (for now) for `tx.nVersion >= 2` transactions.  I think we should expand on the comments to make this clearer, perhaps with a reference to BIP68?\r\n\r\n(Edit: I think this also applies to #6312.)",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-10T14:47:00Z",
      "diff_hunk" : "@@ -61,13 +61,39 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47233948",
      "id" : 47233948,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 6,
      "path" : "src/primitives/transaction.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47233948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47248162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47248162"
         }
      },
      "body" : "I think using `block.nHeight-1` here forces an unnecessary restriction on the caller (ie that `block.nHeight` is being set to 1 more than the current tip height) -- if we change this to be \r\n```\r\nint64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;\r\n```\r\nThen we would be able to change the `CheckSequenceLocks` code in the future to allow us to test whether a transaction is able to be confirmed in the next N blocks for N > 1 (right now we can only do N=1).  \r\n\r\nThis would allow for mempool policy code that could permit transactions that may not be mineable now, but will be mineable in the near future.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-10T16:25:46Z",
      "diff_hunk" : "@@ -705,6 +706,116 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime =  block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47248162",
      "id" : 47248162,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 77,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47248162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47249538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47249538"
         }
      },
      "body" : "Agreed. I think it's pretty sure this code or #7187 is going supersede #6312 so I'm fine with the comment being updated here. \r\n\r\nmaybe\r\n\r\n    /* Setting nSequence to this value for every input in a transaction\r\n     * disables nLockTime when transaction nVersion is >=2 . */",
      "commit_id" : "1f1df010d0aca0577d008c853c9c0fec6c2e8559",
      "created_at" : "2015-12-10T16:35:12Z",
      "diff_hunk" : "@@ -61,13 +61,39 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47249538",
      "id" : 47249538,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 6,
      "path" : "src/primitives/transaction.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2015-12-10T18:34:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47249538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47253815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47253815"
         }
      },
      "body" : "The semantic used by caller is the following : \r\n*Check SequenceLock assuming the transaction is included in \"block\"*\r\n\r\nThis is needed. Because *block* might be an existing old block but also a block on top of tip. (for mempool transactions)\r\nChanging the semantic of this method would make things less clear.\r\n\r\nI introduced this change on https://github.com/maaku/bitcoin/commit/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a . Previously, the LockTime method needed both : the tip and the block where it was tested against. I simplified by making it requires only the block it is tested against.\r\n\r\nThere is no concept of \"tip\" to have in the definition of sequence lock.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-10T17:05:59Z",
      "diff_hunk" : "@@ -705,6 +706,116 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime =  block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47253815",
      "id" : 47253815,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 77,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47253815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47256905"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47256905"
         }
      },
      "body" : "@NicolasDorier My point is that we're requiring `nHeight-1` to be a valid blockindex entry, when really all we need to do is rely on `pprev` being a valid block index (modulo checks for the genesis block).\r\n\r\nIf we use `pprev` for the time calculation rather than `nHeight`, that would give us the freedom to tweak the value of `nHeight` that we pass in, so that we could test for transactions with height-based-relative-locks being confirmable in N blocks rather than just in the next block.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-10T17:31:49Z",
      "diff_hunk" : "@@ -705,6 +706,116 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime =  block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47256905",
      "id" : 47256905,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 77,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47256905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47274196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47274196"
         }
      },
      "body" : "It's not clear to me that this is is going to supersede #6312 . It seems there's at least 2 more people with alternatives. Can we maintain #6312 updated as a common base for the 3 different options?\r\nAs said, squashes can happe right before merging (you can also reset HEAD^ the squashed commit and redo it with your name if that's the reason why this currently doesn't use the common base [no other reason comes to mind]).",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-10T19:41:45Z",
      "diff_hunk" : "@@ -61,13 +61,39 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47274196",
      "id" : 47274196,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 6,
      "path" : "src/primitives/transaction.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47274196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47284310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47284310"
         }
      },
      "body" : "This comment has nothing to do with BIP 68. Setting all nSequence to max into disables nLockTime for all tx versions, today.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-10T20:57:26Z",
      "diff_hunk" : "@@ -61,13 +61,39 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47284310",
      "id" : 47284310,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 6,
      "path" : "src/primitives/transaction.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47284310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47317944"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47317944"
         }
      },
      "body" : "woops, sorry I misunderstood your point. (I thought you wanted to pass the previous block directly) \r\nCorrect.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2015-12-11T03:10:43Z",
      "diff_hunk" : "@@ -705,6 +706,116 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime =  block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r47317944",
      "id" : 47317944,
      "original_commit_id" : "50ce92f9858d4442fd0765c62584fc43c540fdbd",
      "original_position" : 77,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/47317944",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Tested-by: Rusty Russell <rusty@rustcorp.com.au> (merged with #6564 for testing, with only trivial header conflict fixup).",
      "created_at" : "2016-01-07T04:45:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-169549595",
      "id" : 169549595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-07T04:45:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/169549595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/775844?v=3",
         "events_url" : "https://api.github.com/users/rustyrussell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rustyrussell/followers",
         "following_url" : "https://api.github.com/users/rustyrussell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rustyrussell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rustyrussell",
         "id" : 775844,
         "login" : "rustyrussell",
         "organizations_url" : "https://api.github.com/users/rustyrussell/orgs",
         "received_events_url" : "https://api.github.com/users/rustyrussell/received_events",
         "repos_url" : "https://api.github.com/users/rustyrussell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rustyrussell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rustyrussell"
      }
   },
   {
      "body" : "@sdaftuar's nits and suggestions addressed.\r\n\r\nAfter this receives some ACK's I can work on back ports",
      "created_at" : "2016-01-14T22:19:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-171800192",
      "id" : 171800192,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-14T22:19:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/171800192",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r49929831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49929831"
         }
      },
      "body" : "IsFinalTx is planned to be part of libconsensus,   CheckFinalTx is just a convenience function using globals. I don't  consider CheckFinalTx (nor CheckSequenceLocks) a \"consensus  function\" or \"consensus code\".",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-01-16T09:44:59Z",
      "diff_hunk" : "@@ -341,7 +341,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r49929831",
      "id" : 49929831,
      "original_commit_id" : "d08dfced592661359e5261f28a58f7178e8b55c7",
      "original_position" : 2,
      "path" : "src/main.h",
      "position" : 2,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/49929831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "I think a new PR with #7187 on top of this one should be open. It makes no sense to review only this PR without #7187.",
      "created_at" : "2016-01-16T10:11:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-172178962",
      "id" : 172178962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-16T10:11:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/172178962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Test script is available here (requires merge of #6564 with #7184) https://github.com/ajtowns/op_csv-test",
      "created_at" : "2016-01-28T17:15:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-176288661",
      "id" : 176288661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-28T17:15:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/176288661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51355184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51355184"
         }
      },
      "body" : "Would you mind adding a comment explaining when block.pprev might be null; if I understand it correctly the only case where that is true is the genesis block, in which case it'd be good to add an assertion that the block height matches that case.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-01-31T04:23:41Z",
      "diff_hunk" : "@@ -705,6 +706,122 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and time which the transaction must be later than\n+ * in order to be considered final in the context of BIP 68.  It also removes\n+ * from the vector of input heights any entries which did not correspond to sequence\n+ * locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51355184",
      "id" : 51355184,
      "original_commit_id" : "e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4",
      "original_position" : 83,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51355184",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51355210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51355210"
         }
      },
      "body" : "nit: extra space after return",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-01-31T04:29:23Z",
      "diff_hunk" : "@@ -705,6 +706,122 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and time which the transaction must be later than\n+ * in order to be considered final in the context of BIP 68.  It also removes\n+ * from the vector of input heights any entries which did not correspond to sequence\n+ * locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // SequenceLocks() with one more than chainActive.Height().\n+    index.nHeight = tip->nHeight + 1;\n+\n+    // pcoinsTip contains the UTXO set for chainActive.Tip()\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    std::vector<int> prevheights;\n+    prevheights.resize(tx.vin.size());\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+        CCoins coins;\n+        if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n+            return  error(\"%s: Missing input\", __func__);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51355210",
      "id" : 51355210,
      "original_commit_id" : "e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4",
      "original_position" : 118,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51355210",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "ACK https://github.com/morcos/bitcoin/commit/e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4, modulo nits fixed in https://github.com/morcos/bitcoin/pull/7\r\n\r\nThat said, while I'm happy to see this merged as a mempool-only thing, before we actually soft-fork this in I'd like to see more unit tests; it's notable and worrying that I could change  https://github.com/morcos/bitcoin/blob/e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4/src/main.cpp#L760 to remove the -1 and only one test failed. It might be good to extend the format of the transaction_(in)valid.json tests to let you specify txin heights/blocktimes, and then create some dummy block and coin indexes to use it. Another option might be to make a data-driven block acceptance unittest.",
      "created_at" : "2016-01-31T09:08:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177446433",
      "id" : 177446433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-31T09:08:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/177446433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd can you review #7187 as well ? Those two PR goes together.",
      "created_at" : "2016-01-31T09:44:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177448418",
      "id" : 177448418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-31T09:44:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/177448418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "@morcos I just gave this PR a once over - very clean implementation! I'll run a few more tests.",
      "created_at" : "2016-01-31T11:24:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-177470898",
      "id" : 177470898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-01-31T11:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/177470898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/894059?v=3",
         "events_url" : "https://api.github.com/users/CodeShark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CodeShark/followers",
         "following_url" : "https://api.github.com/users/CodeShark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CodeShark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CodeShark",
         "id" : 894059,
         "login" : "CodeShark",
         "organizations_url" : "https://api.github.com/users/CodeShark/orgs",
         "received_events_url" : "https://api.github.com/users/CodeShark/received_events",
         "repos_url" : "https://api.github.com/users/CodeShark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CodeShark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CodeShark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51482569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51482569"
         }
      },
      "body" : "I'm not sure why we think its ever necessary to check sequence locks on a genesis block.\r\nSo what would you think about assert(block.pprev) and then removing the ternary operator?\r\n",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-01T21:22:12Z",
      "diff_hunk" : "@@ -705,6 +706,122 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and time which the transaction must be later than\n+ * in order to be considered final in the context of BIP 68.  It also removes\n+ * from the vector of input heights any entries which did not correspond to sequence\n+ * locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51482569",
      "id" : 51482569,
      "original_commit_id" : "e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4",
      "original_position" : 83,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51482569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "@petertodd I addressed your nits, but did it a bit differently than your suggestions.  Let me know if you're ok with this.\r\n\r\nIn particular though, it occurs to me that the subtracting 1 to retain nLockTime semantics is an artifact of how this code used to be combined with nLockTime checks.  These semantics are purely internal.  I think it might be cleaner to not subtract 1 and change the comparison to be a  strict >?  It's not clear to me what will be more confusing for later coders, because we will be saving these effective lock times in LockPoints as in #7187, so maybe keeping the nLockTime semantics makes sense?\r\n\r\n\r\n",
      "created_at" : "2016-02-01T21:25:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178201104",
      "id" : 178201104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-01T21:25:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/178201104",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Keeping the existing semantics makes a lot more sense, as silly as they\nare, especially if there is any future refactorings (unknown at this time)\nthat generalize nLockTime and nSequence behavior.\n\nOn Mon, Feb 1, 2016 at 1:26 PM, Alex Morcos <notifications@github.com>\nwrote:\n\n> @petertodd <https://github.com/petertodd> I addressed your nits, but did\n> it a bit differently than your suggestions. Let me know if you're ok with\n> this.\n>\n> In particular though, it occurs to me that the subtracting 1 to retain\n> nLockTime semantics is an artifact of how this code used to be combined\n> with nLockTime checks. These semantics are purely internal. I think it\n> might be cleaner to not subtract 1 and change the comparison to be a strict\n> >? It's not clear to me what will be more confusing for later coders,\n> because we will be saving these effective lock times in LockPoints as in\n> #7187 <https://github.com/bitcoin/bitcoin/pull/7187>, so maybe keeping\n> the nLockTime semantics makes sense?\n>\n> Ã¢ÂÂ\n> Reply to this email directly or view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178201104>.\n>\n",
      "created_at" : "2016-02-01T21:33:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178204456",
      "id" : 178204456,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-01T21:33:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/178204456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51525475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51525475"
         }
      },
      "body" : "@morcos No, this is the reason for the ternary https://github.com/bitcoin/bitcoin/pull/6312#discussion_r44622250",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-02T05:23:24Z",
      "diff_hunk" : "@@ -705,6 +706,122 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and time which the transaction must be later than\n+ * in order to be considered final in the context of BIP 68.  It also removes\n+ * from the vector of input heights any entries which did not correspond to sequence\n+ * locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51525475",
      "id" : 51525475,
      "original_commit_id" : "e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4",
      "original_position" : 83,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51525475",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51580942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51580942"
         }
      },
      "body" : "@btcdrak That was the old code.  The new code calls SequenceLocks from ConnectBlock which doesn't run on the genesis block and doesn't call SequenceLocks on coinbase txs.  If both of those things change, it would get caught by the proposed assert.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-02T15:14:09Z",
      "diff_hunk" : "@@ -705,6 +706,122 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and time which the transaction must be later than\n+ * in order to be considered final in the context of BIP 68.  It also removes\n+ * from the vector of input heights any entries which did not correspond to sequence\n+ * locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51580942",
      "id" : 51580942,
      "original_commit_id" : "e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4",
      "original_position" : 83,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51580942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Tested ACK using btcdrak's BIP68+OP_CSV combined branch https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv on regtest.\r\n\r\nThis pull request is _very_ useful for Lightning Network channels without pre-set expiries. Thanks~~~!",
      "created_at" : "2016-02-03T04:24:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-178998114",
      "id" : 178998114,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-03T04:24:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/178998114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13424781?v=3",
         "events_url" : "https://api.github.com/users/josephpoon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josephpoon/followers",
         "following_url" : "https://api.github.com/users/josephpoon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josephpoon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josephpoon",
         "id" : 13424781,
         "login" : "josephpoon",
         "organizations_url" : "https://api.github.com/users/josephpoon/orgs",
         "received_events_url" : "https://api.github.com/users/josephpoon/received_events",
         "repos_url" : "https://api.github.com/users/josephpoon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josephpoon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josephpoon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josephpoon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51708235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51708235"
         }
      },
      "body" : "Ack on assert(block.pprev): we should never validate the genesis block anyway  (it's not only correct, it is the first consensus rule!).",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-03T11:18:34Z",
      "diff_hunk" : "@@ -705,6 +706,122 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and time which the transaction must be later than\n+ * in order to be considered final in the context of BIP 68.  It also removes\n+ * from the vector of input heights any entries which did not correspond to sequence\n+ * locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    int64_t nBlockTime = block.pprev ? block.pprev->GetMedianTimePast() : 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51708235",
      "id" : 51708235,
      "original_commit_id" : "e87d06a20e7d1dd9f3000c419a4dfe805e3dbec4",
      "original_position" : 83,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/51708235",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Tested ACK on regtest",
      "created_at" : "2016-02-04T07:38:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-179692706",
      "id" : 179692706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-04T07:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/179692706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/894059?v=3",
         "events_url" : "https://api.github.com/users/CodeShark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CodeShark/followers",
         "following_url" : "https://api.github.com/users/CodeShark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CodeShark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CodeShark",
         "id" : 894059,
         "login" : "CodeShark",
         "organizations_url" : "https://api.github.com/users/CodeShark/orgs",
         "received_events_url" : "https://api.github.com/users/CodeShark/received_events",
         "repos_url" : "https://api.github.com/users/CodeShark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CodeShark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CodeShark"
      }
   },
   {
      "body" : "utACK https://github.com/morcos/bitcoin/commit/ca786956afa9bf344255959447b0386dd142ebd1",
      "created_at" : "2016-02-04T19:23:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180011242",
      "id" : 180011242,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-04T19:23:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/180011242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "LGTM. Err, I mean, Tested ACK :) \r\n\r\nTesting methodology: \r\n  * Pulled down @btcdrak's combined  BIP68+OP_CSV branch: https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv. \r\n  * Started a local Bitcoin Core node with the `-regtest` flag activated. \r\n  * I then created an [integration test](https://github.com/LightningNetwork/lnd/commit/05f4d1fa9721f7e8c44844b719294a5f06cc21a9) in a [new branch](https://github.com/LightningNetwork/lnd/tree/csv-test) within [lnd](https://github.com/LightningNetwork/lnd) created specifically to test the combined BIP 68+112 branch. This particular test case directly exercises a possible scenario within LN, wherein one of the sides immediately broadcasts the current (and only) commitment transaction. As a result of this uncooperative closure, the party that broadcasted the transaction must wait a CSV delay before they can re-claim their funds.\r\n  * The test case exercises the following negative paths when verifying a transaction attempting to spend a CSV output, additionally ensuring the txn spending the CSV output is mature enough: \r\n     * invalid tx version\r\n     * mismatched sequence numbers\r\n     * sequence disable flag set\r\n     * CSV delay pre-mature \r\n\r\nThe test case detailed above can be found [here](https://github.com/LightningNetwork/lnd/blob/csv-test/lnwallet/script_utils_test.go). \r\n\r\nA major thanks to all those involved from BIP drafting, to BIP review, to coding the reference implementation, to code review, and finally, testing. As Joseph said above, relative time-locks are _extremely_ useful within the Lightning Network Ã°ÂÂÂ.",
      "created_at" : "2016-02-06T04:50:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180681158",
      "id" : 180681158,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-06T04:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/180681158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/998190?v=3",
         "events_url" : "https://api.github.com/users/Roasbeef/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Roasbeef/followers",
         "following_url" : "https://api.github.com/users/Roasbeef/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Roasbeef/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Roasbeef",
         "id" : 998190,
         "login" : "Roasbeef",
         "organizations_url" : "https://api.github.com/users/Roasbeef/orgs",
         "received_events_url" : "https://api.github.com/users/Roasbeef/received_events",
         "repos_url" : "https://api.github.com/users/Roasbeef/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Roasbeef/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Roasbeef/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Roasbeef"
      }
   },
   {
      "body" : "@NicolasDorier I think you are confused. The combined branch _is this PR_.",
      "created_at" : "2016-02-06T06:10:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180701101",
      "id" : 180701101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-06T06:10:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/180701101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "Ok my bad, I tought your branch was #6312  (removed my comment)",
      "created_at" : "2016-02-06T06:40:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180705706",
      "id" : 180705706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-06T06:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/180705706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Tested ACK using btcdrak's BIP68+OP_CSV combined branch master...btcdrak:sequenceandcsv on regtest.",
      "created_at" : "2016-02-06T20:35:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180860007",
      "id" : 180860007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-06T20:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/180860007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/894059?v=3",
         "events_url" : "https://api.github.com/users/CodeShark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/CodeShark/followers",
         "following_url" : "https://api.github.com/users/CodeShark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/CodeShark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/CodeShark",
         "id" : 894059,
         "login" : "CodeShark",
         "organizations_url" : "https://api.github.com/users/CodeShark/orgs",
         "received_events_url" : "https://api.github.com/users/CodeShark/received_events",
         "repos_url" : "https://api.github.com/users/CodeShark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/CodeShark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/CodeShark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52107316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52107316"
         }
      },
      "body" : "nit: s/in a block/in a given block/\r\n\r\nTook me a few readings to figure out what it was saying.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-06T20:50:02Z",
      "diff_hunk" : "@@ -341,7 +341,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n-/** \n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52107316",
      "id" : 52107316,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 6,
      "path" : "src/main.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52107316",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "utACK",
      "created_at" : "2016-02-06T21:36:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180870418",
      "id" : 180870418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-06T21:36:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/180870418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52315415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52315415"
         }
      },
      "body" : "What if block is genesis ? Why not just using block.GetAncestor(std::max(nCoinHeight-1, 0)) as above ?",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-09T14:43:11Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52315415",
      "id" : 52315415,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 88,
      "path" : "src/main.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52315415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52318044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52318044"
         }
      },
      "body" : "If it's the genesis block we know is valid and we don't need to check it. Hasn't this been discussed in an outdated diff already?",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-09T15:00:44Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52318044",
      "id" : 52318044,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 88,
      "path" : "src/main.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52318044",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52318751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52318751"
         }
      },
      "body" : "See https://github.com/bitcoin/bitcoin/pull/7184#discussion_r51482569\r\nand\r\nhttps://github.com/bitcoin/bitcoin/pull/7184#discussion_r47248162",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-09T15:05:40Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52318751",
      "id" : 52318751,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 88,
      "path" : "src/main.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52318751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Tested ACK, reimplemented  CSV from https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv in NBitcoin and did some tests at transaction level. (https://github.com/MetacoSA/NBitcoin/blob/csv/NBitcoin.Tests/transaction_tests.cs#L862)",
      "created_at" : "2016-02-10T11:18:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182322430",
      "id" : 182322430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T11:18:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182322430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "A (harmless) red flag: when CalculateSequenceLocks is called from CheckSequenceLocks, its passed CBlockIndex& object is not fully initialized (only pprev and nHeight are set), so calling GetAncestor looked dangerous to me. It seems that GetAncestor deals correctly with this case, however, and will fall back to walking using pprev instead of pskip in that case.",
      "created_at" : "2016-02-10T13:59:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182387268",
      "id" : 182387268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T13:59:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182387268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52459678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52459678"
         }
      },
      "body" : "Also needs a lock on the mempool, I think.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-10T14:00:42Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52459678",
      "id" : 52459678,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 102,
      "path" : "src/main.cpp",
      "position" : 102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52459678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52459911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52459911"
         }
      },
      "body" : "It's also needed because of internal consistency. If x->pprev->nHeight is X, x->nHeight must be X+1.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-10T14:02:56Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // SequenceLocks() with one more than chainActive.Height().\n+    index.nHeight = tip->nHeight + 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52459911",
      "id" : 52459911,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 113,
      "path" : "src/main.cpp",
      "position" : 114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52459911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "~~utACK~~\r\n\r\nEdit: there's a locking bug, where CheckSequenceLocks is executed without mempool lock.",
      "created_at" : "2016-02-10T14:10:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182390864",
      "id" : 182390864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T14:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182390864",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52460987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52460987"
         }
      },
      "body" : "This should be moved up to be within the above mempool-locked block.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-10T14:11:35Z",
      "diff_hunk" : "@@ -951,6 +1073,12 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         view.SetBackend(dummy);\n         }\n \n+        // Only accept BIP68 sequence locked transactions that can be mined in the next",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52460987",
      "id" : 52460987,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 145,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52460987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52465414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52465414"
         }
      },
      "body" : "Yep.  Originally the intention had been to be able to set this to a higher number if we wanted to allow the mempool to contain currently locked transactions.  I discovered that that doesn't work because of the GetAncestor use in CalculateSequenceLocks.  I wrote  up some minor changes to pass the height/time you want to check against directly to EvaluateSequenceLocks, but I think it's not worth making those changes now, we can do it if/when we decide we want to keep non-final txs.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-10T14:43:37Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // SequenceLocks() with one more than chainActive.Height().\n+    index.nHeight = tip->nHeight + 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52465414",
      "id" : 52465414,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 113,
      "path" : "src/main.cpp",
      "position" : 114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52465414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52468794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52468794"
         }
      },
      "body" : "Yeah, not worth changing things for. Just saying that there isn't really any other option.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-10T15:06:45Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // SequenceLocks() with one more than chainActive.Height().\n+    index.nHeight = tip->nHeight + 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52468794",
      "id" : 52468794,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 113,
      "path" : "src/main.cpp",
      "position" : 114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52468794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52490080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52490080"
         }
      },
      "body" : "added",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-10T17:13:10Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52490080",
      "id" : 52490080,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 102,
      "path" : "src/main.cpp",
      "position" : 102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-10T21:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52490080",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Oops.  Nice catch @sipa.   Fixed the missing lock.  It's sort of a shame not to reuse the CCoinsViewCache just created in ATMP, but we can save that potential improvement for another time.",
      "created_at" : "2016-02-10T17:14:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182487949",
      "id" : 182487949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T17:14:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182487949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "> Nice catch @sipa.\r\n\r\n@sipa is a rockstar! :guitar: ",
      "created_at" : "2016-02-10T17:16:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182488367",
      "id" : 182488367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T17:16:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182488367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "test/miner_tests.cpp:82\r\n\r\nunknown location(0): fatal error: in \"miner_tests/CreateNewBlock_validity\": signal: SIGABRT (application abort requested)",
      "created_at" : "2016-02-10T18:36:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182520593",
      "id" : 182520593,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T18:36:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182520593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "utACK 4315fe1afce448698732cf1bcffeb070028e4b2b after squashing \r\n\r\nOr, utACK tree id 04ef32caaaf2b838295f39cffbdd87468f3657c9\r\n\r\n```\r\n$ git show -s --format=\"%T\" 4315fe1afce448698732cf1bcffeb070028e4b2b\r\n04ef32caaaf2b838295f39cffbdd87468f3657c9\r\n```\r\n\r\nA squash should retain the tree id.",
      "created_at" : "2016-02-10T20:27:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182569926",
      "id" : 182569926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T20:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182569926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Ok squashed, same code \r\n```\r\ngit show -s --format=\"%T\" da6ad5f684b91975cae3f37495ccbd041499e86b\r\n04ef32caaaf2b838295f39cffbdd87468f3657c9\r\n```",
      "created_at" : "2016-02-10T20:42:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182575321",
      "id" : 182575321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T20:42:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182575321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Meta-point, it would be better process to not squash these PRs...",
      "created_at" : "2016-02-10T21:32:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182590384",
      "id" : 182590384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T21:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182590384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "@maaku My view is that the commit history of what is merged should optimize for reviewability by someone who has not seen the pull requests. So multiple commits that implement separate parts of a feature, make sense on their own, and result in a working codebase on their own are certainly welcome, but I don't think we should aim for having the exact history of a pull request, and certainly not when some commits are broken and need follow-up commits for fixing.",
      "created_at" : "2016-02-10T21:42:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182594295",
      "id" : 182594295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-10T21:42:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182594295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "> @laanwj when you are ready to merge, i'll squash again, or feel free to just do it yourself\r\n\r\nOkay, thanks.\r\n\r\n> Meta-point, it would be better process to not squash these PRs...\r\n\r\nI don't agree on that. One should try to order commits so that it does not break atomicity, or create intermediate pulls that fail buld/test, as that messes with `git bisect`.\r\nAlso @sipa makes a good point that commit history should be optimized for reviewing, not what happened to be the chronological order of changes at the time. This may involve multiple commits if that makes reviewing easier (due to separate concerns, for example, or moves+changes).\r\n\r\nPutting the commit hash in comments is a help to compare the version that was reviewed to the version that was merged - it is not meant to reduce flexibility of the developer with regard to ordering commits.\r\n\r\nProcess discussion is completely off-topic here though, so let's leave it at that.",
      "created_at" : "2016-02-11T09:28:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-182780162",
      "id" : 182780162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-11T09:28:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/182780162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625392"
         }
      },
      "body" : "nit: `CBlock::AcceptBlock()` isn't a thing, should say `ConnectBlock` I think.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-11T16:25:02Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625392",
      "id" : 52625392,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 109,
      "path" : "src/main.cpp",
      "position" : 110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-11T16:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625392",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625399"
         }
      },
      "body" : "nit: This sentence is somewhat unclear, as `SequenceLocks` isn't invoked here.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-11T16:25:05Z",
      "diff_hunk" : "@@ -705,6 +706,127 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // SequenceLocks() with one more than chainActive.Height().",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625399",
      "id" : 52625399,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 112,
      "path" : "src/main.cpp",
      "position" : 113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-11T16:25:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625415"
         }
      },
      "body" : "Need to add a `%s` or drop this `__func__`.",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-11T16:25:10Z",
      "diff_hunk" : "@@ -2098,6 +2228,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            // Check that transaction is BIP68 final\n+            // BIP68 lock checks (as opposed to nLockTime checks) must\n+            // be in ConnectBlock because they require the UTXO set\n+            prevheights.resize(tx.vin.size());\n+            for (size_t j = 0; j < tx.vin.size(); j++) {\n+                prevheights[j] = view.AccessCoins(tx.vin[j].prevout.hash)->nHeight;\n+            }\n+\n+            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+                return state.DoS(100, error(\"ConnectBlock(): contains a non-BIP68-final transaction\", __func__),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625415",
      "id" : 52625415,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 176,
      "path" : "src/main.cpp",
      "position" : 179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-11T16:25:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625430"
         }
      },
      "body" : "This comment is incorrect (`CheckSequenceLocks` doesn't actually call `SequenceLocks`).",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-11T16:25:14Z",
      "diff_hunk" : "@@ -341,7 +341,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n-/** \n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n+ * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n+ */\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+/**\n+ * Check if transaction will be BIP 68 final in the next block to be created.\n+ *\n+ * Calls SequenceLocks() with data from the tip of the current active chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625430",
      "id" : 52625430,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 14,
      "path" : "src/main.h",
      "position" : 14,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-11T16:25:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625442"
         }
      },
      "body" : "s/`LockTime`/`CheckSequenceLocks`/",
      "commit_id" : "a51c79be6b8ef060697287dce3195876069899bd",
      "created_at" : "2016-02-11T16:25:17Z",
      "diff_hunk" : "@@ -45,8 +45,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+/** Used as the flags parameter to LockTime() in non-consensus code. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#discussion_r52625442",
      "id" : 52625442,
      "original_commit_id" : "dc15eadb8624590bba646b01010aa3072edad87c",
      "original_position" : 6,
      "path" : "src/policy/policy.h",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7184",
      "updated_at" : "2016-02-11T16:25:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/52625442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Mental note: verify how this interacts with the wallet",
      "created_at" : "2016-02-11T19:19:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-183019020",
      "id" : 183019020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-11T19:19:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/183019020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "ACK b043c4b746c8199ce948aa5e8b186e0d1a61ad68",
      "created_at" : "2016-02-11T20:41:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-183053041",
      "id" : 183053041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-11T20:41:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/183053041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "utACK b043c4b",
      "created_at" : "2016-02-12T16:07:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-183388908",
      "id" : 183388908,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7184",
      "updated_at" : "2016-02-12T16:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/183388908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
