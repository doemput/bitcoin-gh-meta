[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124670279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124670279"
         }
      },
      "body" : "For my own sanity it'd be nice if cltv_invalidate looked much more like cltv_validate, which would make it more obvious that the invalid tx is clearly invalid due to the CLTV and not some other reason, and while you're at it would be nice to test other ways CLTV can be invalid (both tx doesnt meet sequence requirements and tx doesnt meet locktime requirements).",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-28T22:13:30Z",
      "diff_hunk" : "@@ -33,19 +26,34 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n+def cltv_validate(node, tx, height):\n+    '''Modify the signature in vin 0 of the tx to pass CLTV\n+    Prepends <height> CLTV DROP in the scriptSig, and sets\n+    the locktime to height'''\n+    tx.vin[0].nSequence = 0\n+    tx.nLockTime = height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124670279",
      "id" : 124670279,
      "original_commit_id" : "1cf60bb12574256364f78666e546bf4d5d7b1508",
      "original_position" : 44,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : 50,
      "pull_request_review_id" : 46983256,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124670279",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124746991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124746991"
         }
      },
      "body" : "The node-under-test sends a reject message at this point:\r\n\r\n```\r\n2017-06-29 08:56:00.945000 TestFramework.mininode (DEBUG): Received message from 127.0.0.1:11900: msg_reject: b'block' 17 b'bad-version(0x00000002)' [7bb0412e9813a1d13cd14ff2277a906e101d183f93b0136c848bdb94ffd1d6b7]\r\n```\r\n\r\nIt'd be nice to add an assert that mininode received that reject.\r\n\r\nI know that there's talk of removing reject messages from bitcoind, but while they're still there, they're useful for asserting that a block/tx was rejected for the correct reason. If there was some error in the code above (eg if we'd called `create_block()` with bad parameters or it'd created a bad block for some reason), the block would have been rejected, the test would pass, but we wouldn't actually be testing BIP66 activation.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:02:42Z",
      "diff_hunk" : "@@ -64,119 +56,74 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)\n-        height = 3  # height of the next block to build\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n+        self.coinbase_blocks = self.nodes[0].generate(DERSIG_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = int(time.time())\n-\n-        ''' 298 more version 2 blocks '''\n-        test_blocks = []\n-        for i in range(298):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 2\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 749 version 3 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' \n-        Check that the new DERSIG rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n+\n+        self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[0], self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n+        block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time)\n+        block.nVersion = 2\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n \n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])       \n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n-        test_blocks = []\n-        for i in range(199):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        self.log.info(\"Test that blocks must now be at least version 3\")\n+        tip = block.sha256\n+        block_time += 1\n+        block = create_block(tip, create_coinbase(DERSIG_HEIGHT), block_time)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n+        node0.send_and_ping(msg_block(block))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124746991",
      "id" : 124746991,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 165,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : 180,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124746991",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124747578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124747578"
         }
      },
      "body" : "Again, it'd be good to assert that we received a reject, this time with cause `'block-validation-failed'`",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:05:24Z",
      "diff_hunk" : "@@ -64,119 +56,74 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)\n-        height = 3  # height of the next block to build\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n+        self.coinbase_blocks = self.nodes[0].generate(DERSIG_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = int(time.time())\n-\n-        ''' 298 more version 2 blocks '''\n-        test_blocks = []\n-        for i in range(298):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 2\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 749 version 3 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' \n-        Check that the new DERSIG rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n+\n+        self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[0], self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n+        block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time)\n+        block.nVersion = 2\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n \n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])       \n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n-        test_blocks = []\n-        for i in range(199):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        self.log.info(\"Test that blocks must now be at least version 3\")\n+        tip = block.sha256\n+        block_time += 1\n+        block = create_block(tip, create_coinbase(DERSIG_HEIGHT), block_time)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        self.log.info(\"Test that transactions with non-DER signatures cannot appear in a block\")\n         block.nVersion = 3\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' \n-        Check that the new DERSIG rules are enforced in the 951st version 3\n-        block.\n-        '''\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[1], self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n \n-        ''' Mine 1 old version block, should be invalid '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 2\n+        node0.send_and_ping(msg_block(block))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124747578",
      "id" : 124747578,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 201,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : 232,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124747578",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124749366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124749366"
         }
      },
      "body" : "nit: this import is unused and can be removed",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:13:36Z",
      "diff_hunk" : "@@ -4,27 +4,19 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP66 (DER SIG).\n \n-Connect to a single node.\n-Mine 2 (version 2) blocks (save the coinbases for later).\n-Generate 98 more version 2 blocks, verify the node accepts.\n-Mine 749 version 3 blocks, verify the node accepts.\n-Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n-Check that the new DERSIG rules are enforced on the 751st version 3 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n+Test that the DERSIG soft-fork activates at (regtest) height 1251.\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import *\n from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n from io import BytesIO\n import time",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124749366",
      "id" : 124749366,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 26,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124749366",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124749877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124749877"
         }
      },
      "body" : "nit: trailing whitespace",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:16:00Z",
      "diff_hunk" : "@@ -4,27 +4,19 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP66 (DER SIG).\n \n-Connect to a single node.\n-Mine 2 (version 2) blocks (save the coinbases for later).\n-Generate 98 more version 2 blocks, verify the node accepts.\n-Mine 749 version 3 blocks, verify the node accepts.\n-Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n-Check that the new DERSIG rules are enforced on the 751st version 3 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n+Test that the DERSIG soft-fork activates at (regtest) height 1251.\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import *\n from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n from io import BytesIO\n import time\n \n+DERSIG_HEIGHT = 1251\n+\n # A canonical signature consists of: ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124749877",
      "id" : 124749877,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 30,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124749877",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124749958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124749958"
         }
      },
      "body" : "nit: trailing whitespace",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:16:25Z",
      "diff_hunk" : "@@ -40,18 +32,18 @@ def unDERify(tx):\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n+\n+class BaseNode(NodeConnCB):\n+    def __init__(self):\n+        super().__init__()\n             ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124749958",
      "id" : 124749958,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 41,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124749958",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124750421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124750421"
         }
      },
      "body" : "Are transactions with non-DER signatures added to the mempool or relayed after BIP66 activation? If not, is it possible to add a sub-test here to test that?",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:18:31Z",
      "diff_hunk" : "@@ -64,119 +56,74 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)\n-        height = 3  # height of the next block to build\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n+        self.coinbase_blocks = self.nodes[0].generate(DERSIG_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = int(time.time())\n-\n-        ''' 298 more version 2 blocks '''\n-        test_blocks = []\n-        for i in range(298):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 2\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 749 version 3 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' \n-        Check that the new DERSIG rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n+\n+        self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[0], self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n+        block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time)\n+        block.nVersion = 2\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n \n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])       \n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n-        test_blocks = []\n-        for i in range(199):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        self.log.info(\"Test that blocks must now be at least version 3\")\n+        tip = block.sha256\n+        block_time += 1\n+        block = create_block(tip, create_coinbase(DERSIG_HEIGHT), block_time)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        self.log.info(\"Test that transactions with non-DER signatures cannot appear in a block\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124750421",
      "id" : 124750421,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 170,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124750421",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124753006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124753006"
         }
      },
      "body" : "nit: import time not used",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:29:54Z",
      "diff_hunk" : "@@ -4,27 +4,20 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP65 (CHECKLOCKTIMEVERIFY).\n \n-Connect to a single node.\n-Mine 2 (version 3) blocks (save the coinbases for later).\n-Generate 98 more version 3 blocks, verify the node accepts.\n-Mine 749 version 4 blocks, verify the node accepts.\n-Check that the new CLTV rules are not enforced on the 750th version 4 block.\n-Check that the new CLTV rules are enforced on the 751st version 4 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n+Test that the CHECKLOCKTIMEVERIFY soft-fork activates at (regtest) block height\n+1351.\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import *\n from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n+from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum\n from io import BytesIO\n import time",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124753006",
      "id" : 124753006,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 28,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124753006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124753529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124753529"
         }
      },
      "body" : "nit: perhaps combine this with the line above, rather than have a throwaway variable.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:32:12Z",
      "diff_hunk" : "@@ -33,19 +26,34 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n+def cltv_validate(node, tx, height):\n+    '''Modify the signature in vin 0 of the tx to pass CLTV\n+    Prepends <height> CLTV DROP in the scriptSig, and sets\n+    the locktime to height'''\n+    tx.vin[0].nSequence = 0\n+    tx.nLockTime = height\n+\n+    # Need to re-sign, since nSequence and nLockTime changed\n+    signed_result = node.signrawtransaction(ToHex(tx))\n+    new_tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(signed_result['hex']))\n+    new_tx.deserialize(f)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124753529",
      "id" : 124753529,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 50,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124753529",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124753994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124753994"
         }
      },
      "body" : "Not required. Just use the base `NodeConnCB` below.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:34:20Z",
      "diff_hunk" : "@@ -33,19 +26,34 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n+def cltv_validate(node, tx, height):\n+    '''Modify the signature in vin 0 of the tx to pass CLTV\n+    Prepends <height> CLTV DROP in the scriptSig, and sets\n+    the locktime to height'''\n+    tx.vin[0].nSequence = 0\n+    tx.nLockTime = height\n+\n+    # Need to re-sign, since nSequence and nLockTime changed\n+    signed_result = node.signrawtransaction(ToHex(tx))\n+    new_tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(signed_result['hex']))\n+    new_tx.deserialize(f)\n \n-class BIP65Test(ComparisonTestFramework):\n+    new_tx.vin[0].scriptSig = CScript([CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n+                                  list(CScript(new_tx.vin[0].scriptSig)))\n+    return new_tx\n \n+class BaseNode(NodeConnCB):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124753994",
      "id" : 124753994,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 57,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124753994",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124754384"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124754384"
         }
      },
      "body" : "This doesn't need to be a method in `BIP65Test`. Consider moving it above the class definition to be a module-level function (alongside `cltv_invalidate()` and `cltv_validate()`)",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:36:02Z",
      "diff_hunk" : "@@ -33,19 +26,34 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n+def cltv_validate(node, tx, height):\n+    '''Modify the signature in vin 0 of the tx to pass CLTV\n+    Prepends <height> CLTV DROP in the scriptSig, and sets\n+    the locktime to height'''\n+    tx.vin[0].nSequence = 0\n+    tx.nLockTime = height\n+\n+    # Need to re-sign, since nSequence and nLockTime changed\n+    signed_result = node.signrawtransaction(ToHex(tx))\n+    new_tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(signed_result['hex']))\n+    new_tx.deserialize(f)\n \n-class BIP65Test(ComparisonTestFramework):\n+    new_tx.vin[0].scriptSig = CScript([CScriptNum(height), OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n+                                  list(CScript(new_tx.vin[0].scriptSig)))\n+    return new_tx\n \n+class BaseNode(NodeConnCB):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 1\n-        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=3']]\n \n-    def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n-        test.run()\n+class BIP65Test(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+        self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n+        self.setup_clean_chain = True\n \n     def create_transaction(self, node, coinbase, to_address, amount):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124754384",
      "id" : 124754384,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 76,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124754384",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124754971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124754971"
         }
      },
      "body" : "`self.nodes[0]` is used throughout this test. Consider adding an alias:\r\n\r\n```py\r\nnode = self.nodes[0]\r\n```\r\nand then using `node` throughout the test.\r\n\r\nI think that looks slightly neater for tests that only use one node, but that's just personal preference.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:38:39Z",
      "diff_hunk" : "@@ -58,119 +66,79 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124754971",
      "id" : 124754971,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 84,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124754971",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124756991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124756991"
         }
      },
      "body" : "`block.solve()` calls `block.rehash()`, so there's no need for all of these explicit calls to `block.rehash()`. Up to you if you want to remove them all.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:48:44Z",
      "diff_hunk" : "@@ -58,119 +66,79 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)\n-        height = 3  # height of the next block to build\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n+\n+        self.log.info(\"Mining %d blocks\", CLTV_HEIGHT - 2)\n+        self.coinbase_blocks = self.nodes[0].generate(CLTV_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = int(time.time())\n-\n-        ''' 398 more version 3 blocks '''\n-        test_blocks = []\n-        for i in range(398):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 749 version 4 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 4\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        '''\n-        Check that the new CLTV rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n+\n+        self.log.info(\"Test that an invalid-according-to-CLTV transaction can still appear in a block\")\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[0], self.nodeaddress, 1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n+        block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time)\n+        block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124756991",
      "id" : 124756991,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 148,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124756991",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124757364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124757364"
         }
      },
      "body" : "I've added a comment to bipdersig-p2p.py about asserting on reject messages. Same comment applies here",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T09:50:20Z",
      "diff_hunk" : "@@ -58,119 +66,79 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)\n-        height = 3  # height of the next block to build\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n+\n+        self.log.info(\"Mining %d blocks\", CLTV_HEIGHT - 2)\n+        self.coinbase_blocks = self.nodes[0].generate(CLTV_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = int(time.time())\n-\n-        ''' 398 more version 3 blocks '''\n-        test_blocks = []\n-        for i in range(398):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 749 version 4 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 4\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        '''\n-        Check that the new CLTV rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n+\n+        self.log.info(\"Test that an invalid-according-to-CLTV transaction can still appear in a block\")\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[0], self.nodeaddress, 1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n+        block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time)\n+        block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n \n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n-        test_blocks = []\n-        for i in range(199):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 4\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        self.log.info(\"Test that blocks must now be at least version 4\")\n+        tip = block.sha256\n+        block_time += 1\n+        block = create_block(tip, create_coinbase(CLTV_HEIGHT), block_time)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n+        node0.send_and_ping(msg_block(block))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124757364",
      "id" : 124757364,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 185,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : 201,
      "pull_request_review_id" : 47064576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124757364",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124863431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124863431"
         }
      },
      "body" : "Agree that this would be nice, but left this as a todo for now.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T17:27:13Z",
      "diff_hunk" : "@@ -33,19 +26,34 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n+def cltv_validate(node, tx, height):\n+    '''Modify the signature in vin 0 of the tx to pass CLTV\n+    Prepends <height> CLTV DROP in the scriptSig, and sets\n+    the locktime to height'''\n+    tx.vin[0].nSequence = 0\n+    tx.nLockTime = height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124863431",
      "id" : 124863431,
      "original_commit_id" : "1cf60bb12574256364f78666e546bf4d5d7b1508",
      "original_position" : 44,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : 50,
      "pull_request_review_id" : 47195824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:27:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124863431",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124864359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124864359"
         }
      },
      "body" : "Default policy is to enforce DERSIG and CLTV on all transactions entering the mempool.  I suppose it might be nice to add a test that the policy is enforcing these rules, but in this test I set custom script flags so that I could show that a transaction is valid under script flags that don't include the soft fork, but invalid under the soft fork.\r\n\r\nIt might be nice to add a second node to these tests that uses default policy so that we can test that default policy is enforcing these script flags all the time, but I would prefer to save that for a future PR.",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T17:31:09Z",
      "diff_hunk" : "@@ -64,119 +56,74 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         tx.deserialize(f)\n         return tx\n \n-    def get_tests(self):\n+    def run_test(self):\n+        node0 = BaseNode()\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n+        node0.add_connection(connections[0])\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # wait_for_verack ensures that the P2P connection is fully up.\n+        node0.wait_for_verack()\n \n-        self.coinbase_blocks = self.nodes[0].generate(2)\n-        height = 3  # height of the next block to build\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n+        self.coinbase_blocks = self.nodes[0].generate(DERSIG_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = int(time.time())\n-\n-        ''' 298 more version 2 blocks '''\n-        test_blocks = []\n-        for i in range(298):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 2\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 749 version 3 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' \n-        Check that the new DERSIG rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n+\n+        self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n+\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[0], self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n+        block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time)\n+        block.nVersion = 2\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n \n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])       \n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n-        test_blocks = []\n-        for i in range(199):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+        self.log.info(\"Test that blocks must now be at least version 3\")\n+        tip = block.sha256\n+        block_time += 1\n+        block = create_block(tip, create_coinbase(DERSIG_HEIGHT), block_time)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n+        node0.send_and_ping(msg_block(block))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        self.log.info(\"Test that transactions with non-DER signatures cannot appear in a block\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124864359",
      "id" : 124864359,
      "original_commit_id" : "06e3f006e499e3238905b92cbca563c69e170410",
      "original_position" : 170,
      "path" : "test/functional/bipdersig-p2p.py",
      "position" : null,
      "pull_request_review_id" : 47196869,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:31:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124864359",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@jnewbery Thanks for the review; I addressed all your nits except the one I responded to.",
      "created_at" : "2017-06-29T17:31:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#issuecomment-312037243",
      "id" : 312037243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10695",
      "updated_at" : "2017-06-29T17:31:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312037243",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124865025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124865025"
         }
      },
      "body" : "I did add a test that shows that the transaction is accepted to the node's mempool, which is using -promiscuousmempoolflags so that it's not enforcing the soft-fork rule.  So hopefully that helps assuage the concern that the transaction might be invalid for non-soft-fork related reasons.\r\n\r\n(Also, this helps sneak in a test that is useful post-#10192, by verifying that a block is invalid even if we may have cached validation success using a different set of flags.)",
      "commit_id" : "c0a4ae032ba656d80bc1857d9920836898f1066b",
      "created_at" : "2017-06-29T17:33:55Z",
      "diff_hunk" : "@@ -33,19 +26,34 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n+def cltv_validate(node, tx, height):\n+    '''Modify the signature in vin 0 of the tx to pass CLTV\n+    Prepends <height> CLTV DROP in the scriptSig, and sets\n+    the locktime to height'''\n+    tx.vin[0].nSequence = 0\n+    tx.nLockTime = height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#discussion_r124865025",
      "id" : 124865025,
      "original_commit_id" : "1cf60bb12574256364f78666e546bf4d5d7b1508",
      "original_position" : 44,
      "path" : "test/functional/bip65-cltv-p2p.py",
      "position" : 50,
      "pull_request_review_id" : 47197633,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10695",
      "updated_at" : "2017-06-29T17:34:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124865025",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Bumped travis after spurious zapwallettxs error popped up (appeared to be an instance of #10678)",
      "created_at" : "2017-07-06T14:15:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#issuecomment-313408718",
      "id" : 313408718,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10695",
      "updated_at" : "2017-07-06T14:15:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313408718",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Tested ACK https://github.com/bitcoin/bitcoin/pull/10695/commits/4ccc12a54a217892bd4ccfd94c46052a11cdb3fb. ~It'd be nice to add asserting on reject messages, but that can wait for a future PR.~\r\n\r\n**Update**: I'm an idiot. You've already added testing reject messages.\r\n\r\nACK",
      "created_at" : "2017-07-10T13:48:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#issuecomment-314110705",
      "id" : 314110705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10695",
      "updated_at" : "2017-07-11T22:12:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314110705",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "utACK 4ccc12a54a217892bd4ccfd94c46052a11cdb3fb",
      "created_at" : "2017-08-08T20:57:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10695#issuecomment-321079698",
      "id" : 321079698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10695",
      "updated_at" : "2017-08-08T20:57:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321079698",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
