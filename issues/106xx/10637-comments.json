[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123062378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Have you filtered utxo_pool to exclude utxo's that have a net-neg value? Otherwise you're underestimating the lookahead here. To get an accurate figure for what you may still collect downtree, you should only add `utxo.txout.nValue >=0`",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T18:46:04Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378",
      "id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123062378",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123067487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "AFAICT utxo_pool has : 4, 3, 2, & 1. Since you're exploring randomly selecting 5 then has two possible solutions: 4+1, 3+2.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:05:57Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487",
      "id" : 123067487,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 144,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123067487",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123068150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Under above assumptions, there is two solutions here as well: 5+4+1, or 5+3+2.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:08:54Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150",
      "id" : 123068150,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 159,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123068150",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123069730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems to me that you're also collecting coins that have a net-negative here. This will cause your lookahead to be underestimated, unless you cater to that case when calculating the remainder.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:16:06Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730",
      "id" : 123069730,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 224,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123069730",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071057"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would perhaps add a test that checks what happens if the utxo_pool includes a UTXO that is more costly to spend than its own value. As far as I can tell, this would currently reduce your lookahead and may cause a premature search failure.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:22:13Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057",
      "id" : 123071057,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 113,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071057",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@gmaxwell has concerns that Core wallet is only doing semi-sane utxo handling by spending these. With exact match + sane backoff algorithm this concern may be alleviated?",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:25:39Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898",
      "id" : 123071898,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45241765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071898",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is forced to be include first in these tests so the solution is deterministic.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:28:50Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635",
      "id" : 123072635,
      "in_reply_to_id" : 123067487,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 144,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45242560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072635",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is forced to be include first in these tests so the solution is deterministic.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:28:56Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655",
      "id" : 123072655,
      "in_reply_to_id" : 123068150,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 159,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45242584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072655",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123073108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, that may be a problem. I will add that in as it is still good to have additional checks here even if done elsewhere.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:31:06Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108",
      "id" : 123073108,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45243137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123073108",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Have you tested the effect of random exploration vs largest first exploration? \r\n\r\n* Either way, BranchAndBound already guarantees that the global utxo set doesn't grow (for one output transactions) due to saving the change output.\r\n* LFE guarantees the creation of a minimal input set, and purposefully finds a possible solution. This should minimize the input set size variance. In my simulations BranchAndBound with LFE already caused a smaller average UTXO footprint than legacy Core selection.\r\n* Random Exploration could find a larger input set by skipping a key UTXO higher up in the tree. This could lead to the selection of a larger number of inputs, or in an edge case could even cause tries to be exhausted before a solution is found. This may increase input set variance, or could perhaps even exhaust small UTXOs too quickly for BnB to often find a viable solution.\r\n\r\nI am not sure there is a significant privacy benefit for Random Exploration as for either selection method an attacker would already need to know about another eligible input that would achieve an exact match when switched out for one of the input set.\r\n\r\nWhat benefit do you expect from using Random Exploration?",
      "created_at" : "2017-06-20T19:46:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309868437",
      "id" : 309868437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309868437",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077157"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't have much of a concern here about the 0/negative effective value inputs: Failing to select negative effective value inputs for an exact match won't lead to a UTXO count inflation, because changeless transactions are by definition strictly UTXO reducing.\r\n",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:49:19Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157",
      "id" : 123077157,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45247440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077157",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077607"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@instagibbs: I'm not completely opposed to spending net-negative UTXO, my concern here is primarily that it actually may cause the lookahead to be underestimated causing valid solutions not to be found.\r\n\r\nI realize now that the knapsack algorithm would also not select uneconomic UTXO anymore, as if it had selected enough value before it reached them it would have already returned the set, and if it actually starts exploring them, cannot add more value in the first place.\r\n\r\nAdvocatus Diaboli: Would it be that terrible though, if UTXO were only considered when they actually have a net positive value? During times of low fees, they'd be used both during BnB and knapsack, during times of high fees, they wouldn't bloat the blocks and lose their owner money.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:51:04Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607",
      "id" : 123077607,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45247917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077607",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123079426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I am not so concerned, was making sure concerns are brought up.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T19:58:50Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426",
      "id" : 123079426,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45249806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123079426",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@Xekyo I was thinking that Random Exploration would be better for privacy but I see that it probably wouldn't help. If you think it would be better to change to LFE, I can certainly do that.",
      "created_at" : "2017-06-20T20:25:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309880678",
      "id" : 309880678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:25:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309880678",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@achow101: I don't know how strong the effect is, but I'd expect Random Exploration to increase the required computational effort.",
      "created_at" : "2017-06-20T20:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309882818",
      "id" : 309882818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309882818",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "Noting that this PR has fairly heavy overlap with https://github.com/bitcoin/bitcoin/pull/10360 . \r\n\r\nFrom chatting with @achow101 the intention of this PR is to touch as little as possible while still getting BranchNBound coin selection.\r\n\r\nTo make this successful it should really only be run on first iteration of the loop in CreateTransaction, when `nFeeRet == 0` and only use effective value for the BnB coin selection step, rather than the knapsack as well. Once `nFeeRet` becomes more than zero, interactions start to get strange without a more complete overhaul like #10360.",
      "created_at" : "2017-06-20T20:52:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309887884",
      "id" : 309887884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:52:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309887884",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "This PR I believe will still create just-over-dust change outputs when BnB finds an exact match. Whenever we are allowing BnB matches(first iteration) we should not make change outputs less than the exact match slack value.",
      "created_at" : "2017-06-20T20:59:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309889805",
      "id" : 309889805,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:59:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309889805",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094400"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This assumes that the input will be spent at a feerate at least as high as the current. This was a valid assumption in my thesis, as I was using a fixed fee rate. I'm not sure whether this a valid assumption for realnet transaction selection, as we've literally seen fees between 8-540 sat/byte in the past two weeks. We might want to consider discounting the cost of the input slightly.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T21:01:02Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400",
      "id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45266285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094400",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094567"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Depends on user time preferences. Could be an option that is set for those who regularly consolidate.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T21:01:42Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567",
      "id" : 123094567,
      "in_reply_to_id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45266472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094567",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs: In fact, BnB is designed to only work when creating a transaction without a change output. If we were creating a change in the first place, the extensive search pattern would be unnecessarily wasteful.",
      "created_at" : "2017-06-20T21:04:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309891073",
      "id" : 309891073,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T21:04:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309891073",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "To append onto my previous comments, any effective value match attempt should account for the fees just obtained by `SelectCoins`. Currently it completely ignores the newly-obtained fees, keeping the previous loop's value, and then asks if `nFeeRet >= nFeeRequired` to break from the loop(which currently is 0 on the first go-around).",
      "created_at" : "2017-06-20T21:15:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309893923",
      "id" : 309893923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T21:15:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309893923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123122385"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For now I think it is fine to use the current feerate.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-20T23:33:02Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385",
      "id" : 123122385,
      "in_reply_to_id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45295730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123122385",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "I have made the BnB selector to be only run on the first pass of the coin selection loop. It is now set so that effective value is only used for the BnB selector and not the knapsack one. I have also added the negative effective value check and test just as a belt-and-suspenders thing. I also made BnB use Largest First Exploration instead of Random Exploration.",
      "created_at" : "2017-06-21T00:32:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309929166",
      "id" : 309929166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-21T00:32:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309929166",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123372860"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here's a unexpected behavior in my algorithm: if there is a number of input combinations whose `value_ret` all exceed the target_value when `tries == 0` is passed, tries can go into the negative.\r\n\r\nThe tries check should be moved to the top of the checks.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-21T21:38:01Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (tries <= 0) { // Too many tries, exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860",
      "id" : 123372860,
      "original_commit_id" : "1f4b03a33f8a747ce61f16104c5b6c0163acb704",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45570354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123372860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123385119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-21T22:49:17Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (tries <= 0) { // Too many tries, exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119",
      "id" : 123385119,
      "in_reply_to_id" : 123372860,
      "original_commit_id" : "1f4b03a33f8a747ce61f16104c5b6c0163acb704",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45583440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123385119",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Perhaps generically, we should never create change if the amount is less than the cost of creating + spending it (regardless of whether BnB was used to find the inputs or not)?",
      "created_at" : "2017-06-21T23:26:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310232689",
      "id" : 310232689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-21T23:26:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310232689",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa one question is if we should allow the wallet to consider consolidation-level prices for that change. Perhaps the user is in a hurry now, but would consider spending that change at a much slower pace.\r\n\r\nMaybe for a first pass only consider the selected feerate, then Future Work allow a parameter which has more aggressive change protection given longer timescales.",
      "created_at" : "2017-06-22T14:05:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310390449",
      "id" : 310390449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T14:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310390449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs Yes, I agree; we should use long-eatimates for the spend part of change rather than the actual feerate the user is willing to pay now. Perhaps we can make it more conservative without doing that by using a factor 2 or 3 reduction?",
      "created_at" : "2017-06-22T16:26:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310431952",
      "id" : 310431952,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T16:26:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310431952",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123592418"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@xekyo we should assume that it would be terrible unless someone can show that it will not cause another massive UTXO bloat event... but thats offtopic here, as I don't think anyone has this concern with exact matches.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-22T18:45:22Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418",
      "id" : 123592418,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45811882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123592418",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123594171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not correct for segwit.    If this code ends up being changed to follow pieter's suggestion of dividing the rate by two or three it should be bounded by the min relay fee. (I'm not super fond of that suggestion).",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-22T18:53:42Z",
      "diff_hunk" : "@@ -2179,159 +2210,69 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool only_knapsack) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n-\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+    if (!only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171",
      "id" : 123594171,
      "original_commit_id" : "12aa63abf1f8b4a2740b24055ca483c42a08f27a",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45814017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123594171",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@sipa @achow101  it would be very very easy in the current PR to ask for another estimate for the change, I think ~two loc addition, and minor addition to the selectcoins arguments to pass down a second fee.  I think this would be much more desirable than a fixed division.  Future work could do things like make that second confirmation target configurable. ",
      "created_at" : "2017-06-22T18:57:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310471041",
      "id" : 310471041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T18:57:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310471041",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123598122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Using nFeeRet to signal BNB usage is ugly.  I think you shouldn't pass in nFeeRet at all, but have some explicit signal (e.g. boolean return) for BNB usage and if its set; after select coins set nFeeRet to nChange and use the same signal to bypass this branch.\r\n\r\nI also think this condition is slightly incorrect but benign in the current code, lets say our configured feerate were zero: now BNB could find a solution and leave nFeeRet==0.  (though nChange would currently be zero too, so it would be harmless but seems to me like the kind of thing to be brittle in future changes)",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-06-22T19:11:00Z",
      "diff_hunk" : "@@ -2562,7 +2562,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+                if (nChange > 0 && (!first_pass || nFeeRet == 0)) // nFeeRet is only 0 on the first pass if BnB was not used. ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122",
      "id" : 123598122,
      "original_commit_id" : "12aa63abf1f8b4a2740b24055ca483c42a08f27a",
      "original_position" : 5,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45818469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123598122",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Travis failure seems to be unrelated",
      "created_at" : "2017-06-23T17:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310726989",
      "id" : 310726989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-23T17:32:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310726989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125161070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The utxos with negative effective values are filtered anyway in `wallet/wallet.cpp`, which is the only place (except for tests) from where `SelectCoinsBnB` is called.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-01T11:50:14Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070",
      "id" : 125161070,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 47529103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125161070",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "just fyi, I have used your code as a reference for this code\r\n\r\nhttps://github.com/bitcoinjs/coinselect/pull/13",
      "created_at" : "2017-07-02T02:46:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312467396",
      "id" : 312467396,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T02:46:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312467396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I have to say, I don't understand the target size; maybe there is a bug there.\r\n\r\nIn wallet.cpp, in `CWallet::CreateTransaction`, you create `nValue`, which seems to be the sum of all the outputs. Because the BnB is used only at the first pass, `nFeeRet` is 0 and `nValueToSelect` is just the sum of all the outputs.\r\n\r\nThis is then used as the exact target in the BnB algorithm.\r\n\r\nHowever, you should add the cost of the outputs + the small cost of the tx overhead into the target (done here for the simple case on 1 output - https://github.com/Xekyo/CoinSelectionSimulator/blob/master/src/main/scala/one/murch/bitcoin/coinselection/StackEfficientTailRecursiveBnB.scala#L28 )\r\n\r\nMaybe it's done somewhere, but I don't see it.",
      "created_at" : "2017-07-02T20:14:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514358",
      "id" : 312514358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T20:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312514358",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng BnB uses effective values for the inputs so the fee is accounted for when coins are selected. The effective values are calculated in `SelectCoinsMinConf` ",
      "created_at" : "2017-07-02T20:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514781",
      "id" : 312514781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312514781",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "That eff. value accounts for the *inputs* of the new transaction, but not for the *outputs* (plus the overhead of the tx itself, but that is only about 10 bytes).\r\n\r\nIn `SelectCoinsMinConf`, you already have the target, which does not account for that.",
      "created_at" : "2017-07-02T20:27:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312515053",
      "id" : 312515053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T20:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312515053",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "Ah, yes. That is a bug. Thanks for finding that!",
      "created_at" : "2017-07-02T21:26:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312517972",
      "id" : 312517972,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T21:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312517972",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125308899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125308899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it may be better to directly check on serialized size of an output based on that pubkey",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T15:00:44Z",
      "diff_hunk" : "@@ -2517,6 +2532,9 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             fFirst = false;\n                             txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n                         }\n+                    } else if (first_pass){\n+                        // On the first pass BnB selector, include the fee cost for outputs\n+                        output_fees +=  nFeeRateNeeded.GetFee(recipient.scriptPubKey.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125308899",
      "id" : 125308899,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 29,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125308899",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125310974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125310974"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just set it when declaring the variable two lines above and make it const",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T15:09:58Z",
      "diff_hunk" : "@@ -2179,159 +2210,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool& used_bnb, bool only_knapsack, int change_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n-\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+    if (!only_knapsack) {\n+        // Get the fee rate to use for the change fee rate\n+        CFeeRate change_feerate;\n+        FeeCalculation feeCalc;\n+        change_feerate = GetMinimumFeeRate(1008, ::mempool, ::feeEstimator, &feeCalc);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125310974",
      "id" : 125310974,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125310974",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125312450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125312450"
         }
      },
      "author_association" : "MEMBER",
      "body" : "right now it only uses one or the other, so `!only_knapsack` means `used_bnb`. I assume this interface is future-looking to where we may try multiple strategies?",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T15:16:39Z",
      "diff_hunk" : "@@ -2179,159 +2210,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool& used_bnb, bool only_knapsack, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125312450",
      "id" : 125312450,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 129,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125312450",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125313640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125313640"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since we're moving it already, there's no reason to not just move this block outside the loop, right? See: https://github.com/bitcoin/bitcoin/pull/10360/files#diff-b2bb174788c7409b671c46ccc86034bdR2476",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T15:22:17Z",
      "diff_hunk" : "@@ -2556,7 +2503,22 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n                     nValueToSelect += nFeeRet;\n+\n+                // Get the fee rate to use effective values in coin selection",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125313640",
      "id" : 125313640,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 326,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125313640",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125316002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125316002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this should be `used_bnb`? Kind of unclear what the difference is currently.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T15:33:39Z",
      "diff_hunk" : "@@ -2587,18 +2552,33 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     }\n                     txNew.vout.push_back(txout);\n                 }\n+                if (first_pass) {\n+                    nValueToSelect += output_fees;\n+                }\n \n                 // Choose coins to use\n                 CAmount nValueIn = 0;\n                 setCoins.clear();\n-                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                bool used_bnb = false;\n+                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, nFeeRet, nFeeRateNeeded, used_bnb, coinControl, !first_pass))\n                 {\n-                    strFailReason = _(\"Insufficient funds\");\n-                    return false;\n+                    // On the first pass and SelectCoins fails, that means the BnB selector failed to find\n+                    // a suitable set. In this case, only run the knapsack selector for all further iterations\n+                    if (first_pass) {\n+                        first_pass = false;\n+                        continue;\n+                    }\n+                    else {\n+                        strFailReason = _(\"Insufficient funds\");\n+                        return false;\n+                    }\n+                }\n+                if (first_pass) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125316002",
      "id" : 125316002,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 382,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125316002",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125324281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125324281"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add a comment saying this triggers BnB to be the only type tried when true",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T16:20:38Z",
      "diff_hunk" : "@@ -2544,6 +2490,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n             nFeeRet = 0;\n+            bool first_pass = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125324281",
      "id" : 125324281,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 317,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125324281",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if we're going to change it later to something without a default/dynamic value, maybe just get rid of the default arg and pass it each time.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T17:24:48Z",
      "diff_hunk" : "@@ -837,7 +850,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n+     // TODO: Change the hard coded change_size when we aren't only using P2PKH change outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332737",
      "id" : 125332737,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 57,
      "path" : "src/wallet/wallet.h",
      "position" : 58,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332737",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "perhaps note it doesn't have the maxtxfee check inside it, making it slightly asymmetrical to the total fee one.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T17:25:34Z",
      "diff_hunk" : "@@ -962,11 +976,23 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n     /**\n+     * Estimate the minimum fee rate considering user set parameters\n+     * and the required fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332843",
      "id" : 125332843,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 67,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332843",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125336958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125336958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The idea behind this was to have BnB be just strictly on top of the current behavior, and separating it like this makes that possible. The first time through the loop uses BnB, but then every time after that uses only the current selector. The loop behavior also stays the same since `nFeeRet` will remain 0 if the BnB fails.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-03T17:58:29Z",
      "diff_hunk" : "@@ -2179,159 +2210,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool& used_bnb, bool only_knapsack, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125336958",
      "id" : 125336958,
      "in_reply_to_id" : 125312450,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 129,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47717275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125336958",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@achow101 for some reason, when I do simulations either on @Xekyo set (in scala) or on bitcoinjs randomly generated data (with the algo rewritten into javascript), the total fees are actually *lower* when I make the target lower (that is, when I do not include the output cost in the target). So maybe tightening the target rejects more transactions and then the fallbacks somehow make better results.\r\n\r\nI will investigate more when I have the time and write results here https://github.com/Xekyo/CoinSelectionSimulator/issues/5",
      "created_at" : "2017-07-03T22:22:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312743097",
      "id" : 312743097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-03T22:22:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312743097",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng if you wouldn't mind, I'd like to know what the difference in rate of change creation for each of those experiments as well.",
      "created_at" : "2017-07-06T17:40:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-313467518",
      "id" : 313467518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-06T17:40:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313467518",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "> [Ã¢ÂÂ¦]the total fees are actually lower when I make the target lower (that is, when I do not include the output cost in the target).\r\n\r\n@runn1ng: Um wait. \"Target\" is the amount to be selected. We are talking about the \"cost of change\" parameter that gives the leniency window for the exact match, right? Also, do you mean \"input cost\" instead of \"output cost\"?\r\n\r\nIt would be lovely if you could post your experiment's results somewhere, so we all have the same dataset to discuss.",
      "created_at" : "2017-07-06T20:21:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-313508338",
      "id" : 313508338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-06T20:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313508338",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "@Xekyo The problem with your experiment is that it's non-deterministic... but maybe I could put there some pre-set random seed",
      "created_at" : "2017-07-11T16:18:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-314496532",
      "id" : 314496532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-11T16:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314496532",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "edit: ignore the graphs, see comment below\r\n\r\n~~~I am not sure if I should discuss the experiments here, or on murch's repo PRs :)~~~\r\n\r\n~~~Anyway. I tried changing the cost of change on your scala code, as I wrote here - https://github.com/Xekyo/CoinSelectionSimulator/pull/8 . Now I tried values from 0 to 100 as percent, and this is the result (note that left axis doesn't start at 0)~~~\r\n\r\n![chart](https://user-images.githubusercontent.com/104945/28156350-aae80dca-67b2-11e7-810e-61eb70867996.png)\r\n\r\n[google spreadsheet link](https://docs.google.com/spreadsheets/d/1ePfoi08uV_QU48Q68aAu6apB-BG9DwM52JRgxNgSWPk/edit?usp=sharing)\r\n\r\n~~~x axis is how much percent of the current cost of change is used; y axis is total cost on the big honeypot data set.~~~\r\n\r\n~~~On the small random test cases there is no difference (what matters more there is the fallback, but that's for another experiment).~~~\r\n\r\n~~~Note that there was a [typo](https://github.com/Xekyo/CoinSelectionSimulator/pull/4/files) in the original experiments for the paper, which makes the cost of change \"factor\" 83%~~~",
      "created_at" : "2017-07-13T08:13:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315005597",
      "id" : 315005597,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T22:44:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315005597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "edit: ignore the graphs, see comment below\r\n\r\n~~~There is still the danger of overfitting to this one case though~~~\r\n\r\n~~~If you I try the same at the bitcoinjs example - [defined here](https://github.com/bitcoinjs/coinselect/blob/master/stats/index.js#L9) - small random examples with relatively few utxos - the graph looks completely different, and very dependent on what is a \"backup plan\" in the case of not found match~~~\r\n\r\n![chart 1](https://user-images.githubusercontent.com/104945/28161722-d7710484-67c4-11e7-84cd-09f86393622c.png)\r\n\r\n[google sheet](https://docs.google.com/spreadsheets/d/1zUen5aiKfDwRIRkOg-QJgAE0uEn-_OsrSUQwJm2xWDs/edit?usp=sharing)\r\n\r\n~~~\"rand\" is random, \"min\" is sorting the utxos from the biggest to the lowest and starting from the biggest. (Both are total cost.) I am not sure what \"min\" strategy does on the big data.~~~\r\n\r\n~~~(Just for interest, when I tried 100-200%, the graph goes up again, but not that quickly)~~~",
      "created_at" : "2017-07-13T10:18:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315036928",
      "id" : 315036928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T22:45:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315036928",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "edit: ignore the graphs, see comment below\r\n\r\n~~~When I added bnb+min to the moneypot example, I got this result (x is still percentage of money cost)~~~\r\n\r\n![chart 2](https://user-images.githubusercontent.com/104945/28207255-47c33440-6889-11e7-9e50-dcfcc444c81e.png)\r\n\r\n~~~Again, it's always better to take the \"minimal\" strategy (that is, to sort utxos by value size descending, and then take from the start until it's enough).~~~\r\n\r\n~~~If you want to replicate this experiment - note that it takes, for reasons I don't understand, terribly long time, and you will have to parallelize the simulation - luckily, that's trivial with scala paralel collections - see the commits at https://github.com/runn1ng/CoinSelectionSimulator/tree/exp_multi~~~\r\n\r\n~~~I would like to hear @Xekyo opinions :)~~~\r\n\r\n~~~Also I would like to try this PR strategy, that is, to take the current core strategy as a backup.... but that is too complicated (especially in the javascript code), so I won't do it.~~~",
      "created_at" : "2017-07-14T09:44:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315318545",
      "id" : 315318545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T22:46:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315318545",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng would you be able to try the strategy with Core's current selector as fallback? The easiest way to do that would be to add/modify the test cases for coin selection.",
      "created_at" : "2017-07-14T19:53:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315452075",
      "id" : 315452075,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-14T19:53:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315452075",
      "user" : {
         "avatar_url" : "https://avatars7.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@runn1ng: re random data: I'd surmise that BnB doesn't perform well on small datasets as there are too few possible combinations. That could easily cause the fallback algorithm to dominate.\r\n\r\nre moneypot:\r\nWhat I do find confusing is that your total cost is so much higher than my result with Branch and Bound + Single Random Draw of 58,940,772.30. Were you still running with fixed fees of 10000 satoshi/kB?\r\n\r\nI haven't comprehensively tested all possible fallback algorithms, it is possible that Largest First selection as a fallback to BnB is more efficient as it doesn't take away as many small utxo that can be used to create combinations.\r\n\r\nDo I understand correctly that you calculated \"cost of change\" and then took a percentage of that, or is this percentage only on the cost of the input? If you did the former, it appears that using just the cost of an additional output as \"cost of change\" leads to a minimum, considering that 34 bytes is 18.7% of what I proposed as \"cost of change\" with output+input.",
      "created_at" : "2017-07-14T21:52:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315476847",
      "id" : 315476847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-14T21:53:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315476847",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "> What I do find confusing is that your total cost is so much higher than my result with Branch and Bound + Single Random Draw of 58,940,772.30. Were you still running with fixed fees of 10000 satoshi/kB?\r\n\r\nThat is weird indeed.\r\n\r\nI am running code from your repo. To be sure I reverted all my local changes and I still get 72506973.\r\n\r\nWhen I made the correction here https://github.com/Xekyo/CoinSelectionSimulator/pull/9 , I get total cost 70858076\r\n\r\nI use only `StackEfficientTailRecursiveBnB`, should I try the other BnBs? edit: well, they get stack overflow, so I won't. :D ",
      "created_at" : "2017-07-15T03:29:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506256",
      "id" : 315506256,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T03:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315506256",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I am running the code through `sbt run` in the main directory. I look just at the `total cost` in the resulting csv.",
      "created_at" : "2017-07-15T03:31:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506306",
      "id" : 315506306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T03:33:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315506306",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I get totally different numbers than in your paper with the other scenarios too. The numbers don't correspond to neither of the three tables, unfortunately.\r\n\r\nedit: oooh, that's because I am running \"MoneyPot After LF\", which was the default scenario, but it's actually with additional UTXOs from a previous run. The actual scenario from the paper (the first one) is TestCaseMoneyPotEmpty, right.",
      "created_at" : "2017-07-15T03:45:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506901",
      "id" : 315506901,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T03:57:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315506901",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "Yes correct. The Moneypot after LF, is running the MoneyPot scenario starting with the resulting UTXO pool of running it with Largest First selection before.",
      "created_at" : "2017-07-15T04:34:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315509097",
      "id" : 315509097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T04:34:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315509097",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "I found out that the [two](https://github.com/Xekyo/CoinSelectionSimulator) [repos](https://github.com/bitcoinjs/coinselect) for coinselect simulation returned different results for the same strategy, so I painstakingly went through both of them and found where they differ... and put tons of of PRs to both, so they now both return the same results with the same fees + setup\r\n\r\nThe differences in simulations were:\r\n* how they deal with insufficient funds (and how they detect it)\r\n* what is minimum change\r\n* what are the sizes of \"defaut\" input/output\r\n* some small bugs\r\n\r\n...and those added to significant differences. Anyway, when I fixed all the issues, those are the results/graphs I get:\r\n\r\nthis is for the moneypot scenario, with the fees 10 sat/bitcoin\r\n\r\n![chart 3](https://user-images.githubusercontent.com/104945/28293394-434c8272-6b54-11e7-86c9-1a1b9b36afee.png)\r\n[google sheet](https://docs.google.com/spreadsheets/d/1ePfoi08uV_QU48Q68aAu6apB-BG9DwM52JRgxNgSWPk/edit?usp=sharing)\r\n\r\nthis is for the moneypot scenario, when I increase the fee to 200 sat/bitcoin (but I left the values, so more utxos become unspendable)\r\n\r\n![chart 6](https://user-images.githubusercontent.com/104945/28293860-a802573a-6b56-11e7-9ee5-7b3f6bbe18fd.png)\r\n[google sheet](https://docs.google.com/spreadsheets/d/1qtjK_RJ7Zj3LduJB9_q1gf8LnbGpgp4gA_Sy_1UYLUo/edit?usp=sharing)\r\n\r\nIn both, rand is slightly better. I am not sure what happened, if it's because the scenario is different (without the large UTXO set) or because of the subtle differences in benchmarking. The shape is similar though.\r\n\r\nThis is the scenario of small randomly generated wallets\r\n\r\n![chart 5](https://user-images.githubusercontent.com/104945/28293569-0b1c9ba2-6b55-11e7-9201-a9f3c4884b44.png)\r\n[google sheet](https://docs.google.com/spreadsheets/d/1zUen5aiKfDwRIRkOg-QJgAE0uEn-_OsrSUQwJm2xWDs/edit?usp=sharing)\r\n\r\nBnB+LF performs better, optimum about 50% cost of change.\r\n\r\nSo, different strategies/parameters are better at different scenarios. Again, there is danger of overfitting on one scenario - plus there might be some more subtle bugs in the benchmark code... in my wallet code, I will probably just use BnB+LF with 50% of cost and call it a day :)\r\n\r\nI haven't shown this in graphs, but having BnB is always better than not having it. :)\r\n\r\nIf you want to repeat the tests, my forks of the repos are here [1](https://github.com/runn1ng/CoinSelectionSimulator/tree/final_run) [2](https://github.com/runn1ng/coinselect/tree/final_run)",
      "created_at" : "2017-07-17T23:27:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315914004",
      "id" : 315914004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T23:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315914004",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@Xekyo \r\n\r\n> Do I understand correctly that you calculated \"cost of change\" and then took a percentage of that, or is this percentage only on the cost of the input? If you did the former, it appears that using just the cost of an additional output as \"cost of change\" leads to a minimum, considering that 34 bytes is 18.7% of what I proposed as \"cost of change\" with output+input.\r\n\r\nHm, that doesn't seem to be the case, the minimum is not 18%, but 30% to 50% on these two scenarios.",
      "created_at" : "2017-07-17T23:29:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315914248",
      "id" : 315914248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T23:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315914248",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng is there a plausible explanation why not accounting for the full cost of the change is cheaper overall?",
      "created_at" : "2017-07-17T23:50:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315917437",
      "id" : 315917437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T23:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315917437",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@achow101 \r\n\r\n> @runn1ng would you be able to try the strategy with Core's current selector as fallback? The easiest way to do that would be to add/modify the test cases for coin selection.\r\n\r\nHm, I already spent too much time on this... :/ I will see if I have time to look into the bitcoin coin selection tests and how to add benchmarks there, but not promising anything.",
      "created_at" : "2017-07-18T00:00:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315918964",
      "id" : 315918964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-18T00:00:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315918964",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@instagibbs \r\n\r\nI think - and that's a speculation - that it's because the target is \"tighter\", so the BnB will reject more \"lose\" matches and will continue searching until it finds better match. So less fee is spent then, even when some matches are rejected that didn't have to be (and those spend more on fees).\r\n\r\nBtw. An interesting thing I just noticed - in the \"small random\" example, there is not that many BnB matches in the first place! Around 30 (out of 10.000 transactions). It still has an effect on the result...",
      "created_at" : "2017-07-18T00:14:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315921036",
      "id" : 315921036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-18T00:15:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315921036",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128056631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128056631"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line never fires.\r\n\r\nIt never happens, that an utxo is at the same time in an exclusion branch (which is what `.second` does) and is also selected (what `.first` does). Which makes sense; you never at the same time select and not select an utxo :)\r\n\r\nWith all my simulations, this line never seems to fire (when I rewrote this to JS).\r\n\r\nSo the other line after `if` can also be deleted.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T18:25:12Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128056631",
      "id" : 128056631,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50700769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128056631",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128058314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128058314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I also think that `.second` is not needed at all; all the information necessary is in the `first` and depth; the only situation where `.first != !(.second)` is after we backtrack here, but the information in `.second` is useless anyway (since we will change it anyway before we backtrack to it again).",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T18:31:50Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128058314",
      "id" : 128058314,
      "in_reply_to_id" : 128056631,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50702606,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128058314",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128059347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128059347"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right. That appears to be a relic of when this randomly selected which branch to try first before I changed it to always try including first.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T18:36:18Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128059347",
      "id" : 128059347,
      "in_reply_to_id" : 128056631,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50703778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128059347",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078130"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is never true here. `done` is never true when `backtrack` is true. ([Istanbul](https://istanbul.js.org/) caught that :))",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T19:53:40Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078130",
      "id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50724096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078130",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I mean `done` is never true and this block always happens",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T19:55:34Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078564",
      "id" : 128078564,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50724559,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078564",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128087609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128087609"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This block doesn't happen when `backtrack` is false and `done` is true which happens when a solution is found.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T20:34:02Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128087609",
      "id" : 128087609,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50734851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128087609",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088235"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in that case, the `while` cycle terminates before that",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T20:36:44Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088235",
      "id" : 128088235,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50735619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088235",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088778"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the `if` at the start of the `while` cycle, either `backtrack` or `done` is set, never both. We got here only when `backtrack == true`, so `done` cannot be true.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-07-18T20:38:58Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088778",
      "id" : 128088778,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50736254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088778",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@achow101 frankly, the \"old\" (current) core code seems to complex to me, because it introduces state, I don't understand it enough to make the simulation with the current core code as a backup",
      "created_at" : "2017-08-10T12:11:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-321533571",
      "id" : 321533571,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-08-10T12:11:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321533571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I have squashed a few commits and rebased this. I'll work on this some more after the 0.15.0 release.",
      "created_at" : "2017-08-17T23:00:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-323216732",
      "id" : 323216732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-08-17T23:00:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323216732",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have squashed this even more (by getting a diff and re-committing) and hopefully made each commit a more logical chunk of code.\r\n\r\nI have also changed this to use the discard fee rate for the change fee rate. The cost of change is also now calculated with the fee rate for making an output being the effective fee rate (fee rate being used) and the fee rate for spending the change being the discard fee rate.\r\n\r\nThe original commits are available in a separate branch here: https://github.com/achow101/bitcoin/tree/bnb-coin-select-orig (just in case I screwed something up).",
      "created_at" : "2017-09-06T21:28:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-327617533",
      "id" : 327617533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-06T21:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327617533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm not sure what the travis failure here was so I restarted that build.",
      "created_at" : "2017-09-18T15:45:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330265119",
      "id" : 330265119,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-18T15:45:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330265119",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@achow101 Travis failure is due to some weird behavior of travis to merge in latest master, but keep the yaml or config from the past (maybe when the pull was created).\r\n\r\nYou might be able to fix it by force pushing the last commit (`EDITOR=true git commit --amend && git push origin bnb-coin -f`) or just rebase on master. ",
      "created_at" : "2017-09-18T19:22:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330329194",
      "id" : 330329194,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-18T19:23:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330329194",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just `empty()` seems more straight forward",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T19:51:55Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522490",
      "id" : 139522490,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522490",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "define \"remaining\", or drop the comment",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T19:53:48Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522887",
      "id" : 139522887,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 45,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522887",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522984"
         }
      },
      "author_association" : "MEMBER",
      "body" : "to find what?",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T19:54:15Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+\n+    // Depth first search to find",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522984",
      "id" : 139522984,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522984",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523092"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`remaining_tries`?",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T19:54:47Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523092",
      "id" : 139523092,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523092",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523467"
         }
      },
      "author_association" : "MEMBER",
      "body" : "define what second branch means?",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T19:56:24Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523467",
      "id" : 139523467,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 37,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523467",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139530044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139530044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ACK on @runn1ng 's comment. Impossible to be \"done\" and require backtracking.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:23:32Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139530044",
      "id" : 139530044,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139530044",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`nOut` or something better please",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:32:23Z",
      "diff_hunk" : "@@ -453,6 +453,9 @@ class CWalletTx : public CMerkleTx\n     CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n     CAmount GetChange() const;\n \n+    // Get the marginal bytes if spending the specified output from this transaction\n+    int GetSpendSize(unsigned int i) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532186",
      "id" : 139532186,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 5,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532186",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Some asymmetry now with SC and SCMC, the former having one \"change size\" parameter, the other two. `change_output_size` to match.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:33:29Z",
      "diff_hunk" : "@@ -2254,164 +2293,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    if (use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        std::vector<CAmount> fee_vec; // To keep track of the fees for each input\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                vValue.push_back(coin);\n+                fee_vec.push_back(output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, fee_vec, fee_ret);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            vValue.push_back(coin);\n         }\n+        return KnapsackSolver(vValue, nTargetValue, setCoinsRet, nValueRet);\n     }\n-\n-    return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532452",
      "id" : 139532452,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 250,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532452",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is getting more important now with segwit, and the fact that we have two related optional arguments",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:34:31Z",
      "diff_hunk" : "@@ -837,7 +850,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n+     // TODO: Change the hard coded change_size when we aren't only using P2PKH change outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532715",
      "id" : 139532715,
      "in_reply_to_id" : 125332737,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 57,
      "path" : "src/wallet/wallet.h",
      "position" : 58,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532715",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "priority is removed; revisit?",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:34:51Z",
      "diff_hunk" : "@@ -1195,4 +1210,12 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532795",
      "id" : 139532795,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 64,
      "path" : "src/wallet/wallet.h",
      "position" : 73,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532795",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535695"
         }
      },
      "author_association" : "MEMBER",
      "body" : "parens around the value being subtracted would be nice ",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:46:50Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535695",
      "id" : 139535695,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535695",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535771"
         }
      },
      "author_association" : "MEMBER",
      "body" : "parens around the value being subtracted would be nice",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T20:47:06Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535771",
      "id" : 139535771,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535771",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139539124"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139539124"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, note that this value is the \"excess\" being added and removed later, in contrast to the input-selection waste (wonder if we can find a good name for this cost)",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T21:00:28Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139539124",
      "id" : 139539124,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63486517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139539124",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139541172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139541172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, can you rename it `input_fee_vec`",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-18T21:09:04Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139541172",
      "id" : 139541172,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 26,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63488818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139541172",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139580709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139580709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You wrote it (I took it from one of your commits); revisit it for me :D",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:43:40Z",
      "diff_hunk" : "@@ -1195,4 +1210,12 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139580709",
      "id" : 139580709,
      "in_reply_to_id" : 139532795,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 64,
      "path" : "src/wallet/wallet.h",
      "position" : 73,
      "pull_request_review_id" : 63532461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139580709",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581043"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:04Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581043",
      "id" : 139581043,
      "in_reply_to_id" : 139522490,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581043",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done here and elsewhere",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:12Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581052",
      "id" : 139581052,
      "in_reply_to_id" : 139535771,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581052",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581060"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:17Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581060",
      "id" : 139581060,
      "in_reply_to_id" : 139523092,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532848,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581060",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581074"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:24Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581074",
      "id" : 139581074,
      "in_reply_to_id" : 139523467,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 37,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581074",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done; renamed to `lookahead`",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:35Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581091",
      "id" : 139581091,
      "in_reply_to_id" : 139522887,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 45,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581091",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581104"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:40Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+\n+    // Depth first search to find",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581104",
      "id" : 139581104,
      "in_reply_to_id" : 139522984,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581104",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581116"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:46Z",
      "diff_hunk" : "@@ -453,6 +453,9 @@ class CWalletTx : public CMerkleTx\n     CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n     CAmount GetChange() const;\n \n+    // Get the marginal bytes if spending the specified output from this transaction\n+    int GetSpendSize(unsigned int i) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581116",
      "id" : 139581116,
      "in_reply_to_id" : 139532186,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 5,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63532903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581116",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:47:58Z",
      "diff_hunk" : "@@ -2254,164 +2293,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    if (use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        std::vector<CAmount> fee_vec; // To keep track of the fees for each input\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                vValue.push_back(coin);\n+                fee_vec.push_back(output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, fee_vec, fee_ret);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            vValue.push_back(coin);\n         }\n+        return KnapsackSolver(vValue, nTargetValue, setCoinsRet, nValueRet);\n     }\n-\n-    return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581138",
      "id" : 139581138,
      "in_reply_to_id" : 139532452,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 250,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 63532927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581138",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:48:03Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581141",
      "id" : 139581141,
      "in_reply_to_id" : 139539124,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-19T01:48:07Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581152",
      "id" : 139581152,
      "in_reply_to_id" : 139541172,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 26,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581152",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and addressed @instagibbs's comments",
      "created_at" : "2017-09-19T01:49:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330404321",
      "id" : 330404321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-19T01:49:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330404321",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 I cannot find it in the comments anymore, but you asked me for the simulation data some time ago\r\n\r\nI tried the simulation on two targets.\r\n\r\nFirst scenario (moneypot scenario) is I think from here (note - large file; one line is one income/expense)\r\nhttps://github.com/Xekyo/CoinSelectionSimulator/tree/master/src/main/resources/scenarios\r\n\r\nSecond is randomly generated from here \r\nhttps://github.com/bitcoinjs/coinselect/blob/master/stats/index.js\r\n\r\nIt would probably be better if you run the c++ core code directly though; my simulations were on the javascript + scala code",
      "created_at" : "2017-09-27T12:57:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-332511894",
      "id" : 332511894,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-27T12:57:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332511894",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r141999992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141999992"
         }
      },
      "author_association" : "NONE",
      "body" : "<quoting-Rehash class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Port Townsend Terminal<br><br>1301 Water St, Port Townsend, WA 98368<br>+1 206-464-6400 <a href=\"https://t.co/3LEHrXpu7y\">https://t.co/3LEHrXpu7y</a></p>&mdash; ahrlo jan ebio (@irieBrain) <a href=\"https://twitter.com/irieBrain/status/913990767797985280?ref_src=twsrc%5Etfw\">September 30, 2017</a></blockquote> <script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
      "commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "created_at" : "2017-09-30T06:59:14Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r141999992",
      "id" : 141999992,
      "in_reply_to_id" : 139522490,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66306875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-09-30T06:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141999992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/8288478?v=4",
         "events_url" : "https://api.github.com/users/irieGhost/events{/privacy}",
         "followers_url" : "https://api.github.com/users/irieGhost/followers",
         "following_url" : "https://api.github.com/users/irieGhost/following{/other_user}",
         "gists_url" : "https://api.github.com/users/irieGhost/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/irieGhost",
         "id" : 8288478,
         "login" : "irieGhost",
         "organizations_url" : "https://api.github.com/users/irieGhost/orgs",
         "received_events_url" : "https://api.github.com/users/irieGhost/received_events",
         "repos_url" : "https://api.github.com/users/irieGhost/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/irieGhost/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/irieGhost/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/irieGhost"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I am looking at this commit\r\n\r\nhttps://github.com/achow101/bitcoin/commit/0fb73ae532aab061d3df0be54579b6d40c1e93ff\r\n\r\nI have to say, I don't understand, why are long term fees used in the waste calculation and what exactly does this mean\r\n\r\n```\r\nCCoinControl temp;\r\ntemp.m_confirm_target = 1008;\r\nCFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\r\n```\r\n\r\nlong_term_feerate will be some very small fee that guarantees send in 1008 blocks, right? Why is that used in the waste calculation?",
      "created_at" : "2017-09-30T22:15:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333339484",
      "id" : 333339484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-30T22:15:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333339484",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pieter pointed out that the algorithm doesn't necessarily find the best solution when it discovers the first solution. However, it was then at first not clear how to make the trade-off between making the input set smaller or reducing the excess in the selection.\r\n\r\nThe idea is that during high fee rates, it might be beneficial to the user if a smaller input count is preferred in exchange for a higher excess, while at low fee rates, a higher input count might be acceptable to achieve a smaller excess.\r\n\r\nWe came up with the waste metric to combine both of these dimensions:\r\n\r\n    waste = excess + #inputs * (feeRate - longterm feeRate)\r\n\r\nwhere `excess` is the amount that we overshoot the selection target, and the second term derives from how much more expensive it is to spend the inputs right now than we expect in the longterm.\r\n\r\nThe algorithm now doesn't stop on the first solution, but continues to search for a solution with a lower waste metric (using that as another bound) until either it has searched all possibilities or runs into the maximum allowed tries.",
      "created_at" : "2017-09-30T22:40:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333340700",
      "id" : 333340700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-30T22:42:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333340700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142017311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142017311"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe this must be:\r\n\r\n`curr_waste > best_waste && (fee_vec[depth] - long_term_fee_vec[depth]) > 0`\r\n\r\nOtherwise, you'd be prematurely stopping when a transaction is created with fees below the long-term fee estimate.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-09-30T23:27:29Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142017311",
      "id" : 142017311,
      "original_commit_id" : "0fb73ae532aab061d3df0be54579b6d40c1e93ff",
      "original_position" : 27,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66324547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142017311",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142040853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142040853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe I misunderstand what `long_term_fee` is, but how can it be lower than long term fee estimate? I thought that long term fee looks for confirmation target 1008, thus all smart fee estimates will be only bigger than the long term estimate...",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-01T21:15:23Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142040853",
      "id" : 142040853,
      "in_reply_to_id" : 142017311,
      "original_commit_id" : "0fb73ae532aab061d3df0be54579b6d40c1e93ff",
      "original_position" : 27,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66347309,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142040853",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142192418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142192418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Coin selection function for Branch and Bound coin selection algo\"\r\n\r\nMaybe drop this and use `descending` instead of sorting in ascending order and reversing.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T16:45:29Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142192418",
      "id" : 142192418,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 17,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142192418",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142195624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142195624"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note for reviewers: This function is not new, just moved from wallet.cpp.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T16:57:57Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+\n+    // Depth first search to find\n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                ++depth;\n+            }\n+        }\n+        --tries;\n+    }\n+\n+    // Set output set\n+    for (unsigned int i = 0; i < selection.size(); ++i) {\n+        if (selection.at(i).first) {\n+            out_set.insert(utxo_pool.at(i));\n+            fee_ret += fee_vec.at(i);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142195624",
      "id" : 142195624,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 127,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 167,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142195624",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142215029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142215029"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and throughout the PR, probably would be better to pass CInputCoin by const reference to avoid copying the struct. Probably want `for (const CInputCoin& utxo : utxo_pool)` instead of `for (CInputCoin utxo : utxo_pool)` as well.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:16:55Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142215029",
      "id" : 142215029,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 11,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142215029",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142216891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142216891"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Don't you need to update `input_fee_vec` and `long_term_fee_vec` during the sort? Maybe it would be simpler to make `input_fee` and `long_term_fee` new fields in `CInputCoin`.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:24:26Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142216891",
      "id" : 142216891,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 44,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 63,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142216891",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could declare depth as size_t to avoid cast.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:27:33Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217676",
      "id" : 142217676,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 74,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 93,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217676",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217987"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could use .at() consistently instead of .at() and []",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:28:44Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += input_fee_vec[depth] - long_term_fee_vec[depth];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217987",
      "id" : 142217987,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217987",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142220571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142220571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should just implement original `GetMinimumFee` & `GetRequiredFee` functions in terms of these new feerate functions. Not good to duplicate so much code.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:38:48Z",
      "diff_hunk" : "@@ -76,6 +76,62 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n     return fee_needed;\n }\n \n+CFeeRate GetRequiredFeeRate()\n+{\n+    return std::max(CWallet::minTxFee, ::minRelayTxFee);\n+}\n+\n+CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142220571",
      "id" : 142220571,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 9,
      "path" : "src/wallet/fees.cpp",
      "position" : 9,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142220571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222080"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note for reviewers: Again this code is mostly not new. It's moved from the previous `SelectCoinsMinConf` implementation in wallet.cpp",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:44:34Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += input_fee_vec[depth] - long_term_fee_vec[depth];\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                    curr_waste -= input_fee_vec[depth] - long_term_fee_vec[depth];\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= input_fee_vec[depth] - long_term_fee_vec[depth];\n+                ++depth;\n+            }\n+        }\n+        --remaining_tries;\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;\n+    for (unsigned int i = 0; i < best_selection.size(); ++i) {\n+        if (best_selection.at(i).first) {\n+            out_set.insert(utxo_pool.at(i));\n+            fee_ret += input_fee_vec.at(i);\n+            value_ret += utxo_pool.at(i).txout.nValue;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+{\n+    std::vector<char> vfIncluded;\n+\n+    vfBest.assign(vValue.size(), true);\n+    nBest = nTotalLower;\n+\n+    FastRandomContext insecure_rand;\n+\n+    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n+    {\n+        vfIncluded.assign(vValue.size(), false);\n+        CAmount nTotal = 0;\n+        bool fReachedTarget = false;\n+        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n+        {\n+            for (unsigned int i = 0; i < vValue.size(); i++)\n+            {\n+                //The solver here uses a randomized algorithm,\n+                //the randomness serves no real security purpose but is just\n+                //needed to prevent degenerate behavior and it is important\n+                //that the rng is fast. We do not use a constant random sequence,\n+                //because there may be some privacy improvement by making\n+                //the selection random.\n+                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n+                {\n+                    nTotal += vValue[i].txout.nValue;\n+                    vfIncluded[i] = true;\n+                    if (nTotal >= nTargetValue)\n+                    {\n+                        fReachedTarget = true;\n+                        if (nTotal < nBest)\n+                        {\n+                            nBest = nTotal;\n+                            vfBest = vfIncluded;\n+                        }\n+                        nTotal -= vValue[i].txout.nValue;\n+                        vfIncluded[i] = false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+bool KnapsackSolver(std::vector<CInputCoin>& utxo_pool, const CAmount& nTargetValue, std::set<CInputCoin>& out_set, CAmount& value_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222080",
      "id" : 142222080,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 199,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 213,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222080",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222627"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could use a comment saying what the arguments are and what bnb stands for, with maybe a sentence or two describing the algorithm, too.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T18:46:38Z",
      "diff_hunk" : "@@ -0,0 +1,19 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSELECTION_H\n+#define BITCOIN_COINSELECTION_H\n+\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"wallet/wallet.h\"\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222627",
      "id" : 142222627,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222627",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142227108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142227108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`GetMinimumFee` has `maxTxFee` logic that this doesn't, so the wrapper would have to include that.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T19:04:35Z",
      "diff_hunk" : "@@ -76,6 +76,62 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n     return fee_needed;\n }\n \n+CFeeRate GetRequiredFeeRate()\n+{\n+    return std::max(CWallet::minTxFee, ::minRelayTxFee);\n+}\n+\n+CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142227108",
      "id" : 142227108,
      "in_reply_to_id" : 142220571,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 9,
      "path" : "src/wallet/fees.cpp",
      "position" : 9,
      "pull_request_review_id" : 66558448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142227108",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142241789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142241789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@Xekyo I agree with @runn1ng. I don't see how the long term fee can be less than the current fee.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-02T20:10:37Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142241789",
      "id" : 142241789,
      "in_reply_to_id" : 142017311,
      "original_commit_id" : "0fb73ae532aab061d3df0be54579b6d40c1e93ff",
      "original_position" : 27,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66575803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142241789",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I tried my javascript simulations with the additional code (the waste comparation) and it actually had slightly worse results (higher total cost)\r\n\r\nBUT it might be some bug in the simulation, I don't have that much time for experimenting right now",
      "created_at" : "2017-10-02T22:27:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333683003",
      "id" : 333683003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-10-02T22:27:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333683003",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Some simulation that actually test the resulting total fees on a given scenario - similar to @Xekyo repo - but on actual bitcoin binary - would be probably nice. So the testing would be on this code and not on re-implementations.\r\n\r\nI am thinking how hard would that be on regtest, with the current python qa testing framework.",
      "created_at" : "2017-10-02T22:31:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333683867",
      "id" : 333683867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-10-02T22:31:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333683867",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-03T01:58:58Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298179",
      "id" : 142298179,
      "in_reply_to_id" : 142215029,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 11,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298179",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-03T01:59:05Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298191",
      "id" : 142298191,
      "in_reply_to_id" : 142192418,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 17,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298191",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I do... I took your suggestion and added fields to `CInputCoin` for that coin's `fee` and `long_term_fee` values.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-03T01:59:42Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298243",
      "id" : 142298243,
      "in_reply_to_id" : 142216891,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 44,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 63,
      "pull_request_review_id" : 66638841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298243",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298276"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`depth` can be negative, so I don't think I an do that. It is only negative when all branches in the tree are exhausted.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-03T02:00:02Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298276",
      "id" : 142298276,
      "in_reply_to_id" : 142217676,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 74,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 93,
      "pull_request_review_id" : 66638875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298276",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-03T02:00:38Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += input_fee_vec[depth] - long_term_fee_vec[depth];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298342",
      "id" : 142298342,
      "in_reply_to_id" : 142217987,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298342",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298376"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have added a very long comment describing what this does and the arguments of the function.",
      "commit_id" : "337543888f9ede4e4a42beed4a42ceb492e8e412",
      "created_at" : "2017-10-03T02:00:58Z",
      "diff_hunk" : "@@ -0,0 +1,19 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSELECTION_H\n+#define BITCOIN_COINSELECTION_H\n+\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"wallet/wallet.h\"\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298376",
      "id" : 142298376,
      "in_reply_to_id" : 142222627,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 66638973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-10-03T02:43:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298376",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
