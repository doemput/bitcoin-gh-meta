[
   {
      "body" : "Isn't this going a bit overboard for debugging tools? (OTOH, it's only about 150 LOC...)",
      "created_at" : "2016-04-01T18:34:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204506292",
      "id" : 204506292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-04-01T18:34:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/204506292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "I think this is useful. An alternative proposed was to use variables `a = getnewaddress` `sendtoaddress a 10`, but this pull is fine as well.",
      "created_at" : "2016-04-01T18:44:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204513734",
      "id" : 204513734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-04-01T18:44:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/204513734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "> Isn't this going a bit overboard for debugging tools? (OTOH, it's only about 150 LOC...)\r\n\r\nIt is a \"luxury extension\", right. But given the time some of us have spent in the console repeating and copy-pasting commands out- and input, I think it worth taking this in.\r\nAlso, I don't see critical risks for this.\r\n\r\nIMO we should also extend bitcoin-cli to support nested commands. It simply increases productivity with that tool.",
      "created_at" : "2016-04-01T18:53:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204521501",
      "id" : 204521501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-04-01T18:53:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/204521501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "I like this concept. I initially had @luke-jr 's concern as well. But only a bit of code added, and it's well-contained.\r\n\r\nIt's not just luxury: it's useful for cases like #7599 where someone wants to insert the output of a previous command into a new one, but it's too long for copy pasting.\r\n\r\n> IMO we should also extend bitcoin-cli to support nested commands. It simply increases productivity with that tool.\r\n\r\nNot sure there. `bitcoin-cli` is simply an entry point and you can use whatever scripting you want in the shell that calls it.\r\n\r\nFor the GUI debug console, which is essentially it's own `bash`, this makes more sense.\r\n\r\nI'm all for a fancy ncurses-based interactive client, but that should not be `bitcoin-cli`.\r\n",
      "created_at" : "2016-04-02T05:41:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204650396",
      "id" : 204650396,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-04-02T05:41:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/204650396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "On the other hand, many advices read 'Run getsomething' and so. This will bring another \"fork\" - you have to also add that you have to run this in Debug console or via `bitcoin-cli`, because the syntax will \"fork\".\r\n\r\nConcept ACK (I'd also like to see this in `bitcoin-cli`)\r\n",
      "created_at" : "2016-04-02T10:52:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204693463",
      "id" : 204693463,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-04-02T10:52:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/204693463",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6848764?v=3",
         "events_url" : "https://api.github.com/users/paveljanik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paveljanik/followers",
         "following_url" : "https://api.github.com/users/paveljanik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paveljanik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paveljanik",
         "id" : 6848764,
         "login" : "paveljanik",
         "organizations_url" : "https://api.github.com/users/paveljanik/orgs",
         "received_events_url" : "https://api.github.com/users/paveljanik/received_events",
         "repos_url" : "https://api.github.com/users/paveljanik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paveljanik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paveljanik"
      }
   },
   {
      "body" : "Almost tempting to make it server-side, if we're using long output-inputs... but this seems fine (Concept ACK) as-is; further improvement can wait for another PR.",
      "created_at" : "2016-04-02T10:57:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-204694359",
      "id" : 204694359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-04-02T10:57:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/204694359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Would it be possible to abstract out this functionality in a separate commit (including the existing RPC parsing logic from the Qt console) and move it to rpc/server.cpp, as an actual RPC call that just takes a string argument with a command to parse?\r\n\r\nThat would make it both more usable (by exposing it as RPC, bitcoin-cli and other tools can use it too), and more testable (we can have RPC tests for it), without complicating the change much.",
      "created_at" : "2016-06-02T14:10:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-223303447",
      "id" : 223303447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-06-02T14:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223303447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "I have though about that but I wasn't sure if we should delegate the parsing/executing of nested command to the server. This PR would do the parsing \"client side\". We could also factor out the parsing and use it client-side (Qt / bitcoin-cli).\r\n\r\nBut I agree, it could be useful server-side.",
      "created_at" : "2016-06-02T14:14:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-223304571",
      "id" : 223304571,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-06-02T14:14:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223304571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Yes, I agree having it client side is useful. My main reason for suggesting abstracting it out it because I don't think it's very hard, and would make the parsing logic much easier to test.",
      "created_at" : "2016-06-02T14:21:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-223306700",
      "id" : 223306700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-06-02T14:21:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223306700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "This would save a hell lot of time and copy/pasting ",
      "created_at" : "2016-07-19T05:08:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-233533678",
      "id" : 233533678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-07-19T05:08:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/233533678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/20367272?v=3",
         "events_url" : "https://api.github.com/users/UniQredit/events{/privacy}",
         "followers_url" : "https://api.github.com/users/UniQredit/followers",
         "following_url" : "https://api.github.com/users/UniQredit/following{/other_user}",
         "gists_url" : "https://api.github.com/users/UniQredit/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/UniQredit",
         "id" : 20367272,
         "login" : "UniQredit",
         "organizations_url" : "https://api.github.com/users/UniQredit/orgs",
         "received_events_url" : "https://api.github.com/users/UniQredit/received_events",
         "repos_url" : "https://api.github.com/users/UniQredit/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/UniQredit/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/UniQredit/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/UniQredit"
      }
   },
   {
      "body" : "* Finally rebased this great PR and refactored the parsing logic into `rpc/server.cpp`\r\n* Added some unit tests\r\n\r\nThis could now be simply extended to the RPC server, although, nested commands could be resource and time hungry.",
      "created_at" : "2016-07-19T15:22:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-233667907",
      "id" : 233667907,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-07-19T15:22:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/233667907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r71362237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/71362237"
         }
      },
      "body" : "There is no whitespace at the end?",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-07-19T15:29:35Z",
      "diff_hunk" : "@@ -332,4 +332,49 @@ BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)\n     BOOST_CHECK_EQUAL(result[2].get_int(), 9);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_nested_command_line)\n+{\n+    UniValue jsonRPCError;\n+\n+    SetRPCWarmupFinished();\n+    \n+    std::string result;\n+    std::string result2;\n+    RPCExecuteCommandLine(result, \"getblockchaininfo()[chain]\"); //simple result filtering with path\n+    BOOST_CHECK_EQUAL(result, \"main\");\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblock(getbestblockhash())\")); //simple 2 level nesting\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblock(getblock(getbestblockhash())[hash], true)\"));\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\")); //4 level nesting with whitespace, filtering path and boolean parameter\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo\"));\n+    BOOST_CHECK_EQUAL(result.substr(0,1), \"{\");\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo()\"));\n+    BOOST_CHECK_EQUAL(result.substr(0,1), \"{\");\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo\")); //whitespace at the end will be tolerated",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r71362237",
      "id" : 71362237,
      "original_commit_id" : "b5ba8fb2ed3e8d7e656608113f2a191694ead88d",
      "original_position" : 26,
      "path" : "src/test/rpc_tests.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/71362237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r71362470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/71362470"
         }
      },
      "body" : "`:%s/toller/toler/g`",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-07-19T15:30:53Z",
      "diff_hunk" : "@@ -332,4 +332,49 @@ BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)\n     BOOST_CHECK_EQUAL(result[2].get_int(), 9);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_nested_command_line)\n+{\n+    UniValue jsonRPCError;\n+\n+    SetRPCWarmupFinished();\n+    \n+    std::string result;\n+    std::string result2;\n+    RPCExecuteCommandLine(result, \"getblockchaininfo()[chain]\"); //simple result filtering with path\n+    BOOST_CHECK_EQUAL(result, \"main\");\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblock(getbestblockhash())\")); //simple 2 level nesting\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblock(getblock(getbestblockhash())[hash], true)\"));\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\")); //4 level nesting with whitespace, filtering path and boolean parameter\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo\"));\n+    BOOST_CHECK_EQUAL(result.substr(0,1), \"{\");\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo()\"));\n+    BOOST_CHECK_EQUAL(result.substr(0,1), \"{\");\n+\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo\")); //whitespace at the end will be tolerated\n+    BOOST_CHECK_EQUAL(result.substr(0,1), \"{\");\n+\n+    BOOST_CHECK_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo() .\\n\"), runtime_error); //invalid syntax\n+    BOOST_CHECK_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo() getblockchaininfo()\"), runtime_error); //invalid syntax\n+    BOOST_CHECK_NO_THROW(RPCExecuteCommandLine(result, \"getblockchaininfo(\")); //tollerate non closing brackets if we have no arguments",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r71362470",
      "id" : 71362470,
      "original_commit_id" : "b5ba8fb2ed3e8d7e656608113f2a191694ead88d",
      "original_position" : 31,
      "path" : "src/test/rpc_tests.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/71362470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Fixed nits. Had to add `client.cpp` to `libbitcoin_server_a`. Should that be a problem @theuni?",
      "created_at" : "2016-07-20T13:27:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-233948349",
      "id" : 233948349,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-07-20T13:27:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/233948349",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> Would it be possible to abstract out this functionality in a separate commit (including the existing RPC parsing logic from the Qt console) and move it to rpc/server.cpp,\r\n\r\nSorry to be contrary, but IMO, functionality related to parsing and not dispatching should be in `rpc/client.cpp` instead of `rpc/server.cpp`. Note that bitcoin-cli links the client library, not the server one.\r\n\r\n(another reason that it doesn't belong server-side is that it doesn't act on univalue/JSON objects, but on command line strings. Wouldn't  want string parsing on the server side, as this makes the JSON-RPC API unclear, and introduces potential vulnerabilities and DoS possibilities etc)",
      "created_at" : "2016-08-12T13:00:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239439614",
      "id" : 239439614,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-12T13:07:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239439614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r74586915"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74586915"
         }
      },
      "body" : "client.cpp is part of `libbitcoin_cli`, which is \"cli: shared between bitcoin-cli and bitcoin-qt\" if you need access to that then link that library. Don't include the compilation unit in two libraries.",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-12T13:06:34Z",
      "diff_hunk" : "@@ -181,6 +181,7 @@ libbitcoin_server_a_SOURCES = \\\n   pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n+  rpc/client.cpp \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r74586915",
      "id" : 74586915,
      "original_commit_id" : "05a958e32db2fe417304c1736cf9f6aaea07440d",
      "original_position" : 4,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/74586915",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Having it in `rpc/client.cpp` instead of `server.cpp` would be good I guess. The only restriction would then be, that we cannot allow (later) server side nested commands (which would probably perform slightly faster). But I'm not sure if we really want server side nested commands with the current locking behavior.",
      "created_at" : "2016-08-12T13:08:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239441380",
      "id" : 239441380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-12T13:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239441380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Server-side nested commands are not part of the JSON-RPC standard. It is an interesting thought but that would be a completely different proposal, and I don't think it would share any code with this. I'd imagine it would work something akin to batching (but w/ nested structures), not by parsing/formatting expression strings. Seeing how little even simple batching is used, I'm also not sure there is enough demand for that kind of advanced behavior, but that aside.\r\n\r\nEdit: Looked it up a bit,  'nested remote function call' in RPC protocols is commonly implemented in the form of 'promise pipelining', a strategy to reduce round-trips. A call can return a handle, which is essentially a temporary variable, which can be passed as argument to other calls before the result is known. This allows more versatile manipulation than just nesting (e.g. a DAG instead of a tree). In any case this is something to be found in the more advanced RPC frameworks, I couldn't find anyone having bolted it into JSON-RPC. As said, an issue for another time :)\r\n\r\nEdit.2: Had a try at a proposal here: https://github.com/bitcoin/bitcoin/pull/8457#issuecomment-239611262\r\n",
      "created_at" : "2016-08-12T13:12:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239442267",
      "id" : 239442267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-13T09:54:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239442267",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Agreed with keeping parsing client-side. Let's not tangle up the dependencies.\r\n\r\nI really like this idea btw.",
      "created_at" : "2016-08-12T18:07:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-239518801",
      "id" : 239518801,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-12T18:07:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/239518801",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "Removed all changes from the core classes.\r\nIt's now a GUI only change.\r\nAdded Qt unit tests for the nested commands.\r\n",
      "created_at" : "2016-08-20T09:21:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241189243",
      "id" : 241189243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-20T09:21:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241189243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "qt-test fail on travis, apparently.",
      "created_at" : "2016-08-21T12:02:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241253645",
      "id" : 241253645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-21T12:02:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241253645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Fixed the travis Qt-Test issue.\r\nThis PR is looking for reviewers.",
      "created_at" : "2016-08-23T09:43:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241680531",
      "id" : 241680531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-23T09:43:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241680531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75838482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75838482"
         }
      },
      "body" : "`curarg.size()` should already be ok since it's checked in line 170",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:19:07Z",
      "diff_hunk" : "@@ -113,117 +113,211 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch == ']')\n+                            {\n+                                if (curarg.size())\n+                                {\n+                                    // if we have a value query, query arrays with index and objects with a string key\n+                                    UniValue subelement;\n+                                    if (curarg.size() && lastResult.isArray())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75838482",
      "id" : 75838482,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 78,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75838482",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1935069?v=3",
         "events_url" : "https://api.github.com/users/UdjinM6/events{/privacy}",
         "followers_url" : "https://api.github.com/users/UdjinM6/followers",
         "following_url" : "https://api.github.com/users/UdjinM6/following{/other_user}",
         "gists_url" : "https://api.github.com/users/UdjinM6/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/UdjinM6",
         "id" : 1935069,
         "login" : "UdjinM6",
         "organizations_url" : "https://api.github.com/users/UdjinM6/orgs",
         "received_events_url" : "https://api.github.com/users/UdjinM6/received_events",
         "repos_url" : "https://api.github.com/users/UdjinM6/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/UdjinM6/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/UdjinM6"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75838520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75838520"
         }
      },
      "body" : "same here for `curarg.size()`",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:19:21Z",
      "diff_hunk" : "@@ -113,117 +113,211 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch == ']')\n+                            {\n+                                if (curarg.size())\n+                                {\n+                                    // if we have a value query, query arrays with index and objects with a string key\n+                                    UniValue subelement;\n+                                    if (curarg.size() && lastResult.isArray())\n+                                    {\n+                                        for(char argch: curarg)\n+                                            if (!std::isdigit(argch))\n+                                                throw std::runtime_error(\"Invalid result query\");\n+                                        subelement = lastResult[atoi(curarg.c_str())];\n+                                    }\n+                                    else if (curarg.size() && lastResult.isObject())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75838520",
      "id" : 75838520,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 85,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75838520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1935069?v=3",
         "events_url" : "https://api.github.com/users/UdjinM6/events{/privacy}",
         "followers_url" : "https://api.github.com/users/UdjinM6/followers",
         "following_url" : "https://api.github.com/users/UdjinM6/following{/other_user}",
         "gists_url" : "https://api.github.com/users/UdjinM6/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/UdjinM6",
         "id" : 1935069,
         "login" : "UdjinM6",
         "organizations_url" : "https://api.github.com/users/UdjinM6/orgs",
         "received_events_url" : "https://api.github.com/users/UdjinM6/received_events",
         "repos_url" : "https://api.github.com/users/UdjinM6/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/UdjinM6/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/UdjinM6"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75839276"
         }
      },
      "body" : "nit: since both branches for that `if` end with `break`, nesting level here can be reduced by smth like:\r\n```\r\n                            if (ch != ']')\r\n                            {\r\n                                // append char to the current argument (which is also used for the query command)\r\n                                curarg += ch;\r\n                                break;\r\n                            }\r\n```\r\nand then all the code in the scope below but up one level of nesting.",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:24:32Z",
      "diff_hunk" : "@@ -113,117 +113,211 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch == ']')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839276",
      "id" : 75839276,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 72,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75839276",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1935069?v=3",
         "events_url" : "https://api.github.com/users/UdjinM6/events{/privacy}",
         "followers_url" : "https://api.github.com/users/UdjinM6/followers",
         "following_url" : "https://api.github.com/users/UdjinM6/following{/other_user}",
         "gists_url" : "https://api.github.com/users/UdjinM6/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/UdjinM6",
         "id" : 1935069,
         "login" : "UdjinM6",
         "organizations_url" : "https://api.github.com/users/UdjinM6/orgs",
         "received_events_url" : "https://api.github.com/users/UdjinM6/received_events",
         "repos_url" : "https://api.github.com/users/UdjinM6/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/UdjinM6/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/UdjinM6"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75839479"
         }
      },
      "body" : "nit: typo",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:25:52Z",
      "diff_hunk" : "@@ -113,117 +113,211 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch == ']')\n+                            {\n+                                if (curarg.size())\n+                                {\n+                                    // if we have a value query, query arrays with index and objects with a string key\n+                                    UniValue subelement;\n+                                    if (curarg.size() && lastResult.isArray())\n+                                    {\n+                                        for(char argch: curarg)\n+                                            if (!std::isdigit(argch))\n+                                                throw std::runtime_error(\"Invalid result query\");\n+                                        subelement = lastResult[atoi(curarg.c_str())];\n+                                    }\n+                                    else if (curarg.size() && lastResult.isObject())\n+                                        subelement = find_value(lastResult, curarg);\n+                                    else\n+                                        throw std::runtime_error(\"Invalid result query\"); //no array or object: abort\n+                                    lastResult = subelement;\n+                                }\n+\n+                                state = STATE_COMMAND_EXECUTED;\n+                                break;\n+                            }\n+                            else\n+                            {\n+                                // append char to the current argument (which is also used for the query command)\n+                                curarg += ch;\n+                                break;\n+                            }\n+                        }\n+                        // don't break parsing when the char is required for the next argument\n+                        breakParsing = false;\n+\n+                        // pop the stack and return the result to the current command arguments\n+                        stack.pop_back();\n+\n+                        // don't stringify the json in case of a string to avoid doublequotes\n+                        if (lastResult.isStr())\n+                            curarg = lastResult.get_str();\n+                        else\n+                            curarg = lastResult.write(2);\n+\n+                        // if we have a non empty result, use it as stack argument otherwise as general result\n+                        if (curarg.size())\n+                        {\n+                            if (stack.size())\n+                                stack.back().push_back(curarg);\n+                            else\n+                                strResult = curarg;\n+                        }\n+                        curarg.clear();\n+                        // assume easting space state",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839479",
      "id" : 75839479,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 123,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75839479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75839676"
         }
      },
      "body" : "nit: maybe change names to `strResult` and `strExecutableCommand`? Same for strings in rpcnestedtests.cpp",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:27:25Z",
      "diff_hunk" : "@@ -113,117 +113,211 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch == ']')\n+                            {\n+                                if (curarg.size())\n+                                {\n+                                    // if we have a value query, query arrays with index and objects with a string key\n+                                    UniValue subelement;\n+                                    if (curarg.size() && lastResult.isArray())\n+                                    {\n+                                        for(char argch: curarg)\n+                                            if (!std::isdigit(argch))\n+                                                throw std::runtime_error(\"Invalid result query\");\n+                                        subelement = lastResult[atoi(curarg.c_str())];\n+                                    }\n+                                    else if (curarg.size() && lastResult.isObject())\n+                                        subelement = find_value(lastResult, curarg);\n+                                    else\n+                                        throw std::runtime_error(\"Invalid result query\"); //no array or object: abort\n+                                    lastResult = subelement;\n+                                }\n+\n+                                state = STATE_COMMAND_EXECUTED;\n+                                break;\n+                            }\n+                            else\n+                            {\n+                                // append char to the current argument (which is also used for the query command)\n+                                curarg += ch;\n+                                break;\n+                            }\n+                        }\n+                        // don't break parsing when the char is required for the next argument\n+                        breakParsing = false;\n+\n+                        // pop the stack and return the result to the current command arguments\n+                        stack.pop_back();\n+\n+                        // don't stringify the json in case of a string to avoid doublequotes\n+                        if (lastResult.isStr())\n+                            curarg = lastResult.get_str();\n+                        else\n+                            curarg = lastResult.write(2);\n+\n+                        // if we have a non empty result, use it as stack argument otherwise as general result\n+                        if (curarg.size())\n+                        {\n+                            if (stack.size())\n+                                stack.back().push_back(curarg);\n+                            else\n+                                strResult = curarg;\n+                        }\n+                        curarg.clear();\n+                        // assume easting space state\n+                        state = STATE_EATING_SPACES;\n                 }\n-                state = STATE_EATING_SPACES;\n-                break;\n-            default: curarg += ch; state = STATE_ARGUMENT;\n+                if (breakParsing)\n+                    break;\n             }\n-            break;\n-        case STATE_SINGLEQUOTED: // Single-quoted string\n-            switch(ch)\n+            case STATE_ARGUMENT: // In or after argument\n+            case STATE_EATING_SPACES: // Handle runs of whitespace\n+                switch(ch)\n             {\n-            case '\\'': state = STATE_ARGUMENT; break;\n-            default: curarg += ch;\n+                case '\"': state = STATE_DOUBLEQUOTED; break;\n+                case '\\'': state = STATE_SINGLEQUOTED; break;\n+                case '\\\\': state = STATE_ESCAPE_OUTER; break;\n+                case '(': case ')': case '\\n':\n+                    if (state == STATE_ARGUMENT)\n+                    {\n+                        if (ch == '(' && stack.size() && stack.back().size() > 0)\n+                            stack.push_back(std::vector<std::string>());\n+                        if (curarg.size())\n+                        {\n+                            // don't allow commands after executed commands on baselevel\n+                            if (!stack.size())\n+                                throw std::runtime_error(\"Invalid Syntax\");\n+                            stack.back().push_back(curarg);\n+                        }\n+                        curarg.clear();\n+                        state = STATE_EATING_SPACES;\n+                    }\n+                    if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n+                    {\n+                        std::string strPrint;\n+                        // Convert argument list to JSON objects in method-dependent way,\n+                        // and pass it along with the method name to the dispatcher.\n+                        lastResult = tableRPC.execute(stack.back()[0], RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end())));\n+\n+                        state = STATE_COMMAND_EXECUTED;\n+                        curarg.clear();\n+                    }\n+                    break;\n+                case ' ': case ',': case '\\t':\n+                    if(state == STATE_ARGUMENT) // Space ends argument\n+                    {\n+                        if (curarg.size())\n+                            stack.back().push_back(curarg);\n+                        curarg.clear();\n+                    }\n+                    state = STATE_EATING_SPACES;\n+                    break;\n+                default: curarg += ch; state = STATE_ARGUMENT;\n             }\n-            break;\n-        case STATE_DOUBLEQUOTED: // Double-quoted string\n-            switch(ch)\n+                break;\n+            case STATE_SINGLEQUOTED: // Single-quoted string\n+                switch(ch)\n             {\n-            case '\"': state = STATE_ARGUMENT; break;\n-            case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n-            default: curarg += ch;\n+                case '\\'': state = STATE_ARGUMENT; break;\n+                default: curarg += ch;\n             }\n-            break;\n-        case STATE_ESCAPE_OUTER: // '\\' outside quotes\n-            curarg += ch; state = STATE_ARGUMENT;\n-            break;\n-        case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n-            if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n-            curarg += ch; state = STATE_DOUBLEQUOTED;\n-            break;\n+                break;\n+            case STATE_DOUBLEQUOTED: // Double-quoted string\n+                switch(ch)\n+            {\n+                case '\"': state = STATE_ARGUMENT; break;\n+                case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n+                default: curarg += ch;\n+            }\n+                break;\n+            case STATE_ESCAPE_OUTER: // '\\' outside quotes\n+                curarg += ch; state = STATE_ARGUMENT;\n+                break;\n+            case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n+                if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n+                curarg += ch; state = STATE_DOUBLEQUOTED;\n+                break;\n         }\n     }\n     switch(state) // final state\n     {\n-    case STATE_EATING_SPACES:\n-        return true;\n-    case STATE_ARGUMENT:\n-        args.push_back(curarg);\n-        return true;\n-    default: // ERROR to end in one of the other states\n-        return false;\n+        case STATE_COMMAND_EXECUTED:\n+            if (lastResult.isStr())\n+                strResult = lastResult.get_str();\n+            else\n+                strResult = lastResult.write(2);\n+        case STATE_ARGUMENT:\n+        case STATE_EATING_SPACES:\n+            return true;\n+        default: // ERROR to end in one of the other states\n+            return false;\n     }\n }\n \n void RPCExecutor::request(const QString &command)\n {\n-    std::vector<std::string> args;\n-    if(!parseCommandLine(args, command.toStdString()))\n-    {\n-        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n-        return;\n-    }\n-    if(args.empty())\n-        return; // Nothing to do\n     try\n     {\n-        std::string strPrint;\n-        // Convert argument list to JSON objects in method-dependent way,\n-        // and pass it along with the method name to the dispatcher.\n-        UniValue result = tableRPC.execute(\n-            args[0],\n-            RPCConvertValues(args[0], std::vector<std::string>(args.begin() + 1, args.end())));\n-\n-        // Format result reply\n-        if (result.isNull())\n-            strPrint = \"\";\n-        else if (result.isStr())\n-            strPrint = result.get_str();\n-        else\n-            strPrint = result.write(2);\n-\n-        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        std::string result;\n+        std::string executableCommand = command.toStdString() + \"\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75839676",
      "id" : 75839676,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 271,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : 268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75839676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1935069?v=3",
         "events_url" : "https://api.github.com/users/UdjinM6/events{/privacy}",
         "followers_url" : "https://api.github.com/users/UdjinM6/followers",
         "following_url" : "https://api.github.com/users/UdjinM6/following{/other_user}",
         "gists_url" : "https://api.github.com/users/UdjinM6/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/UdjinM6",
         "id" : 1935069,
         "login" : "UdjinM6",
         "organizations_url" : "https://api.github.com/users/UdjinM6/orgs",
         "received_events_url" : "https://api.github.com/users/UdjinM6/received_events",
         "repos_url" : "https://api.github.com/users/UdjinM6/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/UdjinM6/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/UdjinM6"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75840282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75840282"
         }
      },
      "body" : "Any reason for this name?",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:31:41Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpcnestedtests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n+#include \"main.h\"\n+#include \"rpc/register.h\"\n+#include \"rpc/server.h\"\n+#include \"rpcconsole.h\"\n+#include \"test/testutil.h\"\n+#include \"univalue.h\"\n+#include \"util.h\"\n+\n+#include <QDir>\n+\n+#include <boost/filesystem.hpp>\n+\n+void RPCNestedTests::rpcNestedTests()\n+{\n+    UniValue jsonRPCError;\n+\n+    // do some test setup\n+    // could be moved to a more generic place when we add more tests on QT level\n+    const CChainParams& chainparams = Params();\n+    RegisterAllCoreRPCCommands(tableRPC);\n+    ClearDatadirCache();\n+    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75840282",
      "id" : 75840282,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 30,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75840282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75840310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75840310"
         }
      },
      "body" : "Also I feel like this folder should be cleaned up on exit?",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-08-23T10:31:56Z",
      "diff_hunk" : "@@ -0,0 +1,87 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpcnestedtests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n+#include \"main.h\"\n+#include \"rpc/register.h\"\n+#include \"rpc/server.h\"\n+#include \"rpcconsole.h\"\n+#include \"test/testutil.h\"\n+#include \"univalue.h\"\n+#include \"util.h\"\n+\n+#include <QDir>\n+\n+#include <boost/filesystem.hpp>\n+\n+void RPCNestedTests::rpcNestedTests()\n+{\n+    UniValue jsonRPCError;\n+\n+    // do some test setup\n+    // could be moved to a more generic place when we add more tests on QT level\n+    const CChainParams& chainparams = Params();\n+    RegisterAllCoreRPCCommands(tableRPC);\n+    ClearDatadirCache();\n+    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r75840310",
      "id" : 75840310,
      "original_commit_id" : "e492505329bcb2e15add191accca0f16f25de046",
      "original_position" : 30,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-08-23T13:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/75840310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Fixed nits, added cleanup of Qt test data.",
      "created_at" : "2016-08-23T13:32:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-241731569",
      "id" : 241731569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-08-23T13:32:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241731569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "concept ACK",
      "created_at" : "2016-09-14T06:54:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-246922574",
      "id" : 246922574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-14T06:54:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/246922574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "utACK.\r\n\r\nI do think this needs documentation. Not necessarily in this pull, but currently the debug console help consists of two lines \"Use up and down arrows to navigate history, and Ctrl-L to clear screen. Type help for an overview of available commands.\". \r\n\r\nMaybe add a debug-console-only command like `help` that shows how to use nested commands and potentially other advanced tricks, and add 'for more information on using this console type XXX'.\r\n",
      "created_at" : "2016-09-20T11:27:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248274853",
      "id" : 248274853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:27:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248274853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> I do think this needs documentation.  [...]\r\n\r\nGood point. I try something. Maybe not in this PR.\r\nCould Ã¢ÂÂ maybe Ã¢ÂÂ be combined with this https://github.com/bitcoin/bitcoin/issues/8544#issuecomment-240970925",
      "created_at" : "2016-09-20T11:30:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248275264",
      "id" : 248275264,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:30:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248275264",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "`getwalletinfo()[\"walletversion\"]` doesn't work - can't it index into objects?\r\n",
      "created_at" : "2016-09-20T11:32:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248275655",
      "id" : 248275655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:32:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248275655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj: I guess you need to use `getwalletinfo()[walletversion]` (without double-quotes).",
      "created_at" : "2016-09-20T11:33:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248275908",
      "id" : 248275908,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:33:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248275908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli awesome, that works. So that's why we need documentation :)",
      "created_at" : "2016-09-20T11:34:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248276046",
      "id" : 248276046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:34:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248276046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj: Agree on the documentation. The dropped `\"`(double quotes) for an index access is quite uncommon, but can make sense because all our JSON properties are pure ASCII without whitespace.\r\n\r\nAllowing the double-quotes (ignore them while parsing) could be a useful addition.",
      "created_at" : "2016-09-20T11:36:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248276477",
      "id" : 248276477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:36:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248276477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "For testing this it's useful to add an `echo` command that simply returns what is passed to it, and `echon` which does the same but is marked to receive numbers/booleans/objects in `vRPCConvertParams`:\r\n```patch\r\ndiff --git a/src/rpc/client.cpp b/src/rpc/client.cpp\r\nindex c14d9d6..4e09249 100644\r\n--- a/src/rpc/client.cpp\r\n+++ b/src/rpc/client.cpp\r\n@@ -109,6 +109,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\r\n     { \"setban\", 3 },\r\n     { \"getmempoolancestors\", 1 },\r\n     { \"getmempooldescendants\", 1 },\r\n+    { \"echon\", 0}, { \"echon\", 1}, { \"echon\", 2}, { \"echon\", 3}, { \"echon\", 4}, { \"echon\", 5}, { \"echon\", 6}, { \"echon\", 7}, { \"echon\", 8}, { \"echon\", 9},\r\n };\r\n \r\n class CRPCConvertTable\r\ndiff --git a/src/rpc/misc.cpp b/src/rpc/misc.cpp\r\nindex 5afcf63..e3b4550 100644\r\n--- a/src/rpc/misc.cpp\r\n+++ b/src/rpc/misc.cpp\r\n@@ -417,6 +417,17 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\r\n     return EncodeBase64(&vchSig[0], vchSig.size());\r\n }\r\n \r\n+UniValue echo(const UniValue& params, bool fHelp)\r\n+{\r\n+    if (fHelp)\r\n+        throw runtime_error(\r\n+            \"echo \\\"message\\\" ...\\n\"\r\n+            \"\\nSimply echo back the input arguments\\n\"\r\n+        );\r\n+\r\n+    return params;\r\n+}\r\n+\r\n UniValue setmocktime(const UniValue& params, bool fHelp)\r\n {\r\n     if (fHelp || params.size() != 1)\r\n@@ -454,6 +465,8 @@ static const CRPCCommand commands[] =\r\n { //  category              name                      actor (function)         okSafeMode\r\n   //  --------------------- ------------------------  -----------------------  ----------\r\n     { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\r\n+    { \"control\",            \"echo\",                   &echo,                   true  },\r\n+    { \"control\",            \"echon\",                  &echo,                   true  },\r\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\r\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\r\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\r\n```\r\n\r\n> Allowing the double-quotes (ignore them while parsing) could be a useful addition.\r\n\r\nYes, would be useful to add, maybe in a later pull. Somehow I keep typing [] accidentally, and being surprised I get 'null'.",
      "created_at" : "2016-09-20T11:52:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248279533",
      "id" : 248279533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T11:59:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248279533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "ACK 2ca6b9d",
      "created_at" : "2016-09-20T12:15:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#issuecomment-248284007",
      "id" : 248284007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7783",
      "updated_at" : "2016-09-20T12:15:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/248284007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79723451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79723451"
         }
      },
      "body" : "Nit: `strResult`",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-09-20T22:06:19Z",
      "diff_hunk" : "@@ -113,117 +113,208 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79723451",
      "id" : 79723451,
      "original_commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "original_position" : 19,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : 19,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-09-20T22:06:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79723451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79724061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79724061"
         }
      },
      "body" : "Nit: `[` can also be unbalanced",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-09-20T22:10:17Z",
      "diff_hunk" : "@@ -113,117 +113,208 @@ class QtRPCTimerInterface: public RPCTimerInterface\n #include \"rpcconsole.moc\"\n \n /**\n- * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * Split shell command line into a list of arguments and execute the command(s).\n+ * Aims to emulate \\c bash and friends.\n  *\n- * - Arguments are delimited with whitespace\n+ * - Command nesting is possible with brackets [example: validateaddress(getnewaddress())]\n+ * - Arguments are delimited with whitespace or comma\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n  * - Text can be \"double\" or 'single' quoted\n  * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n- * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  */\n-bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n+\n+bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand)\n {\n+    std::vector< std::vector<std::string> > stack;\n+    stack.push_back(std::vector<std::string>());\n+\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_DOUBLEQUOTED\n+        STATE_ESCAPE_DOUBLEQUOTED,\n+        STATE_COMMAND_EXECUTED,\n+        STATE_COMMAND_EXECUTED_INNER\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    Q_FOREACH(char ch, strCommand)\n+    UniValue lastResult;\n+\n+    std::string strCommandTerminated = strCommand;\n+    if (strCommandTerminated.back() != '\\n')\n+        strCommandTerminated += \"\\n\";\n+    for(char ch: strCommandTerminated)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // In or after argument\n-        case STATE_EATING_SPACES: // Handle runs of whitespace\n-            switch(ch)\n+            case STATE_COMMAND_EXECUTED_INNER:\n+            case STATE_COMMAND_EXECUTED:\n             {\n-            case '\"': state = STATE_DOUBLEQUOTED; break;\n-            case '\\'': state = STATE_SINGLEQUOTED; break;\n-            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n-            case ' ': case '\\n': case '\\t':\n-                if(state == STATE_ARGUMENT) // Space ends argument\n+                bool breakParsing = true;\n+                switch(ch)\n                 {\n-                    args.push_back(curarg);\n-                    curarg.clear();\n+                    case '[': curarg.clear(); state = STATE_COMMAND_EXECUTED_INNER; break;\n+                    default:\n+                        if (state == STATE_COMMAND_EXECUTED_INNER)\n+                        {\n+                            if (ch != ']')\n+                            {\n+                                // append char to the current argument (which is also used for the query command)\n+                                curarg += ch;\n+                                break;\n+                            }\n+                            if (curarg.size())\n+                            {\n+                                // if we have a value query, query arrays with index and objects with a string key\n+                                UniValue subelement;\n+                                if (lastResult.isArray())\n+                                {\n+                                    for(char argch: curarg)\n+                                        if (!std::isdigit(argch))\n+                                            throw std::runtime_error(\"Invalid result query\");\n+                                    subelement = lastResult[atoi(curarg.c_str())];\n+                                }\n+                                else if (lastResult.isObject())\n+                                    subelement = find_value(lastResult, curarg);\n+                                else\n+                                    throw std::runtime_error(\"Invalid result query\"); //no array or object: abort\n+                                lastResult = subelement;\n+                            }\n+\n+                            state = STATE_COMMAND_EXECUTED;\n+                            break;\n+                        }\n+                        // don't break parsing when the char is required for the next argument\n+                        breakParsing = false;\n+\n+                        // pop the stack and return the result to the current command arguments\n+                        stack.pop_back();\n+\n+                        // don't stringify the json in case of a string to avoid doublequotes\n+                        if (lastResult.isStr())\n+                            curarg = lastResult.get_str();\n+                        else\n+                            curarg = lastResult.write(2);\n+\n+                        // if we have a non empty result, use it as stack argument otherwise as general result\n+                        if (curarg.size())\n+                        {\n+                            if (stack.size())\n+                                stack.back().push_back(curarg);\n+                            else\n+                                strResult = curarg;\n+                        }\n+                        curarg.clear();\n+                        // assume eating space state\n+                        state = STATE_EATING_SPACES;\n                 }\n-                state = STATE_EATING_SPACES;\n-                break;\n-            default: curarg += ch; state = STATE_ARGUMENT;\n+                if (breakParsing)\n+                    break;\n             }\n-            break;\n-        case STATE_SINGLEQUOTED: // Single-quoted string\n-            switch(ch)\n+            case STATE_ARGUMENT: // In or after argument\n+            case STATE_EATING_SPACES: // Handle runs of whitespace\n+                switch(ch)\n             {\n-            case '\\'': state = STATE_ARGUMENT; break;\n-            default: curarg += ch;\n+                case '\"': state = STATE_DOUBLEQUOTED; break;\n+                case '\\'': state = STATE_SINGLEQUOTED; break;\n+                case '\\\\': state = STATE_ESCAPE_OUTER; break;\n+                case '(': case ')': case '\\n':\n+                    if (state == STATE_ARGUMENT)\n+                    {\n+                        if (ch == '(' && stack.size() && stack.back().size() > 0)\n+                            stack.push_back(std::vector<std::string>());\n+                        if (curarg.size())\n+                        {\n+                            // don't allow commands after executed commands on baselevel\n+                            if (!stack.size())\n+                                throw std::runtime_error(\"Invalid Syntax\");\n+                            stack.back().push_back(curarg);\n+                        }\n+                        curarg.clear();\n+                        state = STATE_EATING_SPACES;\n+                    }\n+                    if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n+                    {\n+                        std::string strPrint;\n+                        // Convert argument list to JSON objects in method-dependent way,\n+                        // and pass it along with the method name to the dispatcher.\n+                        lastResult = tableRPC.execute(stack.back()[0], RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end())));\n+\n+                        state = STATE_COMMAND_EXECUTED;\n+                        curarg.clear();\n+                    }\n+                    break;\n+                case ' ': case ',': case '\\t':\n+                    if(state == STATE_ARGUMENT) // Space ends argument\n+                    {\n+                        if (curarg.size())\n+                            stack.back().push_back(curarg);\n+                        curarg.clear();\n+                    }\n+                    state = STATE_EATING_SPACES;\n+                    break;\n+                default: curarg += ch; state = STATE_ARGUMENT;\n             }\n-            break;\n-        case STATE_DOUBLEQUOTED: // Double-quoted string\n-            switch(ch)\n+                break;\n+            case STATE_SINGLEQUOTED: // Single-quoted string\n+                switch(ch)\n             {\n-            case '\"': state = STATE_ARGUMENT; break;\n-            case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n-            default: curarg += ch;\n+                case '\\'': state = STATE_ARGUMENT; break;\n+                default: curarg += ch;\n             }\n-            break;\n-        case STATE_ESCAPE_OUTER: // '\\' outside quotes\n-            curarg += ch; state = STATE_ARGUMENT;\n-            break;\n-        case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n-            if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n-            curarg += ch; state = STATE_DOUBLEQUOTED;\n-            break;\n+                break;\n+            case STATE_DOUBLEQUOTED: // Double-quoted string\n+                switch(ch)\n+            {\n+                case '\"': state = STATE_ARGUMENT; break;\n+                case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n+                default: curarg += ch;\n+            }\n+                break;\n+            case STATE_ESCAPE_OUTER: // '\\' outside quotes\n+                curarg += ch; state = STATE_ARGUMENT;\n+                break;\n+            case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n+                if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n+                curarg += ch; state = STATE_DOUBLEQUOTED;\n+                break;\n         }\n     }\n     switch(state) // final state\n     {\n-    case STATE_EATING_SPACES:\n-        return true;\n-    case STATE_ARGUMENT:\n-        args.push_back(curarg);\n-        return true;\n-    default: // ERROR to end in one of the other states\n-        return false;\n+        case STATE_COMMAND_EXECUTED:\n+            if (lastResult.isStr())\n+                strResult = lastResult.get_str();\n+            else\n+                strResult = lastResult.write(2);\n+        case STATE_ARGUMENT:\n+        case STATE_EATING_SPACES:\n+            return true;\n+        default: // ERROR to end in one of the other states\n+            return false;\n     }\n }\n \n void RPCExecutor::request(const QString &command)\n {\n-    std::vector<std::string> args;\n-    if(!parseCommandLine(args, command.toStdString()))\n-    {\n-        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n-        return;\n-    }\n-    if(args.empty())\n-        return; // Nothing to do\n     try\n     {\n-        std::string strPrint;\n-        // Convert argument list to JSON objects in method-dependent way,\n-        // and pass it along with the method name to the dispatcher.\n-        UniValue result = tableRPC.execute(\n-            args[0],\n-            RPCConvertValues(args[0], std::vector<std::string>(args.begin() + 1, args.end())));\n-\n-        // Format result reply\n-        if (result.isNull())\n-            strPrint = \"\";\n-        else if (result.isStr())\n-            strPrint = result.get_str();\n-        else\n-            strPrint = result.write(2);\n-\n-        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        std::string result;\n+        std::string executableCommand = command.toStdString() + \"\\n\";\n+        if(!RPCConsole::RPCExecuteCommandLine(result, executableCommand))\n+        {\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79724061",
      "id" : 79724061,
      "original_commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "original_position" : 271,
      "path" : "src/qt/rpcconsole.cpp",
      "position" : 271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-09-20T22:10:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79724061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79724719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79724719"
         }
      },
      "body" : "Nits: Can be moved out of the guard, typo brackts, no wrapping brackets needed.",
      "commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "created_at" : "2016-09-20T22:14:20Z",
      "diff_hunk" : "@@ -0,0 +1,93 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"rpcnestedtests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n+#include \"main.h\"\n+#include \"rpc/register.h\"\n+#include \"rpc/server.h\"\n+#include \"rpcconsole.h\"\n+#include \"test/testutil.h\"\n+#include \"univalue.h\"\n+#include \"util.h\"\n+\n+#include <QDir>\n+\n+#include <boost/filesystem.hpp>\n+\n+void RPCNestedTests::rpcNestedTests()\n+{\n+    UniValue jsonRPCError;\n+\n+    // do some test setup\n+    // could be moved to a more generic place when we add more tests on QT level\n+    const CChainParams& chainparams = Params();\n+    RegisterAllCoreRPCCommands(tableRPC);\n+    ClearDatadirCache();\n+    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n+    QDir dir(QString::fromStdString(path));\n+    dir.mkpath(\".\");\n+    mapArgs[\"-datadir\"] = path;\n+    //mempool.setSanityCheck(1.0);\n+    pblocktree = new CBlockTreeDB(1 << 20, true);\n+    pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n+    pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+    InitBlockIndex(chainparams);\n+    {\n+        CValidationState state;\n+        bool ok = ActivateBestChain(state, chainparams);\n+        QVERIFY(ok);\n+    }\n+\n+    SetRPCWarmupFinished();\n+\n+    std::string result;\n+    std::string result2;\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[chain]\"); //simple result filtering with path\n+    QVERIFY(result==\"main\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo\");\n+    QVERIFY(result.substr(0,1) == \"{\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()\");\n+    QVERIFY(result.substr(0,1) == \"{\");\n+\n+    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n+    QVERIFY(result.substr(0,1) == \"{\");\n+\n+#if QT_VERSION >= 0x050300\n+    // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()()()\")); //tolerate non command brackts",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7783#discussion_r79724719",
      "id" : 79724719,
      "original_commit_id" : "15860448d38ba7a436cf7c08fa5c0132fe10f8d3",
      "original_position" : 71,
      "path" : "src/qt/test/rpcnestedtests.cpp",
      "position" : 71,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7783",
      "updated_at" : "2016-09-20T22:14:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/79724719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
